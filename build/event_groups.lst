ARM GAS  /tmp/ccv1GE4A.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"event_groups.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTestWaitCondition,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	prvTestWaitCondition:
  26              	.LVL0:
  27              	.LFB14:
  28              		.file 1 "ThirdParty/FreeRTOS/Source/event_groups.c"
   1:ThirdParty/FreeRTOS/Source/event_groups.c **** /*
   2:ThirdParty/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.2.1
   3:ThirdParty/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/Source/event_groups.c ****  *
   5:ThirdParty/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:ThirdParty/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:ThirdParty/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:ThirdParty/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:ThirdParty/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:ThirdParty/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:ThirdParty/FreeRTOS/Source/event_groups.c ****  *
  12:ThirdParty/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:ThirdParty/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:ThirdParty/FreeRTOS/Source/event_groups.c ****  *
  15:ThirdParty/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:ThirdParty/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:ThirdParty/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:ThirdParty/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:ThirdParty/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:ThirdParty/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:ThirdParty/FreeRTOS/Source/event_groups.c ****  *
  22:ThirdParty/FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:ThirdParty/FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:ThirdParty/FreeRTOS/Source/event_groups.c ****  *
  25:ThirdParty/FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:ThirdParty/FreeRTOS/Source/event_groups.c ****  */
  27:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  28:ThirdParty/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:ThirdParty/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:ThirdParty/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccv1GE4A.s 			page 2


  31:ThirdParty/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:ThirdParty/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:ThirdParty/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  34:ThirdParty/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  36:ThirdParty/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:ThirdParty/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:ThirdParty/FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:ThirdParty/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:ThirdParty/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  42:ThirdParty/FreeRTOS/Source/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  43:ThirdParty/FreeRTOS/Source/event_groups.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:ThirdParty/FreeRTOS/Source/event_groups.c **** for the header files above, but not in this file, in order to generate the
  45:ThirdParty/FreeRTOS/Source/event_groups.c **** correct privileged Vs unprivileged linkage and placement. */
  46:ThirdParty/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  47:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  48:ThirdParty/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:ThirdParty/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:ThirdParty/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:ThirdParty/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:ThirdParty/FreeRTOS/Source/event_groups.c **** #else
  57:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:ThirdParty/FreeRTOS/Source/event_groups.c **** #endif
  62:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  63:ThirdParty/FreeRTOS/Source/event_groups.c **** typedef struct EventGroupDef_t
  64:ThirdParty/FreeRTOS/Source/event_groups.c **** {
  65:ThirdParty/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:ThirdParty/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  68:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:ThirdParty/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#endif
  71:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  72:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:ThirdParty/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#endif
  75:ThirdParty/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  77:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  79:ThirdParty/FreeRTOS/Source/event_groups.c **** /*
  80:ThirdParty/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:ThirdParty/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:ThirdParty/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:ThirdParty/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:ThirdParty/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:ThirdParty/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:ThirdParty/FreeRTOS/Source/event_groups.c ****  */
  87:ThirdParty/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
ARM GAS  /tmp/ccv1GE4A.s 			page 3


  88:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  89:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  90:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  91:ThirdParty/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
  92:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  93:ThirdParty/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
  95:ThirdParty/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  97:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:ThirdParty/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  99:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 100:ThirdParty/FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 102:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:ThirdParty/FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:ThirdParty/FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:ThirdParty/FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
 106:ThirdParty/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
 107:ThirdParty/FreeRTOS/Source/event_groups.c **** 		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
 108:ThirdParty/FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 110:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:ThirdParty/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticE
 112:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 113:ThirdParty/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 114:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 115:ThirdParty/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 116:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 117:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 118:ThirdParty/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 120:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:ThirdParty/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:ThirdParty/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:ThirdParty/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 124:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 125:ThirdParty/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 127:ThirdParty/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 129:ThirdParty/FreeRTOS/Source/event_groups.c **** 		else
 130:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 131:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* xEventGroupCreateStatic should only ever be called with
 132:ThirdParty/FreeRTOS/Source/event_groups.c **** 			pxEventGroupBuffer pointing to a pre-allocated (compile time
 133:ThirdParty/FreeRTOS/Source/event_groups.c **** 			allocated) StaticEventGroup_t variable. */
 134:ThirdParty/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 135:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 136:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 137:ThirdParty/FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
 138:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 139:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 140:ThirdParty/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 141:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 142:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 143:ThirdParty/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 144:ThirdParty/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccv1GE4A.s 			page 4


 145:ThirdParty/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 146:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 147:ThirdParty/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 148:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 149:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group.  Justification for MISRA deviation as
 150:ThirdParty/FreeRTOS/Source/event_groups.c **** 		follows:  pvPortMalloc() always ensures returned memory blocks are
 151:ThirdParty/FreeRTOS/Source/event_groups.c **** 		aligned per the requirements of the MCU stack.  In this case
 152:ThirdParty/FreeRTOS/Source/event_groups.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 153:ThirdParty/FreeRTOS/Source/event_groups.c **** 		alignment requirements of the EventGroup_t structure - which (if you
 154:ThirdParty/FreeRTOS/Source/event_groups.c **** 		follow it through) is the alignment requirements of the TickType_t type
 155:ThirdParty/FreeRTOS/Source/event_groups.c **** 		(EventBits_t being of TickType_t itself).  Therefore, whenever the
 156:ThirdParty/FreeRTOS/Source/event_groups.c **** 		stack alignment requirements are greater than or equal to the
 157:ThirdParty/FreeRTOS/Source/event_groups.c **** 		TickType_t alignment requirements the cast is safe.  In other cases,
 158:ThirdParty/FreeRTOS/Source/event_groups.c **** 		where the natural word size of the architecture is less than
 159:ThirdParty/FreeRTOS/Source/event_groups.c **** 		sizeof( TickType_t ), the TickType_t variables will be accessed in two
 160:ThirdParty/FreeRTOS/Source/event_groups.c **** 		or more reads operations, and the alignment requirements is only that
 161:ThirdParty/FreeRTOS/Source/event_groups.c **** 		of each individual read. */
 162:ThirdParty/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see
 163:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 164:ThirdParty/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 165:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 166:ThirdParty/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 167:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 168:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 169:ThirdParty/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 170:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 171:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 172:ThirdParty/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 173:ThirdParty/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 174:ThirdParty/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 175:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 176:ThirdParty/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 177:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 178:ThirdParty/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 179:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 180:ThirdParty/FreeRTOS/Source/event_groups.c **** 		else
 181:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 182:ThirdParty/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and doe
 183:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 184:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 185:ThirdParty/FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
 186:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 187:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 188:ThirdParty/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 189:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 190:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 191:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 192:ThirdParty/FreeRTOS/Source/event_groups.c **** {
 193:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 194:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 195:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 196:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 197:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 198:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 199:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 200:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 201:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
ARM GAS  /tmp/ccv1GE4A.s 			page 5


 202:ThirdParty/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 203:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 204:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#endif
 205:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 206:ThirdParty/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 207:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 208:ThirdParty/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 209:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 210:ThirdParty/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 211:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 212:ThirdParty/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 213:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 214:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 215:ThirdParty/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 216:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 217:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 218:ThirdParty/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 219:ThirdParty/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 220:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 221:ThirdParty/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 222:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 223:ThirdParty/FreeRTOS/Source/event_groups.c **** 		else
 224:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 225:ThirdParty/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 226:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 227:ThirdParty/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 228:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 229:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 230:ThirdParty/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 231:ThirdParty/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 232:ThirdParty/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 233:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 234:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 235:ThirdParty/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 236:ThirdParty/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 237:ThirdParty/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 238:ThirdParty/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 239:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 240:ThirdParty/FreeRTOS/Source/event_groups.c **** 			else
 241:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 242:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 243:ThirdParty/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 244:ThirdParty/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 245:ThirdParty/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 246:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 247:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 248:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 249:ThirdParty/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 250:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 251:ThirdParty/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 252:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 253:ThirdParty/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 254:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 255:ThirdParty/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 256:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 257:ThirdParty/FreeRTOS/Source/event_groups.c **** 		else
 258:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
ARM GAS  /tmp/ccv1GE4A.s 			page 6


 259:ThirdParty/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 260:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 261:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 262:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 263:ThirdParty/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 264:ThirdParty/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 265:ThirdParty/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 266:ThirdParty/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 267:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 268:ThirdParty/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 269:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 270:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 271:ThirdParty/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 272:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 273:ThirdParty/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 274:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 275:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 276:ThirdParty/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 277:ThirdParty/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 278:ThirdParty/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 279:ThirdParty/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 280:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 281:ThirdParty/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 282:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 283:ThirdParty/FreeRTOS/Source/event_groups.c **** 				else
 284:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 285:ThirdParty/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 286:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 287:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 288:ThirdParty/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 289:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 290:ThirdParty/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 291:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 292:ThirdParty/FreeRTOS/Source/event_groups.c **** 		else
 293:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 294:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 295:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 296:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 297:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 298:ThirdParty/FreeRTOS/Source/event_groups.c **** 		returned. */
 299:ThirdParty/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 300:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 301:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 302:ThirdParty/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 303:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 304:ThirdParty/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 305:ThirdParty/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 306:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 307:ThirdParty/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 308:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 309:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 310:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 311:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 312:ThirdParty/FreeRTOS/Source/event_groups.c **** {
 313:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 314:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 315:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
ARM GAS  /tmp/ccv1GE4A.s 			page 7


 316:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 317:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 318:ThirdParty/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 319:ThirdParty/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 320:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 321:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 322:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 323:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 324:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 325:ThirdParty/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 326:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 327:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#endif
 328:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 329:ThirdParty/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 330:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 331:ThirdParty/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 332:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 333:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 334:ThirdParty/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 335:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 336:ThirdParty/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 337:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 338:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 339:ThirdParty/FreeRTOS/Source/event_groups.c **** 			block. */
 340:ThirdParty/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 341:ThirdParty/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 342:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 343:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 344:ThirdParty/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 345:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 346:ThirdParty/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 347:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 348:ThirdParty/FreeRTOS/Source/event_groups.c **** 			else
 349:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 350:ThirdParty/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 351:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 352:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 353:ThirdParty/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 354:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 355:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 356:ThirdParty/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 357:ThirdParty/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 358:ThirdParty/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 359:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 360:ThirdParty/FreeRTOS/Source/event_groups.c **** 		else
 361:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 362:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 363:ThirdParty/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 364:ThirdParty/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 365:ThirdParty/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 366:ThirdParty/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 367:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 368:ThirdParty/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 369:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 370:ThirdParty/FreeRTOS/Source/event_groups.c **** 			else
 371:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 372:ThirdParty/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccv1GE4A.s 			page 8


 373:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 374:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 375:ThirdParty/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 376:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 377:ThirdParty/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 378:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 379:ThirdParty/FreeRTOS/Source/event_groups.c **** 			else
 380:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 381:ThirdParty/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 382:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 383:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 384:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 385:ThirdParty/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 386:ThirdParty/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 387:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 388:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 389:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 390:ThirdParty/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 391:ThirdParty/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 392:ThirdParty/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 393:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 394:ThirdParty/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 395:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 396:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 397:ThirdParty/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 398:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 399:ThirdParty/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 400:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 401:ThirdParty/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 402:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 403:ThirdParty/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 404:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 405:ThirdParty/FreeRTOS/Source/event_groups.c **** 		else
 406:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 407:ThirdParty/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 408:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 409:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 410:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 411:ThirdParty/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 412:ThirdParty/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 413:ThirdParty/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 414:ThirdParty/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 415:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 416:ThirdParty/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 417:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 418:ThirdParty/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 419:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 420:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 421:ThirdParty/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 422:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 423:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 424:ThirdParty/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 425:ThirdParty/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 426:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 427:ThirdParty/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 428:ThirdParty/FreeRTOS/Source/event_groups.c **** 					{
 429:ThirdParty/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
ARM GAS  /tmp/ccv1GE4A.s 			page 9


 430:ThirdParty/FreeRTOS/Source/event_groups.c **** 					}
 431:ThirdParty/FreeRTOS/Source/event_groups.c **** 					else
 432:ThirdParty/FreeRTOS/Source/event_groups.c **** 					{
 433:ThirdParty/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 434:ThirdParty/FreeRTOS/Source/event_groups.c **** 					}
 435:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 436:ThirdParty/FreeRTOS/Source/event_groups.c **** 				else
 437:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 438:ThirdParty/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 439:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 440:ThirdParty/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 441:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 442:ThirdParty/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 443:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 444:ThirdParty/FreeRTOS/Source/event_groups.c **** 		else
 445:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 446:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 447:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 448:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 449:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 450:ThirdParty/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 451:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 452:ThirdParty/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 453:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 454:ThirdParty/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 455:ThirdParty/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 456:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 457:ThirdParty/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 458:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 459:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 460:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 461:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 462:ThirdParty/FreeRTOS/Source/event_groups.c **** {
 463:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 464:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 465:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 466:ThirdParty/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 467:ThirdParty/FreeRTOS/Source/event_groups.c **** 	itself. */
 468:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 469:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 470:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 471:ThirdParty/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 472:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 473:ThirdParty/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 474:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 475:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 476:ThirdParty/FreeRTOS/Source/event_groups.c **** 		cleared. */
 477:ThirdParty/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 478:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 479:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 480:ThirdParty/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 481:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 482:ThirdParty/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 483:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 484:ThirdParty/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 485:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 486:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccv1GE4A.s 			page 10


 487:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 488:ThirdParty/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 489:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 490:ThirdParty/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 491:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 492:ThirdParty/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 493:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 494:ThirdParty/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 495:ThirdParty/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 496:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 497:ThirdParty/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 498:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 499:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 500:ThirdParty/FreeRTOS/Source/event_groups.c **** #endif
 501:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 502:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 503:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 504:ThirdParty/FreeRTOS/Source/event_groups.c **** {
 505:ThirdParty/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 506:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t const * const pxEventBits = xEventGroup;
 507:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 508:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 509:ThirdParty/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 510:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 511:ThirdParty/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 512:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 513:ThirdParty/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 514:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 515:ThirdParty/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 516:ThirdParty/FreeRTOS/Source/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 517:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 518:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 519:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 520:ThirdParty/FreeRTOS/Source/event_groups.c **** {
 521:ThirdParty/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 522:ThirdParty/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 523:ThirdParty/FreeRTOS/Source/event_groups.c **** List_t const * pxList;
 524:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 525:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 526:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 527:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 528:ThirdParty/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 529:ThirdParty/FreeRTOS/Source/event_groups.c **** 	itself. */
 530:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 531:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 532:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 533:ThirdParty/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 534:ThirdParty/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is use
 535:ThirdParty/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 536:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 537:ThirdParty/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 538:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 539:ThirdParty/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 540:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 541:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 542:ThirdParty/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 543:ThirdParty/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccv1GE4A.s 			page 11


 544:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 545:ThirdParty/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
 546:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 547:ThirdParty/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 548:ThirdParty/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 549:ThirdParty/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 550:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 551:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 552:ThirdParty/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 553:ThirdParty/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 554:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 555:ThirdParty/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 556:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 557:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 558:ThirdParty/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 559:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 560:ThirdParty/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 561:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 562:ThirdParty/FreeRTOS/Source/event_groups.c **** 				else
 563:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 564:ThirdParty/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 565:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 566:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 567:ThirdParty/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 568:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 569:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 570:ThirdParty/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 571:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 572:ThirdParty/FreeRTOS/Source/event_groups.c **** 			else
 573:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 574:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 575:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 576:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 577:ThirdParty/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 578:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 579:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 580:ThirdParty/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 581:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 582:ThirdParty/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 583:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 584:ThirdParty/FreeRTOS/Source/event_groups.c **** 				else
 585:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 586:ThirdParty/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 587:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 588:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 589:ThirdParty/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 590:ThirdParty/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 591:ThirdParty/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 592:ThirdParty/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 593:ThirdParty/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 594:ThirdParty/FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 595:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 596:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 597:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 598:ThirdParty/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 599:ThirdParty/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 600:ThirdParty/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
ARM GAS  /tmp/ccv1GE4A.s 			page 12


 601:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 602:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 603:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 604:ThirdParty/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 605:ThirdParty/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 606:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 607:ThirdParty/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 608:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 609:ThirdParty/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 610:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 611:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 612:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 613:ThirdParty/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 614:ThirdParty/FreeRTOS/Source/event_groups.c **** {
 615:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 616:ThirdParty/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 617:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 618:ThirdParty/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 619:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 620:ThirdParty/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 621:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 622:ThirdParty/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 623:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 624:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 625:ThirdParty/FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 626:ThirdParty/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 627:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 628:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 629:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 630:ThirdParty/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 631:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 632:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 633:ThirdParty/FreeRTOS/Source/event_groups.c **** 			it again. */
 634:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 635:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 636:ThirdParty/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 638:ThirdParty/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 639:ThirdParty/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 640:ThirdParty/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 641:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 642:ThirdParty/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 643:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 644:ThirdParty/FreeRTOS/Source/event_groups.c **** 			else
 645:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 646:ThirdParty/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 647:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 648:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 649:ThirdParty/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 650:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 651:ThirdParty/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 652:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 653:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 654:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 655:ThirdParty/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 656:ThirdParty/FreeRTOS/Source/event_groups.c **** an interrupt. */
 657:ThirdParty/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
ARM GAS  /tmp/ccv1GE4A.s 			page 13


 658:ThirdParty/FreeRTOS/Source/event_groups.c **** {
 659:ThirdParty/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoi
 660:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 661:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 662:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 663:ThirdParty/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 664:ThirdParty/FreeRTOS/Source/event_groups.c **** an interrupt. */
 665:ThirdParty/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 666:ThirdParty/FreeRTOS/Source/event_groups.c **** {
 667:ThirdParty/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't 
 668:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 669:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 670:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 671:ThirdParty/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 672:ThirdParty/FreeRTOS/Source/event_groups.c **** {
  29              		.loc 1 672 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 673:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  34              		.loc 1 673 1 view .LVU1
 674:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 675:ThirdParty/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  35              		.loc 1 675 2 view .LVU2
  36              		.loc 1 675 4 is_stmt 0 view .LVU3
  37 0000 1AB9     		cbnz	r2, .L2
 676:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 677:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 678:ThirdParty/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 679:ThirdParty/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  38              		.loc 1 679 3 is_stmt 1 view .LVU4
  39              		.loc 1 679 5 is_stmt 0 view .LVU5
  40 0002 0842     		tst	r0, r1
  41 0004 06D1     		bne	.L4
 673:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  42              		.loc 1 673 12 view .LVU6
  43 0006 1046     		mov	r0, r2
  44              	.LVL1:
 673:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  45              		.loc 1 673 12 view .LVU7
  46 0008 7047     		bx	lr
  47              	.LVL2:
  48              	.L2:
 680:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 681:ThirdParty/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 682:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 683:ThirdParty/FreeRTOS/Source/event_groups.c **** 		else
 684:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 685:ThirdParty/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 686:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 687:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 688:ThirdParty/FreeRTOS/Source/event_groups.c **** 	else
 689:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 690:ThirdParty/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 691:ThirdParty/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 692:ThirdParty/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
ARM GAS  /tmp/ccv1GE4A.s 			page 14


  49              		.loc 1 692 3 is_stmt 1 view .LVU8
  50              		.loc 1 692 5 is_stmt 0 view .LVU9
  51 000a 31EA0003 		bics	r3, r1, r0
  52 000e 03D0     		beq	.L5
 673:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  53              		.loc 1 673 12 view .LVU10
  54 0010 0020     		movs	r0, #0
  55              	.LVL3:
 673:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  56              		.loc 1 673 12 view .LVU11
  57 0012 7047     		bx	lr
  58              	.LVL4:
  59              	.L4:
 681:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
  60              		.loc 1 681 22 view .LVU12
  61 0014 0120     		movs	r0, #1
  62              	.LVL5:
 681:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
  63              		.loc 1 681 22 view .LVU13
  64 0016 7047     		bx	lr
  65              	.LVL6:
  66              	.L5:
 693:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 694:ThirdParty/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  67              		.loc 1 694 22 view .LVU14
  68 0018 0120     		movs	r0, #1
  69              	.LVL7:
 695:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 696:ThirdParty/FreeRTOS/Source/event_groups.c **** 		else
 697:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 698:ThirdParty/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
  70              		.loc 1 698 28 is_stmt 1 view .LVU15
 699:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 700:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 701:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 702:ThirdParty/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
  71              		.loc 1 702 2 view .LVU16
 703:ThirdParty/FreeRTOS/Source/event_groups.c **** }
  72              		.loc 1 703 1 is_stmt 0 view .LVU17
  73 001a 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE14:
  77              		.section	.text.xEventGroupCreate,"ax",%progbits
  78              		.align	1
  79              		.global	xEventGroupCreate
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	xEventGroupCreate:
  85              	.LFB5:
 146:ThirdParty/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  86              		.loc 1 146 2 is_stmt 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90 0000 10B5     		push	{r4, lr}
  91              	.LCFI0:
ARM GAS  /tmp/ccv1GE4A.s 			page 15


  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 4, -8
  94              		.cfi_offset 14, -4
 147:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  95              		.loc 1 147 2 view .LVU19
 162:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  96              		.loc 1 162 3 view .LVU20
 162:ThirdParty/FreeRTOS/Source/event_groups.c **** 
  97              		.loc 1 162 36 is_stmt 0 view .LVU21
  98 0002 1820     		movs	r0, #24
  99 0004 FFF7FEFF 		bl	pvPortMalloc
 100              	.LVL8:
 164:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 101              		.loc 1 164 3 is_stmt 1 view .LVU22
 164:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 102              		.loc 1 164 5 is_stmt 0 view .LVU23
 103 0008 0446     		mov	r4, r0
 104 000a 20B1     		cbz	r0, .L6
 166:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 105              		.loc 1 166 4 is_stmt 1 view .LVU24
 166:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 106              		.loc 1 166 29 is_stmt 0 view .LVU25
 107 000c 0023     		movs	r3, #0
 108 000e 40F8043B 		str	r3, [r0], #4
 109              	.LVL9:
 167:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 110              		.loc 1 167 4 is_stmt 1 view .LVU26
 111 0012 FFF7FEFF 		bl	vListInitialise
 112              	.LVL10:
 178:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 113              		.loc 1 178 42 view .LVU27
 182:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 114              		.loc 1 182 36 view .LVU28
 185:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 115              		.loc 1 185 3 view .LVU29
 116              	.L6:
 186:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 117              		.loc 1 186 2 is_stmt 0 view .LVU30
 118 0016 2046     		mov	r0, r4
 119 0018 10BD     		pop	{r4, pc}
 186:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 120              		.loc 1 186 2 view .LVU31
 121              		.cfi_endproc
 122              	.LFE5:
 124              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 125              		.align	1
 126              		.global	xEventGroupWaitBits
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 131              	xEventGroupWaitBits:
 132              	.LVL11:
 133              	.LFB7:
 312:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 134              		.loc 1 312 1 is_stmt 1 view -0
 135              		.cfi_startproc
 136              		@ args = 4, pretend = 0, frame = 0
ARM GAS  /tmp/ccv1GE4A.s 			page 16


 137              		@ frame_needed = 0, uses_anonymous_args = 0
 312:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 138              		.loc 1 312 1 is_stmt 0 view .LVU33
 139 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 140              	.LCFI1:
 141              		.cfi_def_cfa_offset 32
 142              		.cfi_offset 3, -32
 143              		.cfi_offset 4, -28
 144              		.cfi_offset 5, -24
 145              		.cfi_offset 6, -20
 146              		.cfi_offset 7, -16
 147              		.cfi_offset 8, -12
 148              		.cfi_offset 9, -8
 149              		.cfi_offset 14, -4
 313:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 150              		.loc 1 313 1 is_stmt 1 view .LVU34
 151              	.LVL12:
 314:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 152              		.loc 1 314 1 view .LVU35
 315:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 153              		.loc 1 315 1 view .LVU36
 316:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 154              		.loc 1 316 1 view .LVU37
 320:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 155              		.loc 1 320 2 view .LVU38
 156 0004 78B1     		cbz	r0, .L29
 157 0006 0C46     		mov	r4, r1
 158 0008 1646     		mov	r6, r2
 159 000a 1D46     		mov	r5, r3
 160 000c 0746     		mov	r7, r0
 320:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 161              		.loc 1 320 29 discriminator 2 view .LVU39
 321:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 162              		.loc 1 321 2 discriminator 2 view .LVU40
 163 000e 11F07F48 		ands	r8, r1, #-16777216
 164 0012 11D0     		beq	.L12
 321:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 165              		.loc 1 321 2 view .LVU41
 166              	.LBB31:
 167              	.LBI31:
 168              		.file 2 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
ARM GAS  /tmp/ccv1GE4A.s 			page 17


  17:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
ARM GAS  /tmp/ccv1GE4A.s 			page 18


  74:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
ARM GAS  /tmp/ccv1GE4A.s 			page 19


 131:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portDONT_DISCARD
 170:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portDONT_DISCARD __attribute__(( used ))
 171:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 172:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 173:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 174:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 175:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 176:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 177:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 178:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 179:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 180:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 181:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 182:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 184:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 186:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 187:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
ARM GAS  /tmp/ccv1GE4A.s 			page 20


 188:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 189:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 190:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 191:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 192:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 194:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 169              		.loc 2 195 30 view .LVU42
 170              	.LBB32:
 196:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 171              		.loc 2 197 1 view .LVU43
 198:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 172              		.loc 2 199 2 view .LVU44
 173              		.syntax unified
 174              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 175 0014 4FF05003 			mov r3, #80												
 176 0018 83F31188 		msr basepri, r3											
 177 001c BFF36F8F 		isb														
 178 0020 BFF34F8F 		dsb														
 179              	
 180              	@ 0 "" 2
 181              	.LVL13:
 182              		.thumb
 183              		.syntax unified
 184              	.L13:
 185              		.loc 2 199 2 is_stmt 0 view .LVU45
 186              	.LBE32:
 187              	.LBE31:
 321:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 188              		.loc 1 321 2 is_stmt 1 discriminator 2 view .LVU46
 321:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 189              		.loc 1 321 2 discriminator 2 view .LVU47
 321:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 190              		.loc 1 321 2 discriminator 2 view .LVU48
 191 0024 FEE7     		b	.L13
 192              	.LVL14:
 193              	.L29:
 320:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 194              		.loc 1 320 2 view .LVU49
 195              	.LBB33:
 196              	.LBI33:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 197              		.loc 2 195 30 view .LVU50
 198              	.LBB34:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 199              		.loc 2 197 1 view .LVU51
 200              		.loc 2 199 2 view .LVU52
 201              		.syntax unified
 202              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 203 0026 4FF05003 			mov r3, #80												
 204 002a 83F31188 		msr basepri, r3											
 205 002e BFF36F8F 		isb														
 206 0032 BFF34F8F 		dsb														
 207              	
ARM GAS  /tmp/ccv1GE4A.s 			page 21


 208              	@ 0 "" 2
 209              	.LVL15:
 210              		.thumb
 211              		.syntax unified
 212              	.L11:
 213              		.loc 2 199 2 is_stmt 0 view .LVU53
 214              	.LBE34:
 215              	.LBE33:
 320:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 216              		.loc 1 320 2 is_stmt 1 discriminator 1 view .LVU54
 320:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 217              		.loc 1 320 2 discriminator 1 view .LVU55
 320:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 218              		.loc 1 320 2 discriminator 1 view .LVU56
 219 0036 FEE7     		b	.L11
 220              	.LVL16:
 221              	.L12:
 321:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 222              		.loc 1 321 74 discriminator 2 view .LVU57
 322:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 223              		.loc 1 322 2 discriminator 2 view .LVU58
 224 0038 41B9     		cbnz	r1, .L14
 322:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 225              		.loc 1 322 2 view .LVU59
 226              	.LBB35:
 227              	.LBI35:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 228              		.loc 2 195 30 view .LVU60
 229              	.LBB36:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 230              		.loc 2 197 1 view .LVU61
 231              		.loc 2 199 2 view .LVU62
 232              		.syntax unified
 233              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 234 003a 4FF05003 			mov r3, #80												
 235 003e 83F31188 		msr basepri, r3											
 236 0042 BFF36F8F 		isb														
 237 0046 BFF34F8F 		dsb														
 238              	
 239              	@ 0 "" 2
 240              	.LVL17:
 241              		.thumb
 242              		.syntax unified
 243              	.L15:
 244              		.loc 2 199 2 is_stmt 0 view .LVU63
 245              	.LBE36:
 246              	.LBE35:
 322:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 247              		.loc 1 322 2 is_stmt 1 discriminator 3 view .LVU64
 322:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 248              		.loc 1 322 2 discriminator 3 view .LVU65
 322:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 249              		.loc 1 322 2 discriminator 3 view .LVU66
 250 004a FEE7     		b	.L15
 251              	.LVL18:
 252              	.L14:
 322:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  /tmp/ccv1GE4A.s 			page 22


 253              		.loc 1 322 38 discriminator 2 view .LVU67
 325:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 254              		.loc 1 325 3 discriminator 2 view .LVU68
 255 004c FFF7FEFF 		bl	xTaskGetSchedulerState
 256              	.LVL19:
 325:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 257              		.loc 1 325 3 is_stmt 0 discriminator 2 view .LVU69
 258 0050 50B9     		cbnz	r0, .L16
 259 0052 089B     		ldr	r3, [sp, #32]
 260 0054 43B1     		cbz	r3, .L16
 325:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 261              		.loc 1 325 3 is_stmt 1 view .LVU70
 262              	.LBB37:
 263              	.LBI37:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 264              		.loc 2 195 30 view .LVU71
 265              	.LBB38:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 266              		.loc 2 197 1 view .LVU72
 267              		.loc 2 199 2 view .LVU73
 268              		.syntax unified
 269              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 270 0056 4FF05003 			mov r3, #80												
 271 005a 83F31188 		msr basepri, r3											
 272 005e BFF36F8F 		isb														
 273 0062 BFF34F8F 		dsb														
 274              	
 275              	@ 0 "" 2
 276              	.LVL20:
 277              		.thumb
 278              		.syntax unified
 279              	.L17:
 280              		.loc 2 199 2 is_stmt 0 view .LVU74
 281              	.LBE38:
 282              	.LBE37:
 325:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 283              		.loc 1 325 3 is_stmt 1 discriminator 4 view .LVU75
 325:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 284              		.loc 1 325 3 discriminator 4 view .LVU76
 325:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 285              		.loc 1 325 3 discriminator 4 view .LVU77
 286 0066 FEE7     		b	.L17
 287              	.L16:
 325:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 288              		.loc 1 325 104 discriminator 8 view .LVU78
 329:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 289              		.loc 1 329 2 discriminator 8 view .LVU79
 290 0068 FFF7FEFF 		bl	vTaskSuspendAll
 291              	.LVL21:
 292              	.LBB39:
 331:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 293              		.loc 1 331 3 discriminator 8 view .LVU80
 331:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 294              		.loc 1 331 21 is_stmt 0 discriminator 8 view .LVU81
 295 006c D7F80090 		ldr	r9, [r7]
 296              	.LVL22:
 334:ThirdParty/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccv1GE4A.s 			page 23


 297              		.loc 1 334 3 is_stmt 1 discriminator 8 view .LVU82
 334:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 298              		.loc 1 334 23 is_stmt 0 discriminator 8 view .LVU83
 299 0070 2A46     		mov	r2, r5
 300 0072 2146     		mov	r1, r4
 301 0074 4846     		mov	r0, r9
 302 0076 FFF7FEFF 		bl	prvTestWaitCondition
 303              	.LVL23:
 336:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 304              		.loc 1 336 3 is_stmt 1 discriminator 8 view .LVU84
 336:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 305              		.loc 1 336 5 is_stmt 0 discriminator 8 view .LVU85
 306 007a F0B1     		cbz	r0, .L18
 340:ThirdParty/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 307              		.loc 1 340 4 is_stmt 1 view .LVU86
 308              	.LVL24:
 341:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 309              		.loc 1 341 4 view .LVU87
 344:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 310              		.loc 1 344 4 view .LVU88
 344:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 311              		.loc 1 344 6 is_stmt 0 view .LVU89
 312 007c 16B1     		cbz	r6, .L19
 346:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 313              		.loc 1 346 5 is_stmt 1 view .LVU90
 346:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 314              		.loc 1 346 30 is_stmt 0 view .LVU91
 315 007e 29EA0403 		bic	r3, r9, r4
 316 0082 3B60     		str	r3, [r7]
 317              	.LVL25:
 318              	.L19:
 394:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 319              		.loc 1 394 68 is_stmt 1 view .LVU92
 320              	.LBE39:
 397:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 321              		.loc 1 397 2 view .LVU93
 397:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 322              		.loc 1 397 20 is_stmt 0 view .LVU94
 323 0084 FFF7FEFF 		bl	xTaskResumeAll
 324              	.LVL26:
 399:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 325              		.loc 1 399 2 is_stmt 1 view .LVU95
 399:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 326              		.loc 1 399 4 is_stmt 0 view .LVU96
 327 0088 B8F1000F 		cmp	r8, #0
 328 008c 12D0     		beq	.L9
 401:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 329              		.loc 1 401 3 is_stmt 1 view .LVU97
 401:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 330              		.loc 1 401 5 is_stmt 0 view .LVU98
 331 008e 48B9     		cbnz	r0, .L23
 403:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 332              		.loc 1 403 4 is_stmt 1 view .LVU99
 333 0090 4FF0E023 		mov	r3, #-536813568
 334 0094 4FF08052 		mov	r2, #268435456
 335 0098 C3F8042D 		str	r2, [r3, #3332]
 403:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
ARM GAS  /tmp/ccv1GE4A.s 			page 24


 336              		.loc 1 403 4 view .LVU100
 337              		.syntax unified
 338              	@ 403 "ThirdParty/FreeRTOS/Source/event_groups.c" 1
 339 009c BFF34F8F 		dsb
 340              	@ 0 "" 2
 403:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 341              		.loc 1 403 4 view .LVU101
 342              	@ 403 "ThirdParty/FreeRTOS/Source/event_groups.c" 1
 343 00a0 BFF36F8F 		isb
 344              	@ 0 "" 2
 403:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 345              		.loc 1 403 26 view .LVU102
 346              		.thumb
 347              		.syntax unified
 348              	.L23:
 407:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 349              		.loc 1 407 28 view .LVU103
 414:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 350              		.loc 1 414 3 view .LVU104
 414:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 351              		.loc 1 414 14 is_stmt 0 view .LVU105
 352 00a4 FFF7FEFF 		bl	uxTaskResetEventItemValue
 353              	.LVL27:
 414:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 354              		.loc 1 414 14 view .LVU106
 355 00a8 8146     		mov	r9, r0
 356              	.LVL28:
 416:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 357              		.loc 1 416 3 is_stmt 1 view .LVU107
 416:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 358              		.loc 1 416 5 is_stmt 0 view .LVU108
 359 00aa 10F0007F 		tst	r0, #33554432
 360 00ae 1AD0     		beq	.L30
 361              	.LVL29:
 362              	.L24:
 447:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 363              		.loc 1 447 3 is_stmt 1 view .LVU109
 450:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 364              		.loc 1 450 3 view .LVU110
 450:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 365              		.loc 1 450 12 is_stmt 0 view .LVU111
 366 00b0 29F07F49 		bic	r9, r9, #-16777216
 367              	.LVL30:
 452:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 368              		.loc 1 452 2 is_stmt 1 view .LVU112
 455:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 369              		.loc 1 455 2 view .LVU113
 457:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 370              		.loc 1 457 2 view .LVU114
 371              	.L9:
 458:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 372              		.loc 1 458 1 is_stmt 0 view .LVU115
 373 00b4 4846     		mov	r0, r9
 374 00b6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 375              	.LVL31:
 376              	.L18:
 377              	.LBB40:
ARM GAS  /tmp/ccv1GE4A.s 			page 25


 353:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 378              		.loc 1 353 8 is_stmt 1 view .LVU116
 353:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 379              		.loc 1 353 10 is_stmt 0 view .LVU117
 380 00ba 089B     		ldr	r3, [sp, #32]
 381 00bc 83B1     		cbz	r3, .L26
 366:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 382              		.loc 1 366 4 is_stmt 1 view .LVU118
 366:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 383              		.loc 1 366 6 is_stmt 0 view .LVU119
 384 00be 66B9     		cbnz	r6, .L27
 385              	.LBE40:
 314:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 386              		.loc 1 314 23 view .LVU120
 387 00c0 4146     		mov	r1, r8
 388              	.L20:
 389              	.LVL32:
 390              	.LBB41:
 372:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 391              		.loc 1 372 29 is_stmt 1 view .LVU121
 375:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 392              		.loc 1 375 4 view .LVU122
 375:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 393              		.loc 1 375 6 is_stmt 0 view .LVU123
 394 00c2 0DB1     		cbz	r5, .L21
 377:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 395              		.loc 1 377 5 is_stmt 1 view .LVU124
 377:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 396              		.loc 1 377 19 is_stmt 0 view .LVU125
 397 00c4 41F08061 		orr	r1, r1, #67108864
 398              	.LVL33:
 399              	.L21:
 381:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 400              		.loc 1 381 29 is_stmt 1 view .LVU126
 387:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 401              		.loc 1 387 4 view .LVU127
 402 00c8 089A     		ldr	r2, [sp, #32]
 403 00ca 2143     		orrs	r1, r1, r4
 404              	.LVL34:
 387:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 405              		.loc 1 387 4 is_stmt 0 view .LVU128
 406 00cc 381D     		adds	r0, r7, #4
 407              	.LVL35:
 387:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 408              		.loc 1 387 4 view .LVU129
 409 00ce FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 410              	.LVL36:
 392:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 411              		.loc 1 392 4 is_stmt 1 view .LVU130
 392:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 412              		.loc 1 392 13 is_stmt 0 view .LVU131
 413 00d2 C146     		mov	r9, r8
 414              	.LVL37:
 387:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 415              		.loc 1 387 4 view .LVU132
 416 00d4 DDF82080 		ldr	r8, [sp, #32]
 417 00d8 D4E7     		b	.L19
ARM GAS  /tmp/ccv1GE4A.s 			page 26


 418              	.LVL38:
 419              	.L27:
 368:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 420              		.loc 1 368 19 view .LVU133
 421 00da 4FF08071 		mov	r1, #16777216
 422 00de F0E7     		b	.L20
 423              	.L26:
 424 00e0 DDF82080 		ldr	r8, [sp, #32]
 425 00e4 CEE7     		b	.L19
 426              	.LVL39:
 427              	.L30:
 368:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 428              		.loc 1 368 19 view .LVU134
 429              	.LBE41:
 418:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 430              		.loc 1 418 4 is_stmt 1 view .LVU135
 431 00e6 FFF7FEFF 		bl	vPortEnterCritical
 432              	.LVL40:
 421:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 433              		.loc 1 421 5 view .LVU136
 421:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 434              		.loc 1 421 14 is_stmt 0 view .LVU137
 435 00ea D7F80090 		ldr	r9, [r7]
 436              	.LVL41:
 425:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 437              		.loc 1 425 5 is_stmt 1 view .LVU138
 425:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 438              		.loc 1 425 9 is_stmt 0 view .LVU139
 439 00ee 2A46     		mov	r2, r5
 440 00f0 2146     		mov	r1, r4
 441 00f2 4846     		mov	r0, r9
 442 00f4 FFF7FEFF 		bl	prvTestWaitCondition
 443              	.LVL42:
 425:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 444              		.loc 1 425 7 view .LVU140
 445 00f8 18B1     		cbz	r0, .L25
 427:ThirdParty/FreeRTOS/Source/event_groups.c **** 					{
 446              		.loc 1 427 6 is_stmt 1 view .LVU141
 427:ThirdParty/FreeRTOS/Source/event_groups.c **** 					{
 447              		.loc 1 427 8 is_stmt 0 view .LVU142
 448 00fa 16B1     		cbz	r6, .L25
 429:ThirdParty/FreeRTOS/Source/event_groups.c **** 					}
 449              		.loc 1 429 7 is_stmt 1 view .LVU143
 429:ThirdParty/FreeRTOS/Source/event_groups.c **** 					}
 450              		.loc 1 429 32 is_stmt 0 view .LVU144
 451 00fc 29EA0404 		bic	r4, r9, r4
 452              	.LVL43:
 429:ThirdParty/FreeRTOS/Source/event_groups.c **** 					}
 453              		.loc 1 429 32 view .LVU145
 454 0100 3C60     		str	r4, [r7]
 455              	.L25:
 438:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 456              		.loc 1 438 30 is_stmt 1 view .LVU146
 440:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 457              		.loc 1 440 5 view .LVU147
 458              	.LVL44:
 442:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
ARM GAS  /tmp/ccv1GE4A.s 			page 27


 459              		.loc 1 442 4 view .LVU148
 460 0102 FFF7FEFF 		bl	vPortExitCritical
 461              	.LVL45:
 462 0106 D3E7     		b	.L24
 463              		.cfi_endproc
 464              	.LFE7:
 466              		.section	.text.xEventGroupClearBits,"ax",%progbits
 467              		.align	1
 468              		.global	xEventGroupClearBits
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 473              	xEventGroupClearBits:
 474              	.LVL46:
 475              	.LFB8:
 462:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 476              		.loc 1 462 1 view -0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
 463:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 480              		.loc 1 463 1 view .LVU150
 464:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 481              		.loc 1 464 1 view .LVU151
 468:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 482              		.loc 1 468 2 view .LVU152
 483 0000 70B1     		cbz	r0, .L38
 462:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 484              		.loc 1 462 1 is_stmt 0 discriminator 2 view .LVU153
 485 0002 70B5     		push	{r4, r5, r6, lr}
 486              	.LCFI2:
 487              		.cfi_def_cfa_offset 16
 488              		.cfi_offset 4, -16
 489              		.cfi_offset 5, -12
 490              		.cfi_offset 6, -8
 491              		.cfi_offset 14, -4
 492 0004 0C46     		mov	r4, r1
 493 0006 0546     		mov	r5, r0
 468:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 494              		.loc 1 468 29 is_stmt 1 discriminator 2 view .LVU154
 469:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 495              		.loc 1 469 2 discriminator 2 view .LVU155
 496 0008 11F07F4F 		tst	r1, #-16777216
 497 000c 11D0     		beq	.L34
 469:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 498              		.loc 1 469 2 view .LVU156
 499              	.LBB42:
 500              	.LBI42:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 501              		.loc 2 195 30 view .LVU157
 502              	.LBB43:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 503              		.loc 2 197 1 view .LVU158
 504              		.loc 2 199 2 view .LVU159
 505              		.syntax unified
 506              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 507 000e 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccv1GE4A.s 			page 28


 508 0012 83F31188 		msr basepri, r3											
 509 0016 BFF36F8F 		isb														
 510 001a BFF34F8F 		dsb														
 511              	
 512              	@ 0 "" 2
 513              	.LVL47:
 514              		.thumb
 515              		.syntax unified
 516              	.L35:
 517              		.loc 2 199 2 is_stmt 0 view .LVU160
 518              	.LBE43:
 519              	.LBE42:
 469:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 520              		.loc 1 469 2 is_stmt 1 discriminator 2 view .LVU161
 469:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 521              		.loc 1 469 2 discriminator 2 view .LVU162
 469:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 522              		.loc 1 469 2 discriminator 2 view .LVU163
 523 001e FEE7     		b	.L35
 524              	.L38:
 525              	.LCFI3:
 526              		.cfi_def_cfa_offset 0
 527              		.cfi_restore 4
 528              		.cfi_restore 5
 529              		.cfi_restore 6
 530              		.cfi_restore 14
 468:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 531              		.loc 1 468 2 view .LVU164
 532              	.LBB44:
 533              	.LBI44:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 534              		.loc 2 195 30 view .LVU165
 535              	.LBB45:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 536              		.loc 2 197 1 view .LVU166
 537              		.loc 2 199 2 view .LVU167
 538              		.syntax unified
 539              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 540 0020 4FF05003 			mov r3, #80												
 541 0024 83F31188 		msr basepri, r3											
 542 0028 BFF36F8F 		isb														
 543 002c BFF34F8F 		dsb														
 544              	
 545              	@ 0 "" 2
 546              	.LVL48:
 547              		.thumb
 548              		.syntax unified
 549              	.L33:
 550              		.loc 2 199 2 is_stmt 0 view .LVU168
 551              	.LBE45:
 552              	.LBE44:
 468:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 553              		.loc 1 468 2 is_stmt 1 discriminator 1 view .LVU169
 468:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 554              		.loc 1 468 2 discriminator 1 view .LVU170
 468:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 555              		.loc 1 468 2 discriminator 1 view .LVU171
ARM GAS  /tmp/ccv1GE4A.s 			page 29


 556 0030 FEE7     		b	.L33
 557              	.L34:
 558              	.LCFI4:
 559              		.cfi_def_cfa_offset 16
 560              		.cfi_offset 4, -16
 561              		.cfi_offset 5, -12
 562              		.cfi_offset 6, -8
 563              		.cfi_offset 14, -4
 469:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 564              		.loc 1 469 72 discriminator 2 view .LVU172
 471:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 565              		.loc 1 471 2 discriminator 2 view .LVU173
 566 0032 FFF7FEFF 		bl	vPortEnterCritical
 567              	.LVL49:
 473:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 568              		.loc 1 473 60 discriminator 2 view .LVU174
 477:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 569              		.loc 1 477 3 discriminator 2 view .LVU175
 477:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 570              		.loc 1 477 12 is_stmt 0 discriminator 2 view .LVU176
 571 0036 2E68     		ldr	r6, [r5]
 572              	.LVL50:
 480:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 573              		.loc 1 480 3 is_stmt 1 discriminator 2 view .LVU177
 480:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 574              		.loc 1 480 28 is_stmt 0 discriminator 2 view .LVU178
 575 0038 26EA0404 		bic	r4, r6, r4
 576              	.LVL51:
 480:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 577              		.loc 1 480 28 discriminator 2 view .LVU179
 578 003c 2C60     		str	r4, [r5]
 482:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 579              		.loc 1 482 2 is_stmt 1 discriminator 2 view .LVU180
 580 003e FFF7FEFF 		bl	vPortExitCritical
 581              	.LVL52:
 484:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 582              		.loc 1 484 2 discriminator 2 view .LVU181
 485:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 583              		.loc 1 485 1 is_stmt 0 discriminator 2 view .LVU182
 584 0042 3046     		mov	r0, r6
 585 0044 70BD     		pop	{r4, r5, r6, pc}
 485:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 586              		.loc 1 485 1 discriminator 2 view .LVU183
 587              		.cfi_endproc
 588              	.LFE8:
 590              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 591              		.align	1
 592              		.global	xEventGroupGetBitsFromISR
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 597              	xEventGroupGetBitsFromISR:
 598              	.LVL53:
 599              	.LFB9:
 504:ThirdParty/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 600              		.loc 1 504 1 is_stmt 1 view -0
 601              		.cfi_startproc
ARM GAS  /tmp/ccv1GE4A.s 			page 30


 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604              		@ link register save eliminated.
 505:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t const * const pxEventBits = xEventGroup;
 605              		.loc 1 505 1 view .LVU185
 506:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 606              		.loc 1 506 1 view .LVU186
 507:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 607              		.loc 1 507 1 view .LVU187
 509:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 608              		.loc 1 509 2 view .LVU188
 609              	.LBB46:
 610              	.LBI46:
 200:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 201:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 202:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 203:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 204:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 205:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 206:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 207:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 208:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 209:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 210:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 611              		.loc 2 211 34 view .LVU189
 612              	.LBB47:
 212:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 613              		.loc 2 213 1 view .LVU190
 214:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 215:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 614              		.loc 2 215 2 view .LVU191
 615              		.syntax unified
 616              	@ 215 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 617 0000 EFF31183 			mrs r3, basepri											
 618 0004 4FF05002 		mov r2, #80												
 619 0008 82F31188 		msr basepri, r2											
 620 000c BFF36F8F 		isb														
 621 0010 BFF34F8F 		dsb														
 622              	
 623              	@ 0 "" 2
 624              	.LVL54:
 216:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 217:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 218:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 219:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 220:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 221:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 222:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 223:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 224:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 225:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 226:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 227:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 625              		.loc 2 227 2 view .LVU192
 626              		.loc 2 227 2 is_stmt 0 view .LVU193
ARM GAS  /tmp/ccv1GE4A.s 			page 31


 627              		.thumb
 628              		.syntax unified
 629              	.LBE47:
 630              	.LBE46:
 511:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 631              		.loc 1 511 3 is_stmt 1 view .LVU194
 511:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 632              		.loc 1 511 12 is_stmt 0 view .LVU195
 633 0014 0068     		ldr	r0, [r0]
 634              	.LVL55:
 513:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 635              		.loc 1 513 2 is_stmt 1 view .LVU196
 636              	.LBB48:
 637              	.LBI48:
 228:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 229:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 230:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 638              		.loc 2 231 30 view .LVU197
 639              	.LBB49:
 232:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 233:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 640              		.loc 2 233 2 view .LVU198
 641              		.syntax unified
 642              	@ 233 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 643 0016 83F31188 			msr basepri, r3	
 644              	@ 0 "" 2
 645              	.LVL56:
 646              		.loc 2 233 2 is_stmt 0 view .LVU199
 647              		.thumb
 648              		.syntax unified
 649              	.LBE49:
 650              	.LBE48:
 515:ThirdParty/FreeRTOS/Source/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 651              		.loc 1 515 2 is_stmt 1 view .LVU200
 516:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 652              		.loc 1 516 1 is_stmt 0 view .LVU201
 653 001a 7047     		bx	lr
 654              		.cfi_endproc
 655              	.LFE9:
 657              		.section	.text.xEventGroupSetBits,"ax",%progbits
 658              		.align	1
 659              		.global	xEventGroupSetBits
 660              		.syntax unified
 661              		.thumb
 662              		.thumb_func
 664              	xEventGroupSetBits:
 665              	.LVL57:
 666              	.LFB10:
 520:ThirdParty/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 667              		.loc 1 520 1 is_stmt 1 view -0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 520:ThirdParty/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 671              		.loc 1 520 1 is_stmt 0 view .LVU203
 672 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccv1GE4A.s 			page 32


 673              	.LCFI5:
 674              		.cfi_def_cfa_offset 24
 675              		.cfi_offset 3, -24
 676              		.cfi_offset 4, -20
 677              		.cfi_offset 5, -16
 678              		.cfi_offset 6, -12
 679              		.cfi_offset 7, -8
 680              		.cfi_offset 14, -4
 521:ThirdParty/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 681              		.loc 1 521 1 is_stmt 1 view .LVU204
 522:ThirdParty/FreeRTOS/Source/event_groups.c **** List_t const * pxList;
 682              		.loc 1 522 1 view .LVU205
 523:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 683              		.loc 1 523 1 view .LVU206
 524:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 684              		.loc 1 524 1 view .LVU207
 685              	.LVL58:
 525:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 686              		.loc 1 525 1 view .LVU208
 526:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 687              		.loc 1 526 1 view .LVU209
 530:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 688              		.loc 1 530 2 view .LVU210
 689 0002 68B1     		cbz	r0, .L52
 690 0004 0D46     		mov	r5, r1
 691 0006 0446     		mov	r4, r0
 530:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 692              		.loc 1 530 29 discriminator 2 view .LVU211
 531:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 693              		.loc 1 531 2 discriminator 2 view .LVU212
 694 0008 11F07F47 		ands	r7, r1, #-16777216
 695 000c 11D0     		beq	.L43
 531:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 696              		.loc 1 531 2 view .LVU213
 697              	.LBB50:
 698              	.LBI50:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 699              		.loc 2 195 30 view .LVU214
 700              	.LBB51:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 701              		.loc 2 197 1 view .LVU215
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 702              		.loc 2 199 2 view .LVU216
 703              		.syntax unified
 704              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 705 000e 4FF05003 			mov r3, #80												
 706 0012 83F31188 		msr basepri, r3											
 707 0016 BFF36F8F 		isb														
 708 001a BFF34F8F 		dsb														
 709              	
 710              	@ 0 "" 2
 711              	.LVL59:
 712              		.thumb
 713              		.syntax unified
 714              	.L44:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 715              		.loc 2 199 2 is_stmt 0 view .LVU217
ARM GAS  /tmp/ccv1GE4A.s 			page 33


 716              	.LBE51:
 717              	.LBE50:
 531:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 718              		.loc 1 531 2 is_stmt 1 discriminator 2 view .LVU218
 531:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 719              		.loc 1 531 2 discriminator 2 view .LVU219
 531:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 720              		.loc 1 531 2 discriminator 2 view .LVU220
 721 001e FEE7     		b	.L44
 722              	.L52:
 530:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 723              		.loc 1 530 2 view .LVU221
 724              	.LBB52:
 725              	.LBI52:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 726              		.loc 2 195 30 view .LVU222
 727              	.LBB53:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 728              		.loc 2 197 1 view .LVU223
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 729              		.loc 2 199 2 view .LVU224
 730              		.syntax unified
 731              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 732 0020 4FF05003 			mov r3, #80												
 733 0024 83F31188 		msr basepri, r3											
 734 0028 BFF36F8F 		isb														
 735 002c BFF34F8F 		dsb														
 736              	
 737              	@ 0 "" 2
 738              	.LVL60:
 739              		.thumb
 740              		.syntax unified
 741              	.L42:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 742              		.loc 2 199 2 is_stmt 0 view .LVU225
 743              	.LBE53:
 744              	.LBE52:
 530:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 745              		.loc 1 530 2 is_stmt 1 discriminator 1 view .LVU226
 530:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 746              		.loc 1 530 2 discriminator 1 view .LVU227
 530:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 747              		.loc 1 530 2 discriminator 1 view .LVU228
 748 0030 FEE7     		b	.L42
 749              	.L43:
 531:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 750              		.loc 1 531 70 discriminator 2 view .LVU229
 533:ThirdParty/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is use
 751              		.loc 1 533 2 discriminator 2 view .LVU230
 752              	.LVL61:
 534:ThirdParty/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 753              		.loc 1 534 2 discriminator 2 view .LVU231
 534:ThirdParty/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 754              		.loc 1 534 12 is_stmt 0 discriminator 2 view .LVU232
 755 0032 00F10C06 		add	r6, r0, #12
 756              	.LVL62:
 535:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
ARM GAS  /tmp/ccv1GE4A.s 			page 34


 757              		.loc 1 535 2 is_stmt 1 discriminator 2 view .LVU233
 758 0036 FFF7FEFF 		bl	vTaskSuspendAll
 759              	.LVL63:
 537:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 760              		.loc 1 537 56 discriminator 2 view .LVU234
 539:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 761              		.loc 1 539 3 discriminator 2 view .LVU235
 539:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 762              		.loc 1 539 14 is_stmt 0 discriminator 2 view .LVU236
 763 003a 2069     		ldr	r0, [r4, #16]
 764              	.LVL64:
 542:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 765              		.loc 1 542 3 is_stmt 1 discriminator 2 view .LVU237
 542:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 766              		.loc 1 542 28 is_stmt 0 discriminator 2 view .LVU238
 767 003c 2368     		ldr	r3, [r4]
 768 003e 2B43     		orrs	r3, r3, r5
 769 0040 2360     		str	r3, [r4]
 545:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 770              		.loc 1 545 3 is_stmt 1 discriminator 2 view .LVU239
 545:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 771              		.loc 1 545 8 is_stmt 0 discriminator 2 view .LVU240
 772 0042 0AE0     		b	.L45
 773              	.LVL65:
 774              	.L46:
 567:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 775              		.loc 1 567 9 is_stmt 1 view .LVU241
 567:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 776              		.loc 1 567 44 is_stmt 0 view .LVU242
 777 0044 2168     		ldr	r1, [r4]
 567:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 778              		.loc 1 567 11 view .LVU243
 779 0046 32EA0101 		bics	r1, r2, r1
 780 004a 05D1     		bne	.L48
 567:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 781              		.loc 1 567 11 view .LVU244
 782 004c 11E0     		b	.L47
 783              	.LVL66:
 784              	.L49:
 586:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 785              		.loc 1 586 30 is_stmt 1 view .LVU245
 594:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 786              		.loc 1 594 5 view .LVU246
 594:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 787              		.loc 1 594 63 is_stmt 0 view .LVU247
 788 004e 2168     		ldr	r1, [r4]
 594:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 789              		.loc 1 594 5 view .LVU248
 790 0050 41F00071 		orr	r1, r1, #33554432
 791 0054 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 792              	.LVL67:
 793              	.L48:
 520:ThirdParty/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 794              		.loc 1 520 1 view .LVU249
 795 0058 2846     		mov	r0, r5
 796              	.LVL68:
 797              	.L45:
ARM GAS  /tmp/ccv1GE4A.s 			page 35


 545:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 798              		.loc 1 545 8 is_stmt 1 view .LVU250
 799 005a B042     		cmp	r0, r6
 800 005c 0ED0     		beq	.L53
 547:ThirdParty/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801              		.loc 1 547 4 view .LVU251
 547:ThirdParty/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 802              		.loc 1 547 11 is_stmt 0 view .LVU252
 803 005e 4568     		ldr	r5, [r0, #4]
 804              	.LVL69:
 548:ThirdParty/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 805              		.loc 1 548 4 is_stmt 1 view .LVU253
 548:ThirdParty/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 806              		.loc 1 548 20 is_stmt 0 view .LVU254
 807 0060 0368     		ldr	r3, [r0]
 808              	.LVL70:
 549:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 809              		.loc 1 549 4 is_stmt 1 view .LVU255
 552:ThirdParty/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 810              		.loc 1 552 4 view .LVU256
 553:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 811              		.loc 1 553 4 view .LVU257
 553:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 812              		.loc 1 553 20 is_stmt 0 view .LVU258
 813 0062 23F07F42 		bic	r2, r3, #-16777216
 814              	.LVL71:
 555:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 815              		.loc 1 555 4 is_stmt 1 view .LVU259
 555:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 816              		.loc 1 555 6 is_stmt 0 view .LVU260
 817 0066 13F0806F 		tst	r3, #67108864
 818 006a EBD1     		bne	.L46
 558:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 819              		.loc 1 558 5 is_stmt 1 view .LVU261
 558:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 820              		.loc 1 558 40 is_stmt 0 view .LVU262
 821 006c 2168     		ldr	r1, [r4]
 558:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 822              		.loc 1 558 7 view .LVU263
 823 006e 1142     		tst	r1, r2
 824 0070 F2D0     		beq	.L48
 825              	.L47:
 826              	.LVL72:
 580:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 827              		.loc 1 580 5 is_stmt 1 view .LVU264
 580:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 828              		.loc 1 580 7 is_stmt 0 view .LVU265
 829 0072 13F0807F 		tst	r3, #16777216
 830 0076 EAD0     		beq	.L49
 582:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 831              		.loc 1 582 6 is_stmt 1 view .LVU266
 582:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 832              		.loc 1 582 20 is_stmt 0 view .LVU267
 833 0078 1743     		orrs	r7, r7, r2
 834              	.LVL73:
 582:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 835              		.loc 1 582 20 view .LVU268
ARM GAS  /tmp/ccv1GE4A.s 			page 36


 836 007a E8E7     		b	.L49
 837              	.LVL74:
 838              	.L53:
 605:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 839              		.loc 1 605 3 is_stmt 1 view .LVU269
 605:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 840              		.loc 1 605 28 is_stmt 0 view .LVU270
 841 007c 2368     		ldr	r3, [r4]
 842 007e 23EA0703 		bic	r3, r3, r7
 843 0082 2360     		str	r3, [r4]
 607:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 844              		.loc 1 607 2 is_stmt 1 view .LVU271
 607:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 845              		.loc 1 607 11 is_stmt 0 view .LVU272
 846 0084 FFF7FEFF 		bl	xTaskResumeAll
 847              	.LVL75:
 609:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 848              		.loc 1 609 2 is_stmt 1 view .LVU273
 610:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 849              		.loc 1 610 1 is_stmt 0 view .LVU274
 850 0088 2068     		ldr	r0, [r4]
 851 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 610:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 852              		.loc 1 610 1 view .LVU275
 853              		.cfi_endproc
 854              	.LFE10:
 856              		.section	.text.xEventGroupSync,"ax",%progbits
 857              		.align	1
 858              		.global	xEventGroupSync
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 863              	xEventGroupSync:
 864              	.LVL76:
 865              	.LFB6:
 192:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 866              		.loc 1 192 1 is_stmt 1 view -0
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 0
 869              		@ frame_needed = 0, uses_anonymous_args = 0
 192:ThirdParty/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 870              		.loc 1 192 1 is_stmt 0 view .LVU277
 871 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 872              	.LCFI6:
 873              		.cfi_def_cfa_offset 32
 874              		.cfi_offset 3, -32
 875              		.cfi_offset 4, -28
 876              		.cfi_offset 5, -24
 877              		.cfi_offset 6, -20
 878              		.cfi_offset 7, -16
 879              		.cfi_offset 8, -12
 880              		.cfi_offset 9, -8
 881              		.cfi_offset 14, -4
 193:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 882              		.loc 1 193 1 is_stmt 1 view .LVU278
 194:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 883              		.loc 1 194 1 view .LVU279
ARM GAS  /tmp/ccv1GE4A.s 			page 37


 884              	.LVL77:
 195:ThirdParty/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 885              		.loc 1 195 1 view .LVU280
 196:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 886              		.loc 1 196 1 view .LVU281
 198:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 887              		.loc 1 198 2 view .LVU282
 888 0004 12F07F48 		ands	r8, r2, #-16777216
 889 0008 08D0     		beq	.L55
 198:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 890              		.loc 1 198 2 view .LVU283
 891              	.LBB54:
 892              	.LBI54:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 893              		.loc 2 195 30 view .LVU284
 894              	.LBB55:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 895              		.loc 2 197 1 view .LVU285
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 896              		.loc 2 199 2 view .LVU286
 897              		.syntax unified
 898              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 899 000a 4FF05003 			mov r3, #80												
 900 000e 83F31188 		msr basepri, r3											
 901 0012 BFF36F8F 		isb														
 902 0016 BFF34F8F 		dsb														
 903              	
 904              	@ 0 "" 2
 905              	.LVL78:
 906              		.thumb
 907              		.syntax unified
 908              	.L56:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 909              		.loc 2 199 2 is_stmt 0 view .LVU287
 910              	.LBE55:
 911              	.LBE54:
 198:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 912              		.loc 1 198 2 is_stmt 1 discriminator 1 view .LVU288
 198:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 913              		.loc 1 198 2 discriminator 1 view .LVU289
 198:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 914              		.loc 1 198 2 discriminator 1 view .LVU290
 915 001a FEE7     		b	.L56
 916              	.LVL79:
 917              	.L55:
 198:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 918              		.loc 1 198 2 is_stmt 0 discriminator 1 view .LVU291
 919 001c 0746     		mov	r7, r0
 920 001e 0E46     		mov	r6, r1
 921 0020 1446     		mov	r4, r2
 922 0022 1D46     		mov	r5, r3
 198:ThirdParty/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 923              		.loc 1 198 74 is_stmt 1 discriminator 2 view .LVU292
 199:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 924              		.loc 1 199 2 discriminator 2 view .LVU293
 925 0024 42B9     		cbnz	r2, .L57
 199:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
ARM GAS  /tmp/ccv1GE4A.s 			page 38


 926              		.loc 1 199 2 view .LVU294
 927              	.LBB56:
 928              	.LBI56:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 929              		.loc 2 195 30 view .LVU295
 930              	.LBB57:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 931              		.loc 2 197 1 view .LVU296
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 932              		.loc 2 199 2 view .LVU297
 933              		.syntax unified
 934              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 935 0026 4FF05003 			mov r3, #80												
 936 002a 83F31188 		msr basepri, r3											
 937 002e BFF36F8F 		isb														
 938 0032 BFF34F8F 		dsb														
 939              	
 940              	@ 0 "" 2
 941              	.LVL80:
 942              		.thumb
 943              		.syntax unified
 944              	.L58:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 945              		.loc 2 199 2 is_stmt 0 view .LVU298
 946              	.LBE57:
 947              	.LBE56:
 199:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 948              		.loc 1 199 2 is_stmt 1 discriminator 2 view .LVU299
 199:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 949              		.loc 1 199 2 discriminator 2 view .LVU300
 199:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 950              		.loc 1 199 2 discriminator 2 view .LVU301
 951 0036 FEE7     		b	.L58
 952              	.LVL81:
 953              	.L57:
 199:ThirdParty/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 954              		.loc 1 199 38 discriminator 2 view .LVU302
 202:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 955              		.loc 1 202 3 discriminator 2 view .LVU303
 956 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 957              	.LVL82:
 202:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 958              		.loc 1 202 3 is_stmt 0 discriminator 2 view .LVU304
 959 003c 48B9     		cbnz	r0, .L59
 960 003e 45B1     		cbz	r5, .L59
 202:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 961              		.loc 1 202 3 is_stmt 1 view .LVU305
 962              	.LBB58:
 963              	.LBI58:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 964              		.loc 2 195 30 view .LVU306
 965              	.LBB59:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 966              		.loc 2 197 1 view .LVU307
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 967              		.loc 2 199 2 view .LVU308
 968              		.syntax unified
ARM GAS  /tmp/ccv1GE4A.s 			page 39


 969              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 970 0040 4FF05003 			mov r3, #80												
 971 0044 83F31188 		msr basepri, r3											
 972 0048 BFF36F8F 		isb														
 973 004c BFF34F8F 		dsb														
 974              	
 975              	@ 0 "" 2
 976              	.LVL83:
 977              		.thumb
 978              		.syntax unified
 979              	.L60:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 980              		.loc 2 199 2 is_stmt 0 view .LVU309
 981              	.LBE59:
 982              	.LBE58:
 202:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 983              		.loc 1 202 3 is_stmt 1 discriminator 3 view .LVU310
 202:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 984              		.loc 1 202 3 discriminator 3 view .LVU311
 202:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 985              		.loc 1 202 3 discriminator 3 view .LVU312
 986 0050 FEE7     		b	.L60
 987              	.L59:
 202:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 988              		.loc 1 202 104 discriminator 8 view .LVU313
 206:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 989              		.loc 1 206 2 discriminator 8 view .LVU314
 990 0052 FFF7FEFF 		bl	vTaskSuspendAll
 991              	.LVL84:
 208:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 992              		.loc 1 208 3 discriminator 8 view .LVU315
 208:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 993              		.loc 1 208 22 is_stmt 0 discriminator 8 view .LVU316
 994 0056 D7F80090 		ldr	r9, [r7]
 995              	.LVL85:
 210:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 996              		.loc 1 210 3 is_stmt 1 discriminator 8 view .LVU317
 210:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 997              		.loc 1 210 12 is_stmt 0 discriminator 8 view .LVU318
 998 005a 3146     		mov	r1, r6
 999 005c 3846     		mov	r0, r7
 1000 005e FFF7FEFF 		bl	xEventGroupSetBits
 1001              	.LVL86:
 212:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 1002              		.loc 1 212 3 is_stmt 1 discriminator 8 view .LVU319
 212:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 1003              		.loc 1 212 30 is_stmt 0 discriminator 8 view .LVU320
 1004 0062 49EA0606 		orr	r6, r9, r6
 1005              	.LVL87:
 212:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 1006              		.loc 1 212 5 discriminator 8 view .LVU321
 1007 0066 34EA0603 		bics	r3, r4, r6
 1008 006a 1AD0     		beq	.L69
 225:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 1009              		.loc 1 225 4 is_stmt 1 view .LVU322
 225:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 1010              		.loc 1 225 6 is_stmt 0 view .LVU323
ARM GAS  /tmp/ccv1GE4A.s 			page 40


 1011 006c FDB9     		cbnz	r5, .L70
 244:ThirdParty/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 1012              		.loc 1 244 5 is_stmt 1 view .LVU324
 244:ThirdParty/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 1013              		.loc 1 244 14 is_stmt 0 view .LVU325
 1014 006e 3E68     		ldr	r6, [r7]
 1015              	.LVL88:
 245:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 1016              		.loc 1 245 5 is_stmt 1 view .LVU326
 1017              	.L62:
 249:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1018              		.loc 1 249 2 view .LVU327
 249:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1019              		.loc 1 249 20 is_stmt 0 view .LVU328
 1020 0070 FFF7FEFF 		bl	xTaskResumeAll
 1021              	.LVL89:
 251:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 1022              		.loc 1 251 2 is_stmt 1 view .LVU329
 251:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 1023              		.loc 1 251 4 is_stmt 0 view .LVU330
 1024 0074 95B1     		cbz	r5, .L54
 253:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 1025              		.loc 1 253 3 is_stmt 1 view .LVU331
 253:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 1026              		.loc 1 253 5 is_stmt 0 view .LVU332
 1027 0076 48B9     		cbnz	r0, .L65
 255:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 1028              		.loc 1 255 4 is_stmt 1 view .LVU333
 1029 0078 4FF0E023 		mov	r3, #-536813568
 1030 007c 4FF08052 		mov	r2, #268435456
 1031 0080 C3F8042D 		str	r2, [r3, #3332]
 255:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 1032              		.loc 1 255 4 view .LVU334
 1033              		.syntax unified
 1034              	@ 255 "ThirdParty/FreeRTOS/Source/event_groups.c" 1
 1035 0084 BFF34F8F 		dsb
 1036              	@ 0 "" 2
 255:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 1037              		.loc 1 255 4 view .LVU335
 1038              	@ 255 "ThirdParty/FreeRTOS/Source/event_groups.c" 1
 1039 0088 BFF36F8F 		isb
 1040              	@ 0 "" 2
 255:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 1041              		.loc 1 255 26 view .LVU336
 1042              		.thumb
 1043              		.syntax unified
 1044              	.L65:
 259:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 1045              		.loc 1 259 28 view .LVU337
 266:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1046              		.loc 1 266 3 view .LVU338
 266:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1047              		.loc 1 266 14 is_stmt 0 view .LVU339
 1048 008c FFF7FEFF 		bl	uxTaskResetEventItemValue
 1049              	.LVL90:
 266:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1050              		.loc 1 266 14 view .LVU340
ARM GAS  /tmp/ccv1GE4A.s 			page 41


 1051 0090 0646     		mov	r6, r0
 1052              	.LVL91:
 268:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 1053              		.loc 1 268 3 is_stmt 1 view .LVU341
 268:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 1054              		.loc 1 268 5 is_stmt 0 view .LVU342
 1055 0092 10F0007F 		tst	r0, #33554432
 1056 0096 12D0     		beq	.L71
 1057              	.LVL92:
 1058              	.L66:
 295:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1059              		.loc 1 295 3 is_stmt 1 view .LVU343
 299:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 1060              		.loc 1 299 3 view .LVU344
 299:ThirdParty/FreeRTOS/Source/event_groups.c **** 	}
 1061              		.loc 1 299 12 is_stmt 0 view .LVU345
 1062 0098 26F07F46 		bic	r6, r6, #-16777216
 1063              	.LVL93:
 302:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1064              		.loc 1 302 2 is_stmt 1 view .LVU346
 305:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1065              		.loc 1 305 2 view .LVU347
 307:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 1066              		.loc 1 307 2 view .LVU348
 1067              	.L54:
 308:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1068              		.loc 1 308 1 is_stmt 0 view .LVU349
 1069 009c 3046     		mov	r0, r6
 1070 009e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1071              	.LVL94:
 1072              	.L69:
 215:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1073              		.loc 1 215 4 is_stmt 1 view .LVU350
 219:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1074              		.loc 1 219 4 view .LVU351
 219:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1075              		.loc 1 219 29 is_stmt 0 view .LVU352
 1076 00a2 3B68     		ldr	r3, [r7]
 1077 00a4 23EA0403 		bic	r3, r3, r4
 1078 00a8 3B60     		str	r3, [r7]
 221:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 1079              		.loc 1 221 4 is_stmt 1 view .LVU353
 1080              	.LVL95:
 221:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 1081              		.loc 1 221 17 is_stmt 0 view .LVU354
 1082 00aa 4546     		mov	r5, r8
 1083 00ac E0E7     		b	.L62
 1084              	.LVL96:
 1085              	.L70:
 227:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1086              		.loc 1 227 77 is_stmt 1 view .LVU355
 232:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1087              		.loc 1 232 5 view .LVU356
 1088 00ae 2A46     		mov	r2, r5
 1089 00b0 44F0A061 		orr	r1, r4, #83886080
 1090 00b4 381D     		adds	r0, r7, #4
 1091 00b6 FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
ARM GAS  /tmp/ccv1GE4A.s 			page 42


 1092              	.LVL97:
 238:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 1093              		.loc 1 238 5 view .LVU357
 238:ThirdParty/FreeRTOS/Source/event_groups.c **** 			}
 1094              		.loc 1 238 14 is_stmt 0 view .LVU358
 1095 00ba 4646     		mov	r6, r8
 1096 00bc D8E7     		b	.L62
 1097              	.LVL98:
 1098              	.L71:
 271:ThirdParty/FreeRTOS/Source/event_groups.c **** 			{
 1099              		.loc 1 271 4 is_stmt 1 view .LVU359
 1100 00be FFF7FEFF 		bl	vPortEnterCritical
 1101              	.LVL99:
 273:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1102              		.loc 1 273 5 view .LVU360
 273:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1103              		.loc 1 273 14 is_stmt 0 view .LVU361
 1104 00c2 3E68     		ldr	r6, [r7]
 1105              	.LVL100:
 279:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 1106              		.loc 1 279 5 is_stmt 1 view .LVU362
 279:ThirdParty/FreeRTOS/Source/event_groups.c **** 				{
 1107              		.loc 1 279 7 is_stmt 0 view .LVU363
 1108 00c4 34EA0603 		bics	r3, r4, r6
 1109 00c8 02D0     		beq	.L72
 1110              	.LVL101:
 1111              	.L67:
 285:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 1112              		.loc 1 285 30 is_stmt 1 view .LVU364
 288:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1113              		.loc 1 288 4 view .LVU365
 1114 00ca FFF7FEFF 		bl	vPortExitCritical
 1115              	.LVL102:
 290:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 1116              		.loc 1 290 4 view .LVU366
 290:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 1117              		.loc 1 290 4 is_stmt 0 view .LVU367
 1118 00ce E3E7     		b	.L66
 1119              	.LVL103:
 1120              	.L72:
 281:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 1121              		.loc 1 281 6 is_stmt 1 view .LVU368
 281:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 1122              		.loc 1 281 31 is_stmt 0 view .LVU369
 1123 00d0 26EA0404 		bic	r4, r6, r4
 1124              	.LVL104:
 281:ThirdParty/FreeRTOS/Source/event_groups.c **** 				}
 1125              		.loc 1 281 31 view .LVU370
 1126 00d4 3C60     		str	r4, [r7]
 1127 00d6 F8E7     		b	.L67
 1128              		.cfi_endproc
 1129              	.LFE6:
 1131              		.section	.text.vEventGroupDelete,"ax",%progbits
 1132              		.align	1
 1133              		.global	vEventGroupDelete
 1134              		.syntax unified
 1135              		.thumb
ARM GAS  /tmp/ccv1GE4A.s 			page 43


 1136              		.thumb_func
 1138              	vEventGroupDelete:
 1139              	.LVL105:
 1140              	.LFB11:
 614:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 1141              		.loc 1 614 1 is_stmt 1 view -0
 1142              		.cfi_startproc
 1143              		@ args = 0, pretend = 0, frame = 0
 1144              		@ frame_needed = 0, uses_anonymous_args = 0
 614:ThirdParty/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 1145              		.loc 1 614 1 is_stmt 0 view .LVU372
 1146 0000 10B5     		push	{r4, lr}
 1147              	.LCFI7:
 1148              		.cfi_def_cfa_offset 8
 1149              		.cfi_offset 4, -8
 1150              		.cfi_offset 14, -4
 1151 0002 0446     		mov	r4, r0
 615:ThirdParty/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 1152              		.loc 1 615 1 is_stmt 1 view .LVU373
 1153              	.LVL106:
 616:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1154              		.loc 1 616 1 view .LVU374
 618:ThirdParty/FreeRTOS/Source/event_groups.c **** 	{
 1155              		.loc 1 618 2 view .LVU375
 1156 0004 FFF7FEFF 		bl	vTaskSuspendAll
 1157              	.LVL107:
 620:ThirdParty/FreeRTOS/Source/event_groups.c **** 
 1158              		.loc 1 620 41 view .LVU376
 622:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 1159              		.loc 1 622 3 view .LVU377
 1160              	.L74:
 622:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 1161              		.loc 1 622 8 view .LVU378
 622:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 1162              		.loc 1 622 10 is_stmt 0 view .LVU379
 1163 0008 6368     		ldr	r3, [r4, #4]
 622:ThirdParty/FreeRTOS/Source/event_groups.c **** 		{
 1164              		.loc 1 622 8 view .LVU380
 1165 000a 93B1     		cbz	r3, .L79
 626:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1166              		.loc 1 626 4 is_stmt 1 view .LVU381
 1167 000c 2069     		ldr	r0, [r4, #16]
 1168 000e 04F10C03 		add	r3, r4, #12
 1169 0012 9842     		cmp	r0, r3
 1170 0014 04D0     		beq	.L80
 626:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1171              		.loc 1 626 121 discriminator 2 view .LVU382
 627:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 1172              		.loc 1 627 4 discriminator 2 view .LVU383
 1173 0016 4FF00071 		mov	r1, #33554432
 1174 001a FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1175              	.LVL108:
 1176 001e F3E7     		b	.L74
 1177              	.L80:
 626:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1178              		.loc 1 626 4 view .LVU384
 1179              	.LBB60:
ARM GAS  /tmp/ccv1GE4A.s 			page 44


 1180              	.LBI60:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1181              		.loc 2 195 30 view .LVU385
 1182              	.LBB61:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1183              		.loc 2 197 1 view .LVU386
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1184              		.loc 2 199 2 view .LVU387
 1185              		.syntax unified
 1186              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1187 0020 4FF05003 			mov r3, #80												
 1188 0024 83F31188 		msr basepri, r3											
 1189 0028 BFF36F8F 		isb														
 1190 002c BFF34F8F 		dsb														
 1191              	
 1192              	@ 0 "" 2
 1193              	.LVL109:
 1194              		.thumb
 1195              		.syntax unified
 1196              	.L76:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1197              		.loc 2 199 2 is_stmt 0 view .LVU388
 1198              	.LBE61:
 1199              	.LBE60:
 626:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1200              		.loc 1 626 4 is_stmt 1 discriminator 1 view .LVU389
 626:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1201              		.loc 1 626 4 discriminator 1 view .LVU390
 626:ThirdParty/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1202              		.loc 1 626 4 discriminator 1 view .LVU391
 1203 0030 FEE7     		b	.L76
 1204              	.L79:
 634:ThirdParty/FreeRTOS/Source/event_groups.c **** 		}
 1205              		.loc 1 634 4 view .LVU392
 1206 0032 2046     		mov	r0, r4
 1207 0034 FFF7FEFF 		bl	vPortFree
 1208              	.LVL110:
 651:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 1209              		.loc 1 651 2 view .LVU393
 651:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 1210              		.loc 1 651 11 is_stmt 0 view .LVU394
 1211 0038 FFF7FEFF 		bl	xTaskResumeAll
 1212              	.LVL111:
 652:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1213              		.loc 1 652 1 view .LVU395
 1214 003c 10BD     		pop	{r4, pc}
 652:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1215              		.loc 1 652 1 view .LVU396
 1216              		.cfi_endproc
 1217              	.LFE11:
 1219              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1220              		.align	1
 1221              		.global	vEventGroupSetBitsCallback
 1222              		.syntax unified
 1223              		.thumb
 1224              		.thumb_func
 1226              	vEventGroupSetBitsCallback:
ARM GAS  /tmp/ccv1GE4A.s 			page 45


 1227              	.LVL112:
 1228              	.LFB12:
 658:ThirdParty/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoi
 1229              		.loc 1 658 1 is_stmt 1 view -0
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 0
 1232              		@ frame_needed = 0, uses_anonymous_args = 0
 658:ThirdParty/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoi
 1233              		.loc 1 658 1 is_stmt 0 view .LVU398
 1234 0000 08B5     		push	{r3, lr}
 1235              	.LCFI8:
 1236              		.cfi_def_cfa_offset 8
 1237              		.cfi_offset 3, -8
 1238              		.cfi_offset 14, -4
 659:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 1239              		.loc 1 659 2 is_stmt 1 view .LVU399
 659:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 1240              		.loc 1 659 11 is_stmt 0 view .LVU400
 1241 0002 FFF7FEFF 		bl	xEventGroupSetBits
 1242              	.LVL113:
 660:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1243              		.loc 1 660 1 view .LVU401
 1244 0006 08BD     		pop	{r3, pc}
 1245              		.cfi_endproc
 1246              	.LFE12:
 1248              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 1249              		.align	1
 1250              		.global	vEventGroupClearBitsCallback
 1251              		.syntax unified
 1252              		.thumb
 1253              		.thumb_func
 1255              	vEventGroupClearBitsCallback:
 1256              	.LVL114:
 1257              	.LFB13:
 666:ThirdParty/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't 
 1258              		.loc 1 666 1 is_stmt 1 view -0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
 666:ThirdParty/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't 
 1262              		.loc 1 666 1 is_stmt 0 view .LVU403
 1263 0000 08B5     		push	{r3, lr}
 1264              	.LCFI9:
 1265              		.cfi_def_cfa_offset 8
 1266              		.cfi_offset 3, -8
 1267              		.cfi_offset 14, -4
 667:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 1268              		.loc 1 667 2 is_stmt 1 view .LVU404
 667:ThirdParty/FreeRTOS/Source/event_groups.c **** }
 1269              		.loc 1 667 11 is_stmt 0 view .LVU405
 1270 0002 FFF7FEFF 		bl	xEventGroupClearBits
 1271              	.LVL115:
 668:ThirdParty/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1272              		.loc 1 668 1 view .LVU406
 1273 0006 08BD     		pop	{r3, pc}
 1274              		.cfi_endproc
 1275              	.LFE13:
ARM GAS  /tmp/ccv1GE4A.s 			page 46


 1277              		.text
 1278              	.Letext0:
 1279              		.file 3 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 1280              		.file 4 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 1281              		.file 5 "ThirdParty/FreeRTOS/Source/include/list.h"
 1282              		.file 6 "ThirdParty/FreeRTOS/Source/include/event_groups.h"
 1283              		.file 7 "ThirdParty/FreeRTOS/Source/include/task.h"
 1284              		.file 8 "ThirdParty/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccv1GE4A.s 			page 47


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccv1GE4A.s:20     .text.prvTestWaitCondition:0000000000000000 $t
     /tmp/ccv1GE4A.s:25     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/ccv1GE4A.s:78     .text.xEventGroupCreate:0000000000000000 $t
     /tmp/ccv1GE4A.s:84     .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/ccv1GE4A.s:125    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/ccv1GE4A.s:131    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/ccv1GE4A.s:467    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/ccv1GE4A.s:473    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/ccv1GE4A.s:591    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/ccv1GE4A.s:597    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/ccv1GE4A.s:658    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/ccv1GE4A.s:664    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/ccv1GE4A.s:857    .text.xEventGroupSync:0000000000000000 $t
     /tmp/ccv1GE4A.s:863    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/ccv1GE4A.s:1132   .text.vEventGroupDelete:0000000000000000 $t
     /tmp/ccv1GE4A.s:1138   .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/ccv1GE4A.s:1220   .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/ccv1GE4A.s:1226   .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/ccv1GE4A.s:1249   .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/ccv1GE4A.s:1255   .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback

UNDEFINED SYMBOLS
pvPortMalloc
vListInitialise
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vTaskPlaceOnUnorderedEventList
vPortEnterCritical
vPortExitCritical
vTaskRemoveFromUnorderedEventList
vPortFree
