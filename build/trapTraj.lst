ARM GAS  /tmp/ccaWzqeK.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"trapTraj.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._Z9sign_hardf,"ax",%progbits
  20              		.align	1
  21              		.global	_Z9sign_hardf
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_Z9sign_hardf:
  27              		.fnstart
  28              	.LVL0:
  29              	.LFB5158:
  30              		.file 1 "MotorControl/trapTraj.cpp"
   1:MotorControl/trapTraj.cpp **** #include <cmath>
   2:MotorControl/trapTraj.cpp **** #include "odrive_main.h"
   3:MotorControl/trapTraj.cpp **** #include "utils.hpp"
   4:MotorControl/trapTraj.cpp **** 
   5:MotorControl/trapTraj.cpp **** // A sign function where input 0 has positive sign (not 0)
   6:MotorControl/trapTraj.cpp **** float sign_hard(float val) {
  31              		.loc 1 6 28 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  36              		.loc 1 6 28 is_stmt 0 view .LVU1
  37 0000 82B0     		sub	sp, sp, #8
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40 0002 8DED010A 		vstr.32	s0, [sp, #4]
   7:MotorControl/trapTraj.cpp ****     return (std::signbit(val)) ? -1.0f : 1.0f;
  41              		.loc 1 7 5 is_stmt 1 view .LVU2
  42              	.LVL1:
  43              	.LBB27:
  44              	.LBI27:
  45              		.file 2 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // -*- C++ -*- C forwarding header.
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // software; you can redistribute it and/or modify it under the
ARM GAS  /tmp/ccaWzqeK.s 			page 2


   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** /** @file include/cmath
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  as macros in C).
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  */
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** //
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // ISO C++ 14882: 26.5  C library
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** //
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #pragma GCC system_header
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <bits/c++config.h>
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <bits/cpp_type_traits.h>
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <ext/type_traits.h>
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include_next <math.h>
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <bits/std_abs.h>
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef _GLIBCXX_CMATH
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #define _GLIBCXX_CMATH 1
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef div
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef acos
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef asin
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef atan
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef atan2
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef ceil
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef cos
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef cosh
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef exp
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fabs
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef floor
ARM GAS  /tmp/ccaWzqeK.s 			page 3


  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fmod
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef frexp
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef ldexp
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log10
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef modf
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef pow
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef sin
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef sinh
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef sqrt
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef tan
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef tanh
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** extern "C++"
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** {
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** {
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::acos;
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   acos(float __x)
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_acosf(__x); }
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   acos(long double __x)
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_acosl(__x); }
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     acos(_Tp __x)
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_acos(__x); }
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::asin;
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   asin(float __x)
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_asinf(__x); }
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   asin(long double __x)
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_asinl(__x); }
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     asin(_Tp __x)
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_asin(__x); }
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
ARM GAS  /tmp/ccaWzqeK.s 			page 4


 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::atan;
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan(float __x)
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atanf(__x); }
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan(long double __x)
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atanl(__x); }
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     atan(_Tp __x)
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_atan(__x); }
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::atan2;
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan2(float __y, float __x)
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atan2f(__y, __x); }
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan2(long double __y, long double __x)
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atan2l(__y, __x); }
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     atan2(_Tp __y, _Up __x)
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return atan2(__type(__y), __type(__x));
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::ceil;
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ceil(float __x)
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ceilf(__x); }
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ceil(long double __x)
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ceill(__x); }
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     ceil(_Tp __x)
ARM GAS  /tmp/ccaWzqeK.s 			page 5


 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_ceil(__x); }
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::cos;
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cos(float __x)
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_cosf(__x); }
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cos(long double __x)
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_cosl(__x); }
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     cos(_Tp __x)
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_cos(__x); }
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::cosh;
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cosh(float __x)
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_coshf(__x); }
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cosh(long double __x)
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_coshl(__x); }
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     cosh(_Tp __x)
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_cosh(__x); }
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::exp;
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   exp(float __x)
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_expf(__x); }
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   exp(long double __x)
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_expl(__x); }
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     exp(_Tp __x)
ARM GAS  /tmp/ccaWzqeK.s 			page 6


 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_exp(__x); }
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fabs;
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fabs(float __x)
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fabsf(__x); }
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fabs(long double __x)
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fabsl(__x); }
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     fabs(_Tp __x)
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_fabs(__x); }
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::floor;
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   floor(float __x)
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_floorf(__x); }
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   floor(long double __x)
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_floorl(__x); }
 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     floor(_Tp __x)
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_floor(__x); }
 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fmod;
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fmod(float __x, float __y)
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fmodf(__x, __y); }
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fmod(long double __x, long double __y)
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fmodl(__x, __y); }
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     fmod(_Tp __x, _Up __y)
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
ARM GAS  /tmp/ccaWzqeK.s 			page 7


 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return fmod(__type(__x), __type(__y));
 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::frexp;
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline float
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   frexp(float __x, int* __exp)
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_frexpf(__x, __exp); }
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline long double
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   frexp(long double __x, int* __exp)
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_frexpl(__x, __exp); }
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     frexp(_Tp __x, int* __exp)
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_frexp(__x, __exp); }
 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::ldexp;
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ldexp(float __x, int __exp)
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ldexpf(__x, __exp); }
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ldexp(long double __x, int __exp)
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ldexpl(__x, __exp); }
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     ldexp(_Tp __x, int __exp)
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_ldexp(__x, __exp); }
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log;
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log(float __x)
 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_logf(__x); }
 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log(long double __x)
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_logl(__x); }
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
ARM GAS  /tmp/ccaWzqeK.s 			page 8


 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     log(_Tp __x)
 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_log(__x); }
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log10;
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log10(float __x)
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_log10f(__x); }
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log10(long double __x)
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_log10l(__x); }
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     log10(_Tp __x)
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_log10(__x); }
 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::modf;
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline float
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   modf(float __x, float* __iptr)
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_modff(__x, __iptr); }
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline long double
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   modf(long double __x, long double* __iptr)
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_modfl(__x, __iptr); }
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::pow;
 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(float __x, float __y)
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powf(__x, __y); }
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(long double __x, long double __y)
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powl(__x, __y); }
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #if __cplusplus < 201103L
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   // DR 550. What should the return type of pow(float,int) be?
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline double
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(double __x, int __i)
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powi(__x, __i); }
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline float
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(float __x, int __n)
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powif(__x, __n); }
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
ARM GAS  /tmp/ccaWzqeK.s 			page 9


 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline long double
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(long double __x, int __n)
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powil(__x, __n); }
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     pow(_Tp __x, _Up __y)
 416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return pow(__type(__x), __type(__y));
 419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::sin;
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sin(float __x)
 426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinf(__x); }
 427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sin(long double __x)
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinl(__x); }
 431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     sin(_Tp __x)
 438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_sin(__x); }
 439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::sinh;
 441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sinh(float __x)
 445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinhf(__x); }
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sinh(long double __x)
 449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinhl(__x); }
 450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     sinh(_Tp __x)
 457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_sinh(__x); }
 458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::sqrt;
 460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
ARM GAS  /tmp/ccaWzqeK.s 			page 10


 463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sqrt(float __x)
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sqrtf(__x); }
 465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sqrt(long double __x)
 468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sqrtl(__x); }
 469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     sqrt(_Tp __x)
 476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_sqrt(__x); }
 477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::tan;
 479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   tan(float __x)
 483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_tanf(__x); }
 484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   tan(long double __x)
 487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_tanl(__x); }
 488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     tan(_Tp __x)
 495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_tan(__x); }
 496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::tanh;
 498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   tanh(float __x)
 502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_tanhf(__x); }
 503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   tanh(long double __x)
 506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_tanhl(__x); }
 507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     tanh(_Tp __x)
 514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_tanh(__x); }
 515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #if _GLIBCXX_USE_C99_MATH
 517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #if !_GLIBCXX_USE_C99_FP_MACROS_DYNAMIC
 518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // These are possible macros imported from C99-land.
ARM GAS  /tmp/ccaWzqeK.s 			page 11


 520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fpclassify
 521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef isfinite
 522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef isinf
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef isnan
 524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef isnormal
 525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef signbit
 526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef isgreater
 527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef isgreaterequal
 528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef isless
 529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef islessequal
 530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef islessgreater
 531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef isunordered
 532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #if __cplusplus >= 201103L
 534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr int
 537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fpclassify(float __x)
 538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
 539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 				FP_SUBNORMAL, FP_ZERO, __x); }
 540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr int
 542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fpclassify(double __x)
 543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
 544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 				FP_SUBNORMAL, FP_ZERO, __x); }
 545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr int
 547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fpclassify(long double __x)
 548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
 549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 				FP_SUBNORMAL, FP_ZERO, __x); }
 550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                               int>::__type
 556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     fpclassify(_Tp __x)
 557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __x != 0 ? FP_NORMAL : FP_ZERO; }
 558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isfinite(float __x)
 563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isfinite(__x); }
 564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isfinite(double __x)
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isfinite(__x); }
 568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isfinite(long double __x)
 571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isfinite(__x); }
 572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
ARM GAS  /tmp/ccaWzqeK.s 			page 12


 577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                               bool>::__type
 578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isfinite(_Tp __x)
 579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return true; }
 580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isinf(float __x)
 585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isinf(__x); }
 586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #if _GLIBCXX_HAVE_OBSOLETE_ISINF \
 588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
 589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::isinf;
 590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #else
 591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isinf(double __x)
 593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isinf(__x); }
 594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isinf(long double __x)
 598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isinf(__x); }
 599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                               bool>::__type
 605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isinf(_Tp __x)
 606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return false; }
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isnan(float __x)
 612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isnan(__x); }
 613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #if _GLIBCXX_HAVE_OBSOLETE_ISNAN \
 615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
 616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::isnan;
 617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #else
 618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isnan(double __x)
 620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isnan(__x); }
 621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isnan(long double __x)
 625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isnan(__x); }
 626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                               bool>::__type
 632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isnan(_Tp __x)
 633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return false; }
ARM GAS  /tmp/ccaWzqeK.s 			page 13


 634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isnormal(float __x)
 639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isnormal(__x); }
 640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isnormal(double __x)
 643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isnormal(__x); }
 644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isnormal(long double __x)
 647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isnormal(__x); }
 648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                               bool>::__type
 654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isnormal(_Tp __x)
 655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __x != 0 ? true : false; }
 656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   // Note: middle-end/36757 is fixed, __builtin_signbit is type-generic.
 660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   signbit(float __x)
  46              		.loc 2 661 3 view .LVU3
  47              	.LBB28:
 662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_signbit(__x); }
  48              		.loc 2 662 5 view .LVU4
  49              		.loc 2 662 29 is_stmt 0 view .LVU5
  50 0006 019B     		ldr	r3, [sp, #4]
  51              	.LVL2:
  52              		.loc 2 662 29 view .LVU6
  53              	.LBE28:
  54              	.LBE27:
  55              		.loc 1 7 32 view .LVU7
  56 0008 002B     		cmp	r3, #0
  57 000a 03DA     		bge	.L3
  58 000c BFEE000A 		vmov.f32	s0, #-1.0e+0
  59              	.LVL3:
  60              	.L1:
   8:MotorControl/trapTraj.cpp **** }
  61              		.loc 1 8 1 view .LVU8
  62 0010 02B0     		add	sp, sp, #8
  63              	.LCFI1:
  64              		.cfi_remember_state
  65              		.cfi_def_cfa_offset 0
  66              	.LVL4:
  67              		.loc 1 8 1 view .LVU9
  68              		@ sp needed
  69 0012 7047     		bx	lr
  70              	.LVL5:
  71              	.L3:
  72              	.LCFI2:
ARM GAS  /tmp/ccaWzqeK.s 			page 14


  73              		.cfi_restore_state
   7:MotorControl/trapTraj.cpp **** }
  74              		.loc 1 7 32 view .LVU10
  75 0014 B7EE000A 		vmov.f32	s0, #1.0e+0
  76              	.LVL6:
   7:MotorControl/trapTraj.cpp **** }
  77              		.loc 1 7 42 view .LVU11
  78 0018 FAE7     		b	.L1
  79              		.cfi_endproc
  80              	.LFE5158:
  81              		.cantunwind
  82              		.fnend
  84              		.section	.text._ZN21TrapezoidalTrajectory15planTrapezoidalEffffff,"ax",%progbits
  85              		.align	1
  86              		.global	_ZN21TrapezoidalTrajectory15planTrapezoidalEffffff
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  91              	_ZN21TrapezoidalTrajectory15planTrapezoidalEffffff:
  92              		.fnstart
  93              	.LVL7:
  94              	.LFB5159:
   9:MotorControl/trapTraj.cpp **** 
  10:MotorControl/trapTraj.cpp **** // Symbol                     Description
  11:MotorControl/trapTraj.cpp **** // Ta, Tv and Td              Duration of the stages of the AL profile
  12:MotorControl/trapTraj.cpp **** // Xi and Vi                  Adapted initial conditions for the AL profile
  13:MotorControl/trapTraj.cpp **** // Xf                         Position set-point
  14:MotorControl/trapTraj.cpp **** // s                          Direction (sign) of the trajectory
  15:MotorControl/trapTraj.cpp **** // Vmax, Amax, Dmax and jmax  Kinematic bounds
  16:MotorControl/trapTraj.cpp **** // Ar, Dr and Vr              Reached values of acceleration and velocity
  17:MotorControl/trapTraj.cpp **** 
  18:MotorControl/trapTraj.cpp **** bool TrapezoidalTrajectory::planTrapezoidal(float Xf, float Xi, float Vi,
  19:MotorControl/trapTraj.cpp ****                                             float Vmax, float Amax, float Dmax) {
  95              		.loc 1 19 81 is_stmt 1 view -0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 24
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		.loc 1 19 81 is_stmt 0 view .LVU13
 100 0000 10B5     		push	{r4, lr}
 101              	.LCFI3:
 102              		.cfi_def_cfa_offset 8
 103              		.cfi_offset 4, -8
 104              		.cfi_offset 14, -4
 105 0002 2DED0A8B 		vpush.64	{d8, d9, d10, d11, d12}
 106              	.LCFI4:
 107              		.cfi_def_cfa_offset 48
 108              		.cfi_offset 80, -48
 109              		.cfi_offset 81, -44
 110              		.cfi_offset 82, -40
 111              		.cfi_offset 83, -36
 112              		.cfi_offset 84, -32
 113              		.cfi_offset 85, -28
 114              		.cfi_offset 86, -24
 115              		.cfi_offset 87, -20
 116              		.cfi_offset 88, -16
 117              		.cfi_offset 89, -12
 118 0006 86B0     		sub	sp, sp, #24
ARM GAS  /tmp/ccaWzqeK.s 			page 15


 119              	.LCFI5:
 120              		.cfi_def_cfa_offset 72
 121 0008 0446     		mov	r4, r0
 122 000a B0EE40AA 		vmov.f32	s20, s0
 123 000e F0EE609A 		vmov.f32	s19, s1
 124 0012 B0EE418A 		vmov.f32	s16, s2
 125 0016 B0EE619A 		vmov.f32	s18, s3
 126 001a B0EE42CA 		vmov.f32	s24, s4
 127 001e F0EE62BA 		vmov.f32	s23, s5
  20:MotorControl/trapTraj.cpp ****     float dX = Xf - Xi;  // Distance to travel
 128              		.loc 1 20 5 is_stmt 1 view .LVU14
 129              		.loc 1 20 11 is_stmt 0 view .LVU15
 130 0022 70EE60AA 		vsub.f32	s21, s0, s1
 131              	.LVL8:
  21:MotorControl/trapTraj.cpp ****     float stop_dist = (Vi * Vi) / (2.0f * Dmax); // Minimum stopping distance
 132              		.loc 1 21 5 is_stmt 1 view .LVU16
 133              		.loc 1 21 27 is_stmt 0 view .LVU17
 134 0026 21EE01BA 		vmul.f32	s22, s2, s2
 135              		.loc 1 21 41 view .LVU18
 136 002a 72EEA27A 		vadd.f32	s15, s5, s5
 137              		.loc 1 21 11 view .LVU19
 138 002e 8BEE270A 		vdiv.f32	s0, s22, s15
 139              	.LVL9:
  22:MotorControl/trapTraj.cpp ****     float dXstop = std::copysign(stop_dist, Vi); // Minimum stopping displacement
 140              		.loc 1 22 5 is_stmt 1 view .LVU20
 141              	.LBB29:
 142              	.LBI29:
 663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   signbit(double __x)
 666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_signbit(__x); }
 667:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 668:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 669:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   signbit(long double __x)
 670:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_signbit(__x); }
 671:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 672:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 673:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 674:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 675:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 676:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                               bool>::__type
 677:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     signbit(_Tp __x)
 678:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __x < 0 ? true : false; }
 679:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 681:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 682:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 683:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isgreater(float __x, float __y)
 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isgreater(__x, __y); }
 685:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 686:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 687:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isgreater(double __x, double __y)
 688:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isgreater(__x, __y); }
 689:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 691:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isgreater(long double __x, long double __y)
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isgreater(__x, __y); }
ARM GAS  /tmp/ccaWzqeK.s 			page 16


 693:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 694:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 695:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 696:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename
 698:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
 699:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 			    && __is_arithmetic<_Up>::__value), bool>::__type
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isgreater(_Tp __x, _Up __y)
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 702:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isgreater(__type(__x), __type(__y));
 704:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 705:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 706:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 707:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 708:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 709:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isgreaterequal(float __x, float __y)
 710:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isgreaterequal(__x, __y); }
 711:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 712:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 713:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isgreaterequal(double __x, double __y)
 714:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isgreaterequal(__x, __y); }
 715:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 716:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 717:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isgreaterequal(long double __x, long double __y)
 718:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isgreaterequal(__x, __y); }
 719:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 720:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 721:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 722:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 723:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename
 724:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
 725:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 			    && __is_arithmetic<_Up>::__value), bool>::__type
 726:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isgreaterequal(_Tp __x, _Up __y)
 727:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 728:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 729:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isgreaterequal(__type(__x), __type(__y));
 730:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 731:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 732:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 733:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 734:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 735:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isless(float __x, float __y)
 736:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isless(__x, __y); }
 737:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 738:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 739:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isless(double __x, double __y)
 740:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isless(__x, __y); }
 741:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 742:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 743:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isless(long double __x, long double __y)
 744:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isless(__x, __y); }
 745:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 746:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 747:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 748:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 749:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename
ARM GAS  /tmp/ccaWzqeK.s 			page 17


 750:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
 751:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 			    && __is_arithmetic<_Up>::__value), bool>::__type
 752:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isless(_Tp __x, _Up __y)
 753:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 754:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 755:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isless(__type(__x), __type(__y));
 756:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 757:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 758:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 759:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 760:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 761:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   islessequal(float __x, float __y)
 762:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_islessequal(__x, __y); }
 763:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 764:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 765:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   islessequal(double __x, double __y)
 766:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_islessequal(__x, __y); }
 767:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 768:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 769:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   islessequal(long double __x, long double __y)
 770:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_islessequal(__x, __y); }
 771:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 772:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 773:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 774:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename
 776:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
 777:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 			    && __is_arithmetic<_Up>::__value), bool>::__type
 778:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     islessequal(_Tp __x, _Up __y)
 779:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 780:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 781:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_islessequal(__type(__x), __type(__y));
 782:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 783:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 784:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 785:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 786:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 787:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   islessgreater(float __x, float __y)
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_islessgreater(__x, __y); }
 789:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   islessgreater(double __x, double __y)
 792:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_islessgreater(__x, __y); }
 793:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 794:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 795:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   islessgreater(long double __x, long double __y)
 796:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_islessgreater(__x, __y); }
 797:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 798:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 799:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 800:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 801:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename
 802:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
 803:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 			    && __is_arithmetic<_Up>::__value), bool>::__type
 804:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     islessgreater(_Tp __x, _Up __y)
 805:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 806:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
ARM GAS  /tmp/ccaWzqeK.s 			page 18


 807:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_islessgreater(__type(__x), __type(__y));
 808:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 809:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 810:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 811:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
 812:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 813:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isunordered(float __x, float __y)
 814:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isunordered(__x, __y); }
 815:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 816:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 817:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isunordered(double __x, double __y)
 818:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isunordered(__x, __y); }
 819:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 820:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr bool
 821:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   isunordered(long double __x, long double __y)
 822:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_isunordered(__x, __y); }
 823:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 824:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 825:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
 826:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 827:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename
 828:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
 829:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 			    && __is_arithmetic<_Up>::__value), bool>::__type
 830:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isunordered(_Tp __x, _Up __y)
 831:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 832:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 833:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isunordered(__type(__x), __type(__y));
 834:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 835:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 836:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 837:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #else
 838:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 839:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 840:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 841:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 842:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     fpclassify(_Tp __f)
 843:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 844:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
 845:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
 846:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 				  FP_SUBNORMAL, FP_ZERO, __type(__f));
 847:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 848:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 849:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 850:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 851:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 852:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isfinite(_Tp __f)
 853:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 854:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
 855:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isfinite(__type(__f));
 856:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 857:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 858:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 859:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 860:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 861:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isinf(_Tp __f)
 862:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 863:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
ARM GAS  /tmp/ccaWzqeK.s 			page 19


 864:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isinf(__type(__f));
 865:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 866:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 867:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 868:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 869:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 870:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isnan(_Tp __f)
 871:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
 873:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isnan(__type(__f));
 874:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 875:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 876:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 877:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 878:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 879:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isnormal(_Tp __f)
 880:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 881:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
 882:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isnormal(__type(__f));
 883:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 884:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 885:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 886:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 887:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 888:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     signbit(_Tp __f)
 889:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 890:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
 891:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_signbit(__type(__f));
 892:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 893:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 894:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 895:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 896:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 897:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isgreater(_Tp __f1, _Tp __f2)
 898:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 899:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
 900:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isgreater(__type(__f1), __type(__f2));
 901:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 902:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 903:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 904:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 905:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 906:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isgreaterequal(_Tp __f1, _Tp __f2)
 907:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 908:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
 909:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isgreaterequal(__type(__f1), __type(__f2));
 910:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 911:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 912:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 913:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 914:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 915:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isless(_Tp __f1, _Tp __f2)
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 917:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
 918:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isless(__type(__f1), __type(__f2));
 919:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 920:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
ARM GAS  /tmp/ccaWzqeK.s 			page 20


 921:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 922:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 923:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 924:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     islessequal(_Tp __f1, _Tp __f2)
 925:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 926:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
 927:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_islessequal(__type(__f1), __type(__f2));
 928:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 929:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 930:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 931:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 932:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 933:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     islessgreater(_Tp __f1, _Tp __f2)
 934:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 935:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
 936:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_islessgreater(__type(__f1), __type(__f2));
 937:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 938:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 939:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 940:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
 941:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 					   int>::__type
 942:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     isunordered(_Tp __f1, _Tp __f2)
 943:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 944:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
 945:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return __builtin_isunordered(__type(__f1), __type(__f2));
 946:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 947:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 948:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif // C++11
 949:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif /* _GLIBCXX_USE_C99_FP_MACROS_DYNAMIC */
 950:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif /* _GLIBCXX_USE_C99_MATH */
 951:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 952:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #if __cplusplus >= 201103L
 953:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 954:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifdef _GLIBCXX_USE_C99_MATH_TR1
 955:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 956:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef acosh
 957:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef acoshf
 958:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef acoshl
 959:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef asinh
 960:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef asinhf
 961:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef asinhl
 962:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef atanh
 963:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef atanhf
 964:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef atanhl
 965:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef cbrt
 966:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef cbrtf
 967:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef cbrtl
 968:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef copysign
 969:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef copysignf
 970:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef copysignl
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef erf
 972:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef erff
 973:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef erfl
 974:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef erfc
 975:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef erfcf
 976:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef erfcl
 977:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef exp2
ARM GAS  /tmp/ccaWzqeK.s 			page 21


 978:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef exp2f
 979:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef exp2l
 980:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef expm1
 981:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef expm1f
 982:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef expm1l
 983:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fdim
 984:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fdimf
 985:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fdiml
 986:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fma
 987:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fmaf
 988:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fmal
 989:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fmax
 990:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fmaxf
 991:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fmaxl
 992:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fmin
 993:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fminf
 994:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fminl
 995:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef hypot
 996:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef hypotf
 997:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef hypotl
 998:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef ilogb
 999:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef ilogbf
1000:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef ilogbl
1001:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef lgamma
1002:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef lgammaf
1003:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef lgammal
1004:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef _GLIBCXX_NO_C99_ROUNDING_FUNCS
1005:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef llrint
1006:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef llrintf
1007:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef llrintl
1008:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef llround
1009:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef llroundf
1010:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef llroundl
1011:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
1012:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log1p
1013:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log1pf
1014:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log1pl
1015:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log2
1016:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log2f
1017:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log2l
1018:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef logb
1019:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef logbf
1020:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef logbl
1021:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef lrint
1022:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef lrintf
1023:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef lrintl
1024:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef lround
1025:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef lroundf
1026:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef lroundl
1027:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nan
1028:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nanf
1029:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nanl
1030:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nearbyint
1031:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nearbyintf
1032:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nearbyintl
1033:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nextafter
1034:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nextafterf
ARM GAS  /tmp/ccaWzqeK.s 			page 22


1035:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nextafterl
1036:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nexttoward
1037:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nexttowardf
1038:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef nexttowardl
1039:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef remainder
1040:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef remainderf
1041:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef remainderl
1042:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef remquo
1043:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef remquof
1044:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef remquol
1045:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef rint
1046:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef rintf
1047:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef rintl
1048:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef round
1049:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef roundf
1050:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef roundl
1051:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef scalbln
1052:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef scalblnf
1053:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef scalblnl
1054:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef scalbn
1055:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef scalbnf
1056:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef scalbnl
1057:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef tgamma
1058:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef tgammaf
1059:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef tgammal
1060:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef trunc
1061:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef truncf
1062:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef truncl
1063:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1064:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   // types
1065:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::double_t;
1066:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::float_t;
1067:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1068:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   // functions
1069:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::acosh;
1070:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::acoshf;
1071:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::acoshl;
1072:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1073:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::asinh;
1074:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::asinhf;
1075:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::asinhl;
1076:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1077:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::atanh;
1078:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::atanhf;
1079:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::atanhl;
1080:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1081:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::cbrt;
1082:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::cbrtf;
1083:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::cbrtl;
1084:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1085:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::copysign;
1086:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::copysignf;
1087:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::copysignl;
1088:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1089:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::erf;
1090:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::erff;
1091:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::erfl;
ARM GAS  /tmp/ccaWzqeK.s 			page 23


1092:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1093:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::erfc;
1094:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::erfcf;
1095:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::erfcl;
1096:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1097:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::exp2;
1098:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::exp2f;
1099:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::exp2l;
1100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::expm1;
1102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::expm1f;
1103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::expm1l;
1104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fdim;
1106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fdimf;
1107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fdiml;
1108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fma;
1110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fmaf;
1111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fmal;
1112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fmax;
1114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fmaxf;
1115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fmaxl;
1116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fmin;
1118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fminf;
1119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fminl;
1120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::hypot;
1122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::hypotf;
1123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::hypotl;
1124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::ilogb;
1126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::ilogbf;
1127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::ilogbl;
1128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::lgamma;
1130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::lgammaf;
1131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::lgammal;
1132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef _GLIBCXX_NO_C99_ROUNDING_FUNCS
1134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::llrint;
1135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::llrintf;
1136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::llrintl;
1137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::llround;
1139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::llroundf;
1140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::llroundl;
1141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
1142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log1p;
1144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log1pf;
1145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log1pl;
1146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log2;
1148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log2f;
ARM GAS  /tmp/ccaWzqeK.s 			page 24


1149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log2l;
1150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::logb;
1152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::logbf;
1153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::logbl;
1154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::lrint;
1156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::lrintf;
1157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::lrintl;
1158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::lround;
1160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::lroundf;
1161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::lroundl;
1162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nan;
1164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nanf;
1165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nanl;
1166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nearbyint;
1168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nearbyintf;
1169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nearbyintl;
1170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nextafter;
1172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nextafterf;
1173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nextafterl;
1174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nexttoward;
1176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nexttowardf;
1177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::nexttowardl;
1178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::remainder;
1180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::remainderf;
1181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::remainderl;
1182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::remquo;
1184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::remquof;
1185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::remquol;
1186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::rint;
1188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::rintf;
1189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::rintl;
1190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::round;
1192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::roundf;
1193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::roundl;
1194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::scalbln;
1196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::scalblnf;
1197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::scalblnl;
1198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::scalbn;
1200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::scalbnf;
1201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::scalbnl;
1202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::tgamma;
1204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::tgammaf;
1205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::tgammal;
ARM GAS  /tmp/ccaWzqeK.s 			page 25


1206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::trunc;
1208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::truncf;
1209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::truncl;
1210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   /// Additional overloads.
1212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
1213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr float
1214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   acosh(float __x)
1215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_acoshf(__x); }
1216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr long double
1218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   acosh(long double __x)
1219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_acoshl(__x); }
1220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
1221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
1223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
1224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
1225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                               double>::__type
1226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     acosh(_Tp __x)
1227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_acosh(__x); }
1228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
1229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
1231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr float
1232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   asinh(float __x)
1233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_asinhf(__x); }
1234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr long double
1236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   asinh(long double __x)
1237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_asinhl(__x); }
1238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
1239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
1241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
1242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
1243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                               double>::__type
1244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     asinh(_Tp __x)
1245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_asinh(__x); }
1246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
1247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
1249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr float
1250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atanh(float __x)
1251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atanhf(__x); }
1252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr long double
1254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atanh(long double __x)
1255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atanhl(__x); }
1256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
1257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
1259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
1260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
1261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                               double>::__type
1262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     atanh(_Tp __x)
ARM GAS  /tmp/ccaWzqeK.s 			page 26


1263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_atanh(__x); }
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
1265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
1267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr float
1268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cbrt(float __x)
1269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_cbrtf(__x); }
1270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr long double
1272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cbrt(long double __x)
1273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_cbrtl(__x); }
1274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
1275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
1277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
1278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
1279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                               double>::__type
1280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     cbrt(_Tp __x)
1281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_cbrt(__x); }
1282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
1283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
1284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
1285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   constexpr float
1286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   copysign(float __x, float __y)
 143              		.loc 2 1286 3 view .LVU21
 144              	.LBB30:
1287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_copysignf(__x, __y); }
 145              		.loc 2 1287 5 view .LVU22
 146              		.loc 2 1287 31 is_stmt 0 view .LVU23
 147 0032 B0EEC00A 		vabs.f32	s0, s0
 148              	.LVL10:
 149              		.loc 2 1287 31 view .LVU24
 150 0036 11EE103A 		vmov	r3, s2	@ int
 151 003a 002B     		cmp	r3, #0
 152 003c 01DA     		bge	.L6
 153 003e B1EE400A 		vneg.f32	s0, s0
 154              	.L6:
 155              	.LVL11:
 156              		.loc 2 1287 31 view .LVU25
 157              	.LBE30:
 158              	.LBE29:
  23:MotorControl/trapTraj.cpp ****     float s = sign_hard(dX - dXstop); // Sign of coast velocity (if any)
 159              		.loc 1 23 5 is_stmt 1 view .LVU26
 160              		.loc 1 23 24 is_stmt 0 view .LVU27
 161 0042 3AEEC00A 		vsub.f32	s0, s21, s0
 162              	.LVL12:
 163              		.loc 1 23 24 view .LVU28
 164 0046 FFF7FEFF 		bl	_Z9sign_hardf
 165              	.LVL13:
 166              		.loc 1 23 24 view .LVU29
 167 004a F0EE408A 		vmov.f32	s17, s0
 168              	.LVL14:
  24:MotorControl/trapTraj.cpp ****     Ar_ = s * Amax;  // Maximum Acceleration (signed)
 169              		.loc 1 24 5 is_stmt 1 view .LVU30
 170              		.loc 1 24 13 is_stmt 0 view .LVU31
 171 004e 60EE0C7A 		vmul.f32	s15, s0, s24
 172              		.loc 1 24 9 view .LVU32
ARM GAS  /tmp/ccaWzqeK.s 			page 27


 173 0052 C4ED077A 		vstr.32	s15, [r4, #28]
  25:MotorControl/trapTraj.cpp ****     Dr_ = -s * Dmax; // Maximum Deceleration (signed)
 174              		.loc 1 25 5 is_stmt 1 view .LVU33
 175              		.loc 1 25 11 is_stmt 0 view .LVU34
 176 0056 B1EE402A 		vneg.f32	s4, s0
 177              		.loc 1 25 14 view .LVU35
 178 005a 60EE6B2A 		vnmul.f32	s5, s0, s23
 179              		.loc 1 25 9 view .LVU36
 180 005e C4ED092A 		vstr.32	s5, [r4, #36]
  26:MotorControl/trapTraj.cpp ****     Vr_ = s * Vmax;  // Maximum Velocity (signed)
 181              		.loc 1 26 5 is_stmt 1 view .LVU37
 182              		.loc 1 26 13 is_stmt 0 view .LVU38
 183 0062 60EE091A 		vmul.f32	s3, s0, s18
 184              		.loc 1 26 9 view .LVU39
 185 0066 C4ED081A 		vstr.32	s3, [r4, #32]
  27:MotorControl/trapTraj.cpp **** 
  28:MotorControl/trapTraj.cpp ****     // If we start with a speed faster than cruising, then we need to decel instead of accel
  29:MotorControl/trapTraj.cpp ****     // aka "double deceleration move" in the paper
  30:MotorControl/trapTraj.cpp ****     if ((s * Vi) > (s * Vr_)) {
 186              		.loc 1 30 5 is_stmt 1 view .LVU40
 187              		.loc 1 30 12 is_stmt 0 view .LVU41
 188 006a 20EE087A 		vmul.f32	s14, s0, s16
 189              		.loc 1 30 23 view .LVU42
 190 006e 61EE807A 		vmul.f32	s15, s3, s0
 191              		.loc 1 30 5 view .LVU43
 192 0072 B4EEE77A 		vcmpe.f32	s14, s15
 193 0076 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 194 007a 03DD     		ble	.L7
  31:MotorControl/trapTraj.cpp ****         Ar_ = -s * Amax;
 195              		.loc 1 31 9 is_stmt 1 view .LVU44
 196              		.loc 1 31 18 is_stmt 0 view .LVU45
 197 007c 22EE0C2A 		vmul.f32	s4, s4, s24
 198              		.loc 1 31 13 view .LVU46
 199 0080 84ED072A 		vstr.32	s4, [r4, #28]
 200              	.L7:
  32:MotorControl/trapTraj.cpp ****     }
  33:MotorControl/trapTraj.cpp **** 
  34:MotorControl/trapTraj.cpp ****     // Time to accel/decel to/from Vr (cruise speed)
  35:MotorControl/trapTraj.cpp ****     Ta_ = (Vr_ - Vi) / Ar_;
 201              		.loc 1 35 5 is_stmt 1 view .LVU47
 202              		.loc 1 35 16 is_stmt 0 view .LVU48
 203 0084 31EEC87A 		vsub.f32	s14, s3, s16
 204              		.loc 1 35 24 view .LVU49
 205 0088 D4ED076A 		vldr.32	s13, [r4, #28]
 206              		.loc 1 35 22 view .LVU50
 207 008c C7EE267A 		vdiv.f32	s15, s14, s13
 208              		.loc 1 35 9 view .LVU51
 209 0090 C4ED0A7A 		vstr.32	s15, [r4, #40]
  36:MotorControl/trapTraj.cpp ****     Td_ = -Vr_ / Dr_;
 210              		.loc 1 36 5 is_stmt 1 view .LVU52
 211              		.loc 1 36 11 is_stmt 0 view .LVU53
 212 0094 B1EE616A 		vneg.f32	s12, s3
 213              		.loc 1 36 16 view .LVU54
 214 0098 86EE227A 		vdiv.f32	s14, s12, s5
 215              		.loc 1 36 9 view .LVU55
 216 009c 84ED0C7A 		vstr.32	s14, [r4, #48]
  37:MotorControl/trapTraj.cpp **** 
ARM GAS  /tmp/ccaWzqeK.s 			page 28


  38:MotorControl/trapTraj.cpp ****     // Integral of velocity ramps over the full accel and decel times to get
  39:MotorControl/trapTraj.cpp ****     // minimum displacement required to reach cuising speed
  40:MotorControl/trapTraj.cpp ****     float dXmin = 0.5f*Ta_*(Vr_ + Vi) + 0.5f*Td_*Vr_;
 217              		.loc 1 40 5 is_stmt 1 view .LVU56
 218              		.loc 1 40 23 is_stmt 0 view .LVU57
 219 00a0 B6EE006A 		vmov.f32	s12, #5.0e-1
 220 00a4 67EE867A 		vmul.f32	s15, s15, s12
 221              		.loc 1 40 33 view .LVU58
 222 00a8 71EE885A 		vadd.f32	s11, s3, s16
 223              		.loc 1 40 27 view .LVU59
 224 00ac 67EEA57A 		vmul.f32	s15, s15, s11
 225              		.loc 1 40 45 view .LVU60
 226 00b0 27EE067A 		vmul.f32	s14, s14, s12
 227              		.loc 1 40 49 view .LVU61
 228 00b4 21EE877A 		vmul.f32	s14, s3, s14
 229              		.loc 1 40 11 view .LVU62
 230 00b8 77EE877A 		vadd.f32	s15, s15, s14
 231              	.LVL15:
  41:MotorControl/trapTraj.cpp **** 
  42:MotorControl/trapTraj.cpp ****     // Are we displacing enough to reach cruising speed?
  43:MotorControl/trapTraj.cpp ****     if (s*dX < s*dXmin) {
 232              		.loc 1 43 5 is_stmt 1 view .LVU63
 233              		.loc 1 43 10 is_stmt 0 view .LVU64
 234 00bc 2AEEA87A 		vmul.f32	s14, s21, s17
 235              		.loc 1 43 17 view .LVU65
 236 00c0 28EEA76A 		vmul.f32	s12, s17, s15
 237              		.loc 1 43 5 view .LVU66
 238 00c4 B4EEC67A 		vcmpe.f32	s14, s12
 239 00c8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 240 00cc 74D5     		bpl	.L20
  44:MotorControl/trapTraj.cpp ****         // Short move (triangle profile)
  45:MotorControl/trapTraj.cpp ****         Vr_ = s * std::sqrt(std::max((Dr_*SQ(Vi) + 2*Ar_*Dr_*dX) / (Dr_ - Ar_), 0.0f));
 241              		.loc 1 45 9 is_stmt 1 view .LVU67
 242              		.loc 1 45 42 is_stmt 0 view .LVU68
 243 00ce 2BEE22BA 		vmul.f32	s22, s22, s5
 244              	.LVL16:
 245              		.loc 1 45 53 view .LVU69
 246 00d2 76EEA67A 		vadd.f32	s15, s13, s13
 247              	.LVL17:
 248              		.loc 1 45 57 view .LVU70
 249 00d6 62EEA77A 		vmul.f32	s15, s5, s15
 250              		.loc 1 45 61 view .LVU71
 251 00da 67EEAAAA 		vmul.f32	s21, s15, s21
 252              	.LVL18:
 253              		.loc 1 45 50 view .LVU72
 254 00de 3BEE2ABA 		vadd.f32	s22, s22, s21
 255              		.loc 1 45 73 view .LVU73
 256 00e2 72EEE62A 		vsub.f32	s5, s5, s13
 257              		.loc 1 45 66 view .LVU74
 258 00e6 CBEE227A 		vdiv.f32	s15, s22, s5
 259 00ea CDED007A 		vstr.32	s15, [sp]
 260              		.loc 1 45 81 view .LVU75
 261 00ee 0023     		movs	r3, #0
 262 00f0 0193     		str	r3, [sp, #4]	@ float
 263              	.LVL19:
 264              	.LBB31:
 265              	.LBI31:
ARM GAS  /tmp/ccaWzqeK.s 			page 29


 266              		.file 3 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
ARM GAS  /tmp/ccaWzqeK.s 			page 30


  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
ARM GAS  /tmp/ccaWzqeK.s 			page 31


 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccaWzqeK.s 			page 32


 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
ARM GAS  /tmp/ccaWzqeK.s 			page 33


 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 267              		.loc 3 254 5 is_stmt 1 view .LVU76
 268              	.LBB32:
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 269              		.loc 3 259 7 is_stmt 0 view .LVU77
 270 00f2 F5EEC07A 		vcmpe.f32	s15, #0
 271 00f6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 272 00fa 57D4     		bmi	.L15
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 273              		.loc 3 261 14 view .LVU78
 274 00fc 6B46     		mov	r3, sp
 275              	.L11:
 276              	.LVL20:
 277              		.loc 3 261 14 view .LVU79
 278              	.LBE32:
 279              	.LBE31:
 280              	.LBB34:
 281              	.LBI34:
 463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sqrtf(__x); }
 282              		.loc 2 463 3 is_stmt 1 view .LVU80
 283              	.LBB35:
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 284              		.loc 2 464 5 view .LVU81
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 285              		.loc 2 464 27 is_stmt 0 view .LVU82
 286 00fe 93ED000A 		vldr.32	s0, [r3]
ARM GAS  /tmp/ccaWzqeK.s 			page 34


 287              	.LVL21:
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 288              		.loc 2 464 27 view .LVU83
 289 0102 FFF7FEFF 		bl	sqrtf
 290              	.LVL22:
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 291              		.loc 2 464 27 view .LVU84
 292              	.LBE35:
 293              	.LBE34:
 294              		.loc 1 45 17 view .LVU85
 295 0106 68EE808A 		vmul.f32	s17, s17, s0
 296              	.LVL23:
 297              		.loc 1 45 13 view .LVU86
 298 010a C4ED088A 		vstr.32	s17, [r4, #32]
  46:MotorControl/trapTraj.cpp ****         Ta_ = std::max(0.0f, (Vr_ - Vi) / Ar_);
 299              		.loc 1 46 9 is_stmt 1 view .LVU87
 300              		.loc 1 46 24 is_stmt 0 view .LVU88
 301 010e 0023     		movs	r3, #0
 302 0110 0293     		str	r3, [sp, #8]	@ float
 303              		.loc 1 46 35 view .LVU89
 304 0112 78EEC86A 		vsub.f32	s13, s17, s16
 305              		.loc 1 46 43 view .LVU90
 306 0116 94ED077A 		vldr.32	s14, [r4, #28]
 307              		.loc 1 46 41 view .LVU91
 308 011a C6EE877A 		vdiv.f32	s15, s13, s14
 309 011e CDED037A 		vstr.32	s15, [sp, #12]
 310              	.LVL24:
 311              	.LBB36:
 312              	.LBI36:
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 313              		.loc 3 254 5 is_stmt 1 view .LVU92
 314              	.LBB37:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 315              		.loc 3 259 7 is_stmt 0 view .LVU93
 316 0122 F5EEC07A 		vcmpe.f32	s15, #0
 317 0126 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 318 012a 41DC     		bgt	.L16
 319              		.loc 3 261 14 view .LVU94
 320 012c 02AB     		add	r3, sp, #8
 321              	.LVL25:
 322              	.L12:
 323              		.loc 3 261 14 view .LVU95
 324              	.LBE37:
 325              	.LBE36:
 326              		.loc 1 46 23 view .LVU96
 327 012e 1B68     		ldr	r3, [r3]	@ float
 328              		.loc 1 46 13 view .LVU97
 329 0130 A362     		str	r3, [r4, #40]	@ float
  47:MotorControl/trapTraj.cpp ****         Td_ = std::max(0.0f, -Vr_ / Dr_);
 330              		.loc 1 47 9 is_stmt 1 view .LVU98
 331              		.loc 1 47 24 is_stmt 0 view .LVU99
 332 0132 0023     		movs	r3, #0
 333 0134 0493     		str	r3, [sp, #16]	@ float
 334              		.loc 1 47 30 view .LVU100
 335 0136 F1EE688A 		vneg.f32	s17, s17
 336              		.loc 1 47 37 view .LVU101
 337 013a 94ED097A 		vldr.32	s14, [r4, #36]
ARM GAS  /tmp/ccaWzqeK.s 			page 35


 338              		.loc 1 47 35 view .LVU102
 339 013e C8EE877A 		vdiv.f32	s15, s17, s14
 340 0142 CDED057A 		vstr.32	s15, [sp, #20]
 341              	.LVL26:
 342              	.LBB39:
 343              	.LBI39:
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 344              		.loc 3 254 5 is_stmt 1 view .LVU103
 345              	.LBB40:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 346              		.loc 3 259 7 is_stmt 0 view .LVU104
 347 0146 F5EEC07A 		vcmpe.f32	s15, #0
 348 014a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 349 014e 31DC     		bgt	.L17
 350              		.loc 3 261 14 view .LVU105
 351 0150 04AB     		add	r3, sp, #16
 352              	.LVL27:
 353              	.L13:
 354              		.loc 3 261 14 view .LVU106
 355              	.LBE40:
 356              	.LBE39:
 357              		.loc 1 47 23 view .LVU107
 358 0152 1B68     		ldr	r3, [r3]	@ float
 359              		.loc 1 47 13 view .LVU108
 360 0154 2363     		str	r3, [r4, #48]	@ float
  48:MotorControl/trapTraj.cpp ****         Tv_ = 0.0f;
 361              		.loc 1 48 9 is_stmt 1 view .LVU109
 362              		.loc 1 48 13 is_stmt 0 view .LVU110
 363 0156 0023     		movs	r3, #0
 364 0158 E362     		str	r3, [r4, #44]	@ float
 365              	.L14:
  49:MotorControl/trapTraj.cpp ****     } else {
  50:MotorControl/trapTraj.cpp ****         // Long move (trapezoidal profile)
  51:MotorControl/trapTraj.cpp ****         Tv_ = (dX - dXmin) / Vr_;
  52:MotorControl/trapTraj.cpp ****     }
  53:MotorControl/trapTraj.cpp **** 
  54:MotorControl/trapTraj.cpp ****     // Fill in the rest of the values used at evaluation-time
  55:MotorControl/trapTraj.cpp ****     Tf_ = Ta_ + Tv_ + Td_;
 366              		.loc 1 55 5 is_stmt 1 view .LVU111
 367              		.loc 1 55 11 is_stmt 0 view .LVU112
 368 015a D4ED0A7A 		vldr.32	s15, [r4, #40]
 369              		.loc 1 55 17 view .LVU113
 370 015e 94ED0B7A 		vldr.32	s14, [r4, #44]
 371              		.loc 1 55 15 view .LVU114
 372 0162 37EE877A 		vadd.f32	s14, s15, s14
 373              		.loc 1 55 23 view .LVU115
 374 0166 D4ED0C6A 		vldr.32	s13, [r4, #48]
 375              		.loc 1 55 21 view .LVU116
 376 016a 37EE267A 		vadd.f32	s14, s14, s13
 377              		.loc 1 55 9 view .LVU117
 378 016e 84ED0D7A 		vstr.32	s14, [r4, #52]
  56:MotorControl/trapTraj.cpp ****     Xi_ = Xi;
 379              		.loc 1 56 5 is_stmt 1 view .LVU118
 380              		.loc 1 56 9 is_stmt 0 view .LVU119
 381 0172 C4ED049A 		vstr.32	s19, [r4, #16]
  57:MotorControl/trapTraj.cpp ****     Xf_ = Xf;
 382              		.loc 1 57 5 is_stmt 1 view .LVU120
ARM GAS  /tmp/ccaWzqeK.s 			page 36


 383              		.loc 1 57 9 is_stmt 0 view .LVU121
 384 0176 84ED05AA 		vstr.32	s20, [r4, #20]
  58:MotorControl/trapTraj.cpp ****     Vi_ = Vi;
 385              		.loc 1 58 5 is_stmt 1 view .LVU122
 386              		.loc 1 58 9 is_stmt 0 view .LVU123
 387 017a 84ED068A 		vstr.32	s16, [r4, #24]
  59:MotorControl/trapTraj.cpp ****     yAccel_ = Xi + Vi*Ta_ + 0.5f*Ar_*SQ(Ta_); // pos at end of accel phase
 388              		.loc 1 59 5 is_stmt 1 view .LVU124
 389              		.loc 1 59 22 is_stmt 0 view .LVU125
 390 017e 27EE888A 		vmul.f32	s16, s15, s16
 391              	.LVL28:
 392              		.loc 1 59 18 view .LVU126
 393 0182 38EE298A 		vadd.f32	s16, s16, s19
 394              		.loc 1 59 34 view .LVU127
 395 0186 94ED077A 		vldr.32	s14, [r4, #28]
 396              		.loc 1 59 33 view .LVU128
 397 018a F6EE006A 		vmov.f32	s13, #5.0e-1
 398 018e 27EE267A 		vmul.f32	s14, s14, s13
 399              	.LVL29:
 400              	.LBB42:
 401              	.LBI42:
 402              		.file 4 "./MotorControl/utils.hpp"
   1:./MotorControl/utils.hpp **** #pragma once
   2:./MotorControl/utils.hpp **** 
   3:./MotorControl/utils.hpp **** #include <stdint.h>
   4:./MotorControl/utils.hpp **** #include <limits>
   5:./MotorControl/utils.hpp **** #include <algorithm>
   6:./MotorControl/utils.hpp **** #include <array>
   7:./MotorControl/utils.hpp **** #include <tuple>
   8:./MotorControl/utils.hpp **** #include <cmath>
   9:./MotorControl/utils.hpp **** 
  10:./MotorControl/utils.hpp **** /**
  11:./MotorControl/utils.hpp ****  * @brief Flash size register address
  12:./MotorControl/utils.hpp ****  */
  13:./MotorControl/utils.hpp **** #define ID_FLASH_ADDRESS (0x1FFF7A22)
  14:./MotorControl/utils.hpp **** 
  15:./MotorControl/utils.hpp **** /**
  16:./MotorControl/utils.hpp ****  * @brief Device ID register address
  17:./MotorControl/utils.hpp ****  */
  18:./MotorControl/utils.hpp **** #define ID_DBGMCU_IDCODE (0xE0042000)
  19:./MotorControl/utils.hpp **** 
  20:./MotorControl/utils.hpp **** /**
  21:./MotorControl/utils.hpp ****  * "Returns" the device signature
  22:./MotorControl/utils.hpp ****  *
  23:./MotorControl/utils.hpp ****  * Possible returns:
  24:./MotorControl/utils.hpp ****  *    - 0x0413: STM32F405xx/07xx and STM32F415xx/17xx)
  25:./MotorControl/utils.hpp ****  *    - 0x0419: STM32F42xxx and STM32F43xxx
  26:./MotorControl/utils.hpp ****  *    - 0x0423: STM32F401xB/C
  27:./MotorControl/utils.hpp ****  *    - 0x0433: STM32F401xD/E
  28:./MotorControl/utils.hpp ****  *    - 0x0431: STM32F411xC/E
  29:./MotorControl/utils.hpp ****  *
  30:./MotorControl/utils.hpp ****  * Returned data is in 16-bit mode, but only bits 11:0 are valid, bits 15:12 are always 0.
  31:./MotorControl/utils.hpp ****  * Defined as macro
  32:./MotorControl/utils.hpp ****  */
  33:./MotorControl/utils.hpp **** #define STM_ID_GetSignature() ((*(uint16_t *)(ID_DBGMCU_IDCODE)) & 0x0FFF)
  34:./MotorControl/utils.hpp **** 
  35:./MotorControl/utils.hpp **** /**
ARM GAS  /tmp/ccaWzqeK.s 			page 37


  36:./MotorControl/utils.hpp ****  * "Returns" the device revision
  37:./MotorControl/utils.hpp ****  *
  38:./MotorControl/utils.hpp ****  * Revisions possible:
  39:./MotorControl/utils.hpp ****  *    - 0x1000: Revision A
  40:./MotorControl/utils.hpp ****  *    - 0x1001: Revision Z
  41:./MotorControl/utils.hpp ****  *    - 0x1003: Revision Y
  42:./MotorControl/utils.hpp ****  *    - 0x1007: Revision 1
  43:./MotorControl/utils.hpp ****  *    - 0x2001: Revision 3
  44:./MotorControl/utils.hpp ****  *
  45:./MotorControl/utils.hpp ****  * Returned data is in 16-bit mode.
  46:./MotorControl/utils.hpp ****  */
  47:./MotorControl/utils.hpp **** #define STM_ID_GetRevision() (*(uint16_t *)(ID_DBGMCU_IDCODE + 2))
  48:./MotorControl/utils.hpp **** 
  49:./MotorControl/utils.hpp **** /**
  50:./MotorControl/utils.hpp **** * "Returns" the Flash size
  51:./MotorControl/utils.hpp **** *
  52:./MotorControl/utils.hpp **** * Returned data is in 16-bit mode, returned value is flash size in kB (kilo bytes).
  53:./MotorControl/utils.hpp **** */
  54:./MotorControl/utils.hpp **** #define STM_ID_GetFlashSize() (*(uint16_t *)(ID_FLASH_ADDRESS))
  55:./MotorControl/utils.hpp **** 
  56:./MotorControl/utils.hpp **** #ifdef M_PI
  57:./MotorControl/utils.hpp **** #undef M_PI
  58:./MotorControl/utils.hpp **** #endif
  59:./MotorControl/utils.hpp **** 
  60:./MotorControl/utils.hpp **** // Math Constants
  61:./MotorControl/utils.hpp **** constexpr float M_PI = 3.14159265358979323846f;
  62:./MotorControl/utils.hpp **** constexpr float one_by_sqrt3 = 0.57735026919f;
  63:./MotorControl/utils.hpp **** constexpr float two_by_sqrt3 = 1.15470053838f;
  64:./MotorControl/utils.hpp **** constexpr float sqrt3_by_2 = 0.86602540378f;
  65:./MotorControl/utils.hpp **** 
  66:./MotorControl/utils.hpp **** // Function prototypes for implementations in utils.cpp
  67:./MotorControl/utils.hpp **** std::tuple<float, float, float, bool> SVM(float alpha, float beta);
  68:./MotorControl/utils.hpp **** float fast_atan2(float y, float x);
  69:./MotorControl/utils.hpp **** uint32_t deadline_to_timeout(uint32_t deadline_ms);
  70:./MotorControl/utils.hpp **** uint32_t timeout_to_deadline(uint32_t timeout_ms);
  71:./MotorControl/utils.hpp **** int is_in_the_future(uint32_t time_ms);
  72:./MotorControl/utils.hpp **** uint32_t micros(void);
  73:./MotorControl/utils.hpp **** void delay_us(uint32_t us);
  74:./MotorControl/utils.hpp **** 
  75:./MotorControl/utils.hpp **** extern "C" {
  76:./MotorControl/utils.hpp **** float our_arm_sin_f32(float x);
  77:./MotorControl/utils.hpp **** float our_arm_cos_f32(float x);
  78:./MotorControl/utils.hpp **** }
  79:./MotorControl/utils.hpp **** 
  80:./MotorControl/utils.hpp **** // ----------------
  81:./MotorControl/utils.hpp **** // Inline functions
  82:./MotorControl/utils.hpp **** 
  83:./MotorControl/utils.hpp **** template<typename T>
  84:./MotorControl/utils.hpp **** constexpr T SQ(const T& x){
 403              		.loc 4 84 13 is_stmt 1 view .LVU129
 404              	.LBB43:
  85:./MotorControl/utils.hpp ****     return x * x;
 405              		.loc 4 85 16 is_stmt 0 view .LVU130
 406 0192 67EEA77A 		vmul.f32	s15, s15, s15
 407              	.LVL30:
 408              		.loc 4 85 16 view .LVU131
 409              	.LBE43:
ARM GAS  /tmp/ccaWzqeK.s 			page 38


 410              	.LBE42:
 411              		.loc 1 59 37 view .LVU132
 412 0196 67EE277A 		vmul.f32	s15, s14, s15
 413              		.loc 1 59 27 view .LVU133
 414 019a 38EE278A 		vadd.f32	s16, s16, s15
 415              		.loc 1 59 13 view .LVU134
 416 019e 84ED0E8A 		vstr.32	s16, [r4, #56]
  60:MotorControl/trapTraj.cpp **** 
  61:MotorControl/trapTraj.cpp ****     return true;
 417              		.loc 1 61 5 is_stmt 1 view .LVU135
  62:MotorControl/trapTraj.cpp **** }
 418              		.loc 1 62 1 is_stmt 0 view .LVU136
 419 01a2 0120     		movs	r0, #1
 420 01a4 06B0     		add	sp, sp, #24
 421              	.LCFI6:
 422              		.cfi_remember_state
 423              		.cfi_def_cfa_offset 48
 424              		@ sp needed
 425 01a6 BDEC0A8B 		vldm	sp!, {d8-d12}
 426              	.LCFI7:
 427              		.cfi_restore 88
 428              		.cfi_restore 89
 429              		.cfi_restore 86
 430              		.cfi_restore 87
 431              		.cfi_restore 84
 432              		.cfi_restore 85
 433              		.cfi_restore 82
 434              		.cfi_restore 83
 435              		.cfi_restore 80
 436              		.cfi_restore 81
 437              		.cfi_def_cfa_offset 8
 438              	.LVL31:
 439              		.loc 1 62 1 view .LVU137
 440 01aa 10BD     		pop	{r4, pc}
 441              	.LVL32:
 442              	.L15:
 443              	.LCFI8:
 444              		.cfi_restore_state
 445              	.LBB44:
 446              	.LBB33:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 447              		.loc 3 260 9 view .LVU138
 448 01ac 01AB     		add	r3, sp, #4
 449              	.LVL33:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 450              		.loc 3 260 9 view .LVU139
 451 01ae A6E7     		b	.L11
 452              	.LVL34:
 453              	.L16:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 454              		.loc 3 260 9 view .LVU140
 455              	.LBE33:
 456              	.LBE44:
 457              	.LBB45:
 458              	.LBB38:
 459 01b0 03AB     		add	r3, sp, #12
 460              	.LVL35:
ARM GAS  /tmp/ccaWzqeK.s 			page 39


 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 461              		.loc 3 260 9 view .LVU141
 462 01b2 BCE7     		b	.L12
 463              	.LVL36:
 464              	.L17:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 465              		.loc 3 260 9 view .LVU142
 466              	.LBE38:
 467              	.LBE45:
 468              	.LBB46:
 469              	.LBB41:
 470 01b4 05AB     		add	r3, sp, #20
 471              	.LVL37:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 472              		.loc 3 260 9 view .LVU143
 473 01b6 CCE7     		b	.L13
 474              	.LVL38:
 475              	.L20:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 476              		.loc 3 260 9 view .LVU144
 477              	.LBE41:
 478              	.LBE46:
  51:MotorControl/trapTraj.cpp ****     }
 479              		.loc 1 51 9 is_stmt 1 view .LVU145
  51:MotorControl/trapTraj.cpp ****     }
 480              		.loc 1 51 19 is_stmt 0 view .LVU146
 481 01b8 7AEEE77A 		vsub.f32	s15, s21, s15
 482              	.LVL39:
  51:MotorControl/trapTraj.cpp ****     }
 483              		.loc 1 51 28 view .LVU147
 484 01bc 87EEA17A 		vdiv.f32	s14, s15, s3
  51:MotorControl/trapTraj.cpp ****     }
 485              		.loc 1 51 13 view .LVU148
 486 01c0 84ED0B7A 		vstr.32	s14, [r4, #44]
 487 01c4 C9E7     		b	.L14
 488              		.cfi_endproc
 489              	.LFE5159:
 490              		.cantunwind
 491              		.fnend
 493              		.section	.text._ZN21TrapezoidalTrajectory4evalEf,"ax",%progbits
 494              		.align	1
 495              		.global	_ZN21TrapezoidalTrajectory4evalEf
 496              		.syntax unified
 497              		.thumb
 498              		.thumb_func
 500              	_ZN21TrapezoidalTrajectory4evalEf:
 501              		.fnstart
 502              	.LVL40:
 503              	.LFB5161:
  63:MotorControl/trapTraj.cpp **** 
  64:MotorControl/trapTraj.cpp **** TrapezoidalTrajectory::Step_t TrapezoidalTrajectory::eval(float t) {
 504              		.loc 1 64 68 is_stmt 1 view -0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 40
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508              		@ link register save eliminated.
 509              		.loc 1 64 68 is_stmt 0 view .LVU150
ARM GAS  /tmp/ccaWzqeK.s 			page 40


 510 0000 8AB0     		sub	sp, sp, #40
 511              	.LCFI9:
 512              		.cfi_def_cfa_offset 40
  65:MotorControl/trapTraj.cpp ****     Step_t trajStep;
 513              		.loc 1 65 5 is_stmt 1 view .LVU151
  66:MotorControl/trapTraj.cpp ****     if (t < 0.0f) {  // Initial Condition
 514              		.loc 1 66 5 view .LVU152
 515              	.LBB47:
 516 0002 B5EEC00A 		vcmpe.f32	s0, #0
 517 0006 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 518 000a 25D4     		bmi	.L43
 519              	.LBE47:
  67:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xi_;
  68:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Vi_;
  69:MotorControl/trapTraj.cpp ****         trajStep.Ydd = 0.0f;
  70:MotorControl/trapTraj.cpp ****     } else if (t < Ta_) {  // Accelerating
 520              		.loc 1 70 12 view .LVU153
 521              	.LBB59:
 522              	.LBB48:
 523              		.loc 1 70 20 is_stmt 0 view .LVU154
 524 000c D0ED0A7A 		vldr.32	s15, [r0, #40]
 525              		.loc 1 70 12 view .LVU155
 526 0010 F4EEC07A 		vcmpe.f32	s15, s0
 527 0014 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 528 0018 32DD     		ble	.L39
  71:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xi_ + Vi_*t + 0.5f*Ar_*SQ(t);
 529              		.loc 1 71 9 is_stmt 1 view .LVU156
 530              		.loc 1 71 24 is_stmt 0 view .LVU157
 531 001a D0ED047A 		vldr.32	s15, [r0, #16]
 532              		.loc 1 71 30 view .LVU158
 533 001e D0ED066A 		vldr.32	s13, [r0, #24]
 534              		.loc 1 71 33 view .LVU159
 535 0022 26EE807A 		vmul.f32	s14, s13, s0
 536              		.loc 1 71 28 view .LVU160
 537 0026 77EE877A 		vadd.f32	s15, s15, s14
 538              		.loc 1 71 43 view .LVU161
 539 002a 90ED076A 		vldr.32	s12, [r0, #28]
 540              		.loc 1 71 42 view .LVU162
 541 002e B6EE007A 		vmov.f32	s14, #5.0e-1
 542 0032 26EE077A 		vmul.f32	s14, s12, s14
 543              	.LVL41:
 544              	.LBB49:
 545              	.LBI49:
  84:./MotorControl/utils.hpp ****     return x * x;
 546              		.loc 4 84 13 is_stmt 1 view .LVU163
 547              	.LBB50:
 548              		.loc 4 85 16 is_stmt 0 view .LVU164
 549 0036 60EE005A 		vmul.f32	s11, s0, s0
 550              	.LVL42:
 551              		.loc 4 85 16 view .LVU165
 552              	.LBE50:
 553              	.LBE49:
 554              		.loc 1 71 46 view .LVU166
 555 003a 27EE257A 		vmul.f32	s14, s14, s11
 556              		.loc 1 71 36 view .LVU167
 557 003e 77EE877A 		vadd.f32	s15, s15, s14
 558              		.loc 1 71 22 view .LVU168
ARM GAS  /tmp/ccaWzqeK.s 			page 41


 559 0042 CDED047A 		vstr.32	s15, [sp, #16]
  72:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Vi_ + Ar_*t;
 560              		.loc 1 72 9 is_stmt 1 view .LVU169
 561              		.loc 1 72 33 is_stmt 0 view .LVU170
 562 0046 26EE000A 		vmul.f32	s0, s12, s0
 563              	.LVL43:
 564              		.loc 1 72 28 view .LVU171
 565 004a 36EE800A 		vadd.f32	s0, s13, s0
 566              		.loc 1 72 22 view .LVU172
 567 004e 8DED050A 		vstr.32	s0, [sp, #20]
  73:MotorControl/trapTraj.cpp ****         trajStep.Ydd = Ar_;
 568              		.loc 1 73 9 is_stmt 1 view .LVU173
 569              		.loc 1 73 22 is_stmt 0 view .LVU174
 570 0052 8DED066A 		vstr.32	s12, [sp, #24]
 571 0056 05E0     		b	.L25
 572              	.LVL44:
 573              	.L43:
 574              		.loc 1 73 22 view .LVU175
 575              	.LBE48:
  67:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Vi_;
 576              		.loc 1 67 9 is_stmt 1 view .LVU176
  67:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Vi_;
 577              		.loc 1 67 24 is_stmt 0 view .LVU177
 578 0058 0369     		ldr	r3, [r0, #16]	@ float
  67:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Vi_;
 579              		.loc 1 67 22 view .LVU178
 580 005a 0493     		str	r3, [sp, #16]	@ float
  68:MotorControl/trapTraj.cpp ****         trajStep.Ydd = 0.0f;
 581              		.loc 1 68 9 is_stmt 1 view .LVU179
  68:MotorControl/trapTraj.cpp ****         trajStep.Ydd = 0.0f;
 582              		.loc 1 68 24 is_stmt 0 view .LVU180
 583 005c 8369     		ldr	r3, [r0, #24]	@ float
  68:MotorControl/trapTraj.cpp ****         trajStep.Ydd = 0.0f;
 584              		.loc 1 68 22 view .LVU181
 585 005e 0593     		str	r3, [sp, #20]	@ float
  69:MotorControl/trapTraj.cpp ****     } else if (t < Ta_) {  // Accelerating
 586              		.loc 1 69 9 is_stmt 1 view .LVU182
  69:MotorControl/trapTraj.cpp ****     } else if (t < Ta_) {  // Accelerating
 587              		.loc 1 69 22 is_stmt 0 view .LVU183
 588 0060 0023     		movs	r3, #0
 589 0062 0693     		str	r3, [sp, #24]	@ float
 590              	.LVL45:
 591              	.L25:
  69:MotorControl/trapTraj.cpp ****     } else if (t < Ta_) {  // Accelerating
 592              		.loc 1 69 22 view .LVU184
 593              	.LBE59:
  74:MotorControl/trapTraj.cpp ****     } else if (t < Ta_ + Tv_) {  // Coasting
  75:MotorControl/trapTraj.cpp ****         trajStep.Y   = yAccel_ + Vr_*(t - Ta_);
  76:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Vr_;
  77:MotorControl/trapTraj.cpp ****         trajStep.Ydd = 0.0f;
  78:MotorControl/trapTraj.cpp ****     } else if (t < Tf_) {  // Deceleration
  79:MotorControl/trapTraj.cpp ****         float td     = t - Tf_;
  80:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_ + 0.5f*Dr_*SQ(td);
  81:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Dr_*td;
  82:MotorControl/trapTraj.cpp ****         trajStep.Ydd = Dr_;
  83:MotorControl/trapTraj.cpp ****     } else if (t >= Tf_) {  // Final Condition
  84:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_;
ARM GAS  /tmp/ccaWzqeK.s 			page 42


  85:MotorControl/trapTraj.cpp ****         trajStep.Yd  = 0.0f;
  86:MotorControl/trapTraj.cpp ****         trajStep.Ydd = 0.0f;
  87:MotorControl/trapTraj.cpp ****     } else {
  88:MotorControl/trapTraj.cpp ****         // TODO: report error here
  89:MotorControl/trapTraj.cpp ****     }
  90:MotorControl/trapTraj.cpp **** 
  91:MotorControl/trapTraj.cpp ****     return trajStep;
 594              		.loc 1 91 5 is_stmt 1 view .LVU185
 595              		.loc 1 91 12 is_stmt 0 view .LVU186
 596 0064 04AB     		add	r3, sp, #16
 597 0066 93E80700 		ldm	r3, {r0, r1, r2}
 598              	.LVL46:
 599              		.loc 1 91 12 view .LVU187
 600 006a 0AAB     		add	r3, sp, #40
 601 006c 03E90700 		stmdb	r3, {r0, r1, r2}
  92:MotorControl/trapTraj.cpp **** }...
 602              		.loc 1 92 1 view .LVU188
 603 0070 9DED070A 		vldr.32	s0, [sp, #28]
 604 0074 DDED080A 		vldr.32	s1, [sp, #32]
 605 0078 9DED091A 		vldr.32	s2, [sp, #36]
 606 007c 0AB0     		add	sp, sp, #40
 607              	.LCFI10:
 608              		.cfi_remember_state
 609              		.cfi_def_cfa_offset 0
 610              		@ sp needed
 611 007e 7047     		bx	lr
 612              	.LVL47:
 613              	.L39:
 614              	.LCFI11:
 615              		.cfi_restore_state
  74:MotorControl/trapTraj.cpp ****     } else if (t < Ta_ + Tv_) {  // Coasting
 616              		.loc 1 74 12 is_stmt 1 view .LVU189
 617              	.LBB60:
 618              	.LBB57:
 619              	.LBB51:
  74:MotorControl/trapTraj.cpp ****     } else if (t < Ta_ + Tv_) {  // Coasting
 620              		.loc 1 74 26 is_stmt 0 view .LVU190
 621 0080 90ED0B7A 		vldr.32	s14, [r0, #44]
  74:MotorControl/trapTraj.cpp ****     } else if (t < Ta_ + Tv_) {  // Coasting
 622              		.loc 1 74 24 view .LVU191
 623 0084 37EE877A 		vadd.f32	s14, s15, s14
  74:MotorControl/trapTraj.cpp ****     } else if (t < Ta_ + Tv_) {  // Coasting
 624              		.loc 1 74 12 view .LVU192
 625 0088 B4EEC07A 		vcmpe.f32	s14, s0
 626 008c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 627 0090 10DD     		ble	.L40
  75:MotorControl/trapTraj.cpp ****         trajStep.Y   = yAccel_ + Vr_*(t - Ta_);
 628              		.loc 1 75 9 is_stmt 1 view .LVU193
  75:MotorControl/trapTraj.cpp ****         trajStep.Y   = yAccel_ + Vr_*(t - Ta_);
 629              		.loc 1 75 24 is_stmt 0 view .LVU194
 630 0092 90ED0E7A 		vldr.32	s14, [r0, #56]
  75:MotorControl/trapTraj.cpp ****         trajStep.Y   = yAccel_ + Vr_*(t - Ta_);
 631              		.loc 1 75 34 view .LVU195
 632 0096 D0ED086A 		vldr.32	s13, [r0, #32]
  75:MotorControl/trapTraj.cpp ****         trajStep.Y   = yAccel_ + Vr_*(t - Ta_);
 633              		.loc 1 75 41 view .LVU196
 634 009a 30EE670A 		vsub.f32	s0, s0, s15
ARM GAS  /tmp/ccaWzqeK.s 			page 43


 635              	.LVL48:
  75:MotorControl/trapTraj.cpp ****         trajStep.Y   = yAccel_ + Vr_*(t - Ta_);
 636              		.loc 1 75 37 view .LVU197
 637 009e 26EE800A 		vmul.f32	s0, s13, s0
  75:MotorControl/trapTraj.cpp ****         trajStep.Y   = yAccel_ + Vr_*(t - Ta_);
 638              		.loc 1 75 32 view .LVU198
 639 00a2 37EE000A 		vadd.f32	s0, s14, s0
  75:MotorControl/trapTraj.cpp ****         trajStep.Y   = yAccel_ + Vr_*(t - Ta_);
 640              		.loc 1 75 22 view .LVU199
 641 00a6 8DED040A 		vstr.32	s0, [sp, #16]
  76:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Vr_;
 642              		.loc 1 76 9 is_stmt 1 view .LVU200
  76:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Vr_;
 643              		.loc 1 76 22 is_stmt 0 view .LVU201
 644 00aa CDED056A 		vstr.32	s13, [sp, #20]
  77:MotorControl/trapTraj.cpp ****         trajStep.Ydd = 0.0f;
 645              		.loc 1 77 9 is_stmt 1 view .LVU202
  77:MotorControl/trapTraj.cpp ****         trajStep.Ydd = 0.0f;
 646              		.loc 1 77 22 is_stmt 0 view .LVU203
 647 00ae 0023     		movs	r3, #0
 648 00b0 0693     		str	r3, [sp, #24]	@ float
 649 00b2 D7E7     		b	.L25
 650              	.LVL49:
 651              	.L40:
  77:MotorControl/trapTraj.cpp ****         trajStep.Ydd = 0.0f;
 652              		.loc 1 77 22 view .LVU204
 653              	.LBE51:
 654              	.LBE57:
 655              	.LBE60:
  78:MotorControl/trapTraj.cpp ****     } else if (t < Tf_) {  // Deceleration
 656              		.loc 1 78 12 is_stmt 1 view .LVU205
 657              	.LBB61:
 658              	.LBB58:
 659              	.LBB56:
 660              	.LBB52:
  78:MotorControl/trapTraj.cpp ****     } else if (t < Tf_) {  // Deceleration
 661              		.loc 1 78 20 is_stmt 0 view .LVU206
 662 00b4 D0ED0D7A 		vldr.32	s15, [r0, #52]
  78:MotorControl/trapTraj.cpp ****     } else if (t < Tf_) {  // Deceleration
 663              		.loc 1 78 12 view .LVU207
 664 00b8 F4EEC07A 		vcmpe.f32	s15, s0
 665 00bc F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 666 00c0 18DD     		ble	.L41
 667              	.LBB53:
  79:MotorControl/trapTraj.cpp ****         float td     = t - Tf_;
 668              		.loc 1 79 9 is_stmt 1 view .LVU208
  79:MotorControl/trapTraj.cpp ****         float td     = t - Tf_;
 669              		.loc 1 79 26 is_stmt 0 view .LVU209
 670 00c2 30EE670A 		vsub.f32	s0, s0, s15
 671              	.LVL50:
  80:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_ + 0.5f*Dr_*SQ(td);
 672              		.loc 1 80 9 is_stmt 1 view .LVU210
  80:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_ + 0.5f*Dr_*SQ(td);
 673              		.loc 1 80 24 is_stmt 0 view .LVU211
 674 00c6 D0ED056A 		vldr.32	s13, [r0, #20]
  80:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_ + 0.5f*Dr_*SQ(td);
 675              		.loc 1 80 35 view .LVU212
ARM GAS  /tmp/ccaWzqeK.s 			page 44


 676 00ca 90ED097A 		vldr.32	s14, [r0, #36]
  80:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_ + 0.5f*Dr_*SQ(td);
 677              		.loc 1 80 34 view .LVU213
 678 00ce F6EE007A 		vmov.f32	s15, #5.0e-1
 679 00d2 67EE277A 		vmul.f32	s15, s14, s15
 680              	.LVL51:
 681              	.LBB54:
 682              	.LBI54:
  84:./MotorControl/utils.hpp ****     return x * x;
 683              		.loc 4 84 13 is_stmt 1 view .LVU214
 684              	.LBB55:
 685              		.loc 4 85 16 is_stmt 0 view .LVU215
 686 00d6 20EE006A 		vmul.f32	s12, s0, s0
 687              	.LVL52:
 688              		.loc 4 85 16 view .LVU216
 689              	.LBE55:
 690              	.LBE54:
  80:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_ + 0.5f*Dr_*SQ(td);
 691              		.loc 1 80 38 view .LVU217
 692 00da 67EE867A 		vmul.f32	s15, s15, s12
  80:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_ + 0.5f*Dr_*SQ(td);
 693              		.loc 1 80 28 view .LVU218
 694 00de 76EEA77A 		vadd.f32	s15, s13, s15
  80:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_ + 0.5f*Dr_*SQ(td);
 695              		.loc 1 80 22 view .LVU219
 696 00e2 CDED047A 		vstr.32	s15, [sp, #16]
  81:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Dr_*td;
 697              		.loc 1 81 9 is_stmt 1 view .LVU220
  81:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Dr_*td;
 698              		.loc 1 81 27 is_stmt 0 view .LVU221
 699 00e6 20EE070A 		vmul.f32	s0, s0, s14
 700              	.LVL53:
  81:MotorControl/trapTraj.cpp ****         trajStep.Yd  = Dr_*td;
 701              		.loc 1 81 22 view .LVU222
 702 00ea 8DED050A 		vstr.32	s0, [sp, #20]
  82:MotorControl/trapTraj.cpp ****         trajStep.Ydd = Dr_;
 703              		.loc 1 82 9 is_stmt 1 view .LVU223
  82:MotorControl/trapTraj.cpp ****         trajStep.Ydd = Dr_;
 704              		.loc 1 82 22 is_stmt 0 view .LVU224
 705 00ee 8DED067A 		vstr.32	s14, [sp, #24]
 706              	.LVL54:
  82:MotorControl/trapTraj.cpp ****         trajStep.Ydd = Dr_;
 707              		.loc 1 82 22 view .LVU225
 708              	.LBE53:
 709 00f2 B7E7     		b	.L25
 710              	.LVL55:
 711              	.L41:
  83:MotorControl/trapTraj.cpp ****     } else if (t >= Tf_) {  // Final Condition
 712              		.loc 1 83 12 is_stmt 1 view .LVU226
 713 00f4 F4EEC07A 		vcmpe.f32	s15, s0
 714 00f8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 715 00fc B2D8     		bhi	.L25
  84:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_;
 716              		.loc 1 84 9 view .LVU227
  84:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_;
 717              		.loc 1 84 24 is_stmt 0 view .LVU228
 718 00fe 4369     		ldr	r3, [r0, #20]	@ float
ARM GAS  /tmp/ccaWzqeK.s 			page 45


  84:MotorControl/trapTraj.cpp ****         trajStep.Y   = Xf_;
 719              		.loc 1 84 22 view .LVU229
 720 0100 0493     		str	r3, [sp, #16]	@ float
  85:MotorControl/trapTraj.cpp ****         trajStep.Yd  = 0.0f;
 721              		.loc 1 85 9 is_stmt 1 view .LVU230
  85:MotorControl/trapTraj.cpp ****         trajStep.Yd  = 0.0f;
 722              		.loc 1 85 22 is_stmt 0 view .LVU231
 723 0102 0023     		movs	r3, #0
 724 0104 0593     		str	r3, [sp, #20]	@ float
  86:MotorControl/trapTraj.cpp ****         trajStep.Ydd = 0.0f;
 725              		.loc 1 86 9 is_stmt 1 view .LVU232
  86:MotorControl/trapTraj.cpp ****         trajStep.Ydd = 0.0f;
 726              		.loc 1 86 22 is_stmt 0 view .LVU233
 727 0106 0693     		str	r3, [sp, #24]	@ float
 728 0108 ACE7     		b	.L25
 729              	.LBE52:
 730              	.LBE56:
 731              	.LBE58:
 732              	.LBE61:
 733              		.cfi_endproc
 734              	.LFE5161:
 735              		.cantunwind
 736              		.fnend
 738              		.text
 739              	.Letext0:
 740              		.file 5 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/type_traits"
 741              		.file 6 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 742              		.file 7 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdlib"
 743              		.file 8 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 744              		.file 9 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 745              		.file 10 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v7e-m+fp/har
 746              		.file 11 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 747              		.file 12 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_function.h"
 748              		.file 13 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 749              		.file 14 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/functional"
 750              		.file 15 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstring"
 751              		.file 16 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/parse_numbers.h"
 752              		.file 17 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cwchar"
 753              		.file 18 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/clocale"
 754              		.file 19 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdint"
 755              		.file 20 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/string_view"
 756              		.file 21 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 757              		.file 22 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdio"
 758              		.file 23 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h"
 759              		.file 24 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 760              		.file 25 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 761              		.file 26 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_types.h"
 762              		.file 27 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/reent.h"
 763              		.file 28 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/lock.h"
 764              		.file 29 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/math.h"
 765              		.file 30 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdlib.h"
 766              		.file 31 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 767              		.file 32 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdint.h"
 768              		.file 33 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 769              		.file 34 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdio.h"
 770              		.file 35 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 771              		.file 36 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/math.h"
ARM GAS  /tmp/ccaWzqeK.s 			page 46


 772              		.file 37 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/string.h"
 773              		.file 38 "fibre-cpp/include/fibre/cpp_utils.hpp"
 774              		.file 39 "fibre-cpp/include/fibre/callback.hpp"
 775              		.file 40 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/pstl/execution_defs.h"
 776              		.file 41 "Board/v3/Inc/board.h"
 777              		.file 42 "MotorControl/trapTraj.hpp"
 778              		.file 43 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/wchar.h"
 779              		.file 44 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/locale.h"
 780              		.file 45 "<built-in>"
ARM GAS  /tmp/ccaWzqeK.s 			page 47


DEFINED SYMBOLS
                            *ABS*:0000000000000000 trapTraj.cpp
     /tmp/ccaWzqeK.s:20     .text._Z9sign_hardf:0000000000000000 $t
     /tmp/ccaWzqeK.s:26     .text._Z9sign_hardf:0000000000000000 _Z9sign_hardf
    .ARM.exidx.text._Z9sign_hardf:0000000000000000 $d
     /tmp/ccaWzqeK.s:85     .text._ZN21TrapezoidalTrajectory15planTrapezoidalEffffff:0000000000000000 $t
     /tmp/ccaWzqeK.s:91     .text._ZN21TrapezoidalTrajectory15planTrapezoidalEffffff:0000000000000000 _ZN21TrapezoidalTrajectory15planTrapezoidalEffffff
.ARM.exidx.text._ZN21TrapezoidalTrajectory15planTrapezoidalEffffff:0000000000000000 $d
     /tmp/ccaWzqeK.s:494    .text._ZN21TrapezoidalTrajectory4evalEf:0000000000000000 $t
     /tmp/ccaWzqeK.s:500    .text._ZN21TrapezoidalTrajectory4evalEf:0000000000000000 _ZN21TrapezoidalTrajectory4evalEf
.ARM.exidx.text._ZN21TrapezoidalTrajectory4evalEf:0000000000000000 $d

UNDEFINED SYMBOLS
sqrtf
