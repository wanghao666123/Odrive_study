ARM GAS  /tmp/ccjyQa7a.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"legacy_protocol.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZN5fibre13PacketWrapper12cancel_writeEj,"ax",%progbits
  20              		.align	1
  21              		.global	_ZN5fibre13PacketWrapper12cancel_writeEj
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_ZN5fibre13PacketWrapper12cancel_writeEj:
  27              		.fnstart
  28              	.LVL0:
  29              	.LFB4598:
  30              		.file 1 "fibre-cpp/legacy_protocol.cpp"
   1:fibre-cpp/legacy_protocol.cpp **** 
   2:fibre-cpp/legacy_protocol.cpp **** 
   3:fibre-cpp/legacy_protocol.cpp **** #include "legacy_protocol.hpp"
   4:fibre-cpp/legacy_protocol.cpp **** 
   5:fibre-cpp/legacy_protocol.cpp **** #include "protocol.hpp"
   6:fibre-cpp/legacy_protocol.cpp **** #include "crc.hpp"
   7:fibre-cpp/legacy_protocol.cpp **** #include "logging.hpp"
   8:fibre-cpp/legacy_protocol.cpp **** #include "print_utils.hpp"
   9:fibre-cpp/legacy_protocol.cpp **** #include <fibre/async_stream.hpp>
  10:fibre-cpp/legacy_protocol.cpp **** #include <memory>
  11:fibre-cpp/legacy_protocol.cpp **** #include <stdlib.h>
  12:fibre-cpp/legacy_protocol.cpp **** #include <algorithm>
  13:fibre-cpp/legacy_protocol.cpp **** 
  14:fibre-cpp/legacy_protocol.cpp **** DEFINE_LOG_TOPIC(LEGACY_PROTOCOL);
  15:fibre-cpp/legacy_protocol.cpp **** USE_LOG_TOPIC(LEGACY_PROTOCOL);
  16:fibre-cpp/legacy_protocol.cpp **** 
  17:fibre-cpp/legacy_protocol.cpp **** using namespace fibre;
  18:fibre-cpp/legacy_protocol.cpp **** 
  19:fibre-cpp/legacy_protocol.cpp **** 
  20:fibre-cpp/legacy_protocol.cpp **** /* PacketWrapper -------------------------------------------------------------*/
  21:fibre-cpp/legacy_protocol.cpp **** 
  22:fibre-cpp/legacy_protocol.cpp **** void PacketWrapper::start_write(cbufptr_t buffer, TransferHandle* handle, Callback<void, WriteResul
  23:fibre-cpp/legacy_protocol.cpp ****     if (handle) {
  24:fibre-cpp/legacy_protocol.cpp ****         *handle = reinterpret_cast<TransferHandle>(this);
  25:fibre-cpp/legacy_protocol.cpp ****     }
  26:fibre-cpp/legacy_protocol.cpp **** 
  27:fibre-cpp/legacy_protocol.cpp ****     if (state_ != kStateIdle) {
  28:fibre-cpp/legacy_protocol.cpp ****         completer.invoke({kStreamError, buffer.begin()});
ARM GAS  /tmp/ccjyQa7a.s 			page 2


  29:fibre-cpp/legacy_protocol.cpp ****     }
  30:fibre-cpp/legacy_protocol.cpp **** 
  31:fibre-cpp/legacy_protocol.cpp ****     // TODO: support buffer size >= 128
  32:fibre-cpp/legacy_protocol.cpp ****     if (buffer.size() >= 128) {
  33:fibre-cpp/legacy_protocol.cpp ****         completer.invoke({kStreamError, buffer.begin()});
  34:fibre-cpp/legacy_protocol.cpp ****     }
  35:fibre-cpp/legacy_protocol.cpp **** 
  36:fibre-cpp/legacy_protocol.cpp ****     completer_ = completer;
  37:fibre-cpp/legacy_protocol.cpp **** 
  38:fibre-cpp/legacy_protocol.cpp ****     header_buf_[0] = CANONICAL_PREFIX;
  39:fibre-cpp/legacy_protocol.cpp ****     header_buf_[1] = static_cast<uint8_t>(buffer.size());
  40:fibre-cpp/legacy_protocol.cpp ****     header_buf_[2] = calc_crc8<CANONICAL_CRC8_POLYNOMIAL>(CANONICAL_CRC8_INIT, header_buf_, 2);
  41:fibre-cpp/legacy_protocol.cpp ****     
  42:fibre-cpp/legacy_protocol.cpp ****     payload_buf_ = buffer;
  43:fibre-cpp/legacy_protocol.cpp **** 
  44:fibre-cpp/legacy_protocol.cpp ****     uint16_t crc16 = calc_crc16<CANONICAL_CRC16_POLYNOMIAL>(CANONICAL_CRC16_INIT, buffer.begin(), b
  45:fibre-cpp/legacy_protocol.cpp ****     trailer_buf_[0] = (uint8_t)((crc16 >> 8) & 0xff),
  46:fibre-cpp/legacy_protocol.cpp ****     trailer_buf_[1] = (uint8_t)((crc16 >> 0) & 0xff);
  47:fibre-cpp/legacy_protocol.cpp **** 
  48:fibre-cpp/legacy_protocol.cpp ****     state_ = kStateSendingHeader;
  49:fibre-cpp/legacy_protocol.cpp ****     expected_tx_end_ = header_buf_ + 3;
  50:fibre-cpp/legacy_protocol.cpp ****     tx_channel_->start_write(header_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
  51:fibre-cpp/legacy_protocol.cpp **** }
  52:fibre-cpp/legacy_protocol.cpp **** 
  53:fibre-cpp/legacy_protocol.cpp **** void PacketWrapper::cancel_write(TransferHandle transfer_handle) {
  31              		.loc 1 53 66 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 53 66 is_stmt 0 view .LVU1
  36 0000 08B5     		push	{r3, lr}
  37              		.save {r3, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 3, -8
  41              		.cfi_offset 14, -4
  42 0002 0346     		mov	r3, r0
  54:fibre-cpp/legacy_protocol.cpp ****     state_ = kStateCancelling;
  43              		.loc 1 54 5 is_stmt 1 view .LVU2
  44              		.loc 1 54 12 is_stmt 0 view .LVU3
  45 0004 0122     		movs	r2, #1
  46 0006 80F82820 		strb	r2, [r0, #40]
  55:fibre-cpp/legacy_protocol.cpp ****     tx_channel_->cancel_write(inner_transfer_handle_);
  47              		.loc 1 55 5 is_stmt 1 view .LVU4
  48 000a 4068     		ldr	r0, [r0, #4]
  49              	.LVL1:
  50              		.loc 1 55 53 is_stmt 0 view .LVU5
  51 000c 0268     		ldr	r2, [r0]
  52 000e 5268     		ldr	r2, [r2, #4]
  53              		.loc 1 55 30 view .LVU6
  54 0010 9968     		ldr	r1, [r3, #8]
  55              	.LVL2:
  56              		.loc 1 55 30 view .LVU7
  57 0012 9047     		blx	r2
  58              	.LVL3:
  56:fibre-cpp/legacy_protocol.cpp **** }
  59              		.loc 1 56 1 view .LVU8
ARM GAS  /tmp/ccjyQa7a.s 			page 3


  60 0014 08BD     		pop	{r3, pc}
  61              		.cfi_endproc
  62              	.LFE4598:
  63              		.fnend
  65              		.section	.text._ZN5fibre15PacketUnwrapper11cancel_readEj,"ax",%progbits
  66              		.align	1
  67              		.global	_ZN5fibre15PacketUnwrapper11cancel_readEj
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  72              	_ZN5fibre15PacketUnwrapper11cancel_readEj:
  73              		.fnstart
  74              	.LVL4:
  75              	.LFB4601:
  57:fibre-cpp/legacy_protocol.cpp **** 
  58:fibre-cpp/legacy_protocol.cpp **** void PacketWrapper::complete(WriteResult result) {
  59:fibre-cpp/legacy_protocol.cpp ****     if (state_ == kStateCancelling) {
  60:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
  61:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({kStreamCancelled, payload_buf_.begin()});
  62:fibre-cpp/legacy_protocol.cpp ****         return;
  63:fibre-cpp/legacy_protocol.cpp ****     }
  64:fibre-cpp/legacy_protocol.cpp **** 
  65:fibre-cpp/legacy_protocol.cpp ****     if (result.status != kStreamOk) {
  66:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
  67:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({result.status, payload_buf_.begin()});
  68:fibre-cpp/legacy_protocol.cpp ****         return;
  69:fibre-cpp/legacy_protocol.cpp ****     }
  70:fibre-cpp/legacy_protocol.cpp **** 
  71:fibre-cpp/legacy_protocol.cpp ****     if (result.end < expected_tx_end_) {
  72:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write({result.end, expected_tx_end_}, &inner_transfer_handle_, MEMBER_CB
  73:fibre-cpp/legacy_protocol.cpp ****         return;
  74:fibre-cpp/legacy_protocol.cpp ****     }
  75:fibre-cpp/legacy_protocol.cpp **** 
  76:fibre-cpp/legacy_protocol.cpp ****     if (state_ == kStateSendingHeader) {
  77:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateSendingPayload;
  78:fibre-cpp/legacy_protocol.cpp ****         expected_tx_end_ = payload_buf_.end();
  79:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write(payload_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
  80:fibre-cpp/legacy_protocol.cpp **** 
  81:fibre-cpp/legacy_protocol.cpp ****     } else if (state_ == kStateSendingPayload) {
  82:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateSendingTrailer;
  83:fibre-cpp/legacy_protocol.cpp ****         expected_tx_end_ = trailer_buf_ + 2;
  84:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write(trailer_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
  85:fibre-cpp/legacy_protocol.cpp **** 
  86:fibre-cpp/legacy_protocol.cpp ****     } else if (state_ == kStateSendingTrailer) {
  87:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
  88:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({kStreamOk, payload_buf_.end()});
  89:fibre-cpp/legacy_protocol.cpp ****     }
  90:fibre-cpp/legacy_protocol.cpp **** }
  91:fibre-cpp/legacy_protocol.cpp **** 
  92:fibre-cpp/legacy_protocol.cpp **** 
  93:fibre-cpp/legacy_protocol.cpp **** /* PacketUnwrapper -----------------------------------------------------------*/
  94:fibre-cpp/legacy_protocol.cpp **** 
  95:fibre-cpp/legacy_protocol.cpp **** void PacketUnwrapper::start_read(bufptr_t buffer, TransferHandle* handle, Callback<void, ReadResult
  96:fibre-cpp/legacy_protocol.cpp ****     if (handle) {
  97:fibre-cpp/legacy_protocol.cpp ****         *handle = reinterpret_cast<TransferHandle>(this);
  98:fibre-cpp/legacy_protocol.cpp ****     }
  99:fibre-cpp/legacy_protocol.cpp **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 4


 100:fibre-cpp/legacy_protocol.cpp ****     if (state_ != kStateIdle) {
 101:fibre-cpp/legacy_protocol.cpp ****         completer.invoke({kStreamError, buffer.begin()});
 102:fibre-cpp/legacy_protocol.cpp ****     }
 103:fibre-cpp/legacy_protocol.cpp **** 
 104:fibre-cpp/legacy_protocol.cpp ****     completer_ = completer;
 105:fibre-cpp/legacy_protocol.cpp ****     payload_buf_ = buffer;
 106:fibre-cpp/legacy_protocol.cpp **** 
 107:fibre-cpp/legacy_protocol.cpp ****     state_ = kStateReceivingHeader;
 108:fibre-cpp/legacy_protocol.cpp ****     expected_rx_end_ = rx_buf_ + 3;
 109:fibre-cpp/legacy_protocol.cpp ****     rx_channel_->start_read({rx_buf_, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(this, c
 110:fibre-cpp/legacy_protocol.cpp **** }
 111:fibre-cpp/legacy_protocol.cpp **** 
 112:fibre-cpp/legacy_protocol.cpp **** void PacketUnwrapper::cancel_read(TransferHandle transfer_handle) {
  76              		.loc 1 112 67 is_stmt 1 view -0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		.loc 1 112 67 is_stmt 0 view .LVU10
  81 0000 08B5     		push	{r3, lr}
  82              		.save {r3, lr}
  83              	.LCFI1:
  84              		.cfi_def_cfa_offset 8
  85              		.cfi_offset 3, -8
  86              		.cfi_offset 14, -4
  87 0002 0346     		mov	r3, r0
 113:fibre-cpp/legacy_protocol.cpp ****     state_ = kStateCancelling;
  88              		.loc 1 113 5 is_stmt 1 view .LVU11
  89              		.loc 1 113 12 is_stmt 0 view .LVU12
  90 0004 0122     		movs	r2, #1
  91 0006 80F82820 		strb	r2, [r0, #40]
 114:fibre-cpp/legacy_protocol.cpp ****     rx_channel_->cancel_read(inner_transfer_handle_);
  92              		.loc 1 114 5 is_stmt 1 view .LVU13
  93 000a 4068     		ldr	r0, [r0, #4]
  94              	.LVL5:
  95              		.loc 1 114 52 is_stmt 0 view .LVU14
  96 000c 0268     		ldr	r2, [r0]
  97 000e 5268     		ldr	r2, [r2, #4]
  98              		.loc 1 114 29 view .LVU15
  99 0010 9968     		ldr	r1, [r3, #8]
 100              	.LVL6:
 101              		.loc 1 114 29 view .LVU16
 102 0012 9047     		blx	r2
 103              	.LVL7:
 115:fibre-cpp/legacy_protocol.cpp **** }
 104              		.loc 1 115 1 view .LVU17
 105 0014 08BD     		pop	{r3, pc}
 106              		.cfi_endproc
 107              	.LFE4601:
 108              		.fnend
 110              		.section	.text._Z8calc_crcIhLj55EET_S0_h,"ax",%progbits
 111              		.align	1
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 116              	_Z8calc_crcIhLj55EET_S0_h:
 117              		.fnstart
 118              	.LVL8:
ARM GAS  /tmp/ccjyQa7a.s 			page 5


 119              	.LFB5496:
 120              		.file 2 "fibre-cpp/crc.hpp"
   1:fibre-cpp/crc.hpp **** #ifndef __CRC_HPP
   2:fibre-cpp/crc.hpp **** #define __CRC_HPP
   3:fibre-cpp/crc.hpp **** 
   4:fibre-cpp/crc.hpp **** #include <stdint.h>
   5:fibre-cpp/crc.hpp **** #include <limits.h>
   6:fibre-cpp/crc.hpp **** 
   7:fibre-cpp/crc.hpp **** // Calculates an arbitrary CRC for one byte.
   8:fibre-cpp/crc.hpp **** // Adapted from https://barrgroup.com/Embedded-Systems/How-To/CRC-Calculation-C-Code
   9:fibre-cpp/crc.hpp **** template<typename T, unsigned POLYNOMIAL>
  10:fibre-cpp/crc.hpp **** static T calc_crc(T remainder, uint8_t value) {
 121              		.loc 2 10 10 is_stmt 1 view -0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              		@ link register save eliminated.
  11:fibre-cpp/crc.hpp ****     constexpr T BIT_WIDTH = (CHAR_BIT * sizeof(T));
  12:fibre-cpp/crc.hpp ****     constexpr T TOPBIT = ((T)1 << (BIT_WIDTH - 1));
  13:fibre-cpp/crc.hpp ****     
  14:fibre-cpp/crc.hpp ****     // Bring the next byte into the remainder.
  15:fibre-cpp/crc.hpp ****     remainder ^= (value << (BIT_WIDTH - 8));
 126              		.loc 2 15 15 is_stmt 0 view .LVU19
 127 0000 4840     		eors	r0, r0, r1
 128              	.LVL9:
 129              	.LBB571:
  16:fibre-cpp/crc.hpp **** 
  17:fibre-cpp/crc.hpp ****     // Perform modulo-2 division, a bit at a time.
  18:fibre-cpp/crc.hpp ****     for (uint8_t bit = 8; bit; --bit) {
 130              		.loc 2 18 18 view .LVU20
 131 0002 0823     		movs	r3, #8
 132 0004 03E0     		b	.L9
 133              	.LVL10:
 134              	.L7:
  19:fibre-cpp/crc.hpp ****         if (remainder & TOPBIT) {
  20:fibre-cpp/crc.hpp ****             remainder = (remainder << 1) ^ POLYNOMIAL;
  21:fibre-cpp/crc.hpp ****         } else {
  22:fibre-cpp/crc.hpp ****             remainder = (remainder << 1);
 135              		.loc 2 22 23 view .LVU21
 136 0006 4000     		lsls	r0, r0, #1
 137              	.LVL11:
 138              		.loc 2 22 23 view .LVU22
 139 0008 C0B2     		uxtb	r0, r0
 140              	.LVL12:
 141              	.L8:
  18:fibre-cpp/crc.hpp ****         if (remainder & TOPBIT) {
 142              		.loc 2 18 5 is_stmt 1 discriminator 2 view .LVU23
 143 000a 013B     		subs	r3, r3, #1
 144              	.LVL13:
  18:fibre-cpp/crc.hpp ****         if (remainder & TOPBIT) {
 145              		.loc 2 18 5 is_stmt 0 discriminator 2 view .LVU24
 146 000c DBB2     		uxtb	r3, r3
 147              	.LVL14:
 148              	.L9:
  18:fibre-cpp/crc.hpp ****         if (remainder & TOPBIT) {
 149              		.loc 2 18 27 is_stmt 1 discriminator 1 view .LVU25
 150 000e 3BB1     		cbz	r3, .L6
ARM GAS  /tmp/ccjyQa7a.s 			page 6


  19:fibre-cpp/crc.hpp ****         if (remainder & TOPBIT) {
 151              		.loc 2 19 9 is_stmt 0 view .LVU26
 152 0010 10F0800F 		tst	r0, #128
 153 0014 F7D0     		beq	.L7
  20:fibre-cpp/crc.hpp ****         } else {
 154              		.loc 2 20 36 view .LVU27
 155 0016 4000     		lsls	r0, r0, #1
 156              	.LVL15:
  20:fibre-cpp/crc.hpp ****         } else {
 157              		.loc 2 20 36 view .LVU28
 158 0018 C0B2     		uxtb	r0, r0
  20:fibre-cpp/crc.hpp ****         } else {
 159              		.loc 2 20 23 view .LVU29
 160 001a 80F03700 		eor	r0, r0, #55
 161              	.LVL16:
  20:fibre-cpp/crc.hpp ****         } else {
 162              		.loc 2 20 23 view .LVU30
 163 001e F4E7     		b	.L8
 164              	.L6:
  20:fibre-cpp/crc.hpp ****         } else {
 165              		.loc 2 20 23 view .LVU31
 166              	.LBE571:
  23:fibre-cpp/crc.hpp ****         }
  24:fibre-cpp/crc.hpp ****     }
  25:fibre-cpp/crc.hpp **** 
  26:fibre-cpp/crc.hpp ****     return remainder;
  27:fibre-cpp/crc.hpp **** }
 167              		.loc 2 27 1 view .LVU32
 168 0020 7047     		bx	lr
 169              		.cfi_endproc
 170              	.LFE5496:
 171              		.cantunwind
 172              		.fnend
 174              		.section	.text._Z8calc_crcIhLj55EET_S0_PKhj,"ax",%progbits
 175              		.align	1
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 180              	_Z8calc_crcIhLj55EET_S0_PKhj:
 181              		.fnstart
 182              	.LVL17:
 183              	.LFB5339:
  28:fibre-cpp/crc.hpp **** 
  29:fibre-cpp/crc.hpp **** template<typename T, unsigned POLYNOMIAL>
  30:fibre-cpp/crc.hpp **** static T calc_crc(T remainder, const uint8_t* buffer, size_t length) {
 184              		.loc 2 30 10 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		.loc 2 30 10 is_stmt 0 view .LVU34
 189 0000 38B5     		push	{r3, r4, r5, lr}
 190              	.LCFI2:
 191              		.cfi_def_cfa_offset 16
 192              		.cfi_offset 3, -16
 193              		.cfi_offset 4, -12
 194              		.cfi_offset 5, -8
 195              		.cfi_offset 14, -4
ARM GAS  /tmp/ccjyQa7a.s 			page 7


 196 0002 0C46     		mov	r4, r1
 197 0004 04E0     		b	.L12
 198              	.LVL18:
 199              	.L14:
  31:fibre-cpp/crc.hpp ****     while (length--)
  32:fibre-cpp/crc.hpp ****         remainder = calc_crc<T, POLYNOMIAL>(remainder, *(buffer++));
 200              		.loc 2 32 44 view .LVU35
 201 0006 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 202              	.LVL19:
 203              		.loc 2 32 44 view .LVU36
 204 000a FFF7FEFF 		bl	_Z8calc_crcIhLj55EET_S0_h
 205              	.LVL20:
  31:fibre-cpp/crc.hpp ****     while (length--)
 206              		.loc 2 31 5 view .LVU37
 207 000e 2A46     		mov	r2, r5
 208              	.LVL21:
 209              	.L12:
  31:fibre-cpp/crc.hpp ****     while (length--)
 210              		.loc 2 31 5 is_stmt 1 view .LVU38
 211 0010 551E     		subs	r5, r2, #1
 212              	.LVL22:
  31:fibre-cpp/crc.hpp ****     while (length--)
 213              		.loc 2 31 5 is_stmt 0 view .LVU39
 214 0012 002A     		cmp	r2, #0
 215 0014 F7D1     		bne	.L14
  33:fibre-cpp/crc.hpp ****     return remainder;
  34:fibre-cpp/crc.hpp **** }
 216              		.loc 2 34 1 view .LVU40
 217 0016 38BD     		pop	{r3, r4, r5, pc}
 218              		.loc 2 34 1 view .LVU41
 219              		.cfi_endproc
 220              	.LFE5339:
 221              		.cantunwind
 222              		.fnend
 224              		.section	.text._Z9calc_crc8ILj55EEhhPKhj,"ax",%progbits
 225              		.align	1
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 230              	_Z9calc_crc8ILj55EEhhPKhj:
 231              		.fnstart
 232              	.LVL23:
 233              	.LFB5008:
  35:fibre-cpp/crc.hpp **** 
  36:fibre-cpp/crc.hpp **** template<unsigned POLYNOMIAL>
  37:fibre-cpp/crc.hpp **** static uint8_t calc_crc8(uint8_t remainder, uint8_t value) {
  38:fibre-cpp/crc.hpp ****     return calc_crc<uint8_t, POLYNOMIAL>(remainder, value);
  39:fibre-cpp/crc.hpp **** }
  40:fibre-cpp/crc.hpp **** 
  41:fibre-cpp/crc.hpp **** template<unsigned POLYNOMIAL>
  42:fibre-cpp/crc.hpp **** static uint16_t calc_crc16(uint16_t remainder, uint8_t value) {
  43:fibre-cpp/crc.hpp ****     return calc_crc<uint16_t, POLYNOMIAL>(remainder, value);
  44:fibre-cpp/crc.hpp **** }
  45:fibre-cpp/crc.hpp **** 
  46:fibre-cpp/crc.hpp **** template<unsigned POLYNOMIAL>
  47:fibre-cpp/crc.hpp **** static uint8_t calc_crc8(uint8_t remainder, const uint8_t* buffer, size_t length) {
 234              		.loc 2 47 16 is_stmt 1 view -0
ARM GAS  /tmp/ccjyQa7a.s 			page 8


 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		.loc 2 47 16 is_stmt 0 view .LVU43
 239 0000 08B5     		push	{r3, lr}
 240              	.LCFI3:
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 3, -8
 243              		.cfi_offset 14, -4
  48:fibre-cpp/crc.hpp ****     return calc_crc<uint8_t, POLYNOMIAL>(remainder, buffer, length);
 244              		.loc 2 48 41 view .LVU44
 245 0002 FFF7FEFF 		bl	_Z8calc_crcIhLj55EET_S0_PKhj
 246              	.LVL24:
  49:fibre-cpp/crc.hpp **** }
 247              		.loc 2 49 1 view .LVU45
 248 0006 08BD     		pop	{r3, pc}
 249              		.cfi_endproc
 250              	.LFE5008:
 251              		.cantunwind
 252              		.fnend
 254              		.section	.text._Z8calc_crcItLj15717EET_S0_h,"ax",%progbits
 255              		.align	1
 256              		.syntax unified
 257              		.thumb
 258              		.thumb_func
 260              	_Z8calc_crcItLj15717EET_S0_h:
 261              		.fnstart
 262              	.LVL25:
 263              	.LFB5497:
  10:fibre-cpp/crc.hpp ****     constexpr T BIT_WIDTH = (CHAR_BIT * sizeof(T));
 264              		.loc 2 10 10 is_stmt 1 view -0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268              		@ link register save eliminated.
  15:fibre-cpp/crc.hpp **** 
 269              		.loc 2 15 15 is_stmt 0 view .LVU47
 270 0000 80EA0120 		eor	r0, r0, r1, lsl #8
 271              	.LVL26:
 272              	.LBB572:
  18:fibre-cpp/crc.hpp ****         if (remainder & TOPBIT) {
 273              		.loc 2 18 18 view .LVU48
 274 0004 0823     		movs	r3, #8
 275 0006 03E0     		b	.L21
 276              	.LVL27:
 277              	.L19:
  22:fibre-cpp/crc.hpp ****         }
 278              		.loc 2 22 23 view .LVU49
 279 0008 4000     		lsls	r0, r0, #1
 280              	.LVL28:
  22:fibre-cpp/crc.hpp ****         }
 281              		.loc 2 22 23 view .LVU50
 282 000a 80B2     		uxth	r0, r0
 283              	.LVL29:
 284              	.L20:
  18:fibre-cpp/crc.hpp ****         if (remainder & TOPBIT) {
 285              		.loc 2 18 5 is_stmt 1 discriminator 2 view .LVU51
ARM GAS  /tmp/ccjyQa7a.s 			page 9


 286 000c 013B     		subs	r3, r3, #1
 287              	.LVL30:
  18:fibre-cpp/crc.hpp ****         if (remainder & TOPBIT) {
 288              		.loc 2 18 5 is_stmt 0 discriminator 2 view .LVU52
 289 000e DBB2     		uxtb	r3, r3
 290              	.LVL31:
 291              	.L21:
  18:fibre-cpp/crc.hpp ****         if (remainder & TOPBIT) {
 292              		.loc 2 18 27 is_stmt 1 discriminator 1 view .LVU53
 293 0010 4BB1     		cbz	r3, .L18
  19:fibre-cpp/crc.hpp ****             remainder = (remainder << 1) ^ POLYNOMIAL;
 294              		.loc 2 19 9 is_stmt 0 view .LVU54
 295 0012 10F4004F 		tst	r0, #32768
 296 0016 F7D0     		beq	.L19
  20:fibre-cpp/crc.hpp ****         } else {
 297              		.loc 2 20 36 view .LVU55
 298 0018 4000     		lsls	r0, r0, #1
 299              	.LVL32:
  20:fibre-cpp/crc.hpp ****         } else {
 300              		.loc 2 20 36 view .LVU56
 301 001a 80B2     		uxth	r0, r0
  20:fibre-cpp/crc.hpp ****         } else {
 302              		.loc 2 20 23 view .LVU57
 303 001c 80F47550 		eor	r0, r0, #15680
 304 0020 80F02500 		eor	r0, r0, #37
 305              	.LVL33:
  20:fibre-cpp/crc.hpp ****         } else {
 306              		.loc 2 20 23 view .LVU58
 307 0024 F2E7     		b	.L20
 308              	.L18:
  20:fibre-cpp/crc.hpp ****         } else {
 309              		.loc 2 20 23 view .LVU59
 310              	.LBE572:
  27:fibre-cpp/crc.hpp **** 
 311              		.loc 2 27 1 view .LVU60
 312 0026 7047     		bx	lr
 313              		.cfi_endproc
 314              	.LFE5497:
 315              		.cantunwind
 316              		.fnend
 318              		.section	.text._Z8calc_crcItLj15717EET_S0_PKhj,"ax",%progbits
 319              		.align	1
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 324              	_Z8calc_crcItLj15717EET_S0_PKhj:
 325              		.fnstart
 326              	.LVL34:
 327              	.LFB5340:
  30:fibre-cpp/crc.hpp ****     while (length--)
 328              		.loc 2 30 10 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
  30:fibre-cpp/crc.hpp ****     while (length--)
 332              		.loc 2 30 10 is_stmt 0 view .LVU62
 333 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccjyQa7a.s 			page 10


 334              	.LCFI4:
 335              		.cfi_def_cfa_offset 16
 336              		.cfi_offset 3, -16
 337              		.cfi_offset 4, -12
 338              		.cfi_offset 5, -8
 339              		.cfi_offset 14, -4
 340 0002 0C46     		mov	r4, r1
 341 0004 04E0     		b	.L24
 342              	.LVL35:
 343              	.L26:
  32:fibre-cpp/crc.hpp ****     return remainder;
 344              		.loc 2 32 44 view .LVU63
 345 0006 14F8011B 		ldrb	r1, [r4], #1	@ zero_extendqisi2
 346              	.LVL36:
  32:fibre-cpp/crc.hpp ****     return remainder;
 347              		.loc 2 32 44 view .LVU64
 348 000a FFF7FEFF 		bl	_Z8calc_crcItLj15717EET_S0_h
 349              	.LVL37:
  31:fibre-cpp/crc.hpp ****         remainder = calc_crc<T, POLYNOMIAL>(remainder, *(buffer++));
 350              		.loc 2 31 5 view .LVU65
 351 000e 2A46     		mov	r2, r5
 352              	.LVL38:
 353              	.L24:
  31:fibre-cpp/crc.hpp ****         remainder = calc_crc<T, POLYNOMIAL>(remainder, *(buffer++));
 354              		.loc 2 31 5 is_stmt 1 view .LVU66
 355 0010 551E     		subs	r5, r2, #1
 356              	.LVL39:
  31:fibre-cpp/crc.hpp ****         remainder = calc_crc<T, POLYNOMIAL>(remainder, *(buffer++));
 357              		.loc 2 31 5 is_stmt 0 view .LVU67
 358 0012 002A     		cmp	r2, #0
 359 0014 F7D1     		bne	.L26
  34:fibre-cpp/crc.hpp **** 
 360              		.loc 2 34 1 view .LVU68
 361 0016 38BD     		pop	{r3, r4, r5, pc}
  34:fibre-cpp/crc.hpp **** 
 362              		.loc 2 34 1 view .LVU69
 363              		.cfi_endproc
 364              	.LFE5340:
 365              		.cantunwind
 366              		.fnend
 368              		.section	.text._Z10calc_crc16ILj15717EEttPKhj,"ax",%progbits
 369              		.align	1
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 374              	_Z10calc_crc16ILj15717EEttPKhj:
 375              		.fnstart
 376              	.LVL40:
 377              	.LFB5009:
  50:fibre-cpp/crc.hpp **** 
  51:fibre-cpp/crc.hpp **** template<unsigned POLYNOMIAL>
  52:fibre-cpp/crc.hpp **** static uint16_t calc_crc16(uint16_t remainder, const uint8_t* buffer, size_t length) {
 378              		.loc 2 52 17 is_stmt 1 view -0
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 0
 381              		@ frame_needed = 0, uses_anonymous_args = 0
 382              		.loc 2 52 17 is_stmt 0 view .LVU71
ARM GAS  /tmp/ccjyQa7a.s 			page 11


 383 0000 08B5     		push	{r3, lr}
 384              	.LCFI5:
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 3, -8
 387              		.cfi_offset 14, -4
  53:fibre-cpp/crc.hpp ****     return calc_crc<uint16_t, POLYNOMIAL>(remainder, buffer, length);
 388              		.loc 2 53 42 view .LVU72
 389 0002 FFF7FEFF 		bl	_Z8calc_crcItLj15717EET_S0_PKhj
 390              	.LVL41:
  54:fibre-cpp/crc.hpp **** }
 391              		.loc 2 54 1 view .LVU73
 392 0006 08BD     		pop	{r3, pc}
 393              		.cfi_endproc
 394              	.LFE5009:
 395              		.cantunwind
 396              		.fnend
 398              		.section	.text._ZN5fibre17endpoint0_handlerEPNS_16generic_bufptr_tIKhEEPNS0_IhEE,"ax",%progbits
 399              		.align	1
 400              		.global	_ZN5fibre17endpoint0_handlerEPNS_16generic_bufptr_tIKhEEPNS0_IhEE
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 405              	_ZN5fibre17endpoint0_handlerEPNS_16generic_bufptr_tIKhEEPNS0_IhEE:
 406              		.fnstart
 407              	.LVL42:
 408              	.LFB4603:
 116:fibre-cpp/legacy_protocol.cpp **** 
 117:fibre-cpp/legacy_protocol.cpp **** void PacketUnwrapper::complete(ReadResult result) {
 118:fibre-cpp/legacy_protocol.cpp ****     // All code paths in this function must end with either of these two:
 119:fibre-cpp/legacy_protocol.cpp ****     //   - rx_channel_->start_read() to bounce back control to the underlying stream
 120:fibre-cpp/legacy_protocol.cpp ****     //   - safe_complete() to return control to the client
 121:fibre-cpp/legacy_protocol.cpp **** 
 122:fibre-cpp/legacy_protocol.cpp ****     if (state_ == kStateCancelling) {
 123:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 124:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({kStreamCancelled, payload_buf_.begin()});
 125:fibre-cpp/legacy_protocol.cpp ****         return;
 126:fibre-cpp/legacy_protocol.cpp ****     }
 127:fibre-cpp/legacy_protocol.cpp **** 
 128:fibre-cpp/legacy_protocol.cpp ****     if (result.status != kStreamOk) {
 129:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 130:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({result.status, payload_buf_.begin()});
 131:fibre-cpp/legacy_protocol.cpp ****         return;
 132:fibre-cpp/legacy_protocol.cpp ****     }
 133:fibre-cpp/legacy_protocol.cpp **** 
 134:fibre-cpp/legacy_protocol.cpp ****     if (result.end < expected_rx_end_) {
 135:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read({result.end, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(
 136:fibre-cpp/legacy_protocol.cpp ****         return;
 137:fibre-cpp/legacy_protocol.cpp ****     }
 138:fibre-cpp/legacy_protocol.cpp **** 
 139:fibre-cpp/legacy_protocol.cpp ****     if (state_ == kStateReceivingHeader) {
 140:fibre-cpp/legacy_protocol.cpp ****         size_t n_discard;
 141:fibre-cpp/legacy_protocol.cpp **** 
 142:fibre-cpp/legacy_protocol.cpp ****         // Process header
 143:fibre-cpp/legacy_protocol.cpp ****         if (rx_buf_[0] != CANONICAL_PREFIX) {
 144:fibre-cpp/legacy_protocol.cpp ****             n_discard = 1;
 145:fibre-cpp/legacy_protocol.cpp ****         } else if ((rx_buf_[1] & 0x80)) {
 146:fibre-cpp/legacy_protocol.cpp ****             n_discard = 2; // TODO: support packets larger than 128 bytes
ARM GAS  /tmp/ccjyQa7a.s 			page 12


 147:fibre-cpp/legacy_protocol.cpp ****         } else if (calc_crc8<CANONICAL_CRC8_POLYNOMIAL>(CANONICAL_CRC8_INIT, rx_buf_, 3)) {
 148:fibre-cpp/legacy_protocol.cpp ****             n_discard = 3;
 149:fibre-cpp/legacy_protocol.cpp ****         } else {
 150:fibre-cpp/legacy_protocol.cpp ****             state_ = kStateReceivingPayload;
 151:fibre-cpp/legacy_protocol.cpp ****             payload_length_ = std::min(payload_buf_.size(), (size_t)rx_buf_[1]);
 152:fibre-cpp/legacy_protocol.cpp ****             expected_rx_end_ = payload_buf_.begin() + payload_length_;
 153:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(payload_buf_.take(payload_length_), &inner_transfer_handle_, ME
 154:fibre-cpp/legacy_protocol.cpp ****             return;
 155:fibre-cpp/legacy_protocol.cpp ****         }
 156:fibre-cpp/legacy_protocol.cpp **** 
 157:fibre-cpp/legacy_protocol.cpp ****         // Header was bad: discard the bad header bytes and receive more
 158:fibre-cpp/legacy_protocol.cpp ****         memmove(rx_buf_, rx_buf_ + n_discard, sizeof(rx_buf_) - n_discard);
 159:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read(bufptr_t{rx_buf_}.skip(3 - n_discard), &inner_transfer_handle_, MEM
 160:fibre-cpp/legacy_protocol.cpp **** 
 161:fibre-cpp/legacy_protocol.cpp ****     } else if (state_ == kStateReceivingPayload) {
 162:fibre-cpp/legacy_protocol.cpp ****         expected_rx_end_ = rx_buf_ + 2;
 163:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateReceivingTrailer;
 164:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read({rx_buf_, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(thi
 165:fibre-cpp/legacy_protocol.cpp **** 
 166:fibre-cpp/legacy_protocol.cpp ****     } else if (state_ == kStateReceivingTrailer) {
 167:fibre-cpp/legacy_protocol.cpp ****         uint16_t crc = calc_crc16<CANONICAL_CRC16_POLYNOMIAL>(CANONICAL_CRC16_INIT, payload_buf_.be
 168:fibre-cpp/legacy_protocol.cpp ****         crc = calc_crc16<CANONICAL_CRC16_POLYNOMIAL>(crc, rx_buf_, 2);
 169:fibre-cpp/legacy_protocol.cpp **** 
 170:fibre-cpp/legacy_protocol.cpp ****         if (!crc) {
 171:fibre-cpp/legacy_protocol.cpp ****             state_ = kStateIdle;
 172:fibre-cpp/legacy_protocol.cpp ****             completer_.invoke_and_clear({kStreamOk, payload_buf_.begin() + payload_length_});
 173:fibre-cpp/legacy_protocol.cpp ****         } else {
 174:fibre-cpp/legacy_protocol.cpp ****             state_ = kStateReceivingHeader;
 175:fibre-cpp/legacy_protocol.cpp ****             expected_rx_end_ = rx_buf_ + 3;
 176:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read({rx_buf_, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB
 177:fibre-cpp/legacy_protocol.cpp ****         }
 178:fibre-cpp/legacy_protocol.cpp ****     }
 179:fibre-cpp/legacy_protocol.cpp **** }
 180:fibre-cpp/legacy_protocol.cpp **** 
 181:fibre-cpp/legacy_protocol.cpp **** 
 182:fibre-cpp/legacy_protocol.cpp **** /* LegacyProtocolPacketBased -------------------------------------------------*/
 183:fibre-cpp/legacy_protocol.cpp **** 
 184:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 185:fibre-cpp/legacy_protocol.cpp **** 
 186:fibre-cpp/legacy_protocol.cpp **** /**
 187:fibre-cpp/legacy_protocol.cpp ****  * @brief Starts a remote endpoint operation.
 188:fibre-cpp/legacy_protocol.cpp ****  * 
 189:fibre-cpp/legacy_protocol.cpp ****  * @param endpoint_id: The endpoint ID to invoke the operation on.
 190:fibre-cpp/legacy_protocol.cpp ****  * @param tx_buf: The tx_buf to write to the endpoint. Must remain valid until
 191:fibre-cpp/legacy_protocol.cpp ****  *        the completer is invoked.
 192:fibre-cpp/legacy_protocol.cpp ****  * @param rx_length: The desired number of bytes to read from the endpoint. The
 193:fibre-cpp/legacy_protocol.cpp ****  *        actual returned buffer may be smaller.
 194:fibre-cpp/legacy_protocol.cpp ****  * @param completer: The completer that will be notified once the operation
 195:fibre-cpp/legacy_protocol.cpp ****  *        completes (whether successful or not).
 196:fibre-cpp/legacy_protocol.cpp ****  *        The buffer given to the completer is only valid if the status is
 197:fibre-cpp/legacy_protocol.cpp ****  *        kStreamOk and until the completer returns.
 198:fibre-cpp/legacy_protocol.cpp ****  * @param handle: The variable pointed to by this argument is set to a handle
 199:fibre-cpp/legacy_protocol.cpp ****  *        that can be passed to cancel_endpoint_operation() to cancel the
 200:fibre-cpp/legacy_protocol.cpp ****  *        ongoing operation. If the completer is invoked directly from within
 201:fibre-cpp/legacy_protocol.cpp ****  *        this function then the handle is not set later than invoking the
 202:fibre-cpp/legacy_protocol.cpp ****  *        completer.
 203:fibre-cpp/legacy_protocol.cpp ****  */
ARM GAS  /tmp/ccjyQa7a.s 			page 13


 204:fibre-cpp/legacy_protocol.cpp **** void LegacyProtocolPacketBased::start_endpoint_operation(uint16_t endpoint_id, cbufptr_t tx_buf, bu
 205:fibre-cpp/legacy_protocol.cpp ****     outbound_seq_no_ = ((outbound_seq_no_ + 1) & 0x7fff);
 206:fibre-cpp/legacy_protocol.cpp **** 
 207:fibre-cpp/legacy_protocol.cpp ****     EndpointOperation op = {
 208:fibre-cpp/legacy_protocol.cpp ****         .seqno = (uint16_t)(outbound_seq_no_ | 0x0080), // FIXME: we hardwire one bit of the seq-no
 209:fibre-cpp/legacy_protocol.cpp ****         .endpoint_id = endpoint_id,
 210:fibre-cpp/legacy_protocol.cpp ****         .tx_buf = tx_buf,
 211:fibre-cpp/legacy_protocol.cpp ****         .rx_buf = rx_buf,
 212:fibre-cpp/legacy_protocol.cpp ****         .callback = callback
 213:fibre-cpp/legacy_protocol.cpp ****     };
 214:fibre-cpp/legacy_protocol.cpp **** 
 215:fibre-cpp/legacy_protocol.cpp ****     if (handle) {
 216:fibre-cpp/legacy_protocol.cpp ****         *handle = op.seqno | 0xffff0000;
 217:fibre-cpp/legacy_protocol.cpp ****     }
 218:fibre-cpp/legacy_protocol.cpp **** 
 219:fibre-cpp/legacy_protocol.cpp ****     if (tx_handle_) {
 220:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(D) << "Endpoint operation already in progress. Enqueuing this one.";
 221:fibre-cpp/legacy_protocol.cpp **** 
 222:fibre-cpp/legacy_protocol.cpp ****         // A TX operation is already in progress. Enqueue this one.
 223:fibre-cpp/legacy_protocol.cpp ****         pending_operations_.push_back(op);
 224:fibre-cpp/legacy_protocol.cpp ****         return;
 225:fibre-cpp/legacy_protocol.cpp ****     }
 226:fibre-cpp/legacy_protocol.cpp **** 
 227:fibre-cpp/legacy_protocol.cpp ****     start_endpoint_operation(op);
 228:fibre-cpp/legacy_protocol.cpp **** }
 229:fibre-cpp/legacy_protocol.cpp **** 
 230:fibre-cpp/legacy_protocol.cpp **** void LegacyProtocolPacketBased::start_endpoint_operation(EndpointOperation op) {
 231:fibre-cpp/legacy_protocol.cpp ****     write_le<uint16_t>(op.seqno, tx_buf_);
 232:fibre-cpp/legacy_protocol.cpp ****     write_le<uint16_t>(op.endpoint_id | 0x8000, tx_buf_ + 2);
 233:fibre-cpp/legacy_protocol.cpp ****     write_le<uint16_t>(op.rx_buf.size(), tx_buf_ + 4);
 234:fibre-cpp/legacy_protocol.cpp **** 
 235:fibre-cpp/legacy_protocol.cpp ****     size_t mtu = std::min(sizeof(tx_buf_), tx_mtu_);
 236:fibre-cpp/legacy_protocol.cpp ****     size_t n_payload = std::min(std::max(mtu, (size_t)8) - 8, op.tx_buf.size());
 237:fibre-cpp/legacy_protocol.cpp **** 
 238:fibre-cpp/legacy_protocol.cpp ****     memcpy(tx_buf_ + 6, op.tx_buf.begin(), n_payload);
 239:fibre-cpp/legacy_protocol.cpp **** 
 240:fibre-cpp/legacy_protocol.cpp ****     uint16_t trailer = (op.endpoint_id & 0x7fff) == 0 ?
 241:fibre-cpp/legacy_protocol.cpp ****                        PROTOCOL_VERSION : client_.json_crc_;
 242:fibre-cpp/legacy_protocol.cpp **** 
 243:fibre-cpp/legacy_protocol.cpp ****     write_le<uint16_t>(trailer, tx_buf_ + 6 + n_payload);
 244:fibre-cpp/legacy_protocol.cpp **** 
 245:fibre-cpp/legacy_protocol.cpp ****     expected_acks_[op.seqno] = op;
 246:fibre-cpp/legacy_protocol.cpp ****     transmitting_op_ = op.seqno | 0xffff0000;
 247:fibre-cpp/legacy_protocol.cpp ****     tx_channel_->start_write(cbufptr_t{tx_buf_}.take(8 + n_payload), &tx_handle_, MEMBER_CB(this, o
 248:fibre-cpp/legacy_protocol.cpp **** }
 249:fibre-cpp/legacy_protocol.cpp **** 
 250:fibre-cpp/legacy_protocol.cpp **** 
 251:fibre-cpp/legacy_protocol.cpp **** void LegacyProtocolPacketBased::cancel_endpoint_operation(EndpointOperationHandle handle) {
 252:fibre-cpp/legacy_protocol.cpp ****     if (!handle) {
 253:fibre-cpp/legacy_protocol.cpp ****         return;
 254:fibre-cpp/legacy_protocol.cpp ****     }
 255:fibre-cpp/legacy_protocol.cpp **** 
 256:fibre-cpp/legacy_protocol.cpp ****     uint16_t seqno = static_cast<uint16_t>(handle & 0xffff);
 257:fibre-cpp/legacy_protocol.cpp **** 
 258:fibre-cpp/legacy_protocol.cpp ****     Callback<void, EndpointOperationResult> callback;
 259:fibre-cpp/legacy_protocol.cpp ****     const uint8_t* tx_end = nullptr;
 260:fibre-cpp/legacy_protocol.cpp ****     uint8_t* rx_end = nullptr;
ARM GAS  /tmp/ccjyQa7a.s 			page 14


 261:fibre-cpp/legacy_protocol.cpp **** 
 262:fibre-cpp/legacy_protocol.cpp ****     auto it0 = std::find_if(pending_operations_.begin(), pending_operations_.end(), [&](EndpointOpe
 263:fibre-cpp/legacy_protocol.cpp ****         return op.seqno == seqno;
 264:fibre-cpp/legacy_protocol.cpp ****     });
 265:fibre-cpp/legacy_protocol.cpp **** 
 266:fibre-cpp/legacy_protocol.cpp ****     if (it0 != pending_operations_.end()) {
 267:fibre-cpp/legacy_protocol.cpp ****         callback = it0->callback;
 268:fibre-cpp/legacy_protocol.cpp ****         tx_end = it0->tx_buf.begin();
 269:fibre-cpp/legacy_protocol.cpp ****         rx_end = it0->rx_buf.begin();
 270:fibre-cpp/legacy_protocol.cpp ****         pending_operations_.erase(it0);
 271:fibre-cpp/legacy_protocol.cpp ****     }
 272:fibre-cpp/legacy_protocol.cpp **** 
 273:fibre-cpp/legacy_protocol.cpp ****     auto it1 = expected_acks_.find(seqno);
 274:fibre-cpp/legacy_protocol.cpp **** 
 275:fibre-cpp/legacy_protocol.cpp ****     if (it1 != expected_acks_.end()) {
 276:fibre-cpp/legacy_protocol.cpp ****         callback = it1->second.callback;
 277:fibre-cpp/legacy_protocol.cpp ****         tx_end = it1->second.tx_buf.begin();
 278:fibre-cpp/legacy_protocol.cpp ****         rx_end = it1->second.rx_buf.begin();
 279:fibre-cpp/legacy_protocol.cpp ****         expected_acks_.erase(it1);
 280:fibre-cpp/legacy_protocol.cpp ****     }
 281:fibre-cpp/legacy_protocol.cpp **** 
 282:fibre-cpp/legacy_protocol.cpp ****     if (transmitting_op_ == handle) {
 283:fibre-cpp/legacy_protocol.cpp ****         // Cancel the TX task because it belongs to the endpoint operation that
 284:fibre-cpp/legacy_protocol.cpp ****         // is being cancelled.
 285:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->cancel_write(tx_handle_);
 286:fibre-cpp/legacy_protocol.cpp ****     } else {
 287:fibre-cpp/legacy_protocol.cpp ****         // Either we're waiting for an ack on this operation or it has not yet
 288:fibre-cpp/legacy_protocol.cpp ****         // been sent. In both cases we can just complete immediately.
 289:fibre-cpp/legacy_protocol.cpp ****         callback.invoke_and_clear({kStreamCancelled, tx_end, rx_end});
 290:fibre-cpp/legacy_protocol.cpp ****     }
 291:fibre-cpp/legacy_protocol.cpp **** }
 292:fibre-cpp/legacy_protocol.cpp **** 
 293:fibre-cpp/legacy_protocol.cpp **** #endif
 294:fibre-cpp/legacy_protocol.cpp **** 
 295:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_SERVER
 296:fibre-cpp/legacy_protocol.cpp **** 
 297:fibre-cpp/legacy_protocol.cpp **** // Returns part of the JSON interface definition.
 298:fibre-cpp/legacy_protocol.cpp **** bool fibre::endpoint0_handler(fibre::cbufptr_t* input_buffer, fibre::bufptr_t* output_buffer) {
 409              		.loc 1 298 95 is_stmt 1 view -0
 410              		.cfi_startproc
 411              		@ args = 0, pretend = 0, frame = 24
 412              		@ frame_needed = 0, uses_anonymous_args = 0
 413              		.loc 1 298 95 is_stmt 0 view .LVU75
 414 0000 70B5     		push	{r4, r5, r6, lr}
 415              	.LCFI6:
 416              		.cfi_def_cfa_offset 16
 417              		.cfi_offset 4, -16
 418              		.cfi_offset 5, -12
 419              		.cfi_offset 6, -8
 420              		.cfi_offset 14, -4
 421 0002 86B0     		sub	sp, sp, #24
 422              	.LCFI7:
 423              		.cfi_def_cfa_offset 40
 424 0004 0E46     		mov	r6, r1
 299:fibre-cpp/legacy_protocol.cpp ****     // The request must contain a 32 bit integer to specify an offset
 300:fibre-cpp/legacy_protocol.cpp ****     std::optional<uint32_t> offset = read_le<uint32_t>(input_buffer);
 425              		.loc 1 300 5 is_stmt 1 view .LVU76
ARM GAS  /tmp/ccjyQa7a.s 			page 15


 426              	.LVL43:
 427              	.LBB633:
 428              	.LBI633:
 429              		.file 3 "fibre-cpp/include/fibre/simple_serdes.hpp"
   1:fibre-cpp/include/fibre/simple_serdes.hpp **** #ifndef __FIBRE_SIMPLE_SERDES
   2:fibre-cpp/include/fibre/simple_serdes.hpp **** #define __FIBRE_SIMPLE_SERDES
   3:fibre-cpp/include/fibre/simple_serdes.hpp **** 
   4:fibre-cpp/include/fibre/simple_serdes.hpp **** #include "cpp_utils.hpp"
   5:fibre-cpp/include/fibre/simple_serdes.hpp **** #include "limits.h"
   6:fibre-cpp/include/fibre/simple_serdes.hpp **** #include <optional> // TODO: make C++11 backport of this
   7:fibre-cpp/include/fibre/simple_serdes.hpp **** #include <cstring>
   8:fibre-cpp/include/fibre/simple_serdes.hpp **** #include <stdint.h>
   9:fibre-cpp/include/fibre/simple_serdes.hpp **** 
  10:fibre-cpp/include/fibre/simple_serdes.hpp **** template<typename T, bool BigEndian, typename = void>
  11:fibre-cpp/include/fibre/simple_serdes.hpp **** struct SimpleSerializer;
  12:fibre-cpp/include/fibre/simple_serdes.hpp **** template<typename T>
  13:fibre-cpp/include/fibre/simple_serdes.hpp **** using LittleEndianSerializer = SimpleSerializer<T, false>;
  14:fibre-cpp/include/fibre/simple_serdes.hpp **** template<typename T>
  15:fibre-cpp/include/fibre/simple_serdes.hpp **** using BigEndianSerializer = SimpleSerializer<T, true>;
  16:fibre-cpp/include/fibre/simple_serdes.hpp **** 
  17:fibre-cpp/include/fibre/simple_serdes.hpp **** 
  18:fibre-cpp/include/fibre/simple_serdes.hpp **** /* @brief Serializer/deserializer for arbitrary integral number types */
  19:fibre-cpp/include/fibre/simple_serdes.hpp **** // TODO: allow reading an arbitrary number of bits
  20:fibre-cpp/include/fibre/simple_serdes.hpp **** template<typename T, bool BigEndian>
  21:fibre-cpp/include/fibre/simple_serdes.hpp **** struct SimpleSerializer<T, BigEndian, typename std::enable_if_t<std::is_integral<T>::value>> {
  22:fibre-cpp/include/fibre/simple_serdes.hpp ****     static constexpr size_t BIT_WIDTH = std::numeric_limits<T>::digits;
  23:fibre-cpp/include/fibre/simple_serdes.hpp ****     static constexpr size_t BYTE_WIDTH = (BIT_WIDTH + 7) / 8;
  24:fibre-cpp/include/fibre/simple_serdes.hpp **** 
  25:fibre-cpp/include/fibre/simple_serdes.hpp ****     template<typename TIterator>
  26:fibre-cpp/include/fibre/simple_serdes.hpp ****     static std::optional<T> read(TIterator* begin, TIterator end = nullptr) {
  27:fibre-cpp/include/fibre/simple_serdes.hpp ****         T result = 0;
  28:fibre-cpp/include/fibre/simple_serdes.hpp ****         if (BigEndian) {
  29:fibre-cpp/include/fibre/simple_serdes.hpp ****             for (size_t i = BYTE_WIDTH; i > 0; (i++, (*begin)++)) {
  30:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
  31:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
  32:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = **begin;
  33:fibre-cpp/include/fibre/simple_serdes.hpp ****                 result |= static_cast<T>(byte) << ((i - 1) << 3);
  34:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
  35:fibre-cpp/include/fibre/simple_serdes.hpp ****         } else {
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****             for (size_t i = 0; i < BYTE_WIDTH; (i++, (*begin)++)) {
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
  38:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
  39:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = **begin;
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****                 result |= static_cast<T>(byte) << (i << 3);
  41:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
  42:fibre-cpp/include/fibre/simple_serdes.hpp ****         }
  43:fibre-cpp/include/fibre/simple_serdes.hpp ****         return result;
  44:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
  45:fibre-cpp/include/fibre/simple_serdes.hpp **** 
  46:fibre-cpp/include/fibre/simple_serdes.hpp ****     template<typename TIterator>
  47:fibre-cpp/include/fibre/simple_serdes.hpp ****     static bool write(T value, TIterator* begin, TIterator end = nullptr) {
  48:fibre-cpp/include/fibre/simple_serdes.hpp ****         if (BigEndian) {
  49:fibre-cpp/include/fibre/simple_serdes.hpp ****             for (size_t i = BYTE_WIDTH; i > 0; (i--, (*begin)++)) {
  50:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
  51:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return false;
  52:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = static_cast<uint8_t>((value >> ((i - 1) << 3)) & 0xff);
  53:fibre-cpp/include/fibre/simple_serdes.hpp ****                 **begin = byte;
ARM GAS  /tmp/ccjyQa7a.s 			page 16


  54:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
  55:fibre-cpp/include/fibre/simple_serdes.hpp ****         } else {
  56:fibre-cpp/include/fibre/simple_serdes.hpp ****             for (size_t i = 0; i < BYTE_WIDTH; (i++, (*begin)++)) {
  57:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
  58:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return false;
  59:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = static_cast<uint8_t>((value >> (i << 3)) & 0xff);
  60:fibre-cpp/include/fibre/simple_serdes.hpp ****                 **begin = byte;
  61:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
  62:fibre-cpp/include/fibre/simple_serdes.hpp ****         }
  63:fibre-cpp/include/fibre/simple_serdes.hpp ****         return true;
  64:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
  65:fibre-cpp/include/fibre/simple_serdes.hpp **** };
  66:fibre-cpp/include/fibre/simple_serdes.hpp **** 
  67:fibre-cpp/include/fibre/simple_serdes.hpp **** template<typename T>
  68:fibre-cpp/include/fibre/simple_serdes.hpp **** inline std::optional<T> read_le(fibre::cbufptr_t* buffer) {
 430              		.loc 3 68 25 view .LVU77
 431              	.LBB634:
 432              	.LBB635:
 433              	.LBI635:
 434              		.file 4 "fibre-cpp/include/fibre/bufptr.hpp"
   1:fibre-cpp/include/fibre/bufptr.hpp **** #ifndef __FIBRE_BUFPTR_HPP
   2:fibre-cpp/include/fibre/bufptr.hpp **** #define __FIBRE_BUFPTR_HPP
   3:fibre-cpp/include/fibre/bufptr.hpp **** 
   4:fibre-cpp/include/fibre/bufptr.hpp **** #include <stdlib.h>
   5:fibre-cpp/include/fibre/bufptr.hpp **** #include <vector>
   6:fibre-cpp/include/fibre/bufptr.hpp **** 
   7:fibre-cpp/include/fibre/bufptr.hpp **** namespace fibre {
   8:fibre-cpp/include/fibre/bufptr.hpp **** 
   9:fibre-cpp/include/fibre/bufptr.hpp **** static inline bool soft_assert(bool expr) { return expr; } // TODO: implement
  10:fibre-cpp/include/fibre/bufptr.hpp **** 
  11:fibre-cpp/include/fibre/bufptr.hpp **** /**
  12:fibre-cpp/include/fibre/bufptr.hpp ****  * @brief Holds a reference to a buffer and a length.
  13:fibre-cpp/include/fibre/bufptr.hpp ****  * Since this class implements begin() and end(), you can use it with many
  14:fibre-cpp/include/fibre/bufptr.hpp ****  * standard algorithms that operate on iterable objects.
  15:fibre-cpp/include/fibre/bufptr.hpp ****  */
  16:fibre-cpp/include/fibre/bufptr.hpp **** template<typename T>
  17:fibre-cpp/include/fibre/bufptr.hpp **** struct generic_bufptr_t {
  18:fibre-cpp/include/fibre/bufptr.hpp ****     using iterator = T*;
  19:fibre-cpp/include/fibre/bufptr.hpp ****     using const_iterator = const T*;
  20:fibre-cpp/include/fibre/bufptr.hpp **** 
  21:fibre-cpp/include/fibre/bufptr.hpp ****     generic_bufptr_t(T* begin, size_t length) : begin_(begin), end_(begin + length) {}
  22:fibre-cpp/include/fibre/bufptr.hpp **** 
  23:fibre-cpp/include/fibre/bufptr.hpp ****     generic_bufptr_t(T* begin, T* end) : begin_(begin), end_(end) {}
  24:fibre-cpp/include/fibre/bufptr.hpp **** 
  25:fibre-cpp/include/fibre/bufptr.hpp ****     generic_bufptr_t() : begin_(nullptr), end_(nullptr) {}
  26:fibre-cpp/include/fibre/bufptr.hpp **** 
  27:fibre-cpp/include/fibre/bufptr.hpp ****     template<size_t I>
  28:fibre-cpp/include/fibre/bufptr.hpp ****     generic_bufptr_t(T (&begin)[I]) : generic_bufptr_t(begin, I) {}
  29:fibre-cpp/include/fibre/bufptr.hpp **** 
  30:fibre-cpp/include/fibre/bufptr.hpp ****     generic_bufptr_t(std::vector<typename std::remove_const<T>::type>& vector)
  31:fibre-cpp/include/fibre/bufptr.hpp ****         : generic_bufptr_t(vector.data(), vector.size()) {}
  32:fibre-cpp/include/fibre/bufptr.hpp **** 
  33:fibre-cpp/include/fibre/bufptr.hpp ****     generic_bufptr_t(const std::vector<typename std::remove_const<T>::type>& vector)
  34:fibre-cpp/include/fibre/bufptr.hpp ****         : generic_bufptr_t(vector.data(), vector.size()) {}
  35:fibre-cpp/include/fibre/bufptr.hpp **** 
  36:fibre-cpp/include/fibre/bufptr.hpp ****     generic_bufptr_t(const generic_bufptr_t<typename std::remove_const<T>::type>& other)
  37:fibre-cpp/include/fibre/bufptr.hpp ****         : generic_bufptr_t(other.begin(), other.end()) {}
ARM GAS  /tmp/ccjyQa7a.s 			page 17


  38:fibre-cpp/include/fibre/bufptr.hpp **** 
  39:fibre-cpp/include/fibre/bufptr.hpp ****     generic_bufptr_t& operator+=(size_t num) {
  40:fibre-cpp/include/fibre/bufptr.hpp ****         if (!soft_assert(num <= size())) {
  41:fibre-cpp/include/fibre/bufptr.hpp ****             num = size();
  42:fibre-cpp/include/fibre/bufptr.hpp ****         }
  43:fibre-cpp/include/fibre/bufptr.hpp ****         begin_ += num;
  44:fibre-cpp/include/fibre/bufptr.hpp ****         return *this;
  45:fibre-cpp/include/fibre/bufptr.hpp ****     }
  46:fibre-cpp/include/fibre/bufptr.hpp **** 
  47:fibre-cpp/include/fibre/bufptr.hpp ****     generic_bufptr_t operator++(int) {
  48:fibre-cpp/include/fibre/bufptr.hpp ****         generic_bufptr_t result = *this;
  49:fibre-cpp/include/fibre/bufptr.hpp ****         *this += 1;
  50:fibre-cpp/include/fibre/bufptr.hpp ****         return result;
  51:fibre-cpp/include/fibre/bufptr.hpp ****     }
  52:fibre-cpp/include/fibre/bufptr.hpp **** 
  53:fibre-cpp/include/fibre/bufptr.hpp ****     T& operator*() {
  54:fibre-cpp/include/fibre/bufptr.hpp ****         return *begin_;
  55:fibre-cpp/include/fibre/bufptr.hpp ****     }
  56:fibre-cpp/include/fibre/bufptr.hpp **** 
  57:fibre-cpp/include/fibre/bufptr.hpp ****     generic_bufptr_t take(size_t num) const {
  58:fibre-cpp/include/fibre/bufptr.hpp ****         if (!soft_assert(num <= size())) {
  59:fibre-cpp/include/fibre/bufptr.hpp ****             num = size();
  60:fibre-cpp/include/fibre/bufptr.hpp ****         }
  61:fibre-cpp/include/fibre/bufptr.hpp ****         generic_bufptr_t result = {begin_, num};
  62:fibre-cpp/include/fibre/bufptr.hpp ****         return result;
  63:fibre-cpp/include/fibre/bufptr.hpp ****     }
  64:fibre-cpp/include/fibre/bufptr.hpp **** 
  65:fibre-cpp/include/fibre/bufptr.hpp ****     generic_bufptr_t skip(size_t num, size_t* processed_bytes = nullptr) const {
  66:fibre-cpp/include/fibre/bufptr.hpp ****         if (!soft_assert(num <= size())) {
  67:fibre-cpp/include/fibre/bufptr.hpp ****             num = size();
  68:fibre-cpp/include/fibre/bufptr.hpp ****         }
  69:fibre-cpp/include/fibre/bufptr.hpp ****         if (processed_bytes)
  70:fibre-cpp/include/fibre/bufptr.hpp ****             (*processed_bytes) += num;
  71:fibre-cpp/include/fibre/bufptr.hpp ****         return {begin_ + num, end_};
  72:fibre-cpp/include/fibre/bufptr.hpp ****     }
  73:fibre-cpp/include/fibre/bufptr.hpp **** 
  74:fibre-cpp/include/fibre/bufptr.hpp ****     size_t size() const {
  75:fibre-cpp/include/fibre/bufptr.hpp ****         return end_ - begin_;
  76:fibre-cpp/include/fibre/bufptr.hpp ****     }
  77:fibre-cpp/include/fibre/bufptr.hpp **** 
  78:fibre-cpp/include/fibre/bufptr.hpp ****     bool empty() const {
  79:fibre-cpp/include/fibre/bufptr.hpp ****         return size() == 0;
  80:fibre-cpp/include/fibre/bufptr.hpp ****     }
  81:fibre-cpp/include/fibre/bufptr.hpp **** 
  82:fibre-cpp/include/fibre/bufptr.hpp ****     T*& begin() { return begin_; }
 435              		.loc 4 82 9 view .LVU78
 436              		.loc 4 82 9 is_stmt 0 view .LVU79
 437              	.LBE635:
  69:fibre-cpp/include/fibre/simple_serdes.hpp ****     static_assert(is_complete<LittleEndianSerializer<T>>(), "no LittleEndianSerializer is defined f
  70:fibre-cpp/include/fibre/simple_serdes.hpp ****     return LittleEndianSerializer<T>::read(&buffer->begin(), buffer->end());
 438              		.loc 3 70 43 view .LVU80
 439 0006 4568     		ldr	r5, [r0, #4]
 440              	.LVL44:
 441              	.LBB636:
 442              	.LBI636:
  26:fibre-cpp/include/fibre/simple_serdes.hpp ****         T result = 0;
 443              		.loc 3 26 29 is_stmt 1 view .LVU81
ARM GAS  /tmp/ccjyQa7a.s 			page 18


 444              	.LBB637:
  27:fibre-cpp/include/fibre/simple_serdes.hpp ****         if (BigEndian) {
 445              		.loc 3 27 11 is_stmt 0 view .LVU82
 446 0008 0024     		movs	r4, #0
 447              	.LBB638:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 448              		.loc 3 36 25 view .LVU83
 449 000a 2346     		mov	r3, r4
 450 000c 09E0     		b	.L33
 451              	.LVL45:
 452              	.L31:
 453              	.LBB639:
  39:fibre-cpp/include/fibre/simple_serdes.hpp ****                 result |= static_cast<T>(byte) << (i << 3);
 454              		.loc 3 39 25 view .LVU84
 455 000e 0268     		ldr	r2, [r0]
 456 0010 12F801CB 		ldrb	ip, [r2], #1	@ zero_extendqisi2
 457              	.LVL46:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 458              		.loc 3 40 54 view .LVU85
 459 0014 D900     		lsls	r1, r3, #3
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 460              		.loc 3 40 48 view .LVU86
 461 0016 0CFA01FC 		lsl	ip, ip, r1
 462              	.LVL47:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 463              		.loc 3 40 24 view .LVU87
 464 001a 44EA0C04 		orr	r4, r4, ip
 465              	.LVL48:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 466              		.loc 3 40 24 view .LVU88
 467              	.LBE639:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 468              		.loc 3 36 13 is_stmt 1 view .LVU89
 469 001e 0133     		adds	r3, r3, #1
 470              	.LVL49:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 471              		.loc 3 36 13 is_stmt 0 view .LVU90
 472 0020 0260     		str	r2, [r0]
 473              	.LVL50:
 474              	.L33:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 475              		.loc 3 36 34 is_stmt 1 view .LVU91
 476 0022 032B     		cmp	r3, #3
 477 0024 08D8     		bhi	.L30
 478              	.LBB647:
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
 479              		.loc 3 37 17 is_stmt 0 view .LVU92
 480 0026 002D     		cmp	r5, #0
 481 0028 F1D0     		beq	.L31
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
 482              		.loc 3 37 37 view .LVU93
 483 002a 0268     		ldr	r2, [r0]
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
 484              		.loc 3 37 25 view .LVU94
 485 002c 9542     		cmp	r5, r2
 486 002e EED8     		bhi	.L31
 487              	.LVL51:
ARM GAS  /tmp/ccjyQa7a.s 			page 19


 488              	.LBB640:
 489              	.LBI640:
 490              		.file 5 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // <optional> -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // Copyright (C) 2013-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** /** @file include/optional
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****  *  This is a Standard C++ Library header.
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****  */
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #ifndef _GLIBCXX_OPTIONAL
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #define _GLIBCXX_OPTIONAL 1
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #if __cplusplus >= 201703L
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <utility>
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <type_traits>
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <exception>
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <new>
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <initializer_list>
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <bits/exception_defines.h>
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <bits/functional_hash.h>
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <bits/enable_special_members.h>
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #if __cplusplus > 201703L
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** # include <compare>
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #endif
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** {
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @addtogroup utilities
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @{
ARM GAS  /tmp/ccjyQa7a.s 			page 20


  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    */
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #define __cpp_lib_optional 201606L
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     class optional;
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /// Tag type to disengage optional objects.
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   struct nullopt_t
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   {
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // Do not user-declare default constructor at all for
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // optional_value = {} syntax to work.
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // nullopt_t() = delete;
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // Used for constructing nullopt.
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     enum class _Construct { _Token };
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // Must be constexpr for nullopt_t to be literal.
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     explicit constexpr nullopt_t(_Construct) { }
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   };
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /// Tag to disengage optional objects.
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   inline constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @brief Exception class thrown when a disengaged optional object is
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  dereferenced.
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @ingroup exceptions
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    */
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   class bad_optional_access : public exception
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   {
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   public:
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     bad_optional_access() = default;
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     virtual ~bad_optional_access() = default;
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     const char* what() const noexcept override
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return "bad optional access"; }
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   };
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   void
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   __throw_bad_optional_access()
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   __attribute__((__noreturn__));
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // XXX Does not belong here.
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   inline void
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   __throw_bad_optional_access()
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // This class template manages construction/destruction of
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // the contained value for a std::optional.
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload_base
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base() = default;
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
ARM GAS  /tmp/ccjyQa7a.s 			page 21


 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_engaged(true)
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args>
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_Optional_payload_base(std::initializer_list<_Up> __il,
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			       _Args&&... __args)
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__il, std::forward<_Args>(__args)...),
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_engaged(true)
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructor used by _Optional_base copy constructor when the
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // contained value is not trivially copy constructible.
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(bool __engaged,
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			     const _Optional_payload_base& __other)
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (__other._M_engaged)
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(__other._M_get());
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructor used by _Optional_base move constructor when the
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // contained value is not trivially move constructible.
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(bool __engaged,
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			     _Optional_payload_base&& __other)
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (__other._M_engaged)
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(std::move(__other._M_get()));
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy constructor is only used to when the contained value is
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // trivially copy constructible.
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(const _Optional_payload_base&) = default;
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Move constructor is only used to when the contained value is
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // trivially copy constructible.
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(_Optional_payload_base&&) = default;
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base&
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(const _Optional_payload_base&) = default;
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base&
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(_Optional_payload_base&&) = default;
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // used to perform non-trivial copy assignment.
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_copy_assign(const _Optional_payload_base& __other)
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         if (this->_M_engaged && __other._M_engaged)
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           this->_M_get() = __other._M_get();
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         else
ARM GAS  /tmp/ccjyQa7a.s 			page 22


 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    if (__other._M_engaged)
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(__other._M_get());
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    else
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // used to perform non-trivial move assignment.
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_move_assign(_Optional_payload_base&& __other)
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (this->_M_engaged && __other._M_engaged)
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	else
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    if (__other._M_engaged)
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    else
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       struct _Empty_byte { };
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, bool = is_trivially_destructible_v<_Up>>
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	union _Storage
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename... _Args>
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename _Vp, typename... _Args>
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _Empty_byte _M_empty;
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           _Up _M_value;
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	};
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	union _Storage<_Up, false>
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename... _Args>
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
ARM GAS  /tmp/ccjyQa7a.s 			page 23


 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename _Vp, typename... _Args>
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  // User-provided destructor is needed when _Up has non-trivial dtor.
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ~_Storage() { }
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _Empty_byte _M_empty;
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           _Up _M_value;
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	};
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Storage<_Stored_type> _M_payload;
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       bool _M_engaged = false;
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         void
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         _M_construct(_Args&&... __args)
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         {
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           ::new ((void *) std::__addressof(this->_M_payload))
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           this->_M_engaged = true;
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         }
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_destroy() noexcept
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_engaged = false;
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // The _M_get() operations have _M_engaged as a precondition.
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // They exist to access the contained value with the appropriate
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // const-qualification, because _M_payload has had the const removed.
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() noexcept
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_payload._M_value; }
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() const noexcept
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_payload._M_value; }
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_reset() noexcept
 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (this->_M_engaged)
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 24


 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Class template that manages the payload for optionals.
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp,
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    bool /*_HasTrivialDestructor*/ =
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      is_trivially_destructible_v<_Tp>,
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    bool /*_HasTrivialCopy */ =
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      is_trivially_copy_assignable_v<_Tp>
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      && is_trivially_copy_constructible_v<_Tp>,
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    bool /*_HasTrivialMove */ =
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      is_trivially_move_assignable_v<_Tp>
 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      && is_trivially_move_constructible_v<_Tp>>
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload;
 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for potentially-constexpr optionals (trivial copy/move/destroy).
 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, true, true>
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial copy construction/assignment.
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, false, true>
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial copy assignment.
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(const _Optional_payload& __other)
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_copy_assign(__other);
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial move construction/assignment.
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, true, false>
 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
ARM GAS  /tmp/ccjyQa7a.s 			page 25


 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial move assignment.
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(_Optional_payload&& __other)
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_move_assign(std::move(__other));
 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial copy and move assignment.
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, false, false>
 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial copy assignment.
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(const _Optional_payload& __other)
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_copy_assign(__other);
 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial move assignment.
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(_Optional_payload&& __other)
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_move_assign(std::move(__other));
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial destructors.
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp, bool _Copy, bool _Move>
 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, false, _Copy, _Move>
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload<_Tp, true, false, false>
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Base class implements all the constructors and assignment operators:
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
ARM GAS  /tmp/ccjyQa7a.s 			page 26


 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Destructor needs to destroy the contained value:
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() { this->_M_reset(); }
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Common base class for _Optional_base<T> to avoid repeating these
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // member functions in each specialization.
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Dp>
 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     class _Optional_base_impl
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     protected:
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // The _M_construct operation has !_M_engaged as a precondition
 412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // while _M_destruct has _M_engaged as a precondition.
 413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
 414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	void
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_construct(_Args&&... __args)
 416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ::new
 419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       void
 425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_destruct() noexcept
 426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_destroy(); }
 427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_reset() noexcept
 431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr bool _M_is_engaged() const noexcept
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // The _M_get operations have _M_engaged as a precondition.
 437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&
 438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() noexcept
 439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return static_cast<_Dp*>(this)->_M_payload._M_get();
 442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&
 445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() const noexcept
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
 453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * @brief Class template that provides copy/move constructors of optional.
ARM GAS  /tmp/ccjyQa7a.s 			page 27


 454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
 455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * Such a separate base class template is necessary in order to
 456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * conditionally make copy/move constructors trivial.
 457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
 458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * When the contained value is trivially copy/move constructible,
 459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * the copy/move constructors of _Optional_base will invoke the
 460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * trivial copy/move constructor of _Optional_payload. Otherwise,
 461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * they will invoke _Optional_payload(bool, const _Optional_payload&)
 462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * or _Optional_payload(bool, _Optional_payload&&) to initialize
 463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * the contained value, if copying/moving an engaged optional.
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
 465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * Whether the other special members are trivial is determined by the
 466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * _Optional_payload<_Tp> specialization used for the _M_payload member.
 467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
 468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * @see optional, _Enable_special_members
 469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     */
 470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp,
 471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	   bool = is_trivially_copy_constructible_v<_Tp>,
 472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	   bool = is_trivially_move_constructible_v<_Tp>>
 473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base
 474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
 478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __other._M_payload)
 501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::move(__other._M_payload))
 507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
ARM GAS  /tmp/ccjyQa7a.s 			page 28


 511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base<_Tp, false, true>
 518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
 522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __other._M_payload)
 545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base<_Tp, true, false>
 558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
 562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
ARM GAS  /tmp/ccjyQa7a.s 			page 29


 568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::move(__other._M_payload))
 588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base<_Tp, true, true>
 599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
 603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
ARM GAS  /tmp/ccjyQa7a.s 			page 30


 625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   class optional;
 635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __converts_from_optional =
 638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       __or_<is_constructible<_Tp, const optional<_Up>&>,
 639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_constructible<_Tp, optional<_Up>&>,
 640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_constructible<_Tp, const optional<_Up>&&>,
 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_constructible<_Tp, optional<_Up>&&>,
 642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<const optional<_Up>&, _Tp>,
 643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<optional<_Up>&, _Tp>,
 644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<const optional<_Up>&&, _Tp>,
 645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<optional<_Up>&&, _Tp>>;
 646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __assigns_from_optional =
 649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       __or_<is_assignable<_Tp&, const optional<_Up>&>,
 650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&>,
 651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_assignable<_Tp&, const optional<_Up>&&>,
 652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&&>>;
 653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
 655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * @brief Class template for optional values.
 656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     */
 657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     class optional
 659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : private _Optional_base<_Tp>,
 660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       private _Enable_copy_move<
 661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Copy constructor.
 662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	is_copy_constructible_v<_Tp>,
 663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Copy assignment.
 664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__and_v<is_copy_constructible<_Tp>, is_copy_assignable<_Tp>>,
 665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Move constructor.
 666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	is_move_constructible_v<_Tp>,
 667:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Move assignment.
 668:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__and_v<is_move_constructible<_Tp>, is_move_assignable<_Tp>>,
 669:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Unique tag type.
 670:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional<_Tp>>
 671:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 672:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, nullopt_t>);
 673:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, in_place_t>);
 674:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       static_assert(!is_reference_v<_Tp>);
 675:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 676:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     private:
 677:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Base = _Optional_base<_Tp>;
 678:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 679:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // SFINAE helpers
 680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 681:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using __not_self = __not_<is_same<optional, __remove_cvref_t<_Up>>>;
ARM GAS  /tmp/ccjyQa7a.s 			page 31


 682:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 683:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using __not_tag = __not_<is_same<in_place_t, __remove_cvref_t<_Up>>>;
 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Cond>
 685:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using _Requires = enable_if_t<__and_v<_Cond...>, bool>;
 686:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 687:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     public:
 688:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using value_type = _Tp;
 689:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr optional() = default;
 691:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr optional(nullopt_t) noexcept { }
 491              		.loc 5 692 17 is_stmt 1 view .LVU95
 492              	.LBB641:
 493              	.LBB642:
 494              	.LBI642:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 495              		.loc 5 602 17 view .LVU96
 496              	.LBB643:
 497              	.LBI643:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 498              		.loc 5 302 7 view .LVU97
 499              	.LBB644:
 500              	.LBI644:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 501              		.loc 5 110 7 view .LVU98
 502              	.LBB645:
 503              	.LBB646:
 504              	.LBI646:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 505              		.loc 5 199 14 view .LVU99
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 506              		.loc 5 199 14 is_stmt 0 view .LVU100
 507              	.LBE646:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 508              		.loc 5 110 7 view .LVU101
 509 0030 0023     		movs	r3, #0
 510              	.LVL52:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 511              		.loc 5 110 7 view .LVU102
 512 0032 8DF80430 		strb	r3, [sp, #4]
 513              	.LVL53:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 514              		.loc 5 110 7 view .LVU103
 515              	.LBE645:
 516              	.LBE644:
 517              	.LBE643:
 518              	.LBE642:
 519              	.LBE641:
 520              	.LBE640:
  38:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = **begin;
 521              		.loc 3 38 33 view .LVU104
 522 0036 03E0     		b	.L32
 523              	.LVL54:
 524              	.L30:
  38:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = **begin;
 525              		.loc 3 38 33 view .LVU105
 526              	.LBE647:
ARM GAS  /tmp/ccjyQa7a.s 			page 32


 527              	.LBE638:
 528              	.LBB648:
 529              	.LBI648:
 693:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 694:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Converting constructors for engaged optionals.
 695:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up = _Tp,
 696:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 698:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_convertible<_Up&&, _Tp>> = true>
 699:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(_Up&& __t)
 530              		.loc 5 700 2 is_stmt 1 view .LVU106
 531              	.LBB649:
 532              	.LBB650:
 533              	.LBB651:
 534              	.LBI651:
 535              		.file 6 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** /** @file bits/move.h
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****  */
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #ifndef _MOVE_H
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #define _MOVE_H 1
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #include <bits/c++config.h>
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #if __cplusplus < 201103L
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** # include <bits/concept_check.h>
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #endif
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** {
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
ARM GAS  /tmp/ccjyQa7a.s 			page 33


  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   /**
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @ingroup utilities
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    */
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   template<typename _Tp>
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     { return __builtin_addressof(__r); }
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #if __cplusplus >= 201103L
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** } // namespace
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** {
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   /**
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @addtogroup utilities
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @{
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    */
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   /**
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    */
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   template<typename _Tp>
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     constexpr _Tp&&
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 536              		.loc 6 76 5 view .LVU107
 537              		.loc 6 76 5 is_stmt 0 view .LVU108
 538              	.LBE651:
 539              	.LBB652:
 540              	.LBI652:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 541              		.loc 5 607 28 is_stmt 1 view .LVU109
 542              	.LBB653:
 543              	.LBB654:
 544              	.LBB655:
 545              	.LBI655:
 546              		.loc 6 76 5 view .LVU110
 547              		.loc 6 76 5 is_stmt 0 view .LVU111
 548              	.LBE655:
 549              	.LBB656:
 550              	.LBI656:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 551              		.loc 5 300 42 is_stmt 1 view .LVU112
 552              	.LBB657:
 553              	.LBB658:
 554              	.LBB659:
ARM GAS  /tmp/ccjyQa7a.s 			page 34


 555              	.LBI659:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 556              		.loc 5 115 2 view .LVU113
 557              	.LBB660:
 558              	.LBB661:
 559              	.LBB662:
 560              	.LBI662:
 561              		.loc 6 76 5 view .LVU114
 562              		.loc 6 76 5 is_stmt 0 view .LVU115
 563              	.LBE662:
 564              	.LBB663:
 565              	.LBI663:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 566              		.loc 5 203 6 is_stmt 1 view .LVU116
 567              	.LBB664:
 568              	.LBB665:
 569              	.LBB666:
 570              	.LBI666:
 571              		.loc 6 76 5 view .LVU117
 572              		.loc 6 76 5 is_stmt 0 view .LVU118
 573              	.LBE666:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 574              		.loc 5 204 47 view .LVU119
 575 0038 0094     		str	r4, [sp]
 576              	.LVL55:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 577              		.loc 5 204 47 view .LVU120
 578              	.LBE665:
 579              	.LBE664:
 580              	.LBE663:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 581              		.loc 5 117 19 view .LVU121
 582 003a 0123     		movs	r3, #1
 583              	.LVL56:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 584              		.loc 5 117 19 view .LVU122
 585 003c 8DF80430 		strb	r3, [sp, #4]
 586              	.LVL57:
 587              	.L32:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 588              		.loc 5 117 19 view .LVU123
 589              	.LBE661:
 590              	.LBE660:
 591              	.LBE659:
 592              	.LBE658:
 593              	.LBE657:
 594              	.LBE656:
 595              	.LBE654:
 596              	.LBE653:
 597              	.LBE652:
 598              	.LBE650:
 599              	.LBE649:
 600              	.LBE648:
 601              	.LBE637:
 602              	.LBE636:
 603              	.LBE634:
 604              	.LBE633:
ARM GAS  /tmp/ccjyQa7a.s 			page 35


 301:fibre-cpp/legacy_protocol.cpp ****     
 302:fibre-cpp/legacy_protocol.cpp ****     if (!offset.has_value()) {
 605              		.loc 1 302 5 is_stmt 1 view .LVU124
 606              	.LBB667:
 607              	.LBB668:
 608              	.LBI668:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 702:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up = _Tp,
 704:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 705:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 706:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<is_convertible<_Up&&, _Tp>>> = false>
 707:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 708:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(_Up&& __t)
 709:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _Base(std::in_place, std::forward<_Up>(__t)) { }
 710:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 711:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up,
 712:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 713:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 714:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_convertible<const _Up&, _Tp>,
 715:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = true>
 716:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 717:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(const optional<_Up>& __t)
 718:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 719:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 720:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(*__t);
 721:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 722:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 723:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up,
 724:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 725:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 726:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<is_convertible<const _Up&, _Tp>>,
 727:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = false>
 728:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 729:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(const optional<_Up>& __t)
 730:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 731:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 732:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(*__t);
 733:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 734:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 735:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template <typename _Up,
 736:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 737:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 738:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  is_convertible<_Up&&, _Tp>,
 739:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = true>
 740:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 741:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(optional<_Up>&& __t)
 742:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 743:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 744:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(std::move(*__t));
 745:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 746:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 747:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template <typename _Up,
 748:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 749:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 750:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  __not_<is_convertible<_Up&&, _Tp>>,
 751:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = false>
ARM GAS  /tmp/ccjyQa7a.s 			page 36


 752:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 753:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(optional<_Up>&& __t)
 754:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 755:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 756:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(std::move(*__t));
 757:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 758:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 759:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 760:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<is_constructible<_Tp, _Args&&...>> = false>
 761:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 762:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(in_place_t, _Args&&... __args)
 763:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Args>(__args)...) { }
 764:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 765:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 766:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<is_constructible<_Tp,
 767:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					  initializer_list<_Up>&,
 768:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					  _Args&&...>> = false>
 769:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 770:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
 771:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, __il, std::forward<_Args>(__args)...) { }
 772:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 773:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 774:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       optional&
 775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(nullopt_t) noexcept
 776:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 777:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_reset();
 778:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 779:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 780:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 781:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up = _Tp>
 782:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<__and_v<__not_self<_Up>,
 783:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__and_<is_scalar<_Tp>,
 784:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					  is_same<_Tp, decay_t<_Up>>>>,
 785:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_constructible<_Tp, _Up>,
 786:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_assignable<_Tp&, _Up>>,
 787:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		    optional&>
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	operator=(_Up&& __u)
 789:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (this->_M_is_engaged())
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 792:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 793:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_construct(std::forward<_Up>(__u));
 794:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 795:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return *this;
 796:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 797:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 798:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 799:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 800:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_constructible<_Tp, const _Up&>,
 801:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_assignable<_Tp&, const _Up&>,
 802:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 803:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 804:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		    optional&>
 805:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	operator=(const optional<_Up>& __u)
 806:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 807:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__u)
 808:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
ARM GAS  /tmp/ccjyQa7a.s 			page 37


 809:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      if (this->_M_is_engaged())
 810:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_get() = *__u;
 811:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      else
 812:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_construct(*__u);
 813:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 814:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 815:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
 816:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 817:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 818:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return *this;
 819:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 820:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 821:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 822:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 823:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_constructible<_Tp, _Up>,
 824:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_assignable<_Tp&, _Up>,
 825:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 826:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 827:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		    optional&>
 828:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	operator=(optional<_Up>&& __u)
 829:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 830:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__u)
 831:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
 832:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      if (this->_M_is_engaged())
 833:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_get() = std::move(*__u);
 834:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      else
 835:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_construct(std::move(*__u));
 836:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 837:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 838:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
 839:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 840:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 841:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 842:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return *this;
 843:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 844:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 845:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
 846:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<is_constructible_v<_Tp, _Args&&...>, _Tp&>
 847:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	emplace(_Args&&... __args)
 848:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 849:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_reset();
 850:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(std::forward<_Args>(__args)...);
 851:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return this->_M_get();
 852:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 853:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 854:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args>
 855:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&,
 856:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 				       _Args&&...>, _Tp&>
 857:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
 858:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 859:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_reset();
 860:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(__il, std::forward<_Args>(__args)...);
 861:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return this->_M_get();
 862:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 863:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 864:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Destructor is implicit, implemented in _Optional_base.
 865:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 38


 866:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Swap.
 867:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       void
 868:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       swap(optional& __other)
 869:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>
 870:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       && is_nothrow_swappable_v<_Tp>)
 871:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using std::swap;
 873:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 874:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (this->_M_is_engaged() && __other._M_is_engaged())
 875:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  swap(this->_M_get(), __other._M_get());
 876:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	else if (this->_M_is_engaged())
 877:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 878:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    __other._M_construct(std::move(this->_M_get()));
 879:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_destruct();
 880:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 881:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	else if (__other._M_is_engaged())
 882:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 883:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_construct(std::move(__other._M_get()));
 884:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    __other._M_destruct();
 885:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 886:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 887:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 888:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Observers.
 889:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp*
 890:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator->() const
 891:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::__addressof(this->_M_get()); }
 892:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 893:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp*
 894:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator->()
 895:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::__addressof(this->_M_get()); }
 896:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 897:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&
 898:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*() const&
 899:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_get(); }
 900:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 901:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&
 902:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*()&
 903:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_get(); }
 904:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 905:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&&
 906:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*()&&
 907:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::move(this->_M_get()); }
 908:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 909:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&&
 910:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*() const&&
 911:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::move(this->_M_get()); }
 912:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 913:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr explicit operator bool() const noexcept
 914:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_is_engaged(); }
 915:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr bool has_value() const noexcept
 609              		.loc 5 916 22 view .LVU125
 610              	.LBB669:
 611              	.LBI669:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 612              		.loc 5 433 22 view .LVU126
 613              	.LBB670:
ARM GAS  /tmp/ccjyQa7a.s 			page 39


 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 614              		.loc 5 434 58 is_stmt 0 view .LVU127
 615 0040 9DF80440 		ldrb	r4, [sp, #4]	@ zero_extendqisi2
 616              	.LVL58:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 617              		.loc 5 434 58 view .LVU128
 618              	.LBE670:
 619              	.LBE669:
 620              	.LBE668:
 621              		.loc 1 302 5 view .LVU129
 622 0044 2CB3     		cbz	r4, .L34
 623              	.LBE667:
 303:fibre-cpp/legacy_protocol.cpp ****         // Didn't receive any offset
 304:fibre-cpp/legacy_protocol.cpp ****         return false;
 305:fibre-cpp/legacy_protocol.cpp ****     } else if (*offset == 0xffffffff) {
 624              		.loc 1 305 12 is_stmt 1 view .LVU130
 625              	.LBB703:
 626              	.LBB671:
 627              		.loc 1 305 16 is_stmt 0 view .LVU131
 628 0046 009B     		ldr	r3, [sp]
 629              		.loc 1 305 12 view .LVU132
 630 0048 B3F1FF3F 		cmp	r3, #-1
 631 004c 24D0     		beq	.L44
 632              	.LBE671:
 633              	.LBE703:
 306:fibre-cpp/legacy_protocol.cpp ****         // If the offset is special value 0xFFFFFFFF, send back the JSON version ID instead
 307:fibre-cpp/legacy_protocol.cpp ****         return write_le<uint32_t>(json_version_id_, output_buffer);
 308:fibre-cpp/legacy_protocol.cpp ****     } else if (*offset >= embedded_json_length) {
 634              		.loc 1 308 12 is_stmt 1 view .LVU133
 635              	.LBB704:
 636              	.LBB700:
 637              	.LBB672:
 638              		.loc 1 308 27 is_stmt 0 view .LVU134
 639 004e 1F4A     		ldr	r2, .L45
 640 0050 1268     		ldr	r2, [r2]
 641              		.loc 1 308 12 view .LVU135
 642 0052 9342     		cmp	r3, r2
 643 0054 1DD2     		bcs	.L34
 644              	.LBB673:
 309:fibre-cpp/legacy_protocol.cpp ****         // Attempt to read beyond the buffer end - return empty response
 310:fibre-cpp/legacy_protocol.cpp ****         return true;
 311:fibre-cpp/legacy_protocol.cpp ****     } else {
 312:fibre-cpp/legacy_protocol.cpp ****         // Return part of the json file
 313:fibre-cpp/legacy_protocol.cpp ****         size_t n_copy = std::min(output_buffer->size(), embedded_json_length - (size_t)*offset);
 645              		.loc 1 313 9 is_stmt 1 view .LVU136
 646              	.LVL59:
 647              	.LBB674:
 648              	.LBI674:
  74:fibre-cpp/include/fibre/bufptr.hpp ****         return end_ - begin_;
 649              		.loc 4 74 12 view .LVU137
 650              	.LBB675:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 651              		.loc 4 75 16 is_stmt 0 view .LVU138
 652 0056 7168     		ldr	r1, [r6, #4]
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 653              		.loc 4 75 23 view .LVU139
 654 0058 3068     		ldr	r0, [r6]
ARM GAS  /tmp/ccjyQa7a.s 			page 40


 655              	.LVL60:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 656              		.loc 4 75 21 view .LVU140
 657 005a 091A     		subs	r1, r1, r0
 658              	.LVL61:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 659              		.loc 4 75 21 view .LVU141
 660              	.LBE675:
 661              	.LBE674:
 662              		.loc 1 313 53 view .LVU142
 663 005c 0291     		str	r1, [sp, #8]
 664              		.loc 1 313 78 view .LVU143
 665 005e D21A     		subs	r2, r2, r3
 666 0060 0392     		str	r2, [sp, #12]
 667              	.LVL62:
 668              	.LBB676:
 669              	.LBI676:
 670              		.file 7 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
ARM GAS  /tmp/ccjyQa7a.s 			page 41


  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
ARM GAS  /tmp/ccjyQa7a.s 			page 42


  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
ARM GAS  /tmp/ccjyQa7a.s 			page 43


 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 44


 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 671              		.loc 7 230 5 is_stmt 1 view .LVU144
 672              	.LBB677:
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 673              		.loc 7 235 7 is_stmt 0 view .LVU145
 674 0062 8A42     		cmp	r2, r1
 675 0064 2FD3     		bcc	.L42
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 676              		.loc 7 237 14 view .LVU146
 677 0066 02AA     		add	r2, sp, #8
 678              	.LVL63:
 679              	.L39:
 680              		.loc 7 237 14 view .LVU147
 681              	.LBE677:
 682              	.LBE676:
 683              		.loc 1 313 95 view .LVU148
 684 0068 1568     		ldr	r5, [r2]
 685              	.LVL64:
 314:fibre-cpp/legacy_protocol.cpp ****         memcpy(output_buffer->begin(), embedded_json + *offset, n_copy);
 686              		.loc 1 314 9 is_stmt 1 view .LVU149
 687              		.loc 1 314 15 is_stmt 0 view .LVU150
 688 006a 2A46     		mov	r2, r5
 689 006c 1849     		ldr	r1, .L45+4
 690 006e 1944     		add	r1, r1, r3
 691 0070 3068     		ldr	r0, [r6]
 692 0072 FFF7FEFF 		bl	memcpy
 693              	.LVL65:
 315:fibre-cpp/legacy_protocol.cpp ****         *output_buffer = output_buffer->skip(n_copy);
 694              		.loc 1 315 9 is_stmt 1 view .LVU151
 695              	.LBB679:
 696              	.LBI679:
  65:fibre-cpp/include/fibre/bufptr.hpp ****         if (!soft_assert(num <= size())) {
 697              		.loc 4 65 22 view .LVU152
ARM GAS  /tmp/ccjyQa7a.s 			page 45


 698              	.LBB680:
 699              	.LBB681:
 700              	.LBI681:
  74:fibre-cpp/include/fibre/bufptr.hpp ****         return end_ - begin_;
 701              		.loc 4 74 12 view .LVU153
 702              	.LBB682:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 703              		.loc 4 75 16 is_stmt 0 view .LVU154
 704 0076 7168     		ldr	r1, [r6, #4]
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 705              		.loc 4 75 23 view .LVU155
 706 0078 3368     		ldr	r3, [r6]
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 707              		.loc 4 75 21 view .LVU156
 708 007a CA1A     		subs	r2, r1, r3
 709              	.LVL66:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 710              		.loc 4 75 21 view .LVU157
 711              	.LBE682:
 712              	.LBE681:
 713              	.LBE680:
 714              	.LBE679:
 715              	.LBE673:
 716              	.LBE672:
 717              	.LBE700:
 718              	.LBE704:
   9:fibre-cpp/include/fibre/bufptr.hpp **** 
 719              		.loc 4 9 45 is_stmt 1 view .LVU158
 720              	.LBB705:
 721              	.LBB701:
 722              	.LBB690:
 723              	.LBB688:
 724              	.LBB686:
 725              	.LBB685:
  66:fibre-cpp/include/fibre/bufptr.hpp ****             num = size();
 726              		.loc 4 66 9 is_stmt 0 view .LVU159
 727 007c 9542     		cmp	r5, r2
 728 007e 00D8     		bhi	.L40
 729 0080 2A46     		mov	r2, r5
 730              	.L40:
 731              	.LVL67:
  71:fibre-cpp/include/fibre/bufptr.hpp ****     }
 732              		.loc 4 71 35 view .LVU160
 733 0082 1344     		add	r3, r3, r2
 734              	.LVL68:
 735              	.LBB683:
 736              	.LBI683:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 737              		.loc 4 23 5 is_stmt 1 view .LVU161
 738              	.LBB684:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 739              		.loc 4 23 65 is_stmt 0 view .LVU162
 740 0084 0493     		str	r3, [sp, #16]
 741 0086 0591     		str	r1, [sp, #20]
 742              	.LVL69:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 743              		.loc 4 23 65 view .LVU163
ARM GAS  /tmp/ccjyQa7a.s 			page 46


 744              	.LBE684:
 745              	.LBE683:
 746              	.LBE685:
 747              	.LBE686:
 748              		.loc 1 315 24 view .LVU164
 749 0088 06AB     		add	r3, sp, #24
 750 008a 13E90300 		ldmdb	r3, {r0, r1}
 751 008e 86E80300 		stm	r6, {r0, r1}
 316:fibre-cpp/legacy_protocol.cpp ****         return true;
 752              		.loc 1 316 9 is_stmt 1 view .LVU165
 753              	.LVL70:
 754              	.L34:
 755              		.loc 1 316 9 is_stmt 0 view .LVU166
 756              	.LBE688:
 757              	.LBE690:
 758              	.LBE701:
 759              	.LBE705:
 317:fibre-cpp/legacy_protocol.cpp ****     }
 318:fibre-cpp/legacy_protocol.cpp **** }
 760              		.loc 1 318 1 view .LVU167
 761 0092 2046     		mov	r0, r4
 762 0094 06B0     		add	sp, sp, #24
 763              	.LCFI8:
 764              		.cfi_remember_state
 765              		.cfi_def_cfa_offset 16
 766              		@ sp needed
 767 0096 70BD     		pop	{r4, r5, r6, pc}
 768              	.LVL71:
 769              	.L44:
 770              	.LCFI9:
 771              		.cfi_restore_state
 772              	.LBB706:
 773              	.LBB702:
 307:fibre-cpp/legacy_protocol.cpp ****     } else if (*offset >= embedded_json_length) {
 774              		.loc 1 307 9 is_stmt 1 view .LVU168
 307:fibre-cpp/legacy_protocol.cpp ****     } else if (*offset >= embedded_json_length) {
 775              		.loc 1 307 34 is_stmt 0 view .LVU169
 776 0098 0E4B     		ldr	r3, .L45+8
 777 009a 1D68     		ldr	r5, [r3]
 778              	.LVL72:
 779              	.LBB691:
 780              	.LBI691:
  71:fibre-cpp/include/fibre/simple_serdes.hpp **** }
  72:fibre-cpp/include/fibre/simple_serdes.hpp **** 
  73:fibre-cpp/include/fibre/simple_serdes.hpp **** template<typename T>
  74:fibre-cpp/include/fibre/simple_serdes.hpp **** inline bool write_le(T value, fibre::bufptr_t* buffer) {
 781              		.loc 3 74 13 is_stmt 1 view .LVU170
 782              	.LBB692:
 783              	.LBB693:
 784              	.LBI693:
 785              		.loc 4 82 9 view .LVU171
 786              		.loc 4 82 9 is_stmt 0 view .LVU172
 787              	.LBE693:
  75:fibre-cpp/include/fibre/simple_serdes.hpp ****     static_assert(is_complete<LittleEndianSerializer<T>>(), "no LittleEndianSerializer is defined f
  76:fibre-cpp/include/fibre/simple_serdes.hpp ****     return LittleEndianSerializer<T>::write(value, &buffer->begin(), buffer->end());
 788              		.loc 3 76 44 view .LVU173
 789 009c 7168     		ldr	r1, [r6, #4]
ARM GAS  /tmp/ccjyQa7a.s 			page 47


 790              	.LVL73:
 791              	.LBB694:
 792              	.LBI694:
  47:fibre-cpp/include/fibre/simple_serdes.hpp ****         if (BigEndian) {
 793              		.loc 3 47 17 is_stmt 1 view .LVU174
 794              	.LBB695:
 795              	.LBB696:
  56:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 796              		.loc 3 56 25 is_stmt 0 view .LVU175
 797 009e 0023     		movs	r3, #0
 798 00a0 08E0     		b	.L38
 799              	.LVL74:
 800              	.L37:
 801              	.LBB697:
  59:fibre-cpp/include/fibre/simple_serdes.hpp ****                 **begin = byte;
 802              		.loc 3 59 66 view .LVU176
 803 00a2 DA00     		lsls	r2, r3, #3
  59:fibre-cpp/include/fibre/simple_serdes.hpp ****                 **begin = byte;
 804              		.loc 3 59 60 view .LVU177
 805 00a4 25FA02F2 		lsr	r2, r5, r2
 806              	.LVL75:
  60:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 807              		.loc 3 60 25 view .LVU178
 808 00a8 3068     		ldr	r0, [r6]
 809 00aa 0270     		strb	r2, [r0]
 810              	.LBE697:
  56:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 811              		.loc 3 56 13 is_stmt 1 view .LVU179
 812 00ac 0133     		adds	r3, r3, #1
 813              	.LVL76:
  56:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 814              		.loc 3 56 13 is_stmt 0 view .LVU180
 815 00ae 3268     		ldr	r2, [r6]
 816              	.LVL77:
  56:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 817              		.loc 3 56 13 view .LVU181
 818 00b0 0132     		adds	r2, r2, #1
 819 00b2 3260     		str	r2, [r6]
 820              	.LVL78:
 821              	.L38:
  56:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 822              		.loc 3 56 34 is_stmt 1 view .LVU182
 823 00b4 032B     		cmp	r3, #3
 824 00b6 ECD8     		bhi	.L34
 825              	.LBB698:
  57:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return false;
 826              		.loc 3 57 17 is_stmt 0 view .LVU183
 827 00b8 0029     		cmp	r1, #0
 828 00ba F2D0     		beq	.L37
  57:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return false;
 829              		.loc 3 57 37 view .LVU184
 830 00bc 3268     		ldr	r2, [r6]
  57:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return false;
 831              		.loc 3 57 25 view .LVU185
 832 00be 9142     		cmp	r1, r2
 833 00c0 EFD8     		bhi	.L37
  58:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = static_cast<uint8_t>((value >> (i << 3)) & 0xff);
ARM GAS  /tmp/ccjyQa7a.s 			page 48


 834              		.loc 3 58 28 view .LVU186
 835 00c2 0024     		movs	r4, #0
 836              	.LVL79:
  58:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = static_cast<uint8_t>((value >> (i << 3)) & 0xff);
 837              		.loc 3 58 28 view .LVU187
 838              	.LBE698:
 839              	.LBE696:
 840              	.LBE695:
 841              	.LBE694:
 842              	.LBE692:
 843              	.LBE691:
 307:fibre-cpp/legacy_protocol.cpp ****     } else if (*offset >= embedded_json_length) {
 844              		.loc 1 307 66 view .LVU188
 845 00c4 E5E7     		b	.L34
 846              	.LVL80:
 847              	.L42:
 848              	.LBB699:
 849              	.LBB689:
 850              	.LBB687:
 851              	.LBB678:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 852              		.loc 7 236 9 view .LVU189
 853 00c6 03AA     		add	r2, sp, #12
 854              	.LVL81:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 855              		.loc 7 236 9 view .LVU190
 856 00c8 CEE7     		b	.L39
 857              	.L46:
 858 00ca 00BF     		.align	2
 859              	.L45:
 860 00cc 00000000 		.word	_ZN5fibre20embedded_json_lengthE
 861 00d0 00000000 		.word	_ZN5fibre13embedded_jsonE
 862 00d4 00000000 		.word	_ZN5fibre16json_version_id_E
 863              	.LBE678:
 864              	.LBE687:
 865              	.LBE689:
 866              	.LBE699:
 867              	.LBE702:
 868              	.LBE706:
 869              		.cfi_endproc
 870              	.LFE4603:
 871              		.cantunwind
 872              		.fnend
 874              		.section	.text._ZN5fibre25LegacyProtocolPacketBased15on_rx_tx_closedENS_12StreamStatusE,"ax",%prog
 875              		.align	1
 876              		.global	_ZN5fibre25LegacyProtocolPacketBased15on_rx_tx_closedENS_12StreamStatusE
 877              		.syntax unified
 878              		.thumb
 879              		.thumb_func
 881              	_ZN5fibre25LegacyProtocolPacketBased15on_rx_tx_closedENS_12StreamStatusE:
 882              		.fnstart
 883              	.LVL82:
 884              	.LFB4608:
 319:fibre-cpp/legacy_protocol.cpp **** 
 320:fibre-cpp/legacy_protocol.cpp **** #endif
 321:fibre-cpp/legacy_protocol.cpp **** 
 322:fibre-cpp/legacy_protocol.cpp **** void LegacyProtocolPacketBased::on_write_finished(WriteResult result) {
ARM GAS  /tmp/ccjyQa7a.s 			page 49


 323:fibre-cpp/legacy_protocol.cpp ****     tx_handle_ = 0;
 324:fibre-cpp/legacy_protocol.cpp **** 
 325:fibre-cpp/legacy_protocol.cpp ****     if (rx_status_ != kStreamOk) {
 326:fibre-cpp/legacy_protocol.cpp ****         on_rx_tx_closed(rx_status_);
 327:fibre-cpp/legacy_protocol.cpp ****         return;
 328:fibre-cpp/legacy_protocol.cpp ****     }
 329:fibre-cpp/legacy_protocol.cpp **** 
 330:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 331:fibre-cpp/legacy_protocol.cpp ****     if (transmitting_op_) {
 332:fibre-cpp/legacy_protocol.cpp ****         uint16_t seqno = transmitting_op_ & 0xffff;
 333:fibre-cpp/legacy_protocol.cpp ****         transmitting_op_ = 0;
 334:fibre-cpp/legacy_protocol.cpp **** 
 335:fibre-cpp/legacy_protocol.cpp ****         auto it = expected_acks_.find(seqno);
 336:fibre-cpp/legacy_protocol.cpp **** 
 337:fibre-cpp/legacy_protocol.cpp ****         size_t n_sent = std::max((size_t)(result.end - tx_buf_), (size_t)8) - 8;
 338:fibre-cpp/legacy_protocol.cpp ****         it->second.tx_buf = it->second.tx_buf.skip(n_sent);
 339:fibre-cpp/legacy_protocol.cpp ****         it->second.tx_done = true;
 340:fibre-cpp/legacy_protocol.cpp **** 
 341:fibre-cpp/legacy_protocol.cpp ****         if (it->second.rx_done) {
 342:fibre-cpp/legacy_protocol.cpp ****             // It's possible that the RX operation completes before the TX operation
 343:fibre-cpp/legacy_protocol.cpp ****             auto op = it->second;
 344:fibre-cpp/legacy_protocol.cpp ****             expected_acks_.erase(it);
 345:fibre-cpp/legacy_protocol.cpp ****             op.callback.invoke_and_clear({kStreamOk, op.tx_buf.begin(), op.rx_buf.begin()});
 346:fibre-cpp/legacy_protocol.cpp ****         } else if (result.status != kStreamOk) {
 347:fibre-cpp/legacy_protocol.cpp ****             // If the TX task was a remote endpoint operation but didn't succeed
 348:fibre-cpp/legacy_protocol.cpp ****             // we terminate that operation
 349:fibre-cpp/legacy_protocol.cpp ****             auto op = it->second;
 350:fibre-cpp/legacy_protocol.cpp ****             expected_acks_.erase(it);
 351:fibre-cpp/legacy_protocol.cpp ****             op.callback.invoke_and_clear({result.status, result.end, op.rx_buf.begin()});
 352:fibre-cpp/legacy_protocol.cpp ****         }
 353:fibre-cpp/legacy_protocol.cpp **** 
 354:fibre-cpp/legacy_protocol.cpp ****         if (transmitting_op_) {
 355:fibre-cpp/legacy_protocol.cpp ****             return;
 356:fibre-cpp/legacy_protocol.cpp ****         }
 357:fibre-cpp/legacy_protocol.cpp ****     }
 358:fibre-cpp/legacy_protocol.cpp **** #endif
 359:fibre-cpp/legacy_protocol.cpp **** 
 360:fibre-cpp/legacy_protocol.cpp ****     // TODO: should we prioritize the server or client side here?
 361:fibre-cpp/legacy_protocol.cpp **** 
 362:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_SERVER
 363:fibre-cpp/legacy_protocol.cpp ****     if (rx_end_) {
 364:fibre-cpp/legacy_protocol.cpp ****         // There is a write operation pending from the server side (i.e. an ack
 365:fibre-cpp/legacy_protocol.cpp ****         // for a local endpoint operation).
 366:fibre-cpp/legacy_protocol.cpp ****         uint8_t* rx_end = rx_end_;
 367:fibre-cpp/legacy_protocol.cpp ****         rx_end_ = nullptr;
 368:fibre-cpp/legacy_protocol.cpp ****         on_read_finished({kStreamOk, rx_end});
 369:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 370:fibre-cpp/legacy_protocol.cpp ****         if (transmitting_op_) {
 371:fibre-cpp/legacy_protocol.cpp ****             return;
 372:fibre-cpp/legacy_protocol.cpp ****         }
 373:fibre-cpp/legacy_protocol.cpp **** #endif
 374:fibre-cpp/legacy_protocol.cpp ****     }
 375:fibre-cpp/legacy_protocol.cpp **** #endif
 376:fibre-cpp/legacy_protocol.cpp **** 
 377:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 378:fibre-cpp/legacy_protocol.cpp ****     if (pending_operations_.size() > 0) {
 379:fibre-cpp/legacy_protocol.cpp ****         // There is a write operation pending from the client side (i.e. an
ARM GAS  /tmp/ccjyQa7a.s 			page 50


 380:fibre-cpp/legacy_protocol.cpp ****         // outgoing remote endpoint operation).
 381:fibre-cpp/legacy_protocol.cpp ****         EndpointOperation op = pending_operations_[0];
 382:fibre-cpp/legacy_protocol.cpp ****         pending_operations_.erase(pending_operations_.begin());
 383:fibre-cpp/legacy_protocol.cpp ****         start_endpoint_operation(op);
 384:fibre-cpp/legacy_protocol.cpp ****         if (transmitting_op_) {
 385:fibre-cpp/legacy_protocol.cpp ****             return;
 386:fibre-cpp/legacy_protocol.cpp ****         }
 387:fibre-cpp/legacy_protocol.cpp ****     }
 388:fibre-cpp/legacy_protocol.cpp **** #endif
 389:fibre-cpp/legacy_protocol.cpp **** }
 390:fibre-cpp/legacy_protocol.cpp **** 
 391:fibre-cpp/legacy_protocol.cpp **** void LegacyProtocolPacketBased::on_read_finished(ReadResult result) {
 392:fibre-cpp/legacy_protocol.cpp ****     TransferHandle dummy;
 393:fibre-cpp/legacy_protocol.cpp **** 
 394:fibre-cpp/legacy_protocol.cpp ****     if (result.status == kStreamClosed) {
 395:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(D) << "RX stream closed.";
 396:fibre-cpp/legacy_protocol.cpp ****         on_rx_closed(kStreamClosed);
 397:fibre-cpp/legacy_protocol.cpp ****         return;
 398:fibre-cpp/legacy_protocol.cpp ****     } else if (result.status == kStreamCancelled) {
 399:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(W) << "RX operation cancelled.";
 400:fibre-cpp/legacy_protocol.cpp ****         on_rx_closed(kStreamCancelled);
 401:fibre-cpp/legacy_protocol.cpp ****         return;
 402:fibre-cpp/legacy_protocol.cpp ****     } else if (result.status != kStreamOk) {
 403:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(W) << "RX error. Not restarting.";
 404:fibre-cpp/legacy_protocol.cpp ****         // TODO: we should distinguish between permanent and temporary errors.
 405:fibre-cpp/legacy_protocol.cpp ****         // If we try to restart after a permanent error we might end up in a
 406:fibre-cpp/legacy_protocol.cpp ****         // busy loop.
 407:fibre-cpp/legacy_protocol.cpp ****         on_rx_closed(kStreamError);
 408:fibre-cpp/legacy_protocol.cpp ****         return;
 409:fibre-cpp/legacy_protocol.cpp ****     }
 410:fibre-cpp/legacy_protocol.cpp **** 
 411:fibre-cpp/legacy_protocol.cpp ****     cbufptr_t rx_buf = cbufptr_t{rx_buf_, result.end};
 412:fibre-cpp/legacy_protocol.cpp ****     //FIBRE_LOG(D) << "got packet of length " << (result.end - rx_buf_) /*<< ": " << as_hex(rx_buf)
 413:fibre-cpp/legacy_protocol.cpp **** 
 414:fibre-cpp/legacy_protocol.cpp ****     std::optional<uint16_t> seq_no = read_le<uint16_t>(&rx_buf);
 415:fibre-cpp/legacy_protocol.cpp **** 
 416:fibre-cpp/legacy_protocol.cpp ****     if (!seq_no.has_value()) {
 417:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(W) << "packet too short";
 418:fibre-cpp/legacy_protocol.cpp **** 
 419:fibre-cpp/legacy_protocol.cpp ****     } else if (*seq_no & 0x8000) {
 420:fibre-cpp/legacy_protocol.cpp **** 
 421:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 422:fibre-cpp/legacy_protocol.cpp ****         
 423:fibre-cpp/legacy_protocol.cpp ****         auto it = expected_acks_.find(*seq_no & 0x7fff);
 424:fibre-cpp/legacy_protocol.cpp **** 
 425:fibre-cpp/legacy_protocol.cpp ****         if (it == expected_acks_.end()) {
 426:fibre-cpp/legacy_protocol.cpp ****             FIBRE_LOG(W) << "received unexpected ACK: " << (*seq_no & 0x7fff);
 427:fibre-cpp/legacy_protocol.cpp ****         } else {
 428:fibre-cpp/legacy_protocol.cpp ****             size_t n_copy = std::min((size_t)(result.end - rx_buf.begin()), it->second.rx_buf.size(
 429:fibre-cpp/legacy_protocol.cpp ****             memcpy(it->second.rx_buf.begin(), rx_buf.begin(), n_copy);
 430:fibre-cpp/legacy_protocol.cpp ****             it->second.rx_buf = it->second.rx_buf.skip(n_copy);
 431:fibre-cpp/legacy_protocol.cpp ****             it->second.rx_done = true;
 432:fibre-cpp/legacy_protocol.cpp ****             FIBRE_LOG(T) << "received ACK: " << (*seq_no & 0x7fff);
 433:fibre-cpp/legacy_protocol.cpp **** 
 434:fibre-cpp/legacy_protocol.cpp ****             // It's possible that the RX operation completes before the TX operation
 435:fibre-cpp/legacy_protocol.cpp ****             if (it->second.tx_done) {
 436:fibre-cpp/legacy_protocol.cpp ****                 auto op = it->second;
ARM GAS  /tmp/ccjyQa7a.s 			page 51


 437:fibre-cpp/legacy_protocol.cpp ****                 expected_acks_.erase(it);
 438:fibre-cpp/legacy_protocol.cpp ****                 op.callback.invoke_and_clear({kStreamOk, op.tx_buf.begin(), op.rx_buf.begin()});
 439:fibre-cpp/legacy_protocol.cpp ****             }
 440:fibre-cpp/legacy_protocol.cpp ****         }
 441:fibre-cpp/legacy_protocol.cpp **** 
 442:fibre-cpp/legacy_protocol.cpp **** #else
 443:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(W) << "received ack but client support is not compiled in";
 444:fibre-cpp/legacy_protocol.cpp **** #endif
 445:fibre-cpp/legacy_protocol.cpp **** 
 446:fibre-cpp/legacy_protocol.cpp ****     } else {
 447:fibre-cpp/legacy_protocol.cpp **** 
 448:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_SERVER
 449:fibre-cpp/legacy_protocol.cpp ****         if (rx_buf.size() < 6) {
 450:fibre-cpp/legacy_protocol.cpp ****             FIBRE_LOG(W) << "packet too short";
 451:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(rx_buf_, &dummy, MEMBER_CB(this, on_read_finished));
 452:fibre-cpp/legacy_protocol.cpp ****             return;
 453:fibre-cpp/legacy_protocol.cpp ****         }
 454:fibre-cpp/legacy_protocol.cpp **** 
 455:fibre-cpp/legacy_protocol.cpp ****         // TODO: think about some kind of ordering guarantees
 456:fibre-cpp/legacy_protocol.cpp ****         // currently the seq_no is just used to associate a response with a request
 457:fibre-cpp/legacy_protocol.cpp **** 
 458:fibre-cpp/legacy_protocol.cpp ****         uint16_t endpoint_id = *read_le<uint16_t>(&rx_buf);
 459:fibre-cpp/legacy_protocol.cpp ****         bool expect_response = endpoint_id & 0x8000;
 460:fibre-cpp/legacy_protocol.cpp ****         endpoint_id &= 0x7fff;
 461:fibre-cpp/legacy_protocol.cpp **** 
 462:fibre-cpp/legacy_protocol.cpp ****         if (expect_response && tx_handle_) {
 463:fibre-cpp/legacy_protocol.cpp ****             // The operation expects a response but the output channel is still
 464:fibre-cpp/legacy_protocol.cpp ****             // busy. Stop receiving for now. This function will be invoked again
 465:fibre-cpp/legacy_protocol.cpp ****             // once the TX operation is finished.
 466:fibre-cpp/legacy_protocol.cpp ****             rx_end_ = result.end;
 467:fibre-cpp/legacy_protocol.cpp ****             return;
 468:fibre-cpp/legacy_protocol.cpp ****         }
 469:fibre-cpp/legacy_protocol.cpp **** 
 470:fibre-cpp/legacy_protocol.cpp ****         // Verify packet trailer. The expected trailer value depends on the selected endpoint.
 471:fibre-cpp/legacy_protocol.cpp ****         // For endpoint 0 this is just the protocol version, for all other endpoints it's a
 472:fibre-cpp/legacy_protocol.cpp ****         // CRC over the entire JSON descriptor tree (this may change in future versions).
 473:fibre-cpp/legacy_protocol.cpp ****         uint16_t expected_trailer = endpoint_id ? fibre::json_crc_ : PROTOCOL_VERSION;
 474:fibre-cpp/legacy_protocol.cpp ****         uint16_t actual_trailer = *(rx_buf.end() - 2) | (*(rx_buf.end() - 1) << 8);
 475:fibre-cpp/legacy_protocol.cpp ****         if (expected_trailer != actual_trailer) {
 476:fibre-cpp/legacy_protocol.cpp ****             FIBRE_LOG(D) << "trailer mismatch for endpoint " << endpoint_id << ": expected " << as_
 477:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(rx_buf_, &dummy, MEMBER_CB(this, on_read_finished));
 478:fibre-cpp/legacy_protocol.cpp ****             return;
 479:fibre-cpp/legacy_protocol.cpp ****         }
 480:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(D) << "trailer ok for endpoint " << endpoint_id;
 481:fibre-cpp/legacy_protocol.cpp **** 
 482:fibre-cpp/legacy_protocol.cpp ****         // TODO: if more bytes than the MTU were requested, should we abort or just return as much 
 483:fibre-cpp/legacy_protocol.cpp **** 
 484:fibre-cpp/legacy_protocol.cpp ****         uint16_t expected_response_length = *read_le<uint16_t>(&rx_buf);
 485:fibre-cpp/legacy_protocol.cpp **** 
 486:fibre-cpp/legacy_protocol.cpp ****         // Limit response length according to our local TX buffer size
 487:fibre-cpp/legacy_protocol.cpp ****         if (expected_response_length > tx_mtu_ - 2)
 488:fibre-cpp/legacy_protocol.cpp ****             expected_response_length = tx_mtu_ - 2;
 489:fibre-cpp/legacy_protocol.cpp **** 
 490:fibre-cpp/legacy_protocol.cpp ****         fibre::cbufptr_t input_buffer{rx_buf.begin(), rx_buf.end() - 2};
 491:fibre-cpp/legacy_protocol.cpp ****         fibre::bufptr_t output_buffer{tx_buf_ + 2, expected_response_length};
 492:fibre-cpp/legacy_protocol.cpp ****         fibre::endpoint_handler(endpoint_id, &input_buffer, &output_buffer);
 493:fibre-cpp/legacy_protocol.cpp **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 52


 494:fibre-cpp/legacy_protocol.cpp ****         // Send response
 495:fibre-cpp/legacy_protocol.cpp ****         if (expect_response) {
 496:fibre-cpp/legacy_protocol.cpp ****             size_t actual_response_length = expected_response_length - output_buffer.size() + 2;
 497:fibre-cpp/legacy_protocol.cpp ****             write_le<uint16_t>(*seq_no | 0x8000, tx_buf_);
 498:fibre-cpp/legacy_protocol.cpp **** 
 499:fibre-cpp/legacy_protocol.cpp ****             FIBRE_LOG(D) << "send packet: " << as_hex(cbufptr_t{tx_buf_, actual_response_length});
 500:fibre-cpp/legacy_protocol.cpp ****             tx_channel_->start_write({tx_buf_, actual_response_length}, &tx_handle_, MEMBER_CB(this
 501:fibre-cpp/legacy_protocol.cpp ****         }
 502:fibre-cpp/legacy_protocol.cpp **** #else
 503:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(W) << "received request but server support is not compiled in";
 504:fibre-cpp/legacy_protocol.cpp **** #endif
 505:fibre-cpp/legacy_protocol.cpp ****     }
 506:fibre-cpp/legacy_protocol.cpp **** 
 507:fibre-cpp/legacy_protocol.cpp ****     rx_channel_->start_read(rx_buf_, &dummy, MEMBER_CB(this, on_read_finished));
 508:fibre-cpp/legacy_protocol.cpp **** }
 509:fibre-cpp/legacy_protocol.cpp **** 
 510:fibre-cpp/legacy_protocol.cpp **** void LegacyProtocolPacketBased::on_rx_closed(StreamStatus status) {
 511:fibre-cpp/legacy_protocol.cpp ****     if (tx_handle_) {
 512:fibre-cpp/legacy_protocol.cpp ****         // TX operation still in progress - cancel TX operation and defer closing
 513:fibre-cpp/legacy_protocol.cpp ****         // the protocol instance until the TX operation has finished.
 514:fibre-cpp/legacy_protocol.cpp ****         rx_status_ = status;
 515:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->cancel_write(tx_handle_);
 516:fibre-cpp/legacy_protocol.cpp ****     } else {
 517:fibre-cpp/legacy_protocol.cpp ****         // No TX operation in progress - close protocol instance immediately.
 518:fibre-cpp/legacy_protocol.cpp ****         on_rx_tx_closed(status);
 519:fibre-cpp/legacy_protocol.cpp ****     }
 520:fibre-cpp/legacy_protocol.cpp **** }
 521:fibre-cpp/legacy_protocol.cpp **** 
 522:fibre-cpp/legacy_protocol.cpp **** void LegacyProtocolPacketBased::on_rx_tx_closed(StreamStatus status) {
 885              		.loc 1 522 70 is_stmt 1 view -0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 0
 888              		@ frame_needed = 0, uses_anonymous_args = 0
 889              		.loc 1 522 70 is_stmt 0 view .LVU192
 890 0000 10B5     		push	{r4, lr}
 891              		.save {r4, lr}
 892              	.LCFI10:
 893              		.cfi_def_cfa_offset 8
 894              		.cfi_offset 4, -8
 895              		.cfi_offset 14, -4
 896 0002 0346     		mov	r3, r0
 897 0004 0A46     		mov	r2, r1
 523:fibre-cpp/legacy_protocol.cpp ****     if (status == kStreamClosed || status == kStreamCancelled) {
 898              		.loc 1 523 5 is_stmt 1 view .LVU193
 899              		.loc 1 523 33 is_stmt 0 view .LVU194
 900 0006 0139     		subs	r1, r1, #1
 901              	.LVL83:
 902              		.loc 1 523 33 view .LVU195
 903 0008 C9B2     		uxtb	r1, r1
 904              		.loc 1 523 5 view .LVU196
 905 000a 0129     		cmp	r1, #1
 906 000c 0CD9     		bls	.L52
 907              	.L48:
 908              	.LVL84:
 524:fibre-cpp/legacy_protocol.cpp ****         // TODO: handle app-initiated cancellation via cancel_endpoint_operation() (currently unuse
 525:fibre-cpp/legacy_protocol.cpp ****         status = kStreamError;
 526:fibre-cpp/legacy_protocol.cpp ****     }
ARM GAS  /tmp/ccjyQa7a.s 			page 53


 527:fibre-cpp/legacy_protocol.cpp **** 
 528:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 529:fibre-cpp/legacy_protocol.cpp ****     // Cancel pending endpoint operation
 530:fibre-cpp/legacy_protocol.cpp ****     for (auto& op: pending_operations_) {
 531:fibre-cpp/legacy_protocol.cpp ****         op.callback.invoke_and_clear({status, op.tx_buf.begin(), op.rx_buf.begin()});
 532:fibre-cpp/legacy_protocol.cpp ****     }
 533:fibre-cpp/legacy_protocol.cpp ****     pending_operations_.clear();
 534:fibre-cpp/legacy_protocol.cpp **** 
 535:fibre-cpp/legacy_protocol.cpp ****     // Cancel all ongoing endpoint operations
 536:fibre-cpp/legacy_protocol.cpp ****     for (auto& item: expected_acks_) {
 537:fibre-cpp/legacy_protocol.cpp ****         if (item.second.callback) {
 538:fibre-cpp/legacy_protocol.cpp ****             item.second.callback.invoke_and_clear({status, item.second.tx_buf.begin(), item.second.
 539:fibre-cpp/legacy_protocol.cpp ****         }
 540:fibre-cpp/legacy_protocol.cpp ****     }
 541:fibre-cpp/legacy_protocol.cpp ****     expected_acks_.clear();
 542:fibre-cpp/legacy_protocol.cpp **** 
 543:fibre-cpp/legacy_protocol.cpp ****     // Report that the root object was lost
 544:fibre-cpp/legacy_protocol.cpp ****     if (client_.on_lost_root_object_ && client_.root_obj_) {
 545:fibre-cpp/legacy_protocol.cpp ****         auto root_obj = client_.root_obj_;
 546:fibre-cpp/legacy_protocol.cpp ****         client_.root_obj_ = nullptr;
 547:fibre-cpp/legacy_protocol.cpp ****         client_.on_lost_root_object_.invoke(&client_, root_obj);
 548:fibre-cpp/legacy_protocol.cpp ****     }
 549:fibre-cpp/legacy_protocol.cpp **** #endif
 550:fibre-cpp/legacy_protocol.cpp ****     on_stopped_.invoke_and_clear(this, status);
 909              		.loc 1 550 5 is_stmt 1 view .LVU197
 910              	.LBB707:
 911              	.LBI707:
 912              		.file 8 "fibre-cpp/include/fibre/callback.hpp"
   1:fibre-cpp/include/fibre/callback.hpp **** #ifndef __CALLBACK_HPP
   2:fibre-cpp/include/fibre/callback.hpp **** #define __CALLBACK_HPP
   3:fibre-cpp/include/fibre/callback.hpp **** 
   4:fibre-cpp/include/fibre/callback.hpp **** #include <stdlib.h>
   5:fibre-cpp/include/fibre/callback.hpp **** #include <typeinfo>
   6:fibre-cpp/include/fibre/callback.hpp **** #include <tuple>
   7:fibre-cpp/include/fibre/callback.hpp **** #include <functional>
   8:fibre-cpp/include/fibre/callback.hpp **** #include <type_traits>
   9:fibre-cpp/include/fibre/callback.hpp **** 
  10:fibre-cpp/include/fibre/callback.hpp **** namespace fibre {
  11:fibre-cpp/include/fibre/callback.hpp **** 
  12:fibre-cpp/include/fibre/callback.hpp **** namespace detail {
  13:fibre-cpp/include/fibre/callback.hpp **** template<typename T> struct get_default { static T val() { return {}; } };
  14:fibre-cpp/include/fibre/callback.hpp **** template<> struct get_default<void> { static void val() {} };
  15:fibre-cpp/include/fibre/callback.hpp **** }
  16:fibre-cpp/include/fibre/callback.hpp **** 
  17:fibre-cpp/include/fibre/callback.hpp **** template<typename TRet, typename ... TArgs>
  18:fibre-cpp/include/fibre/callback.hpp **** class Callback {
  19:fibre-cpp/include/fibre/callback.hpp **** public:
  20:fibre-cpp/include/fibre/callback.hpp ****     Callback() : cb_(nullptr), ctx_(nullptr) {}
  21:fibre-cpp/include/fibre/callback.hpp ****     Callback(std::nullptr_t) : cb_(nullptr), ctx_(nullptr) {}
  22:fibre-cpp/include/fibre/callback.hpp ****     Callback(TRet(*callback)(void*, TArgs...), void* ctx) :
  23:fibre-cpp/include/fibre/callback.hpp ****         cb_(callback), ctx_(ctx) {}
  24:fibre-cpp/include/fibre/callback.hpp **** 
  25:fibre-cpp/include/fibre/callback.hpp ****     /**
  26:fibre-cpp/include/fibre/callback.hpp ****      * @brief Creates a copy of another Callback instance.
  27:fibre-cpp/include/fibre/callback.hpp ****      * 
  28:fibre-cpp/include/fibre/callback.hpp ****      * This is only works it the other callback has identical template parameters.
  29:fibre-cpp/include/fibre/callback.hpp ****      * This constructor is templated so that construction from an incompatible
ARM GAS  /tmp/ccjyQa7a.s 			page 54


  30:fibre-cpp/include/fibre/callback.hpp ****      * callback gives a useful error message.
  31:fibre-cpp/include/fibre/callback.hpp ****      */
  32:fibre-cpp/include/fibre/callback.hpp ****     //template<typename TRetOther, typename ... TArgsOther>
  33:fibre-cpp/include/fibre/callback.hpp ****     //Callback(const Callback<TRetOther, TArgsOther...>& other) : cb_(other.cb_), ctx_(other.ctx_) 
  34:fibre-cpp/include/fibre/callback.hpp ****     //    static_assert(std::is_same<Callback<TRetOther, TArgsOther...>, Callback>::value, "incompa
  35:fibre-cpp/include/fibre/callback.hpp ****     //}
  36:fibre-cpp/include/fibre/callback.hpp **** 
  37:fibre-cpp/include/fibre/callback.hpp ****     Callback(const Callback& other) : cb_(other.cb_), ctx_(other.ctx_) {}
  38:fibre-cpp/include/fibre/callback.hpp **** 
  39:fibre-cpp/include/fibre/callback.hpp ****     // If you get a compile error "[...] invokes a deleted function" that points
  40:fibre-cpp/include/fibre/callback.hpp ****     // here then you're probably trying to assign a Callback with incompatible
  41:fibre-cpp/include/fibre/callback.hpp ****     // template arguments to another Callback.
  42:fibre-cpp/include/fibre/callback.hpp ****     template<typename TRetOther, typename ... TArgsOther>
  43:fibre-cpp/include/fibre/callback.hpp ****     Callback(const Callback<TRetOther, TArgsOther...>& other) = delete;
  44:fibre-cpp/include/fibre/callback.hpp **** 
  45:fibre-cpp/include/fibre/callback.hpp ****     /**
  46:fibre-cpp/include/fibre/callback.hpp ****      * @brief Constructs a callback object from a functor. The functor must
  47:fibre-cpp/include/fibre/callback.hpp ****      * remain allocated throughout the lifetime of the Callback.
  48:fibre-cpp/include/fibre/callback.hpp ****      */
  49:fibre-cpp/include/fibre/callback.hpp ****     template<typename TFunc>
  50:fibre-cpp/include/fibre/callback.hpp ****     Callback(const TFunc& func) :
  51:fibre-cpp/include/fibre/callback.hpp ****         cb_([](void* ctx, TArgs...args){
  52:fibre-cpp/include/fibre/callback.hpp ****             return (*(const TFunc*)ctx)(args...);
  53:fibre-cpp/include/fibre/callback.hpp ****         }), ctx_((void*)&func) {}
  54:fibre-cpp/include/fibre/callback.hpp **** 
  55:fibre-cpp/include/fibre/callback.hpp ****     operator bool() {
  56:fibre-cpp/include/fibre/callback.hpp ****         return cb_;
  57:fibre-cpp/include/fibre/callback.hpp ****     }
  58:fibre-cpp/include/fibre/callback.hpp ****     
  59:fibre-cpp/include/fibre/callback.hpp ****     TRet invoke(TArgs ... arg) const {
  60:fibre-cpp/include/fibre/callback.hpp ****         if (cb_) {
  61:fibre-cpp/include/fibre/callback.hpp ****             return (*cb_)(ctx_, arg...);
  62:fibre-cpp/include/fibre/callback.hpp ****         }
  63:fibre-cpp/include/fibre/callback.hpp ****         return detail::get_default<TRet>::val();
  64:fibre-cpp/include/fibre/callback.hpp ****     }
  65:fibre-cpp/include/fibre/callback.hpp **** 
  66:fibre-cpp/include/fibre/callback.hpp ****     TRet invoke_and_clear(TArgs ... arg) {
 913              		.loc 8 66 10 view .LVU198
 914              	.LBB708:
  67:fibre-cpp/include/fibre/callback.hpp ****         void* ctx = ctx_;
 915              		.loc 8 67 15 is_stmt 0 view .LVU199
 916 000e D3F81C01 		ldr	r0, [r3, #284]
 917              	.LVL85:
  68:fibre-cpp/include/fibre/callback.hpp ****         auto cb = cb_;
 918              		.loc 8 68 14 view .LVU200
 919 0012 D3F81841 		ldr	r4, [r3, #280]
 920              	.LVL86:
  69:fibre-cpp/include/fibre/callback.hpp ****         ctx_ = nullptr;
 921              		.loc 8 69 14 view .LVU201
 922 0016 0021     		movs	r1, #0
 923 0018 C3F81C11 		str	r1, [r3, #284]
  70:fibre-cpp/include/fibre/callback.hpp ****         cb_ = nullptr;
 924              		.loc 8 70 13 view .LVU202
 925 001c C3F81811 		str	r1, [r3, #280]
  71:fibre-cpp/include/fibre/callback.hpp ****         if (cb) {
 926              		.loc 8 71 9 view .LVU203
 927 0020 0CB1     		cbz	r4, .L47
ARM GAS  /tmp/ccjyQa7a.s 			page 55


  72:fibre-cpp/include/fibre/callback.hpp ****             return (*cb)(ctx, arg...);
 928              		.loc 8 72 25 view .LVU204
 929 0022 1946     		mov	r1, r3
 930 0024 A047     		blx	r4
 931              	.LVL87:
 932              	.L47:
 933              		.loc 8 72 25 view .LVU205
 934              	.LBE708:
 935              	.LBE707:
 551:fibre-cpp/legacy_protocol.cpp **** }
 936              		.loc 1 551 1 view .LVU206
 937 0026 10BD     		pop	{r4, pc}
 938              	.LVL88:
 939              	.L52:
 525:fibre-cpp/legacy_protocol.cpp ****     }
 940              		.loc 1 525 16 view .LVU207
 941 0028 0322     		movs	r2, #3
 942 002a F0E7     		b	.L48
 943              		.cfi_endproc
 944              	.LFE4608:
 945              		.fnend
 947              		.section	.text._ZN5fibre25LegacyProtocolPacketBased12on_rx_closedENS_12StreamStatusE,"ax",%progbit
 948              		.align	1
 949              		.global	_ZN5fibre25LegacyProtocolPacketBased12on_rx_closedENS_12StreamStatusE
 950              		.syntax unified
 951              		.thumb
 952              		.thumb_func
 954              	_ZN5fibre25LegacyProtocolPacketBased12on_rx_closedENS_12StreamStatusE:
 955              		.fnstart
 956              	.LVL89:
 957              	.LFB4607:
 510:fibre-cpp/legacy_protocol.cpp ****     if (tx_handle_) {
 958              		.loc 1 510 67 is_stmt 1 view -0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 510:fibre-cpp/legacy_protocol.cpp ****     if (tx_handle_) {
 962              		.loc 1 510 67 is_stmt 0 view .LVU209
 963 0000 08B5     		push	{r3, lr}
 964              		.save {r3, lr}
 965              	.LCFI11:
 966              		.cfi_def_cfa_offset 8
 967              		.cfi_offset 3, -8
 968              		.cfi_offset 14, -4
 969 0002 0B46     		mov	r3, r1
 511:fibre-cpp/legacy_protocol.cpp ****         // TX operation still in progress - cancel TX operation and defer closing
 970              		.loc 1 511 5 is_stmt 1 view .LVU210
 511:fibre-cpp/legacy_protocol.cpp ****         // TX operation still in progress - cancel TX operation and defer closing
 971              		.loc 1 511 9 is_stmt 0 view .LVU211
 972 0004 D0F80C11 		ldr	r1, [r0, #268]
 973              	.LVL90:
 511:fibre-cpp/legacy_protocol.cpp ****         // TX operation still in progress - cancel TX operation and defer closing
 974              		.loc 1 511 5 view .LVU212
 975 0008 31B1     		cbz	r1, .L54
 514:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->cancel_write(tx_handle_);
 976              		.loc 1 514 9 is_stmt 1 view .LVU213
 514:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->cancel_write(tx_handle_);
ARM GAS  /tmp/ccjyQa7a.s 			page 56


 977              		.loc 1 514 20 is_stmt 0 view .LVU214
 978 000a 80F81431 		strb	r3, [r0, #276]
 515:fibre-cpp/legacy_protocol.cpp ****     } else {
 979              		.loc 1 515 9 is_stmt 1 view .LVU215
 980 000e 4068     		ldr	r0, [r0, #4]
 981              	.LVL91:
 515:fibre-cpp/legacy_protocol.cpp ****     } else {
 982              		.loc 1 515 45 is_stmt 0 view .LVU216
 983 0010 0368     		ldr	r3, [r0]
 984 0012 5B68     		ldr	r3, [r3, #4]
 515:fibre-cpp/legacy_protocol.cpp ****     } else {
 985              		.loc 1 515 34 view .LVU217
 986 0014 9847     		blx	r3
 987              	.LVL92:
 988              	.L53:
 520:fibre-cpp/legacy_protocol.cpp **** 
 989              		.loc 1 520 1 view .LVU218
 990 0016 08BD     		pop	{r3, pc}
 991              	.LVL93:
 992              	.L54:
 518:fibre-cpp/legacy_protocol.cpp ****     }
 993              		.loc 1 518 9 is_stmt 1 view .LVU219
 518:fibre-cpp/legacy_protocol.cpp ****     }
 994              		.loc 1 518 24 is_stmt 0 view .LVU220
 995 0018 1946     		mov	r1, r3
 996 001a FFF7FEFF 		bl	_ZN5fibre25LegacyProtocolPacketBased15on_rx_tx_closedENS_12StreamStatusE
 997              	.LVL94:
 520:fibre-cpp/legacy_protocol.cpp **** 
 998              		.loc 1 520 1 view .LVU221
 999 001e FAE7     		b	.L53
 1000              		.cfi_endproc
 1001              	.LFE4607:
 1002              		.fnend
 1004              		.section	.text._ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8complet
 1005              		.align	1
 1006              		.weak	_ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EENS
 1007              		.syntax unified
 1008              		.thumb
 1009              		.thumb_func
 1011              	_ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EENS_15func
 1012              		.fnstart
 1013              	.LVL95:
 1014              	.LFB5010:
  73:fibre-cpp/include/fibre/callback.hpp ****         }
  74:fibre-cpp/include/fibre/callback.hpp ****         return detail::get_default<TRet>::val();
  75:fibre-cpp/include/fibre/callback.hpp ****     }
  76:fibre-cpp/include/fibre/callback.hpp **** 
  77:fibre-cpp/include/fibre/callback.hpp ****     typedef TRet(*cb_t)(void*, TArgs...);
  78:fibre-cpp/include/fibre/callback.hpp ****     cb_t get_ptr() { return cb_; }
  79:fibre-cpp/include/fibre/callback.hpp ****     void* get_ctx() { return ctx_; }
  80:fibre-cpp/include/fibre/callback.hpp **** 
  81:fibre-cpp/include/fibre/callback.hpp **** private:
  82:fibre-cpp/include/fibre/callback.hpp ****     TRet(*cb_)(void*, TArgs...);
  83:fibre-cpp/include/fibre/callback.hpp ****     void* ctx_;
  84:fibre-cpp/include/fibre/callback.hpp **** };
  85:fibre-cpp/include/fibre/callback.hpp **** 
  86:fibre-cpp/include/fibre/callback.hpp **** template<typename _TRet, typename _TObj, typename ... _TArgs>
ARM GAS  /tmp/ccjyQa7a.s 			page 57


  87:fibre-cpp/include/fibre/callback.hpp **** struct function_traits {
  88:fibre-cpp/include/fibre/callback.hpp ****     using TRet = _TRet;
  89:fibre-cpp/include/fibre/callback.hpp ****     using TArgs = std::tuple<_TArgs...>;
  90:fibre-cpp/include/fibre/callback.hpp ****     using TObj = _TObj;
  91:fibre-cpp/include/fibre/callback.hpp **** };
  92:fibre-cpp/include/fibre/callback.hpp **** 
  93:fibre-cpp/include/fibre/callback.hpp **** template<typename _TRet, typename _TObj, typename ... _TArgs>
  94:fibre-cpp/include/fibre/callback.hpp **** function_traits<_TRet, _TObj, _TArgs...> make_function_traits(_TRet (_TObj::*)(_TArgs...)) {
  95:fibre-cpp/include/fibre/callback.hpp ****     return {};
  96:fibre-cpp/include/fibre/callback.hpp **** }
  97:fibre-cpp/include/fibre/callback.hpp **** 
  98:fibre-cpp/include/fibre/callback.hpp **** template<typename T1, T1 T2, typename T3, typename T4, typename T5>
  99:fibre-cpp/include/fibre/callback.hpp **** struct MemberCallback;
 100:fibre-cpp/include/fibre/callback.hpp **** 
 101:fibre-cpp/include/fibre/callback.hpp **** template<typename T, T func, typename TObj, typename TRes, typename ... TArgs>
 102:fibre-cpp/include/fibre/callback.hpp **** struct MemberCallback<T, func, TObj, TRes, std::tuple<TArgs...>> {
 103:fibre-cpp/include/fibre/callback.hpp ****     using cb_t = Callback<TRes, TArgs...>;
 104:fibre-cpp/include/fibre/callback.hpp ****     static cb_t with(TObj* obj) {
 105:fibre-cpp/include/fibre/callback.hpp ****         return cb_t{[](void* obj, TArgs... arg) {
 106:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 107:fibre-cpp/include/fibre/callback.hpp ****         }, obj};
 108:fibre-cpp/include/fibre/callback.hpp ****     }
 109:fibre-cpp/include/fibre/callback.hpp **** };
 110:fibre-cpp/include/fibre/callback.hpp **** 
 111:fibre-cpp/include/fibre/callback.hpp **** template<typename T, T func,
 112:fibre-cpp/include/fibre/callback.hpp ****          typename TTraits = decltype(make_function_traits(func)),
 113:fibre-cpp/include/fibre/callback.hpp ****          typename MemCb = MemberCallback<T, func, typename TTraits::TObj, typename TTraits::TRet, t
 114:fibre-cpp/include/fibre/callback.hpp **** typename MemCb::cb_t make_callback(typename TTraits::TObj* obj) {
 1015              		.loc 8 114 22 is_stmt 1 view -0
 1016              		.cfi_startproc
 1017              		@ args = 0, pretend = 0, frame = 0
 1018              		@ frame_needed = 0, uses_anonymous_args = 0
 1019              		@ link register save eliminated.
 1020              	.LBB709:
 1021              	.LBI709:
 104:fibre-cpp/include/fibre/callback.hpp ****         return cb_t{[](void* obj, TArgs... arg) {
 1022              		.loc 8 104 17 view .LVU223
 1023              	.LBB710:
 1024              	.LBB711:
 1025              	.LBI711:
  22:fibre-cpp/include/fibre/callback.hpp ****         cb_(callback), ctx_(ctx) {}
 1026              		.loc 8 22 5 view .LVU224
 1027              	.LBB712:
  23:fibre-cpp/include/fibre/callback.hpp **** 
 1028              		.loc 8 23 32 is_stmt 0 view .LVU225
 1029 0000 014A     		ldr	r2, .L58
 1030 0002 0260     		str	r2, [r0]
 1031 0004 4160     		str	r1, [r0, #4]
 1032              	.LVL96:
  23:fibre-cpp/include/fibre/callback.hpp **** 
 1033              		.loc 8 23 32 view .LVU226
 1034              	.LBE712:
 1035              	.LBE711:
 1036              	.LBE710:
 1037              	.LBE709:
 115:fibre-cpp/include/fibre/callback.hpp ****     return MemCb::with(obj);
 116:fibre-cpp/include/fibre/callback.hpp **** }
ARM GAS  /tmp/ccjyQa7a.s 			page 58


 1038              		.loc 8 116 1 view .LVU227
 1039 0006 7047     		bx	lr
 1040              	.L59:
 1041              		.align	2
 1042              	.L58:
 1043 0008 00000000 		.word	_ZZN5fibre14MemberCallbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EE
 1044              		.cfi_endproc
 1045              	.LFE5010:
 1046              		.cantunwind
 1047              		.fnend
 1049              		.section	.text._ZN5fibre13PacketWrapper11start_writeENS_16generic_bufptr_tIKhEEPjNS_8CallbackIvJNS
 1050              		.align	1
 1051              		.global	_ZN5fibre13PacketWrapper11start_writeENS_16generic_bufptr_tIKhEEPjNS_8CallbackIvJNS_11Writ
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1056              	_ZN5fibre13PacketWrapper11start_writeENS_16generic_bufptr_tIKhEEPjNS_8CallbackIvJNS_11WriteResultEE
 1057              		.fnstart
 1058              	.LVL97:
 1059              	.LFB4597:
  22:fibre-cpp/legacy_protocol.cpp ****     if (handle) {
 1060              		.loc 1 22 114 is_stmt 1 view -0
 1061              		.cfi_startproc
 1062              		@ args = 4, pretend = 0, frame = 48
 1063              		@ frame_needed = 0, uses_anonymous_args = 0
  22:fibre-cpp/legacy_protocol.cpp ****     if (handle) {
 1064              		.loc 1 22 114 is_stmt 0 view .LVU229
 1065 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1066              		.save {r4, r5, r6, r7, lr}
 1067              	.LCFI12:
 1068              		.cfi_def_cfa_offset 20
 1069              		.cfi_offset 4, -20
 1070              		.cfi_offset 5, -16
 1071              		.cfi_offset 6, -12
 1072              		.cfi_offset 7, -8
 1073              		.cfi_offset 14, -4
 1074              		.pad #60
 1075 0002 8FB0     		sub	sp, sp, #60
 1076              	.LCFI13:
 1077              		.cfi_def_cfa_offset 80
 1078 0004 0446     		mov	r4, r0
 1079 0006 02A8     		add	r0, sp, #8
 1080              	.LVL98:
  22:fibre-cpp/legacy_protocol.cpp ****     if (handle) {
 1081              		.loc 1 22 114 view .LVU230
 1082 0008 80E80600 		stm	r0, {r1, r2}
 1083 000c 149E     		ldr	r6, [sp, #80]
  23:fibre-cpp/legacy_protocol.cpp ****         *handle = reinterpret_cast<TransferHandle>(this);
 1084              		.loc 1 23 5 is_stmt 1 view .LVU231
 1085 000e 03B1     		cbz	r3, .L61
  24:fibre-cpp/legacy_protocol.cpp ****     }
 1086              		.loc 1 24 9 view .LVU232
  24:fibre-cpp/legacy_protocol.cpp ****     }
 1087              		.loc 1 24 17 is_stmt 0 view .LVU233
 1088 0010 1C60     		str	r4, [r3]
 1089              	.L61:
  27:fibre-cpp/legacy_protocol.cpp ****         completer.invoke({kStreamError, buffer.begin()});
ARM GAS  /tmp/ccjyQa7a.s 			page 59


 1090              		.loc 1 27 5 is_stmt 1 view .LVU234
  27:fibre-cpp/legacy_protocol.cpp ****         completer.invoke({kStreamError, buffer.begin()});
 1091              		.loc 1 27 9 is_stmt 0 view .LVU235
 1092 0012 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 1093              	.LVL99:
  27:fibre-cpp/legacy_protocol.cpp ****         completer.invoke({kStreamError, buffer.begin()});
 1094              		.loc 1 27 5 view .LVU236
 1095 0016 83B1     		cbz	r3, .L62
  28:fibre-cpp/legacy_protocol.cpp ****     }
 1096              		.loc 1 28 9 is_stmt 1 view .LVU237
  28:fibre-cpp/legacy_protocol.cpp ****     }
 1097              		.loc 1 28 25 is_stmt 0 view .LVU238
 1098 0018 0323     		movs	r3, #3
 1099 001a 8DF81830 		strb	r3, [sp, #24]
  28:fibre-cpp/legacy_protocol.cpp ****     }
 1100              		.loc 1 28 53 view .LVU239
 1101 001e 029B     		ldr	r3, [sp, #8]
  28:fibre-cpp/legacy_protocol.cpp ****     }
 1102              		.loc 1 28 25 view .LVU240
 1103 0020 0793     		str	r3, [sp, #28]
 1104              	.LVL100:
  28:fibre-cpp/legacy_protocol.cpp ****     }
 1105              		.loc 1 28 25 view .LVU241
 1106 0022 04AB     		add	r3, sp, #16
 1107 0024 06AA     		add	r2, sp, #24
 1108 0026 92E80300 		ldm	r2, {r0, r1}
 1109 002a 83E80300 		stm	r3, {r0, r1}
 1110              	.LBB713:
 1111              	.LBI713:
  59:fibre-cpp/include/fibre/callback.hpp ****         if (cb_) {
 1112              		.loc 8 59 10 is_stmt 1 view .LVU242
 1113              	.LBB714:
  60:fibre-cpp/include/fibre/callback.hpp ****             return (*cb_)(ctx_, arg...);
 1114              		.loc 8 60 13 is_stmt 0 view .LVU243
 1115 002e 3368     		ldr	r3, [r6]
  60:fibre-cpp/include/fibre/callback.hpp ****             return (*cb_)(ctx_, arg...);
 1116              		.loc 8 60 9 view .LVU244
 1117 0030 1BB1     		cbz	r3, .L62
  61:fibre-cpp/include/fibre/callback.hpp ****         }
 1118              		.loc 8 61 22 view .LVU245
 1119 0032 04AA     		add	r2, sp, #16
 1120 0034 06CA     		ldm	r2, {r1, r2}
 1121 0036 7068     		ldr	r0, [r6, #4]
 1122 0038 9847     		blx	r3
 1123              	.LVL101:
 1124              	.L62:
  61:fibre-cpp/include/fibre/callback.hpp ****         }
 1125              		.loc 8 61 22 view .LVU246
 1126              	.LBE714:
 1127              	.LBE713:
  32:fibre-cpp/legacy_protocol.cpp ****         completer.invoke({kStreamError, buffer.begin()});
 1128              		.loc 1 32 5 is_stmt 1 view .LVU247
 1129              	.LBB715:
 1130              	.LBI715:
  74:fibre-cpp/include/fibre/bufptr.hpp ****         return end_ - begin_;
 1131              		.loc 4 74 12 view .LVU248
 1132              	.LBB716:
ARM GAS  /tmp/ccjyQa7a.s 			page 60


  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 1133              		.loc 4 75 23 is_stmt 0 view .LVU249
 1134 003a 029F     		ldr	r7, [sp, #8]
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 1135              		.loc 4 75 21 view .LVU250
 1136 003c 039D     		ldr	r5, [sp, #12]
 1137 003e ED1B     		subs	r5, r5, r7
 1138              	.LVL102:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 1139              		.loc 4 75 21 view .LVU251
 1140              	.LBE716:
 1141              	.LBE715:
  32:fibre-cpp/legacy_protocol.cpp ****         completer.invoke({kStreamError, buffer.begin()});
 1142              		.loc 1 32 5 view .LVU252
 1143 0040 7F2D     		cmp	r5, #127
 1144 0042 0FD9     		bls	.L64
  33:fibre-cpp/legacy_protocol.cpp ****     }
 1145              		.loc 1 33 9 is_stmt 1 view .LVU253
  33:fibre-cpp/legacy_protocol.cpp ****     }
 1146              		.loc 1 33 25 is_stmt 0 view .LVU254
 1147 0044 0323     		movs	r3, #3
 1148 0046 8DF82030 		strb	r3, [sp, #32]
 1149 004a 0997     		str	r7, [sp, #36]
 1150              	.LVL103:
  33:fibre-cpp/legacy_protocol.cpp ****     }
 1151              		.loc 1 33 25 view .LVU255
 1152 004c 04AB     		add	r3, sp, #16
 1153 004e 08AA     		add	r2, sp, #32
 1154 0050 92E80300 		ldm	r2, {r0, r1}
 1155 0054 83E80300 		stm	r3, {r0, r1}
 1156              	.LBB717:
 1157              	.LBI717:
  59:fibre-cpp/include/fibre/callback.hpp ****         if (cb_) {
 1158              		.loc 8 59 10 is_stmt 1 view .LVU256
 1159              	.LBB718:
  60:fibre-cpp/include/fibre/callback.hpp ****             return (*cb_)(ctx_, arg...);
 1160              		.loc 8 60 13 is_stmt 0 view .LVU257
 1161 0058 3368     		ldr	r3, [r6]
  60:fibre-cpp/include/fibre/callback.hpp ****             return (*cb_)(ctx_, arg...);
 1162              		.loc 8 60 9 view .LVU258
 1163 005a 1BB1     		cbz	r3, .L64
  61:fibre-cpp/include/fibre/callback.hpp ****         }
 1164              		.loc 8 61 22 view .LVU259
 1165 005c 04AA     		add	r2, sp, #16
 1166 005e 06CA     		ldm	r2, {r1, r2}
 1167 0060 7068     		ldr	r0, [r6, #4]
 1168 0062 9847     		blx	r3
 1169              	.LVL104:
 1170              	.L64:
  61:fibre-cpp/include/fibre/callback.hpp ****         }
 1171              		.loc 8 61 22 view .LVU260
 1172              	.LBE718:
 1173              	.LBE717:
  36:fibre-cpp/legacy_protocol.cpp **** 
 1174              		.loc 1 36 5 is_stmt 1 view .LVU261
  36:fibre-cpp/legacy_protocol.cpp **** 
 1175              		.loc 1 36 16 is_stmt 0 view .LVU262
ARM GAS  /tmp/ccjyQa7a.s 			page 61


 1176 0064 04F12003 		add	r3, r4, #32
 1177 0068 96E80300 		ldm	r6, {r0, r1}
 1178 006c 83E80300 		stm	r3, {r0, r1}
  38:fibre-cpp/legacy_protocol.cpp ****     header_buf_[1] = static_cast<uint8_t>(buffer.size());
 1179              		.loc 1 38 5 is_stmt 1 view .LVU263
  38:fibre-cpp/legacy_protocol.cpp ****     header_buf_[1] = static_cast<uint8_t>(buffer.size());
 1180              		.loc 1 38 20 is_stmt 0 view .LVU264
 1181 0070 AA23     		movs	r3, #170
 1182 0072 2373     		strb	r3, [r4, #12]
  39:fibre-cpp/legacy_protocol.cpp ****     header_buf_[2] = calc_crc8<CANONICAL_CRC8_POLYNOMIAL>(CANONICAL_CRC8_INIT, header_buf_, 2);
 1183              		.loc 1 39 5 is_stmt 1 view .LVU265
  39:fibre-cpp/legacy_protocol.cpp ****     header_buf_[2] = calc_crc8<CANONICAL_CRC8_POLYNOMIAL>(CANONICAL_CRC8_INIT, header_buf_, 2);
 1184              		.loc 1 39 20 is_stmt 0 view .LVU266
 1185 0074 6573     		strb	r5, [r4, #13]
  40:fibre-cpp/legacy_protocol.cpp ****     
 1186              		.loc 1 40 5 is_stmt 1 view .LVU267
  40:fibre-cpp/legacy_protocol.cpp ****     
 1187              		.loc 1 40 80 is_stmt 0 view .LVU268
 1188 0076 04F10C06 		add	r6, r4, #12
  40:fibre-cpp/legacy_protocol.cpp ****     
 1189              		.loc 1 40 58 view .LVU269
 1190 007a 0222     		movs	r2, #2
 1191 007c 3146     		mov	r1, r6
 1192 007e 4220     		movs	r0, #66
 1193 0080 FFF7FEFF 		bl	_Z9calc_crc8ILj55EEhhPKhj
 1194              	.LVL105:
  40:fibre-cpp/legacy_protocol.cpp ****     
 1195              		.loc 1 40 20 view .LVU270
 1196 0084 A073     		strb	r0, [r4, #14]
  42:fibre-cpp/legacy_protocol.cpp **** 
 1197              		.loc 1 42 5 is_stmt 1 view .LVU271
  42:fibre-cpp/legacy_protocol.cpp **** 
 1198              		.loc 1 42 18 is_stmt 0 view .LVU272
 1199 0086 04F11803 		add	r3, r4, #24
 1200 008a 02AA     		add	r2, sp, #8
 1201 008c 92E80300 		ldm	r2, {r0, r1}
 1202 0090 83E80300 		stm	r3, {r0, r1}
  44:fibre-cpp/legacy_protocol.cpp ****     trailer_buf_[0] = (uint8_t)((crc16 >> 8) & 0xff),
 1203              		.loc 1 44 5 is_stmt 1 view .LVU273
  44:fibre-cpp/legacy_protocol.cpp ****     trailer_buf_[0] = (uint8_t)((crc16 >> 8) & 0xff),
 1204              		.loc 1 44 60 is_stmt 0 view .LVU274
 1205 0094 2A46     		mov	r2, r5
 1206 0096 3946     		mov	r1, r7
 1207 0098 41F23730 		movw	r0, #4919
 1208 009c FFF7FEFF 		bl	_Z10calc_crc16ILj15717EEttPKhj
 1209              	.LVL106:
  45:fibre-cpp/legacy_protocol.cpp ****     trailer_buf_[1] = (uint8_t)((crc16 >> 0) & 0xff);
 1210              		.loc 1 45 5 is_stmt 1 view .LVU275
  45:fibre-cpp/legacy_protocol.cpp ****     trailer_buf_[1] = (uint8_t)((crc16 >> 0) & 0xff);
 1211              		.loc 1 45 53 is_stmt 0 view .LVU276
 1212 00a0 C0F30723 		ubfx	r3, r0, #8, #8
  45:fibre-cpp/legacy_protocol.cpp ****     trailer_buf_[1] = (uint8_t)((crc16 >> 0) & 0xff);
 1213              		.loc 1 45 21 view .LVU277
 1214 00a4 E373     		strb	r3, [r4, #15]
  46:fibre-cpp/legacy_protocol.cpp **** 
 1215              		.loc 1 46 21 view .LVU278
 1216 00a6 2074     		strb	r0, [r4, #16]
ARM GAS  /tmp/ccjyQa7a.s 			page 62


  48:fibre-cpp/legacy_protocol.cpp ****     expected_tx_end_ = header_buf_ + 3;
 1217              		.loc 1 48 5 is_stmt 1 view .LVU279
  48:fibre-cpp/legacy_protocol.cpp ****     expected_tx_end_ = header_buf_ + 3;
 1218              		.loc 1 48 12 is_stmt 0 view .LVU280
 1219 00a8 0223     		movs	r3, #2
 1220 00aa 84F82830 		strb	r3, [r4, #40]
  49:fibre-cpp/legacy_protocol.cpp ****     tx_channel_->start_write(header_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
 1221              		.loc 1 49 5 is_stmt 1 view .LVU281
  49:fibre-cpp/legacy_protocol.cpp ****     tx_channel_->start_write(header_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
 1222              		.loc 1 49 36 is_stmt 0 view .LVU282
 1223 00ae 04F10F03 		add	r3, r4, #15
  49:fibre-cpp/legacy_protocol.cpp ****     tx_channel_->start_write(header_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
 1224              		.loc 1 49 22 view .LVU283
 1225 00b2 6361     		str	r3, [r4, #20]
  50:fibre-cpp/legacy_protocol.cpp **** }
 1226              		.loc 1 50 5 is_stmt 1 view .LVU284
 1227 00b4 6568     		ldr	r5, [r4, #4]
  50:fibre-cpp/legacy_protocol.cpp **** }
 1228              		.loc 1 50 93 is_stmt 0 view .LVU285
 1229 00b6 2A68     		ldr	r2, [r5]
 1230 00b8 1768     		ldr	r7, [r2]
 1231              	.LVL107:
 1232              	.LBB719:
 1233              	.LBI719:
  28:fibre-cpp/include/fibre/bufptr.hpp **** 
 1234              		.loc 4 28 5 is_stmt 1 view .LVU286
 1235              	.LBB720:
 1236              	.LBB721:
 1237              	.LBI721:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 1238              		.loc 4 21 5 view .LVU287
 1239              	.LBB722:
 1240              	.LBB723:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 1241              		.loc 4 21 83 is_stmt 0 view .LVU288
 1242 00ba 0A96     		str	r6, [sp, #40]
 1243 00bc 0B93     		str	r3, [sp, #44]
 1244              	.LVL108:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 1245              		.loc 4 21 83 view .LVU289
 1246              	.LBE723:
 1247              	.LBE722:
 1248              	.LBE721:
 1249              	.LBE720:
 1250              	.LBE719:
  50:fibre-cpp/legacy_protocol.cpp **** }
 1251              		.loc 1 50 68 view .LVU290
 1252 00be 0CAE     		add	r6, sp, #48
 1253 00c0 2146     		mov	r1, r4
 1254 00c2 3046     		mov	r0, r6
 1255              	.LVL109:
  50:fibre-cpp/legacy_protocol.cpp **** }
 1256              		.loc 1 50 68 view .LVU291
 1257 00c4 FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EENS_15
 1258              	.LVL110:
  50:fibre-cpp/legacy_protocol.cpp **** }
 1259              		.loc 1 50 29 view .LVU292
ARM GAS  /tmp/ccjyQa7a.s 			page 63


 1260 00c8 0096     		str	r6, [sp]
 1261 00ca 04F10803 		add	r3, r4, #8
 1262 00ce 0AAA     		add	r2, sp, #40
 1263 00d0 06CA     		ldm	r2, {r1, r2}
 1264 00d2 2846     		mov	r0, r5
 1265 00d4 B847     		blx	r7
 1266              	.LVL111:
  51:fibre-cpp/legacy_protocol.cpp **** 
 1267              		.loc 1 51 1 view .LVU293
 1268 00d6 0FB0     		add	sp, sp, #60
 1269              	.LCFI14:
 1270              		.cfi_def_cfa_offset 20
 1271              		@ sp needed
 1272 00d8 F0BD     		pop	{r4, r5, r6, r7, pc}
  51:fibre-cpp/legacy_protocol.cpp **** 
 1273              		.loc 1 51 1 view .LVU294
 1274              		.cfi_endproc
 1275              	.LFE4597:
 1276              		.fnend
 1278              		.section	.text._ZN5fibre13PacketWrapper8completeENS_11WriteResultE,"ax",%progbits
 1279              		.align	1
 1280              		.global	_ZN5fibre13PacketWrapper8completeENS_11WriteResultE
 1281              		.syntax unified
 1282              		.thumb
 1283              		.thumb_func
 1285              	_ZN5fibre13PacketWrapper8completeENS_11WriteResultE:
 1286              		.fnstart
 1287              	.LVL112:
 1288              	.LFB4599:
  58:fibre-cpp/legacy_protocol.cpp ****     if (state_ == kStateCancelling) {
 1289              		.loc 1 58 50 is_stmt 1 view -0
 1290              		.cfi_startproc
 1291              		@ args = 0, pretend = 0, frame = 80
 1292              		@ frame_needed = 0, uses_anonymous_args = 0
  58:fibre-cpp/legacy_protocol.cpp ****     if (state_ == kStateCancelling) {
 1293              		.loc 1 58 50 is_stmt 0 view .LVU296
 1294 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1295              		.save {r4, r5, r6, r7, lr}
 1296              	.LCFI15:
 1297              		.cfi_def_cfa_offset 20
 1298              		.cfi_offset 4, -20
 1299              		.cfi_offset 5, -16
 1300              		.cfi_offset 6, -12
 1301              		.cfi_offset 7, -8
 1302              		.cfi_offset 14, -4
 1303              		.pad #92
 1304 0002 97B0     		sub	sp, sp, #92
 1305              	.LCFI16:
 1306              		.cfi_def_cfa_offset 112
 1307 0004 0446     		mov	r4, r0
 1308 0006 02AB     		add	r3, sp, #8
 1309 0008 83E80600 		stm	r3, {r1, r2}
  59:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1310              		.loc 1 59 5 is_stmt 1 view .LVU297
  59:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1311              		.loc 1 59 9 is_stmt 0 view .LVU298
 1312 000c 90F82830 		ldrb	r3, [r0, #40]	@ zero_extendqisi2
ARM GAS  /tmp/ccjyQa7a.s 			page 64


  59:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1313              		.loc 1 59 5 view .LVU299
 1314 0010 012B     		cmp	r3, #1
 1315 0012 0ED0     		beq	.L78
  65:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1316              		.loc 1 65 5 is_stmt 1 view .LVU300
  65:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1317              		.loc 1 65 16 is_stmt 0 view .LVU301
 1318 0014 9DF80820 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
  65:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1319              		.loc 1 65 5 view .LVU302
 1320 0018 12BB     		cbnz	r2, .L79
  71:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write({result.end, expected_tx_end_}, &inner_transfer_handle_, MEMBER_CB
 1321              		.loc 1 71 5 is_stmt 1 view .LVU303
  71:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write({result.end, expected_tx_end_}, &inner_transfer_handle_, MEMBER_CB
 1322              		.loc 1 71 16 is_stmt 0 view .LVU304
 1323 001a 0399     		ldr	r1, [sp, #12]
  71:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write({result.end, expected_tx_end_}, &inner_transfer_handle_, MEMBER_CB
 1324              		.loc 1 71 22 view .LVU305
 1325 001c 4269     		ldr	r2, [r0, #20]
  71:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write({result.end, expected_tx_end_}, &inner_transfer_handle_, MEMBER_CB
 1326              		.loc 1 71 5 view .LVU306
 1327 001e 9142     		cmp	r1, r2
 1328 0020 34D3     		bcc	.L80
  76:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateSendingPayload;
 1329              		.loc 1 76 5 is_stmt 1 view .LVU307
 1330 0022 022B     		cmp	r3, #2
 1331 0024 44D0     		beq	.L81
  81:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateSendingTrailer;
 1332              		.loc 1 81 12 view .LVU308
 1333 0026 032B     		cmp	r3, #3
 1334 0028 58D0     		beq	.L82
  86:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1335              		.loc 1 86 12 view .LVU309
 1336 002a 042B     		cmp	r3, #4
 1337 002c 70D0     		beq	.L83
 1338              	.LVL113:
 1339              	.L67:
  90:fibre-cpp/legacy_protocol.cpp **** 
 1340              		.loc 1 90 1 is_stmt 0 view .LVU310
 1341 002e 17B0     		add	sp, sp, #92
 1342              	.LCFI17:
 1343              		.cfi_remember_state
 1344              		.cfi_def_cfa_offset 20
 1345              		@ sp needed
 1346 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 1347              	.LVL114:
 1348              	.L78:
 1349              	.LCFI18:
 1350              		.cfi_restore_state
  60:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({kStreamCancelled, payload_buf_.begin()});
 1351              		.loc 1 60 9 is_stmt 1 view .LVU311
  60:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({kStreamCancelled, payload_buf_.begin()});
 1352              		.loc 1 60 16 is_stmt 0 view .LVU312
 1353 0032 0023     		movs	r3, #0
 1354 0034 80F82830 		strb	r3, [r0, #40]
  61:fibre-cpp/legacy_protocol.cpp ****         return;
ARM GAS  /tmp/ccjyQa7a.s 			page 65


 1355              		.loc 1 61 9 is_stmt 1 view .LVU313
  61:fibre-cpp/legacy_protocol.cpp ****         return;
 1356              		.loc 1 61 36 is_stmt 0 view .LVU314
 1357 0038 0122     		movs	r2, #1
 1358 003a 8DF81820 		strb	r2, [sp, #24]
  61:fibre-cpp/legacy_protocol.cpp ****         return;
 1359              		.loc 1 61 74 view .LVU315
 1360 003e 8269     		ldr	r2, [r0, #24]
  61:fibre-cpp/legacy_protocol.cpp ****         return;
 1361              		.loc 1 61 36 view .LVU316
 1362 0040 0792     		str	r2, [sp, #28]
 1363              	.LVL115:
  61:fibre-cpp/legacy_protocol.cpp ****         return;
 1364              		.loc 1 61 36 view .LVU317
 1365 0042 04AA     		add	r2, sp, #16
 1366 0044 06A9     		add	r1, sp, #24
 1367 0046 03C9     		ldm	r1, {r0, r1}
 1368              	.LVL116:
  61:fibre-cpp/legacy_protocol.cpp ****         return;
 1369              		.loc 1 61 36 view .LVU318
 1370 0048 82E80300 		stm	r2, {r0, r1}
 1371              	.LBB724:
 1372              	.LBI724:
  66:fibre-cpp/include/fibre/callback.hpp ****         void* ctx = ctx_;
 1373              		.loc 8 66 10 is_stmt 1 view .LVU319
 1374              	.LBB725:
  67:fibre-cpp/include/fibre/callback.hpp ****         auto cb = cb_;
 1375              		.loc 8 67 15 is_stmt 0 view .LVU320
 1376 004c 606A     		ldr	r0, [r4, #36]
 1377              	.LVL117:
  68:fibre-cpp/include/fibre/callback.hpp ****         ctx_ = nullptr;
 1378              		.loc 8 68 14 view .LVU321
 1379 004e 256A     		ldr	r5, [r4, #32]
 1380              	.LVL118:
  69:fibre-cpp/include/fibre/callback.hpp ****         cb_ = nullptr;
 1381              		.loc 8 69 14 view .LVU322
 1382 0050 6362     		str	r3, [r4, #36]
  70:fibre-cpp/include/fibre/callback.hpp ****         if (cb) {
 1383              		.loc 8 70 13 view .LVU323
 1384 0052 2362     		str	r3, [r4, #32]
  71:fibre-cpp/include/fibre/callback.hpp ****             return (*cb)(ctx, arg...);
 1385              		.loc 8 71 9 view .LVU324
 1386 0054 002D     		cmp	r5, #0
 1387 0056 EAD0     		beq	.L67
  72:fibre-cpp/include/fibre/callback.hpp ****         }
 1388              		.loc 8 72 25 view .LVU325
 1389 0058 D2E90012 		ldrd	r1, r2, [r2]
 1390 005c A847     		blx	r5
 1391              	.LVL119:
  72:fibre-cpp/include/fibre/callback.hpp ****         }
 1392              		.loc 8 72 25 view .LVU326
 1393              	.LBE725:
 1394              	.LBE724:
  62:fibre-cpp/legacy_protocol.cpp ****     }
 1395              		.loc 1 62 9 is_stmt 1 view .LVU327
 1396 005e E6E7     		b	.L67
 1397              	.LVL120:
ARM GAS  /tmp/ccjyQa7a.s 			page 66


 1398              	.L79:
  66:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({result.status, payload_buf_.begin()});
 1399              		.loc 1 66 9 view .LVU328
  66:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({result.status, payload_buf_.begin()});
 1400              		.loc 1 66 16 is_stmt 0 view .LVU329
 1401 0060 0023     		movs	r3, #0
 1402 0062 80F82830 		strb	r3, [r0, #40]
  67:fibre-cpp/legacy_protocol.cpp ****         return;
 1403              		.loc 1 67 9 is_stmt 1 view .LVU330
  67:fibre-cpp/legacy_protocol.cpp ****         return;
 1404              		.loc 1 67 36 is_stmt 0 view .LVU331
 1405 0066 8DF82020 		strb	r2, [sp, #32]
  67:fibre-cpp/legacy_protocol.cpp ****         return;
 1406              		.loc 1 67 71 view .LVU332
 1407 006a 8269     		ldr	r2, [r0, #24]
  67:fibre-cpp/legacy_protocol.cpp ****         return;
 1408              		.loc 1 67 36 view .LVU333
 1409 006c 0992     		str	r2, [sp, #36]
 1410              	.LVL121:
  67:fibre-cpp/legacy_protocol.cpp ****         return;
 1411              		.loc 1 67 36 view .LVU334
 1412 006e 04AA     		add	r2, sp, #16
 1413 0070 08A9     		add	r1, sp, #32
 1414 0072 03C9     		ldm	r1, {r0, r1}
 1415              	.LVL122:
  67:fibre-cpp/legacy_protocol.cpp ****         return;
 1416              		.loc 1 67 36 view .LVU335
 1417 0074 82E80300 		stm	r2, {r0, r1}
 1418              	.LBB726:
 1419              	.LBI726:
  66:fibre-cpp/include/fibre/callback.hpp ****         void* ctx = ctx_;
 1420              		.loc 8 66 10 is_stmt 1 view .LVU336
 1421              	.LBB727:
  67:fibre-cpp/include/fibre/callback.hpp ****         auto cb = cb_;
 1422              		.loc 8 67 15 is_stmt 0 view .LVU337
 1423 0078 606A     		ldr	r0, [r4, #36]
 1424              	.LVL123:
  68:fibre-cpp/include/fibre/callback.hpp ****         ctx_ = nullptr;
 1425              		.loc 8 68 14 view .LVU338
 1426 007a 256A     		ldr	r5, [r4, #32]
 1427              	.LVL124:
  69:fibre-cpp/include/fibre/callback.hpp ****         cb_ = nullptr;
 1428              		.loc 8 69 14 view .LVU339
 1429 007c 6362     		str	r3, [r4, #36]
  70:fibre-cpp/include/fibre/callback.hpp ****         if (cb) {
 1430              		.loc 8 70 13 view .LVU340
 1431 007e 2362     		str	r3, [r4, #32]
  71:fibre-cpp/include/fibre/callback.hpp ****             return (*cb)(ctx, arg...);
 1432              		.loc 8 71 9 view .LVU341
 1433 0080 002D     		cmp	r5, #0
 1434 0082 D4D0     		beq	.L67
  72:fibre-cpp/include/fibre/callback.hpp ****         }
 1435              		.loc 8 72 25 view .LVU342
 1436 0084 D2E90012 		ldrd	r1, r2, [r2]
 1437 0088 A847     		blx	r5
 1438              	.LVL125:
  72:fibre-cpp/include/fibre/callback.hpp ****         }
ARM GAS  /tmp/ccjyQa7a.s 			page 67


 1439              		.loc 8 72 25 view .LVU343
 1440              	.LBE727:
 1441              	.LBE726:
  68:fibre-cpp/legacy_protocol.cpp ****     }
 1442              		.loc 1 68 9 is_stmt 1 view .LVU344
 1443 008a D0E7     		b	.L67
 1444              	.LVL126:
 1445              	.L80:
  72:fibre-cpp/legacy_protocol.cpp ****         return;
 1446              		.loc 1 72 9 view .LVU345
 1447 008c 4568     		ldr	r5, [r0, #4]
  72:fibre-cpp/legacy_protocol.cpp ****         return;
 1448              		.loc 1 72 116 is_stmt 0 view .LVU346
 1449 008e 2B68     		ldr	r3, [r5]
 1450 0090 1F68     		ldr	r7, [r3]
 1451              	.LVL127:
 1452              	.LBB728:
 1453              	.LBI728:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 1454              		.loc 4 23 5 is_stmt 1 view .LVU347
 1455              	.LBB729:
 1456              	.LBB730:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 1457              		.loc 4 23 65 is_stmt 0 view .LVU348
 1458 0092 0A91     		str	r1, [sp, #40]
 1459 0094 0B92     		str	r2, [sp, #44]
 1460              	.LVL128:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 1461              		.loc 4 23 65 view .LVU349
 1462              	.LBE730:
 1463              	.LBE729:
 1464              	.LBE728:
  72:fibre-cpp/legacy_protocol.cpp ****         return;
 1465              		.loc 1 72 91 view .LVU350
 1466 0096 0CAE     		add	r6, sp, #48
 1467 0098 0146     		mov	r1, r0
 1468 009a 3046     		mov	r0, r6
 1469              	.LVL129:
  72:fibre-cpp/legacy_protocol.cpp ****         return;
 1470              		.loc 1 72 91 view .LVU351
 1471 009c FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EENS_15
 1472              	.LVL130:
  72:fibre-cpp/legacy_protocol.cpp ****         return;
 1473              		.loc 1 72 33 view .LVU352
 1474 00a0 0096     		str	r6, [sp]
 1475 00a2 04F10803 		add	r3, r4, #8
 1476 00a6 0AAA     		add	r2, sp, #40
 1477 00a8 06CA     		ldm	r2, {r1, r2}
 1478 00aa 2846     		mov	r0, r5
 1479 00ac B847     		blx	r7
 1480              	.LVL131:
  73:fibre-cpp/legacy_protocol.cpp ****     }
 1481              		.loc 1 73 9 is_stmt 1 view .LVU353
 1482 00ae BEE7     		b	.L67
 1483              	.LVL132:
 1484              	.L81:
  77:fibre-cpp/legacy_protocol.cpp ****         expected_tx_end_ = payload_buf_.end();
ARM GAS  /tmp/ccjyQa7a.s 			page 68


 1485              		.loc 1 77 9 view .LVU354
  77:fibre-cpp/legacy_protocol.cpp ****         expected_tx_end_ = payload_buf_.end();
 1486              		.loc 1 77 16 is_stmt 0 view .LVU355
 1487 00b0 0323     		movs	r3, #3
 1488 00b2 80F82830 		strb	r3, [r0, #40]
  78:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write(payload_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
 1489              		.loc 1 78 9 is_stmt 1 view .LVU356
  78:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write(payload_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
 1490              		.loc 1 78 44 is_stmt 0 view .LVU357
 1491 00b6 C369     		ldr	r3, [r0, #28]
  78:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write(payload_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
 1492              		.loc 1 78 26 view .LVU358
 1493 00b8 4361     		str	r3, [r0, #20]
  79:fibre-cpp/legacy_protocol.cpp **** 
 1494              		.loc 1 79 9 is_stmt 1 view .LVU359
 1495 00ba 4568     		ldr	r5, [r0, #4]
  79:fibre-cpp/legacy_protocol.cpp **** 
 1496              		.loc 1 79 98 is_stmt 0 view .LVU360
 1497 00bc 2B68     		ldr	r3, [r5]
 1498 00be 1F68     		ldr	r7, [r3]
  79:fibre-cpp/legacy_protocol.cpp **** 
 1499              		.loc 1 79 73 view .LVU361
 1500 00c0 0EAE     		add	r6, sp, #56
 1501 00c2 0146     		mov	r1, r0
 1502 00c4 3046     		mov	r0, r6
 1503              	.LVL133:
  79:fibre-cpp/legacy_protocol.cpp **** 
 1504              		.loc 1 79 73 view .LVU362
 1505 00c6 FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EENS_15
 1506              	.LVL134:
  79:fibre-cpp/legacy_protocol.cpp **** 
 1507              		.loc 1 79 33 view .LVU363
 1508 00ca 0096     		str	r6, [sp]
 1509 00cc 04F10803 		add	r3, r4, #8
 1510 00d0 1834     		adds	r4, r4, #24
 1511              	.LVL135:
  79:fibre-cpp/legacy_protocol.cpp **** 
 1512              		.loc 1 79 33 view .LVU364
 1513 00d2 94E80600 		ldm	r4, {r1, r2}
 1514 00d6 2846     		mov	r0, r5
 1515 00d8 B847     		blx	r7
 1516              	.LVL136:
 1517 00da A8E7     		b	.L67
 1518              	.LVL137:
 1519              	.L82:
  82:fibre-cpp/legacy_protocol.cpp ****         expected_tx_end_ = trailer_buf_ + 2;
 1520              		.loc 1 82 9 is_stmt 1 view .LVU365
  82:fibre-cpp/legacy_protocol.cpp ****         expected_tx_end_ = trailer_buf_ + 2;
 1521              		.loc 1 82 16 is_stmt 0 view .LVU366
 1522 00dc 0423     		movs	r3, #4
 1523 00de 80F82830 		strb	r3, [r0, #40]
  83:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write(trailer_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
 1524              		.loc 1 83 9 is_stmt 1 view .LVU367
  83:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write(trailer_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
 1525              		.loc 1 83 41 is_stmt 0 view .LVU368
 1526 00e2 00F11103 		add	r3, r0, #17
  83:fibre-cpp/legacy_protocol.cpp ****         tx_channel_->start_write(trailer_buf_, &inner_transfer_handle_, MEMBER_CB(this, complete));
ARM GAS  /tmp/ccjyQa7a.s 			page 69


 1527              		.loc 1 83 26 view .LVU369
 1528 00e6 4361     		str	r3, [r0, #20]
  84:fibre-cpp/legacy_protocol.cpp **** 
 1529              		.loc 1 84 9 is_stmt 1 view .LVU370
 1530 00e8 4568     		ldr	r5, [r0, #4]
  84:fibre-cpp/legacy_protocol.cpp **** 
 1531              		.loc 1 84 98 is_stmt 0 view .LVU371
 1532 00ea 2A68     		ldr	r2, [r5]
 1533 00ec 1768     		ldr	r7, [r2]
  84:fibre-cpp/legacy_protocol.cpp **** 
 1534              		.loc 1 84 34 view .LVU372
 1535 00ee 00F10F02 		add	r2, r0, #15
 1536              	.LVL138:
 1537              	.LBB731:
 1538              	.LBI731:
  28:fibre-cpp/include/fibre/bufptr.hpp **** 
 1539              		.loc 4 28 5 is_stmt 1 view .LVU373
 1540              	.LBB732:
 1541              	.LBB733:
 1542              	.LBI733:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 1543              		.loc 4 21 5 view .LVU374
 1544              	.LBB734:
 1545              	.LBB735:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 1546              		.loc 4 21 83 is_stmt 0 view .LVU375
 1547 00f2 1092     		str	r2, [sp, #64]
 1548 00f4 1193     		str	r3, [sp, #68]
 1549              	.LVL139:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 1550              		.loc 4 21 83 view .LVU376
 1551              	.LBE735:
 1552              	.LBE734:
 1553              	.LBE733:
 1554              	.LBE732:
 1555              	.LBE731:
  84:fibre-cpp/legacy_protocol.cpp **** 
 1556              		.loc 1 84 73 view .LVU377
 1557 00f6 12AE     		add	r6, sp, #72
 1558 00f8 0146     		mov	r1, r0
 1559 00fa 3046     		mov	r0, r6
 1560              	.LVL140:
  84:fibre-cpp/legacy_protocol.cpp **** 
 1561              		.loc 1 84 73 view .LVU378
 1562 00fc FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EENS_15
 1563              	.LVL141:
  84:fibre-cpp/legacy_protocol.cpp **** 
 1564              		.loc 1 84 33 view .LVU379
 1565 0100 0096     		str	r6, [sp]
 1566 0102 04F10803 		add	r3, r4, #8
 1567 0106 10AA     		add	r2, sp, #64
 1568 0108 06CA     		ldm	r2, {r1, r2}
 1569 010a 2846     		mov	r0, r5
 1570 010c B847     		blx	r7
 1571              	.LVL142:
 1572 010e 8EE7     		b	.L67
 1573              	.LVL143:
ARM GAS  /tmp/ccjyQa7a.s 			page 70


 1574              	.L83:
  87:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({kStreamOk, payload_buf_.end()});
 1575              		.loc 1 87 9 is_stmt 1 view .LVU380
  87:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({kStreamOk, payload_buf_.end()});
 1576              		.loc 1 87 16 is_stmt 0 view .LVU381
 1577 0110 0023     		movs	r3, #0
 1578 0112 80F82830 		strb	r3, [r0, #40]
  88:fibre-cpp/legacy_protocol.cpp ****     }
 1579              		.loc 1 88 9 is_stmt 1 view .LVU382
  88:fibre-cpp/legacy_protocol.cpp ****     }
 1580              		.loc 1 88 36 is_stmt 0 view .LVU383
 1581 0116 8DF85030 		strb	r3, [sp, #80]
  88:fibre-cpp/legacy_protocol.cpp ****     }
 1582              		.loc 1 88 65 view .LVU384
 1583 011a C269     		ldr	r2, [r0, #28]
  88:fibre-cpp/legacy_protocol.cpp ****     }
 1584              		.loc 1 88 36 view .LVU385
 1585 011c 1592     		str	r2, [sp, #84]
 1586              	.LVL144:
  88:fibre-cpp/legacy_protocol.cpp ****     }
 1587              		.loc 1 88 36 view .LVU386
 1588 011e 04AA     		add	r2, sp, #16
 1589 0120 16A9     		add	r1, sp, #88
 1590 0122 11E90300 		ldmdb	r1, {r0, r1}
 1591              	.LVL145:
  88:fibre-cpp/legacy_protocol.cpp ****     }
 1592              		.loc 1 88 36 view .LVU387
 1593 0126 82E80300 		stm	r2, {r0, r1}
 1594              	.LBB736:
 1595              	.LBI736:
  66:fibre-cpp/include/fibre/callback.hpp ****         void* ctx = ctx_;
 1596              		.loc 8 66 10 is_stmt 1 view .LVU388
 1597              	.LBB737:
  67:fibre-cpp/include/fibre/callback.hpp ****         auto cb = cb_;
 1598              		.loc 8 67 15 is_stmt 0 view .LVU389
 1599 012a 606A     		ldr	r0, [r4, #36]
 1600              	.LVL146:
  68:fibre-cpp/include/fibre/callback.hpp ****         ctx_ = nullptr;
 1601              		.loc 8 68 14 view .LVU390
 1602 012c 256A     		ldr	r5, [r4, #32]
 1603              	.LVL147:
  69:fibre-cpp/include/fibre/callback.hpp ****         cb_ = nullptr;
 1604              		.loc 8 69 14 view .LVU391
 1605 012e 6362     		str	r3, [r4, #36]
  70:fibre-cpp/include/fibre/callback.hpp ****         if (cb) {
 1606              		.loc 8 70 13 view .LVU392
 1607 0130 2362     		str	r3, [r4, #32]
  71:fibre-cpp/include/fibre/callback.hpp ****             return (*cb)(ctx, arg...);
 1608              		.loc 8 71 9 view .LVU393
 1609 0132 002D     		cmp	r5, #0
 1610 0134 3FF47BAF 		beq	.L67
  72:fibre-cpp/include/fibre/callback.hpp ****         }
 1611              		.loc 8 72 25 view .LVU394
 1612 0138 D2E90012 		ldrd	r1, r2, [r2]
 1613 013c A847     		blx	r5
 1614              	.LVL148:
  72:fibre-cpp/include/fibre/callback.hpp ****         }
ARM GAS  /tmp/ccjyQa7a.s 			page 71


 1615              		.loc 8 72 37 view .LVU395
 1616 013e 76E7     		b	.L67
 1617              	.LBE737:
 1618              	.LBE736:
 1619              		.cfi_endproc
 1620              	.LFE4599:
 1621              		.fnend
 1623              		.section	.text._ZZN5fibre14MemberCallbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8compl
 1624              		.align	1
 1625              		.weak	_ZZN5fibre14MemberCallbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EE
 1626              		.syntax unified
 1627              		.thumb
 1628              		.thumb_func
 1630              	_ZZN5fibre14MemberCallbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EES1_vSt5
 1631              		.fnstart
 1632              	.LFB5343:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 1633              		.loc 8 105 21 is_stmt 1 view -0
 1634              		.cfi_startproc
 1635              		@ args = 0, pretend = 0, frame = 16
 1636              		@ frame_needed = 0, uses_anonymous_args = 0
 1637 0000 00B5     		push	{lr}
 1638              		.save {lr}
 1639              	.LCFI19:
 1640              		.cfi_def_cfa_offset 4
 1641              		.cfi_offset 14, -4
 1642              		.pad #20
 1643 0002 85B0     		sub	sp, sp, #20
 1644              	.LCFI20:
 1645              		.cfi_def_cfa_offset 24
 1646 0004 8446     		mov	ip, r0
 1647 0006 6846     		mov	r0, sp
 1648 0008 80E80600 		stm	r0, {r1, r2}
 1649              	.LVL149:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 1650              		.loc 8 105 21 is_stmt 0 view .LVU397
 1651 000c 02AB     		add	r3, sp, #8
 1652 000e 03C8     		ldm	r0, {r0, r1}
 1653 0010 83E80500 		stm	r3, {r0, r2}
 1654              	.LBB738:
 1655              	.LBI738:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 1656              		.loc 8 105 21 is_stmt 1 view .LVU398
 1657              	.LBB739:
 106:fibre-cpp/include/fibre/callback.hpp ****         }, obj};
 1658              		.loc 8 106 41 is_stmt 0 view .LVU399
 1659 0014 93E80600 		ldm	r3, {r1, r2}
 1660 0018 6046     		mov	r0, ip
 1661 001a FFF7FEFF 		bl	_ZN5fibre13PacketWrapper8completeENS_11WriteResultE
 1662              	.LVL150:
 106:fibre-cpp/include/fibre/callback.hpp ****         }, obj};
 1663              		.loc 8 106 41 view .LVU400
 1664              	.LBE739:
 1665              	.LBE738:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 1666              		.loc 8 105 21 view .LVU401
 1667 001e 05B0     		add	sp, sp, #20
ARM GAS  /tmp/ccjyQa7a.s 			page 72


 1668              	.LCFI21:
 1669              		.cfi_def_cfa_offset 4
 1670              		@ sp needed
 1671 0020 5DF804FB 		ldr	pc, [sp], #4
 1672              		.cfi_endproc
 1673              	.LFE5343:
 1674              		.fnend
 1676              		.section	.text._ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8comple
 1677              		.align	1
 1678              		.weak	_ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EEN
 1679              		.syntax unified
 1680              		.thumb
 1681              		.thumb_func
 1683              	_ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_15fun
 1684              		.fnstart
 1685              	.LVL151:
 1686              	.LFB5019:
 114:fibre-cpp/include/fibre/callback.hpp ****     return MemCb::with(obj);
 1687              		.loc 8 114 22 is_stmt 1 view -0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 0
 1690              		@ frame_needed = 0, uses_anonymous_args = 0
 1691              		@ link register save eliminated.
 1692              	.LBB740:
 1693              	.LBI740:
 104:fibre-cpp/include/fibre/callback.hpp ****         return cb_t{[](void* obj, TArgs... arg) {
 1694              		.loc 8 104 17 view .LVU403
 1695              	.LBB741:
 1696              	.LBB742:
 1697              	.LBI742:
  22:fibre-cpp/include/fibre/callback.hpp ****         cb_(callback), ctx_(ctx) {}
 1698              		.loc 8 22 5 view .LVU404
 1699              	.LBB743:
  23:fibre-cpp/include/fibre/callback.hpp **** 
 1700              		.loc 8 23 32 is_stmt 0 view .LVU405
 1701 0000 014A     		ldr	r2, .L87
 1702 0002 0260     		str	r2, [r0]
 1703 0004 4160     		str	r1, [r0, #4]
 1704              	.LVL152:
  23:fibre-cpp/include/fibre/callback.hpp **** 
 1705              		.loc 8 23 32 view .LVU406
 1706              	.LBE743:
 1707              	.LBE742:
 1708              	.LBE741:
 1709              	.LBE740:
 1710              		.loc 8 116 1 view .LVU407
 1711 0006 7047     		bx	lr
 1712              	.L88:
 1713              		.align	2
 1714              	.L87:
 1715 0008 00000000 		.word	_ZZN5fibre14MemberCallbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_E
 1716              		.cfi_endproc
 1717              	.LFE5019:
 1718              		.cantunwind
 1719              		.fnend
 1721              		.section	.text._ZN5fibre15PacketUnwrapper10start_readENS_16generic_bufptr_tIhEEPjNS_8CallbackIvJNS
 1722              		.align	1
ARM GAS  /tmp/ccjyQa7a.s 			page 73


 1723              		.global	_ZN5fibre15PacketUnwrapper10start_readENS_16generic_bufptr_tIhEEPjNS_8CallbackIvJNS_10Read
 1724              		.syntax unified
 1725              		.thumb
 1726              		.thumb_func
 1728              	_ZN5fibre15PacketUnwrapper10start_readENS_16generic_bufptr_tIhEEPjNS_8CallbackIvJNS_10ReadResultEEE
 1729              		.fnstart
 1730              	.LVL153:
 1731              	.LFB4600:
  95:fibre-cpp/legacy_protocol.cpp ****     if (handle) {
 1732              		.loc 1 95 113 is_stmt 1 view -0
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 32
 1735              		@ frame_needed = 0, uses_anonymous_args = 0
  95:fibre-cpp/legacy_protocol.cpp ****     if (handle) {
 1736              		.loc 1 95 113 is_stmt 0 view .LVU409
 1737 0000 70B5     		push	{r4, r5, r6, lr}
 1738              		.save {r4, r5, r6, lr}
 1739              	.LCFI22:
 1740              		.cfi_def_cfa_offset 16
 1741              		.cfi_offset 4, -16
 1742              		.cfi_offset 5, -12
 1743              		.cfi_offset 6, -8
 1744              		.cfi_offset 14, -4
 1745              		.pad #32
 1746 0002 88B0     		sub	sp, sp, #32
 1747              	.LCFI23:
 1748              		.cfi_def_cfa_offset 48
 1749 0004 0446     		mov	r4, r0
 1750 0006 0E46     		mov	r6, r1
 1751 0008 1D46     		mov	r5, r3
  96:fibre-cpp/legacy_protocol.cpp ****         *handle = reinterpret_cast<TransferHandle>(this);
 1752              		.loc 1 96 5 is_stmt 1 view .LVU410
 1753 000a 02B1     		cbz	r2, .L90
  97:fibre-cpp/legacy_protocol.cpp ****     }
 1754              		.loc 1 97 9 view .LVU411
  97:fibre-cpp/legacy_protocol.cpp ****     }
 1755              		.loc 1 97 17 is_stmt 0 view .LVU412
 1756 000c 1060     		str	r0, [r2]
 1757              	.L90:
 100:fibre-cpp/legacy_protocol.cpp ****         completer.invoke({kStreamError, buffer.begin()});
 1758              		.loc 1 100 5 is_stmt 1 view .LVU413
 100:fibre-cpp/legacy_protocol.cpp ****         completer.invoke({kStreamError, buffer.begin()});
 1759              		.loc 1 100 9 is_stmt 0 view .LVU414
 1760 000e 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 1761              	.LVL154:
 100:fibre-cpp/legacy_protocol.cpp ****         completer.invoke({kStreamError, buffer.begin()});
 1762              		.loc 1 100 5 view .LVU415
 1763 0012 83B1     		cbz	r3, .L91
 101:fibre-cpp/legacy_protocol.cpp ****     }
 1764              		.loc 1 101 9 is_stmt 1 view .LVU416
 101:fibre-cpp/legacy_protocol.cpp ****     }
 1765              		.loc 1 101 25 is_stmt 0 view .LVU417
 1766 0014 0323     		movs	r3, #3
 1767 0016 8DF80830 		strb	r3, [sp, #8]
 101:fibre-cpp/legacy_protocol.cpp ****     }
 1768              		.loc 1 101 53 view .LVU418
 1769 001a 3368     		ldr	r3, [r6]
ARM GAS  /tmp/ccjyQa7a.s 			page 74


 101:fibre-cpp/legacy_protocol.cpp ****     }
 1770              		.loc 1 101 25 view .LVU419
 1771 001c 0393     		str	r3, [sp, #12]
 1772              	.LVL155:
 101:fibre-cpp/legacy_protocol.cpp ****     }
 1773              		.loc 1 101 25 view .LVU420
 1774 001e 6B46     		mov	r3, sp
 1775 0020 02AA     		add	r2, sp, #8
 1776              	.LVL156:
 101:fibre-cpp/legacy_protocol.cpp ****     }
 1777              		.loc 1 101 25 view .LVU421
 1778 0022 92E80300 		ldm	r2, {r0, r1}
 1779              	.LVL157:
 101:fibre-cpp/legacy_protocol.cpp ****     }
 1780              		.loc 1 101 25 view .LVU422
 1781 0026 83E80300 		stm	r3, {r0, r1}
 1782              	.LBB744:
 1783              	.LBI744:
  59:fibre-cpp/include/fibre/callback.hpp ****         if (cb_) {
 1784              		.loc 8 59 10 is_stmt 1 view .LVU423
 1785              	.LBB745:
  60:fibre-cpp/include/fibre/callback.hpp ****             return (*cb_)(ctx_, arg...);
 1786              		.loc 8 60 13 is_stmt 0 view .LVU424
 1787 002a 2B68     		ldr	r3, [r5]
  60:fibre-cpp/include/fibre/callback.hpp ****             return (*cb_)(ctx_, arg...);
 1788              		.loc 8 60 9 view .LVU425
 1789 002c 1BB1     		cbz	r3, .L91
  61:fibre-cpp/include/fibre/callback.hpp ****         }
 1790              		.loc 8 61 22 view .LVU426
 1791 002e 6A46     		mov	r2, sp
 1792 0030 06CA     		ldm	r2, {r1, r2}
 1793 0032 6868     		ldr	r0, [r5, #4]
 1794 0034 9847     		blx	r3
 1795              	.LVL158:
 1796              	.L91:
  61:fibre-cpp/include/fibre/callback.hpp ****         }
 1797              		.loc 8 61 22 view .LVU427
 1798              	.LBE745:
 1799              	.LBE744:
 104:fibre-cpp/legacy_protocol.cpp ****     payload_buf_ = buffer;
 1800              		.loc 1 104 5 is_stmt 1 view .LVU428
 104:fibre-cpp/legacy_protocol.cpp ****     payload_buf_ = buffer;
 1801              		.loc 1 104 16 is_stmt 0 view .LVU429
 1802 0036 04F12003 		add	r3, r4, #32
 1803 003a 95E80300 		ldm	r5, {r0, r1}
 1804 003e 83E80300 		stm	r3, {r0, r1}
 105:fibre-cpp/legacy_protocol.cpp **** 
 1805              		.loc 1 105 5 is_stmt 1 view .LVU430
 105:fibre-cpp/legacy_protocol.cpp **** 
 1806              		.loc 1 105 18 is_stmt 0 view .LVU431
 1807 0042 04F11803 		add	r3, r4, #24
 1808 0046 96E80300 		ldm	r6, {r0, r1}
 1809 004a 83E80300 		stm	r3, {r0, r1}
 107:fibre-cpp/legacy_protocol.cpp ****     expected_rx_end_ = rx_buf_ + 3;
 1810              		.loc 1 107 5 is_stmt 1 view .LVU432
 107:fibre-cpp/legacy_protocol.cpp ****     expected_rx_end_ = rx_buf_ + 3;
 1811              		.loc 1 107 12 is_stmt 0 view .LVU433
ARM GAS  /tmp/ccjyQa7a.s 			page 75


 1812 004e 0223     		movs	r3, #2
 1813 0050 84F82830 		strb	r3, [r4, #40]
 108:fibre-cpp/legacy_protocol.cpp ****     rx_channel_->start_read({rx_buf_, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(this, c
 1814              		.loc 1 108 5 is_stmt 1 view .LVU434
 108:fibre-cpp/legacy_protocol.cpp ****     rx_channel_->start_read({rx_buf_, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(this, c
 1815              		.loc 1 108 32 is_stmt 0 view .LVU435
 1816 0054 04F10F03 		add	r3, r4, #15
 108:fibre-cpp/legacy_protocol.cpp ****     rx_channel_->start_read({rx_buf_, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(this, c
 1817              		.loc 1 108 22 view .LVU436
 1818 0058 2361     		str	r3, [r4, #16]
 109:fibre-cpp/legacy_protocol.cpp **** }
 1819              		.loc 1 109 5 is_stmt 1 view .LVU437
 1820 005a 6568     		ldr	r5, [r4, #4]
 1821              	.LVL159:
 109:fibre-cpp/legacy_protocol.cpp **** }
 1822              		.loc 1 109 108 is_stmt 0 view .LVU438
 1823 005c 2A68     		ldr	r2, [r5]
 1824 005e 1668     		ldr	r6, [r2]
 1825              	.LVL160:
 109:fibre-cpp/legacy_protocol.cpp **** }
 1826              		.loc 1 109 30 view .LVU439
 1827 0060 04F10C02 		add	r2, r4, #12
 1828              	.LVL161:
 1829              	.LBB746:
 1830              	.LBI746:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 1831              		.loc 4 23 5 is_stmt 1 view .LVU440
 1832              	.LBB747:
 1833              	.LBB748:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 1834              		.loc 4 23 65 is_stmt 0 view .LVU441
 1835 0064 0492     		str	r2, [sp, #16]
 1836 0066 0593     		str	r3, [sp, #20]
 1837              	.LVL162:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 1838              		.loc 4 23 65 view .LVU442
 1839              	.LBE748:
 1840              	.LBE747:
 1841              	.LBE746:
 109:fibre-cpp/legacy_protocol.cpp **** }
 1842              		.loc 1 109 83 view .LVU443
 1843 0068 2146     		mov	r1, r4
 1844 006a 06A8     		add	r0, sp, #24
 1845 006c FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_1
 1846              	.LVL163:
 109:fibre-cpp/legacy_protocol.cpp **** }
 1847              		.loc 1 109 28 view .LVU444
 1848 0070 06AB     		add	r3, sp, #24
 1849 0072 04F10802 		add	r2, r4, #8
 1850 0076 04A9     		add	r1, sp, #16
 1851 0078 2846     		mov	r0, r5
 1852 007a B047     		blx	r6
 1853              	.LVL164:
 110:fibre-cpp/legacy_protocol.cpp **** 
 1854              		.loc 1 110 1 view .LVU445
 1855 007c 08B0     		add	sp, sp, #32
 1856              	.LCFI24:
ARM GAS  /tmp/ccjyQa7a.s 			page 76


 1857              		.cfi_def_cfa_offset 16
 1858              		@ sp needed
 1859 007e 70BD     		pop	{r4, r5, r6, pc}
 110:fibre-cpp/legacy_protocol.cpp **** 
 1860              		.loc 1 110 1 view .LVU446
 1861              		.cfi_endproc
 1862              	.LFE4600:
 1863              		.fnend
 1865              		.section	.text._ZN5fibre15PacketUnwrapper8completeENS_10ReadResultE,"ax",%progbits
 1866              		.align	1
 1867              		.global	_ZN5fibre15PacketUnwrapper8completeENS_10ReadResultE
 1868              		.syntax unified
 1869              		.thumb
 1870              		.thumb_func
 1872              	_ZN5fibre15PacketUnwrapper8completeENS_10ReadResultE:
 1873              		.fnstart
 1874              	.LVL165:
 1875              	.LFB4602:
 117:fibre-cpp/legacy_protocol.cpp ****     // All code paths in this function must end with either of these two:
 1876              		.loc 1 117 51 is_stmt 1 view -0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 136
 1879              		@ frame_needed = 0, uses_anonymous_args = 0
 117:fibre-cpp/legacy_protocol.cpp ****     // All code paths in this function must end with either of these two:
 1880              		.loc 1 117 51 is_stmt 0 view .LVU448
 1881 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1882              		.save {r4, r5, r6, r7, r8, lr}
 1883              	.LCFI25:
 1884              		.cfi_def_cfa_offset 24
 1885              		.cfi_offset 4, -24
 1886              		.cfi_offset 5, -20
 1887              		.cfi_offset 6, -16
 1888              		.cfi_offset 7, -12
 1889              		.cfi_offset 8, -8
 1890              		.cfi_offset 14, -4
 1891              		.pad #136
 1892 0004 A2B0     		sub	sp, sp, #136
 1893              	.LCFI26:
 1894              		.cfi_def_cfa_offset 160
 1895 0006 0446     		mov	r4, r0
 1896 0008 6B46     		mov	r3, sp
 1897 000a 83E80600 		stm	r3, {r1, r2}
 122:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1898              		.loc 1 122 5 is_stmt 1 view .LVU449
 122:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1899              		.loc 1 122 9 is_stmt 0 view .LVU450
 1900 000e 90F82830 		ldrb	r3, [r0, #40]	@ zero_extendqisi2
 122:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1901              		.loc 1 122 5 view .LVU451
 1902 0012 012B     		cmp	r3, #1
 1903 0014 35D0     		beq	.L114
 128:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1904              		.loc 1 128 5 is_stmt 1 view .LVU452
 128:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
 1905              		.loc 1 128 16 is_stmt 0 view .LVU453
 1906 0016 9DF80020 		ldrb	r2, [sp]	@ zero_extendqisi2
 128:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateIdle;
ARM GAS  /tmp/ccjyQa7a.s 			page 77


 1907              		.loc 1 128 5 view .LVU454
 1908 001a 002A     		cmp	r2, #0
 1909 001c 47D1     		bne	.L115
 134:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read({result.end, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(
 1910              		.loc 1 134 5 is_stmt 1 view .LVU455
 134:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read({result.end, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(
 1911              		.loc 1 134 16 is_stmt 0 view .LVU456
 1912 001e 0199     		ldr	r1, [sp, #4]
 134:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read({result.end, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(
 1913              		.loc 1 134 22 view .LVU457
 1914 0020 0269     		ldr	r2, [r0, #16]
 134:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read({result.end, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(
 1915              		.loc 1 134 5 view .LVU458
 1916 0022 9142     		cmp	r1, r2
 1917 0024 5AD3     		bcc	.L116
 139:fibre-cpp/legacy_protocol.cpp ****         size_t n_discard;
 1918              		.loc 1 139 5 is_stmt 1 view .LVU459
 1919              	.LBB749:
 1920 0026 022B     		cmp	r3, #2
 1921 0028 68D0     		beq	.L117
 1922              	.LBE749:
 161:fibre-cpp/legacy_protocol.cpp ****         expected_rx_end_ = rx_buf_ + 2;
 1923              		.loc 1 161 12 view .LVU460
 1924              	.LBB793:
 1925              	.LBB750:
 1926 002a 032B     		cmp	r3, #3
 1927 002c 00F0C280 		beq	.L118
 1928              	.LBE750:
 1929              	.LBE793:
 166:fibre-cpp/legacy_protocol.cpp ****         uint16_t crc = calc_crc16<CANONICAL_CRC16_POLYNOMIAL>(CANONICAL_CRC16_INIT, payload_buf_.be
 1930              		.loc 1 166 12 view .LVU461
 1931              	.LBB794:
 1932              	.LBB763:
 1933              	.LBB751:
 1934 0030 042B     		cmp	r3, #4
 1935 0032 50D1     		bne	.L94
 1936              	.LBB752:
 167:fibre-cpp/legacy_protocol.cpp ****         crc = calc_crc16<CANONICAL_CRC16_POLYNOMIAL>(crc, rx_buf_, 2);
 1937              		.loc 1 167 9 view .LVU462
 167:fibre-cpp/legacy_protocol.cpp ****         crc = calc_crc16<CANONICAL_CRC16_POLYNOMIAL>(crc, rx_buf_, 2);
 1938              		.loc 1 167 62 is_stmt 0 view .LVU463
 1939 0034 8569     		ldr	r5, [r0, #24]
 1940 0036 4669     		ldr	r6, [r0, #20]
 1941 0038 3246     		mov	r2, r6
 1942 003a 2946     		mov	r1, r5
 1943 003c 41F23730 		movw	r0, #4919
 1944              	.LVL166:
 167:fibre-cpp/legacy_protocol.cpp ****         crc = calc_crc16<CANONICAL_CRC16_POLYNOMIAL>(crc, rx_buf_, 2);
 1945              		.loc 1 167 62 view .LVU464
 1946 0040 FFF7FEFF 		bl	_Z10calc_crc16ILj15717EEttPKhj
 1947              	.LVL167:
 168:fibre-cpp/legacy_protocol.cpp **** 
 1948              		.loc 1 168 9 is_stmt 1 view .LVU465
 168:fibre-cpp/legacy_protocol.cpp **** 
 1949              		.loc 1 168 59 is_stmt 0 view .LVU466
 1950 0044 04F10C07 		add	r7, r4, #12
 168:fibre-cpp/legacy_protocol.cpp **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 78


 1951              		.loc 1 168 53 view .LVU467
 1952 0048 0222     		movs	r2, #2
 1953 004a 3946     		mov	r1, r7
 1954 004c FFF7FEFF 		bl	_Z10calc_crc16ILj15717EEttPKhj
 1955              	.LVL168:
 170:fibre-cpp/legacy_protocol.cpp ****             state_ = kStateIdle;
 1956              		.loc 1 170 9 is_stmt 1 view .LVU468
 1957 0050 0028     		cmp	r0, #0
 1958 0052 40F0C780 		bne	.L107
 171:fibre-cpp/legacy_protocol.cpp ****             completer_.invoke_and_clear({kStreamOk, payload_buf_.begin() + payload_length_});
 1959              		.loc 1 171 13 view .LVU469
 171:fibre-cpp/legacy_protocol.cpp ****             completer_.invoke_and_clear({kStreamOk, payload_buf_.begin() + payload_length_});
 1960              		.loc 1 171 20 is_stmt 0 view .LVU470
 1961 0056 0023     		movs	r3, #0
 1962 0058 84F82830 		strb	r3, [r4, #40]
 172:fibre-cpp/legacy_protocol.cpp ****         } else {
 1963              		.loc 1 172 13 is_stmt 1 view .LVU471
 172:fibre-cpp/legacy_protocol.cpp ****         } else {
 1964              		.loc 1 172 40 is_stmt 0 view .LVU472
 1965 005c 8DF87030 		strb	r3, [sp, #112]
 172:fibre-cpp/legacy_protocol.cpp ****         } else {
 1966              		.loc 1 172 74 view .LVU473
 1967 0060 3544     		add	r5, r5, r6
 172:fibre-cpp/legacy_protocol.cpp ****         } else {
 1968              		.loc 1 172 40 view .LVU474
 1969 0062 1D95     		str	r5, [sp, #116]
 1970              	.LVL169:
 172:fibre-cpp/legacy_protocol.cpp ****         } else {
 1971              		.loc 1 172 40 view .LVU475
 1972 0064 02AA     		add	r2, sp, #8
 1973 0066 1CA9     		add	r1, sp, #112
 1974 0068 03C9     		ldm	r1, {r0, r1}
 1975              	.LVL170:
 172:fibre-cpp/legacy_protocol.cpp ****         } else {
 1976              		.loc 1 172 40 view .LVU476
 1977 006a 82E80300 		stm	r2, {r0, r1}
 1978              	.LBB753:
 1979              	.LBI753:
  66:fibre-cpp/include/fibre/callback.hpp ****         void* ctx = ctx_;
 1980              		.loc 8 66 10 is_stmt 1 view .LVU477
 1981              	.LBB754:
  67:fibre-cpp/include/fibre/callback.hpp ****         auto cb = cb_;
 1982              		.loc 8 67 15 is_stmt 0 view .LVU478
 1983 006e 606A     		ldr	r0, [r4, #36]
 1984              	.LVL171:
  68:fibre-cpp/include/fibre/callback.hpp ****         ctx_ = nullptr;
 1985              		.loc 8 68 14 view .LVU479
 1986 0070 256A     		ldr	r5, [r4, #32]
 1987              	.LVL172:
  69:fibre-cpp/include/fibre/callback.hpp ****         cb_ = nullptr;
 1988              		.loc 8 69 14 view .LVU480
 1989 0072 6362     		str	r3, [r4, #36]
  70:fibre-cpp/include/fibre/callback.hpp ****         if (cb) {
 1990              		.loc 8 70 13 view .LVU481
 1991 0074 2362     		str	r3, [r4, #32]
  71:fibre-cpp/include/fibre/callback.hpp ****             return (*cb)(ctx, arg...);
 1992              		.loc 8 71 9 view .LVU482
ARM GAS  /tmp/ccjyQa7a.s 			page 79


 1993 0076 002D     		cmp	r5, #0
 1994 0078 2DD0     		beq	.L94
  72:fibre-cpp/include/fibre/callback.hpp ****         }
 1995              		.loc 8 72 25 view .LVU483
 1996 007a D2E90012 		ldrd	r1, r2, [r2]
 1997 007e A847     		blx	r5
 1998              	.LVL173:
  72:fibre-cpp/include/fibre/callback.hpp ****         }
 1999              		.loc 8 72 37 view .LVU484
 2000 0080 29E0     		b	.L94
 2001              	.LVL174:
 2002              	.L114:
  72:fibre-cpp/include/fibre/callback.hpp ****         }
 2003              		.loc 8 72 37 view .LVU485
 2004              	.LBE754:
 2005              	.LBE753:
 2006              	.LBE752:
 2007              	.LBE751:
 2008              	.LBE763:
 2009              	.LBE794:
 123:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({kStreamCancelled, payload_buf_.begin()});
 2010              		.loc 1 123 9 is_stmt 1 view .LVU486
 123:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({kStreamCancelled, payload_buf_.begin()});
 2011              		.loc 1 123 16 is_stmt 0 view .LVU487
 2012 0082 0023     		movs	r3, #0
 2013 0084 80F82830 		strb	r3, [r0, #40]
 124:fibre-cpp/legacy_protocol.cpp ****         return;
 2014              		.loc 1 124 9 is_stmt 1 view .LVU488
 124:fibre-cpp/legacy_protocol.cpp ****         return;
 2015              		.loc 1 124 36 is_stmt 0 view .LVU489
 2016 0088 0122     		movs	r2, #1
 2017 008a 8DF81020 		strb	r2, [sp, #16]
 124:fibre-cpp/legacy_protocol.cpp ****         return;
 2018              		.loc 1 124 74 view .LVU490
 2019 008e 8269     		ldr	r2, [r0, #24]
 124:fibre-cpp/legacy_protocol.cpp ****         return;
 2020              		.loc 1 124 36 view .LVU491
 2021 0090 0592     		str	r2, [sp, #20]
 2022              	.LVL175:
 124:fibre-cpp/legacy_protocol.cpp ****         return;
 2023              		.loc 1 124 36 view .LVU492
 2024 0092 02AA     		add	r2, sp, #8
 2025 0094 04A9     		add	r1, sp, #16
 2026 0096 03C9     		ldm	r1, {r0, r1}
 2027              	.LVL176:
 124:fibre-cpp/legacy_protocol.cpp ****         return;
 2028              		.loc 1 124 36 view .LVU493
 2029 0098 82E80300 		stm	r2, {r0, r1}
 2030              	.LBB795:
 2031              	.LBI795:
  66:fibre-cpp/include/fibre/callback.hpp ****         void* ctx = ctx_;
 2032              		.loc 8 66 10 is_stmt 1 view .LVU494
 2033              	.LBB796:
  67:fibre-cpp/include/fibre/callback.hpp ****         auto cb = cb_;
 2034              		.loc 8 67 15 is_stmt 0 view .LVU495
 2035 009c 606A     		ldr	r0, [r4, #36]
 2036              	.LVL177:
ARM GAS  /tmp/ccjyQa7a.s 			page 80


  68:fibre-cpp/include/fibre/callback.hpp ****         ctx_ = nullptr;
 2037              		.loc 8 68 14 view .LVU496
 2038 009e 256A     		ldr	r5, [r4, #32]
 2039              	.LVL178:
  69:fibre-cpp/include/fibre/callback.hpp ****         cb_ = nullptr;
 2040              		.loc 8 69 14 view .LVU497
 2041 00a0 6362     		str	r3, [r4, #36]
  70:fibre-cpp/include/fibre/callback.hpp ****         if (cb) {
 2042              		.loc 8 70 13 view .LVU498
 2043 00a2 2362     		str	r3, [r4, #32]
  71:fibre-cpp/include/fibre/callback.hpp ****             return (*cb)(ctx, arg...);
 2044              		.loc 8 71 9 view .LVU499
 2045 00a4 BDB1     		cbz	r5, .L94
  72:fibre-cpp/include/fibre/callback.hpp ****         }
 2046              		.loc 8 72 25 view .LVU500
 2047 00a6 D2E90012 		ldrd	r1, r2, [r2]
 2048 00aa A847     		blx	r5
 2049              	.LVL179:
  72:fibre-cpp/include/fibre/callback.hpp ****         }
 2050              		.loc 8 72 25 view .LVU501
 2051              	.LBE796:
 2052              	.LBE795:
 125:fibre-cpp/legacy_protocol.cpp ****     }
 2053              		.loc 1 125 9 is_stmt 1 view .LVU502
 2054 00ac 13E0     		b	.L94
 2055              	.LVL180:
 2056              	.L115:
 129:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({result.status, payload_buf_.begin()});
 2057              		.loc 1 129 9 view .LVU503
 129:fibre-cpp/legacy_protocol.cpp ****         completer_.invoke_and_clear({result.status, payload_buf_.begin()});
 2058              		.loc 1 129 16 is_stmt 0 view .LVU504
 2059 00ae 0023     		movs	r3, #0
 2060 00b0 80F82830 		strb	r3, [r0, #40]
 130:fibre-cpp/legacy_protocol.cpp ****         return;
 2061              		.loc 1 130 9 is_stmt 1 view .LVU505
 130:fibre-cpp/legacy_protocol.cpp ****         return;
 2062              		.loc 1 130 36 is_stmt 0 view .LVU506
 2063 00b4 8DF81820 		strb	r2, [sp, #24]
 130:fibre-cpp/legacy_protocol.cpp ****         return;
 2064              		.loc 1 130 71 view .LVU507
 2065 00b8 8269     		ldr	r2, [r0, #24]
 130:fibre-cpp/legacy_protocol.cpp ****         return;
 2066              		.loc 1 130 36 view .LVU508
 2067 00ba 0792     		str	r2, [sp, #28]
 2068              	.LVL181:
 130:fibre-cpp/legacy_protocol.cpp ****         return;
 2069              		.loc 1 130 36 view .LVU509
 2070 00bc 02AA     		add	r2, sp, #8
 2071 00be 06A9     		add	r1, sp, #24
 2072 00c0 03C9     		ldm	r1, {r0, r1}
 2073              	.LVL182:
 130:fibre-cpp/legacy_protocol.cpp ****         return;
 2074              		.loc 1 130 36 view .LVU510
 2075 00c2 82E80300 		stm	r2, {r0, r1}
 2076              	.LBB797:
 2077              	.LBI797:
  66:fibre-cpp/include/fibre/callback.hpp ****         void* ctx = ctx_;
ARM GAS  /tmp/ccjyQa7a.s 			page 81


 2078              		.loc 8 66 10 is_stmt 1 view .LVU511
 2079              	.LBB798:
  67:fibre-cpp/include/fibre/callback.hpp ****         auto cb = cb_;
 2080              		.loc 8 67 15 is_stmt 0 view .LVU512
 2081 00c6 606A     		ldr	r0, [r4, #36]
 2082              	.LVL183:
  68:fibre-cpp/include/fibre/callback.hpp ****         ctx_ = nullptr;
 2083              		.loc 8 68 14 view .LVU513
 2084 00c8 256A     		ldr	r5, [r4, #32]
 2085              	.LVL184:
  69:fibre-cpp/include/fibre/callback.hpp ****         cb_ = nullptr;
 2086              		.loc 8 69 14 view .LVU514
 2087 00ca 6362     		str	r3, [r4, #36]
  70:fibre-cpp/include/fibre/callback.hpp ****         if (cb) {
 2088              		.loc 8 70 13 view .LVU515
 2089 00cc 2362     		str	r3, [r4, #32]
  71:fibre-cpp/include/fibre/callback.hpp ****             return (*cb)(ctx, arg...);
 2090              		.loc 8 71 9 view .LVU516
 2091 00ce 15B1     		cbz	r5, .L94
  72:fibre-cpp/include/fibre/callback.hpp ****         }
 2092              		.loc 8 72 25 view .LVU517
 2093 00d0 D2E90012 		ldrd	r1, r2, [r2]
 2094 00d4 A847     		blx	r5
 2095              	.LVL185:
  72:fibre-cpp/include/fibre/callback.hpp ****         }
 2096              		.loc 8 72 25 view .LVU518
 2097              	.LBE798:
 2098              	.LBE797:
 131:fibre-cpp/legacy_protocol.cpp ****     }
 2099              		.loc 1 131 9 is_stmt 1 view .LVU519
 2100              	.L94:
 179:fibre-cpp/legacy_protocol.cpp **** 
 2101              		.loc 1 179 1 is_stmt 0 view .LVU520
 2102 00d6 22B0     		add	sp, sp, #136
 2103              	.LCFI27:
 2104              		.cfi_remember_state
 2105              		.cfi_def_cfa_offset 24
 2106              		@ sp needed
 2107 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2108              	.LVL186:
 2109              	.L116:
 2110              	.LCFI28:
 2111              		.cfi_restore_state
 135:fibre-cpp/legacy_protocol.cpp ****         return;
 2112              		.loc 1 135 9 is_stmt 1 view .LVU521
 2113 00dc 4568     		ldr	r5, [r0, #4]
 135:fibre-cpp/legacy_protocol.cpp ****         return;
 2114              		.loc 1 135 115 is_stmt 0 view .LVU522
 2115 00de 2B68     		ldr	r3, [r5]
 2116 00e0 1E68     		ldr	r6, [r3]
 2117              	.LVL187:
 2118              	.LBB799:
 2119              	.LBI799:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 2120              		.loc 4 23 5 is_stmt 1 view .LVU523
 2121              	.LBB800:
 2122              	.LBB801:
ARM GAS  /tmp/ccjyQa7a.s 			page 82


  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 2123              		.loc 4 23 65 is_stmt 0 view .LVU524
 2124 00e2 0891     		str	r1, [sp, #32]
 2125 00e4 0992     		str	r2, [sp, #36]
 2126              	.LVL188:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 2127              		.loc 4 23 65 view .LVU525
 2128              	.LBE801:
 2129              	.LBE800:
 2130              	.LBE799:
 135:fibre-cpp/legacy_protocol.cpp ****         return;
 2131              		.loc 1 135 90 view .LVU526
 2132 00e6 0146     		mov	r1, r0
 2133 00e8 0AA8     		add	r0, sp, #40
 2134              	.LVL189:
 135:fibre-cpp/legacy_protocol.cpp ****         return;
 2135              		.loc 1 135 90 view .LVU527
 2136 00ea FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_1
 2137              	.LVL190:
 135:fibre-cpp/legacy_protocol.cpp ****         return;
 2138              		.loc 1 135 32 view .LVU528
 2139 00ee 0AAB     		add	r3, sp, #40
 2140 00f0 04F10802 		add	r2, r4, #8
 2141 00f4 08A9     		add	r1, sp, #32
 2142 00f6 2846     		mov	r0, r5
 2143 00f8 B047     		blx	r6
 2144              	.LVL191:
 136:fibre-cpp/legacy_protocol.cpp ****     }
 2145              		.loc 1 136 9 is_stmt 1 view .LVU529
 2146 00fa ECE7     		b	.L94
 2147              	.LVL192:
 2148              	.L117:
 2149              	.LBB802:
 2150              	.LBB764:
 140:fibre-cpp/legacy_protocol.cpp **** 
 2151              		.loc 1 140 9 view .LVU530
 143:fibre-cpp/legacy_protocol.cpp ****             n_discard = 1;
 2152              		.loc 1 143 9 view .LVU531
 143:fibre-cpp/legacy_protocol.cpp ****             n_discard = 1;
 2153              		.loc 1 143 22 is_stmt 0 view .LVU532
 2154 00fc 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 143:fibre-cpp/legacy_protocol.cpp ****             n_discard = 1;
 2155              		.loc 1 143 9 view .LVU533
 2156 00fe AA2B     		cmp	r3, #170
 2157 0100 32D1     		bne	.L109
 145:fibre-cpp/legacy_protocol.cpp ****             n_discard = 2; // TODO: support packets larger than 128 bytes
 2158              		.loc 1 145 16 is_stmt 1 view .LVU534
 145:fibre-cpp/legacy_protocol.cpp ****             n_discard = 2; // TODO: support packets larger than 128 bytes
 2159              		.loc 1 145 30 is_stmt 0 view .LVU535
 2160 0102 457B     		ldrb	r5, [r0, #13]	@ zero_extendqisi2
 145:fibre-cpp/legacy_protocol.cpp ****             n_discard = 2; // TODO: support packets larger than 128 bytes
 2161              		.loc 1 145 32 view .LVU536
 2162 0104 90F90D30 		ldrsb	r3, [r0, #13]
 145:fibre-cpp/legacy_protocol.cpp ****             n_discard = 2; // TODO: support packets larger than 128 bytes
 2163              		.loc 1 145 16 view .LVU537
 2164 0108 002B     		cmp	r3, #0
 2165 010a 51DB     		blt	.L110
ARM GAS  /tmp/ccjyQa7a.s 			page 83


 147:fibre-cpp/legacy_protocol.cpp ****             n_discard = 3;
 2166              		.loc 1 147 16 is_stmt 1 view .LVU538
 147:fibre-cpp/legacy_protocol.cpp ****             n_discard = 3;
 2167              		.loc 1 147 56 is_stmt 0 view .LVU539
 2168 010c 0322     		movs	r2, #3
 2169 010e 00F10C01 		add	r1, r0, #12
 2170 0112 4220     		movs	r0, #66
 2171              	.LVL193:
 147:fibre-cpp/legacy_protocol.cpp ****             n_discard = 3;
 2172              		.loc 1 147 56 view .LVU540
 2173 0114 FFF7FEFF 		bl	_Z9calc_crc8ILj55EEhhPKhj
 2174              	.LVL194:
 147:fibre-cpp/legacy_protocol.cpp ****             n_discard = 3;
 2175              		.loc 1 147 16 view .LVU541
 2176 0118 08B1     		cbz	r0, .L119
 148:fibre-cpp/legacy_protocol.cpp ****         } else {
 2177              		.loc 1 148 23 view .LVU542
 2178 011a 0321     		movs	r1, #3
 2179 011c 25E0     		b	.L102
 2180              	.L119:
 150:fibre-cpp/legacy_protocol.cpp ****             payload_length_ = std::min(payload_buf_.size(), (size_t)rx_buf_[1]);
 2181              		.loc 1 150 13 is_stmt 1 view .LVU543
 150:fibre-cpp/legacy_protocol.cpp ****             payload_length_ = std::min(payload_buf_.size(), (size_t)rx_buf_[1]);
 2182              		.loc 1 150 20 is_stmt 0 view .LVU544
 2183 011e 0323     		movs	r3, #3
 2184 0120 84F82830 		strb	r3, [r4, #40]
 151:fibre-cpp/legacy_protocol.cpp ****             expected_rx_end_ = payload_buf_.begin() + payload_length_;
 2185              		.loc 1 151 13 is_stmt 1 view .LVU545
 2186              	.LVL195:
 2187              	.LBB765:
 2188              	.LBI765:
  74:fibre-cpp/include/fibre/bufptr.hpp ****         return end_ - begin_;
 2189              		.loc 4 74 12 view .LVU546
 2190              	.LBB766:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 2191              		.loc 4 75 16 is_stmt 0 view .LVU547
 2192 0124 E369     		ldr	r3, [r4, #28]
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 2193              		.loc 4 75 23 view .LVU548
 2194 0126 A269     		ldr	r2, [r4, #24]
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 2195              		.loc 4 75 21 view .LVU549
 2196 0128 9B1A     		subs	r3, r3, r2
 2197              	.LVL196:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 2198              		.loc 4 75 21 view .LVU550
 2199              	.LBE766:
 2200              	.LBE765:
 151:fibre-cpp/legacy_protocol.cpp ****             expected_rx_end_ = payload_buf_.begin() + payload_length_;
 2201              		.loc 1 151 57 view .LVU551
 2202 012a 0C93     		str	r3, [sp, #48]
 151:fibre-cpp/legacy_protocol.cpp ****             expected_rx_end_ = payload_buf_.begin() + payload_length_;
 2203              		.loc 1 151 61 view .LVU552
 2204 012c 0D95     		str	r5, [sp, #52]
 2205              	.LVL197:
 2206              	.LBB767:
 2207              	.LBI767:
ARM GAS  /tmp/ccjyQa7a.s 			page 84


 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 2208              		.loc 7 230 5 is_stmt 1 view .LVU553
 2209              	.LBB768:
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 2210              		.loc 7 235 7 is_stmt 0 view .LVU554
 2211 012e 9D42     		cmp	r5, r3
 2212 0130 18D3     		bcc	.L112
 2213              		.loc 7 237 14 view .LVU555
 2214 0132 0CA9     		add	r1, sp, #48
 2215              	.LVL198:
 2216              	.L103:
 2217              		.loc 7 237 14 view .LVU556
 2218              	.LBE768:
 2219              	.LBE767:
 151:fibre-cpp/legacy_protocol.cpp ****             expected_rx_end_ = payload_buf_.begin() + payload_length_;
 2220              		.loc 1 151 39 view .LVU557
 2221 0134 0968     		ldr	r1, [r1]
 151:fibre-cpp/legacy_protocol.cpp ****             expected_rx_end_ = payload_buf_.begin() + payload_length_;
 2222              		.loc 1 151 29 view .LVU558
 2223 0136 6161     		str	r1, [r4, #20]
 152:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(payload_buf_.take(payload_length_), &inner_transfer_handle_, ME
 2224              		.loc 1 152 13 is_stmt 1 view .LVU559
 152:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(payload_buf_.take(payload_length_), &inner_transfer_handle_, ME
 2225              		.loc 1 152 53 is_stmt 0 view .LVU560
 2226 0138 5018     		adds	r0, r2, r1
 152:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(payload_buf_.take(payload_length_), &inner_transfer_handle_, ME
 2227              		.loc 1 152 30 view .LVU561
 2228 013a 2061     		str	r0, [r4, #16]
 153:fibre-cpp/legacy_protocol.cpp ****             return;
 2229              		.loc 1 153 13 is_stmt 1 view .LVU562
 2230 013c 6568     		ldr	r5, [r4, #4]
 153:fibre-cpp/legacy_protocol.cpp ****             return;
 2231              		.loc 1 153 123 is_stmt 0 view .LVU563
 2232 013e 2868     		ldr	r0, [r5]
 2233 0140 0668     		ldr	r6, [r0]
 2234              	.LVL199:
 2235              	.LBB770:
 2236              	.LBI770:
  57:fibre-cpp/include/fibre/bufptr.hpp ****         if (!soft_assert(num <= size())) {
 2237              		.loc 4 57 22 is_stmt 1 view .LVU564
  57:fibre-cpp/include/fibre/bufptr.hpp ****         if (!soft_assert(num <= size())) {
 2238              		.loc 4 57 22 is_stmt 0 view .LVU565
 2239              	.LBE770:
 2240              	.LBE764:
 2241              	.LBE802:
   9:fibre-cpp/include/fibre/bufptr.hpp **** 
 2242              		.loc 4 9 45 is_stmt 1 view .LVU566
 2243              	.LBB803:
 2244              	.LBB789:
 2245              	.LBB774:
 2246              	.LBB771:
  58:fibre-cpp/include/fibre/bufptr.hpp ****             num = size();
 2247              		.loc 4 58 9 is_stmt 0 view .LVU567
 2248 0142 9942     		cmp	r1, r3
 2249 0144 00D8     		bhi	.L104
 2250 0146 0B46     		mov	r3, r1
 2251              	.L104:
ARM GAS  /tmp/ccjyQa7a.s 			page 85


 2252              	.LVL200:
 2253              	.LBB772:
 2254              	.LBI772:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2255              		.loc 4 21 5 is_stmt 1 view .LVU568
 2256              	.LBB773:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2257              		.loc 4 21 83 is_stmt 0 view .LVU569
 2258 0148 0E92     		str	r2, [sp, #56]
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2259              		.loc 4 21 75 view .LVU570
 2260 014a 1344     		add	r3, r3, r2
 2261              	.LVL201:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2262              		.loc 4 21 83 view .LVU571
 2263 014c 0F93     		str	r3, [sp, #60]
 2264              	.LVL202:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2265              		.loc 4 21 83 view .LVU572
 2266              	.LBE773:
 2267              	.LBE772:
 2268              	.LBE771:
 2269              	.LBE774:
 153:fibre-cpp/legacy_protocol.cpp ****             return;
 2270              		.loc 1 153 98 view .LVU573
 2271 014e 2146     		mov	r1, r4
 2272 0150 10A8     		add	r0, sp, #64
 2273 0152 FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_1
 2274              	.LVL203:
 153:fibre-cpp/legacy_protocol.cpp ****             return;
 2275              		.loc 1 153 36 view .LVU574
 2276 0156 10AB     		add	r3, sp, #64
 2277 0158 04F10802 		add	r2, r4, #8
 2278 015c 0EA9     		add	r1, sp, #56
 2279 015e 2846     		mov	r0, r5
 2280 0160 B047     		blx	r6
 2281              	.LVL204:
 154:fibre-cpp/legacy_protocol.cpp ****         }
 2282              		.loc 1 154 13 is_stmt 1 view .LVU575
 2283 0162 B8E7     		b	.L94
 2284              	.LVL205:
 2285              	.L112:
 2286              	.LBB775:
 2287              	.LBB769:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 2288              		.loc 7 236 9 is_stmt 0 view .LVU576
 2289 0164 0DA9     		add	r1, sp, #52
 2290              	.LVL206:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 2291              		.loc 7 236 9 view .LVU577
 2292 0166 E5E7     		b	.L103
 2293              	.LVL207:
 2294              	.L109:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 2295              		.loc 7 236 9 view .LVU578
 2296              	.LBE769:
 2297              	.LBE775:
ARM GAS  /tmp/ccjyQa7a.s 			page 86


 144:fibre-cpp/legacy_protocol.cpp ****         } else if ((rx_buf_[1] & 0x80)) {
 2298              		.loc 1 144 23 view .LVU579
 2299 0168 0121     		movs	r1, #1
 2300              	.LVL208:
 2301              	.L102:
 158:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read(bufptr_t{rx_buf_}.skip(3 - n_discard), &inner_transfer_handle_, MEM
 2302              		.loc 1 158 9 is_stmt 1 view .LVU580
 158:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read(bufptr_t{rx_buf_}.skip(3 - n_discard), &inner_transfer_handle_, MEM
 2303              		.loc 1 158 17 is_stmt 0 view .LVU581
 2304 016a 04F10C05 		add	r5, r4, #12
 158:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read(bufptr_t{rx_buf_}.skip(3 - n_discard), &inner_transfer_handle_, MEM
 2305              		.loc 1 158 16 view .LVU582
 2306 016e C1F10306 		rsb	r6, r1, #3
 2307 0172 3246     		mov	r2, r6
 2308 0174 2944     		add	r1, r1, r5
 2309              	.LVL209:
 158:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read(bufptr_t{rx_buf_}.skip(3 - n_discard), &inner_transfer_handle_, MEM
 2310              		.loc 1 158 16 view .LVU583
 2311 0176 2846     		mov	r0, r5
 2312 0178 FFF7FEFF 		bl	memmove
 2313              	.LVL210:
 159:fibre-cpp/legacy_protocol.cpp **** 
 2314              		.loc 1 159 9 is_stmt 1 view .LVU584
 2315 017c 6768     		ldr	r7, [r4, #4]
 159:fibre-cpp/legacy_protocol.cpp **** 
 2316              		.loc 1 159 122 is_stmt 0 view .LVU585
 2317 017e 3B68     		ldr	r3, [r7]
 2318 0180 D3F80080 		ldr	r8, [r3]
 2319              	.LVL211:
 2320              	.LBB776:
 2321              	.LBI776:
  28:fibre-cpp/include/fibre/bufptr.hpp **** 
 2322              		.loc 4 28 5 is_stmt 1 view .LVU586
 2323              	.LBB777:
 2324              	.LBB778:
 2325              	.LBI778:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2326              		.loc 4 21 5 view .LVU587
 2327              	.LBB779:
 2328              	.LBB780:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2329              		.loc 4 21 83 is_stmt 0 view .LVU588
 2330 0184 1495     		str	r5, [sp, #80]
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2331              		.loc 4 21 75 view .LVU589
 2332 0186 04F10F03 		add	r3, r4, #15
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2333              		.loc 4 21 83 view .LVU590
 2334 018a 1593     		str	r3, [sp, #84]
 2335              	.LVL212:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2336              		.loc 4 21 83 view .LVU591
 2337              	.LBE780:
 2338              	.LBE779:
 2339              	.LBE778:
 2340              	.LBE777:
 2341              	.LBE776:
ARM GAS  /tmp/ccjyQa7a.s 			page 87


 2342              	.LBB781:
 2343              	.LBI781:
  65:fibre-cpp/include/fibre/bufptr.hpp ****         if (!soft_assert(num <= size())) {
 2344              		.loc 4 65 22 is_stmt 1 view .LVU592
 2345              	.LBB782:
 2346              	.LBB783:
 2347              	.LBI783:
  74:fibre-cpp/include/fibre/bufptr.hpp ****         return end_ - begin_;
 2348              		.loc 4 74 12 view .LVU593
 2349              	.LBB784:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 2350              		.loc 4 75 21 is_stmt 0 view .LVU594
 2351 018c 5A1B     		subs	r2, r3, r5
 2352              	.LVL213:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 2353              		.loc 4 75 21 view .LVU595
 2354              	.LBE784:
 2355              	.LBE783:
 2356              	.LBE782:
 2357              	.LBE781:
 2358              	.LBE789:
 2359              	.LBE803:
   9:fibre-cpp/include/fibre/bufptr.hpp **** 
 2360              		.loc 4 9 45 is_stmt 1 view .LVU596
 2361              	.LBB804:
 2362              	.LBB790:
 2363              	.LBB788:
 2364              	.LBB787:
  66:fibre-cpp/include/fibre/bufptr.hpp ****             num = size();
 2365              		.loc 4 66 9 is_stmt 0 view .LVU597
 2366 018e 9642     		cmp	r6, r2
 2367 0190 00D8     		bhi	.L105
 2368 0192 3246     		mov	r2, r6
 2369              	.L105:
 2370              	.LVL214:
  71:fibre-cpp/include/fibre/bufptr.hpp ****     }
 2371              		.loc 4 71 35 view .LVU598
 2372 0194 1544     		add	r5, r5, r2
 2373              	.LVL215:
 2374              	.LBB785:
 2375              	.LBI785:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 2376              		.loc 4 23 5 is_stmt 1 view .LVU599
 2377              	.LBB786:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 2378              		.loc 4 23 65 is_stmt 0 view .LVU600
 2379 0196 1295     		str	r5, [sp, #72]
 2380 0198 1393     		str	r3, [sp, #76]
 2381              	.LVL216:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 2382              		.loc 4 23 65 view .LVU601
 2383              	.LBE786:
 2384              	.LBE785:
 2385              	.LBE787:
 2386              	.LBE788:
 159:fibre-cpp/legacy_protocol.cpp **** 
 2387              		.loc 1 159 97 view .LVU602
ARM GAS  /tmp/ccjyQa7a.s 			page 88


 2388 019a 2146     		mov	r1, r4
 2389 019c 16A8     		add	r0, sp, #88
 2390 019e FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_1
 2391              	.LVL217:
 159:fibre-cpp/legacy_protocol.cpp **** 
 2392              		.loc 1 159 32 view .LVU603
 2393 01a2 16AB     		add	r3, sp, #88
 2394 01a4 04F10802 		add	r2, r4, #8
 2395 01a8 12A9     		add	r1, sp, #72
 2396 01aa 3846     		mov	r0, r7
 2397 01ac C047     		blx	r8
 2398              	.LVL218:
 2399              	.LBE790:
 2400 01ae 92E7     		b	.L94
 2401              	.LVL219:
 2402              	.L110:
 2403              	.LBB791:
 146:fibre-cpp/legacy_protocol.cpp ****         } else if (calc_crc8<CANONICAL_CRC8_POLYNOMIAL>(CANONICAL_CRC8_INIT, rx_buf_, 3)) {
 2404              		.loc 1 146 23 view .LVU604
 2405 01b0 0221     		movs	r1, #2
 2406 01b2 DAE7     		b	.L102
 2407              	.L118:
 146:fibre-cpp/legacy_protocol.cpp ****         } else if (calc_crc8<CANONICAL_CRC8_POLYNOMIAL>(CANONICAL_CRC8_INIT, rx_buf_, 3)) {
 2408              		.loc 1 146 23 view .LVU605
 2409              	.LBE791:
 2410              	.LBB792:
 162:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateReceivingTrailer;
 2411              		.loc 1 162 9 is_stmt 1 view .LVU606
 162:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateReceivingTrailer;
 2412              		.loc 1 162 36 is_stmt 0 view .LVU607
 2413 01b4 00F10E03 		add	r3, r0, #14
 162:fibre-cpp/legacy_protocol.cpp ****         state_ = kStateReceivingTrailer;
 2414              		.loc 1 162 26 view .LVU608
 2415 01b8 0361     		str	r3, [r0, #16]
 163:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read({rx_buf_, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(thi
 2416              		.loc 1 163 9 is_stmt 1 view .LVU609
 163:fibre-cpp/legacy_protocol.cpp ****         rx_channel_->start_read({rx_buf_, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB(thi
 2417              		.loc 1 163 16 is_stmt 0 view .LVU610
 2418 01ba 0422     		movs	r2, #4
 2419 01bc 80F82820 		strb	r2, [r0, #40]
 164:fibre-cpp/legacy_protocol.cpp **** 
 2420              		.loc 1 164 9 is_stmt 1 view .LVU611
 2421 01c0 4568     		ldr	r5, [r0, #4]
 164:fibre-cpp/legacy_protocol.cpp **** 
 2422              		.loc 1 164 112 is_stmt 0 view .LVU612
 2423 01c2 2A68     		ldr	r2, [r5]
 2424 01c4 1668     		ldr	r6, [r2]
 164:fibre-cpp/legacy_protocol.cpp **** 
 2425              		.loc 1 164 34 view .LVU613
 2426 01c6 00F10C02 		add	r2, r0, #12
 2427              	.LVL220:
 2428              	.LBB759:
 2429              	.LBI759:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 2430              		.loc 4 23 5 is_stmt 1 view .LVU614
 2431              	.LBB760:
 2432              	.LBB761:
ARM GAS  /tmp/ccjyQa7a.s 			page 89


  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 2433              		.loc 4 23 65 is_stmt 0 view .LVU615
 2434 01ca 1892     		str	r2, [sp, #96]
 2435 01cc 1993     		str	r3, [sp, #100]
 2436              	.LVL221:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 2437              		.loc 4 23 65 view .LVU616
 2438              	.LBE761:
 2439              	.LBE760:
 2440              	.LBE759:
 164:fibre-cpp/legacy_protocol.cpp **** 
 2441              		.loc 1 164 87 view .LVU617
 2442 01ce 0146     		mov	r1, r0
 2443 01d0 1AA8     		add	r0, sp, #104
 2444              	.LVL222:
 164:fibre-cpp/legacy_protocol.cpp **** 
 2445              		.loc 1 164 87 view .LVU618
 2446 01d2 FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_1
 2447              	.LVL223:
 164:fibre-cpp/legacy_protocol.cpp **** 
 2448              		.loc 1 164 32 view .LVU619
 2449 01d6 1AAB     		add	r3, sp, #104
 2450 01d8 04F10802 		add	r2, r4, #8
 2451 01dc 18A9     		add	r1, sp, #96
 2452 01de 2846     		mov	r0, r5
 2453 01e0 B047     		blx	r6
 2454              	.LVL224:
 2455 01e2 78E7     		b	.L94
 2456              	.LVL225:
 2457              	.L107:
 2458              	.LBB762:
 2459              	.LBB758:
 174:fibre-cpp/legacy_protocol.cpp ****             expected_rx_end_ = rx_buf_ + 3;
 2460              		.loc 1 174 13 is_stmt 1 view .LVU620
 174:fibre-cpp/legacy_protocol.cpp ****             expected_rx_end_ = rx_buf_ + 3;
 2461              		.loc 1 174 20 is_stmt 0 view .LVU621
 2462 01e4 0223     		movs	r3, #2
 2463 01e6 84F82830 		strb	r3, [r4, #40]
 175:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read({rx_buf_, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB
 2464              		.loc 1 175 13 is_stmt 1 view .LVU622
 175:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read({rx_buf_, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB
 2465              		.loc 1 175 40 is_stmt 0 view .LVU623
 2466 01ea 04F10F03 		add	r3, r4, #15
 175:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read({rx_buf_, expected_rx_end_}, &inner_transfer_handle_, MEMBER_CB
 2467              		.loc 1 175 30 view .LVU624
 2468 01ee 2361     		str	r3, [r4, #16]
 176:fibre-cpp/legacy_protocol.cpp ****         }
 2469              		.loc 1 176 13 is_stmt 1 view .LVU625
 2470 01f0 6568     		ldr	r5, [r4, #4]
 176:fibre-cpp/legacy_protocol.cpp ****         }
 2471              		.loc 1 176 116 is_stmt 0 view .LVU626
 2472 01f2 2A68     		ldr	r2, [r5]
 2473 01f4 1668     		ldr	r6, [r2]
 2474              	.LVL226:
 2475              	.LBB755:
 2476              	.LBI755:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 90


 2477              		.loc 4 23 5 is_stmt 1 view .LVU627
 2478              	.LBB756:
 2479              	.LBB757:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 2480              		.loc 4 23 65 is_stmt 0 view .LVU628
 2481 01f6 1E97     		str	r7, [sp, #120]
 2482 01f8 1F93     		str	r3, [sp, #124]
 2483              	.LVL227:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 2484              		.loc 4 23 65 view .LVU629
 2485              	.LBE757:
 2486              	.LBE756:
 2487              	.LBE755:
 176:fibre-cpp/legacy_protocol.cpp ****         }
 2488              		.loc 1 176 91 view .LVU630
 2489 01fa 2146     		mov	r1, r4
 2490 01fc 20A8     		add	r0, sp, #128
 2491              	.LVL228:
 176:fibre-cpp/legacy_protocol.cpp ****         }
 2492              		.loc 1 176 91 view .LVU631
 2493 01fe FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_1
 2494              	.LVL229:
 176:fibre-cpp/legacy_protocol.cpp ****         }
 2495              		.loc 1 176 36 view .LVU632
 2496 0202 20AB     		add	r3, sp, #128
 2497 0204 04F10802 		add	r2, r4, #8
 2498 0208 1EA9     		add	r1, sp, #120
 2499 020a 2846     		mov	r0, r5
 2500 020c B047     		blx	r6
 2501              	.LVL230:
 2502 020e 62E7     		b	.L94
 2503              	.LBE758:
 2504              	.LBE762:
 2505              	.LBE792:
 2506              	.LBE804:
 2507              		.cfi_endproc
 2508              	.LFE4602:
 2509              		.fnend
 2511              		.section	.text._ZZN5fibre14MemberCallbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8comp
 2512              		.align	1
 2513              		.weak	_ZZN5fibre14MemberCallbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_E
 2514              		.syntax unified
 2515              		.thumb
 2516              		.thumb_func
 2518              	_ZZN5fibre14MemberCallbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EES1_vSt
 2519              		.fnstart
 2520              	.LFB5347:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 2521              		.loc 8 105 21 is_stmt 1 view -0
 2522              		.cfi_startproc
 2523              		@ args = 0, pretend = 0, frame = 16
 2524              		@ frame_needed = 0, uses_anonymous_args = 0
 2525 0000 00B5     		push	{lr}
 2526              		.save {lr}
 2527              	.LCFI29:
 2528              		.cfi_def_cfa_offset 4
 2529              		.cfi_offset 14, -4
ARM GAS  /tmp/ccjyQa7a.s 			page 91


 2530              		.pad #20
 2531 0002 85B0     		sub	sp, sp, #20
 2532              	.LCFI30:
 2533              		.cfi_def_cfa_offset 24
 2534 0004 8446     		mov	ip, r0
 2535 0006 6846     		mov	r0, sp
 2536 0008 80E80600 		stm	r0, {r1, r2}
 2537              	.LVL231:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 2538              		.loc 8 105 21 is_stmt 0 view .LVU634
 2539 000c 02AB     		add	r3, sp, #8
 2540 000e 03C8     		ldm	r0, {r0, r1}
 2541 0010 83E80500 		stm	r3, {r0, r2}
 2542              	.LBB805:
 2543              	.LBI805:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 2544              		.loc 8 105 21 is_stmt 1 view .LVU635
 2545              	.LBB806:
 106:fibre-cpp/include/fibre/callback.hpp ****         }, obj};
 2546              		.loc 8 106 41 is_stmt 0 view .LVU636
 2547 0014 93E80600 		ldm	r3, {r1, r2}
 2548 0018 6046     		mov	r0, ip
 2549 001a FFF7FEFF 		bl	_ZN5fibre15PacketUnwrapper8completeENS_10ReadResultE
 2550              	.LVL232:
 106:fibre-cpp/include/fibre/callback.hpp ****         }, obj};
 2551              		.loc 8 106 41 view .LVU637
 2552              	.LBE806:
 2553              	.LBE805:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 2554              		.loc 8 105 21 view .LVU638
 2555 001e 05B0     		add	sp, sp, #20
 2556              	.LCFI31:
 2557              		.cfi_def_cfa_offset 4
 2558              		@ sp needed
 2559 0020 5DF804FB 		ldr	pc, [sp], #4
 2560              		.cfi_endproc
 2561              	.LFE5347:
 2562              		.fnend
 2564              		.section	.text._ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZN
 2565              		.align	1
 2566              		.weak	_ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_r
 2567              		.syntax unified
 2568              		.thumb
 2569              		.thumb_func
 2571              	_ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read_fin
 2572              		.fnstart
 2573              	.LVL233:
 2574              	.LFB5031:
 114:fibre-cpp/include/fibre/callback.hpp ****     return MemCb::with(obj);
 2575              		.loc 8 114 22 is_stmt 1 view -0
 2576              		.cfi_startproc
 2577              		@ args = 0, pretend = 0, frame = 0
 2578              		@ frame_needed = 0, uses_anonymous_args = 0
 2579              		@ link register save eliminated.
 2580              	.LBB807:
 2581              	.LBI807:
 104:fibre-cpp/include/fibre/callback.hpp ****         return cb_t{[](void* obj, TArgs... arg) {
ARM GAS  /tmp/ccjyQa7a.s 			page 92


 2582              		.loc 8 104 17 view .LVU640
 2583              	.LBB808:
 2584              	.LBB809:
 2585              	.LBI809:
  22:fibre-cpp/include/fibre/callback.hpp ****         cb_(callback), ctx_(ctx) {}
 2586              		.loc 8 22 5 view .LVU641
 2587              	.LBB810:
  23:fibre-cpp/include/fibre/callback.hpp **** 
 2588              		.loc 8 23 32 is_stmt 0 view .LVU642
 2589 0000 014A     		ldr	r2, .L123
 2590 0002 0260     		str	r2, [r0]
 2591 0004 4160     		str	r1, [r0, #4]
 2592              	.LVL234:
  23:fibre-cpp/include/fibre/callback.hpp **** 
 2593              		.loc 8 23 32 view .LVU643
 2594              	.LBE810:
 2595              	.LBE809:
 2596              	.LBE808:
 2597              	.LBE807:
 2598              		.loc 8 116 1 view .LVU644
 2599 0006 7047     		bx	lr
 2600              	.L124:
 2601              		.align	2
 2602              	.L123:
 2603 0008 00000000 		.word	_ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on
 2604              		.cfi_endproc
 2605              	.LFE5031:
 2606              		.cantunwind
 2607              		.fnend
 2609              		.section	.text._ZN5fibre25LegacyProtocolPacketBased5startENS_8CallbackIvJPS0_NS_12StreamStatusEEEE
 2610              		.align	1
 2611              		.global	_ZN5fibre25LegacyProtocolPacketBased5startENS_8CallbackIvJPS0_NS_12StreamStatusEEEE
 2612              		.syntax unified
 2613              		.thumb
 2614              		.thumb_func
 2616              	_ZN5fibre25LegacyProtocolPacketBased5startENS_8CallbackIvJPS0_NS_12StreamStatusEEEE:
 2617              		.fnstart
 2618              	.LVL235:
 2619              	.LFB4609:
 552:fibre-cpp/legacy_protocol.cpp **** 
 553:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 554:fibre-cpp/legacy_protocol.cpp **** void LegacyProtocolPacketBased::start(Callback<void, LegacyObjectClient*, std::shared_ptr<LegacyObj
 555:fibre-cpp/legacy_protocol.cpp **** #else
 556:fibre-cpp/legacy_protocol.cpp **** void LegacyProtocolPacketBased::start(Callback<void, LegacyProtocolPacketBased*, StreamStatus> on_s
 2620              		.loc 1 556 108 is_stmt 1 view -0
 2621              		.cfi_startproc
 2622              		@ args = 0, pretend = 0, frame = 24
 2623              		@ frame_needed = 0, uses_anonymous_args = 0
 2624              		.loc 1 556 108 is_stmt 0 view .LVU646
 2625 0000 30B5     		push	{r4, r5, lr}
 2626              		.save {r4, r5, lr}
 2627              	.LCFI32:
 2628              		.cfi_def_cfa_offset 12
 2629              		.cfi_offset 4, -12
 2630              		.cfi_offset 5, -8
 2631              		.cfi_offset 14, -4
 2632              		.pad #28
ARM GAS  /tmp/ccjyQa7a.s 			page 93


 2633 0002 87B0     		sub	sp, sp, #28
 2634              	.LCFI33:
 2635              		.cfi_def_cfa_offset 40
 2636 0004 0346     		mov	r3, r0
 557:fibre-cpp/legacy_protocol.cpp **** #endif
 558:fibre-cpp/legacy_protocol.cpp ****     on_stopped_ = on_stopped;
 2637              		.loc 1 558 5 is_stmt 1 view .LVU647
 2638              		.loc 1 558 17 is_stmt 0 view .LVU648
 2639 0006 00F58C72 		add	r2, r0, #280
 2640 000a 03C9     		ldm	r1, {r0, r1}
 2641              	.LVL236:
 2642              		.loc 1 558 17 view .LVU649
 2643 000c 82E80300 		stm	r2, {r0, r1}
 559:fibre-cpp/legacy_protocol.cpp ****     TransferHandle dummy;
 2644              		.loc 1 559 5 is_stmt 1 view .LVU650
 560:fibre-cpp/legacy_protocol.cpp ****     rx_channel_->start_read(rx_buf_, &dummy, MEMBER_CB(this, on_read_finished));
 2645              		.loc 1 560 5 view .LVU651
 2646 0010 1A46     		mov	r2, r3
 2647 0012 52F88C4B 		ldr	r4, [r2], #140
 2648              		.loc 1 560 79 is_stmt 0 view .LVU652
 2649 0016 2168     		ldr	r1, [r4]
 2650 0018 0D68     		ldr	r5, [r1]
 2651              	.LVL237:
 2652              	.LBB811:
 2653              	.LBI811:
  28:fibre-cpp/include/fibre/bufptr.hpp **** 
 2654              		.loc 4 28 5 is_stmt 1 view .LVU653
 2655              	.LBB812:
 2656              	.LBB813:
 2657              	.LBI813:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2658              		.loc 4 21 5 view .LVU654
 2659              	.LBB814:
 2660              	.LBB815:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2661              		.loc 4 21 83 is_stmt 0 view .LVU655
 2662 001a 0292     		str	r2, [sp, #8]
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2663              		.loc 4 21 75 view .LVU656
 2664 001c 03F58672 		add	r2, r3, #268
 2665              	.LVL238:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2666              		.loc 4 21 83 view .LVU657
 2667 0020 0392     		str	r2, [sp, #12]
 2668              	.LVL239:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 2669              		.loc 4 21 83 view .LVU658
 2670              	.LBE815:
 2671              	.LBE814:
 2672              	.LBE813:
 2673              	.LBE812:
 2674              	.LBE811:
 2675              		.loc 1 560 46 view .LVU659
 2676 0022 1946     		mov	r1, r3
 2677 0024 04A8     		add	r0, sp, #16
 2678 0026 FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read
 2679              	.LVL240:
ARM GAS  /tmp/ccjyQa7a.s 			page 94


 2680              		.loc 1 560 28 view .LVU660
 2681 002a 04AB     		add	r3, sp, #16
 2682 002c 01AA     		add	r2, sp, #4
 2683 002e 02A9     		add	r1, sp, #8
 2684 0030 2046     		mov	r0, r4
 2685 0032 A847     		blx	r5
 2686              	.LVL241:
 561:fibre-cpp/legacy_protocol.cpp **** 
 562:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 563:fibre-cpp/legacy_protocol.cpp ****     if (on_stopped_) {
 564:fibre-cpp/legacy_protocol.cpp ****         client_.start(on_found_root_object, on_lost_root_object);
 565:fibre-cpp/legacy_protocol.cpp ****     }
 566:fibre-cpp/legacy_protocol.cpp **** #endif
 567:fibre-cpp/legacy_protocol.cpp **** }
 2687              		.loc 1 567 1 view .LVU661
 2688 0034 07B0     		add	sp, sp, #28
 2689              	.LCFI34:
 2690              		.cfi_def_cfa_offset 12
 2691              		@ sp needed
 2692 0036 30BD     		pop	{r4, r5, pc}
 2693              		.cfi_endproc
 2694              	.LFE4609:
 2695              		.fnend
 2697              		.section	.rodata._ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b.str1.4,"aMS",%progbits,1
 2698              		.align	2
 2699              	.LC0:
 2700 0000 30313233 		.ascii	"0123456789abcdef\000"
 2700      34353637 
 2700      38396162 
 2700      63646566 
 2700      00
 2701              		.section	.text._ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b,"axG",%progbits,_ZN5fibre6as_hexItEENS
 2702              		.align	1
 2703              		.weak	_ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b
 2704              		.syntax unified
 2705              		.thumb
 2706              		.thumb_func
 2708              	_ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b:
 2709              		.fnstart
 2710              	.LVL242:
 2711              	.LFB5038:
 2712              		.file 9 "fibre-cpp/print_utils.hpp"
   1:fibre-cpp/print_utils.hpp **** #ifndef __FIBRE_PRINT_UTILS_HPP
   2:fibre-cpp/print_utils.hpp **** #define __FIBRE_PRINT_UTILS_HPP
   3:fibre-cpp/print_utils.hpp **** 
   4:fibre-cpp/print_utils.hpp **** #include <string>
   5:fibre-cpp/print_utils.hpp **** #include <ostream>
   6:fibre-cpp/print_utils.hpp **** #include <fibre/bufptr.hpp>
   7:fibre-cpp/print_utils.hpp **** 
   8:fibre-cpp/print_utils.hpp **** namespace fibre {
   9:fibre-cpp/print_utils.hpp **** 
  10:fibre-cpp/print_utils.hpp **** template<typename T>
  11:fibre-cpp/print_utils.hpp **** constexpr size_t hex_digits() {
  12:fibre-cpp/print_utils.hpp ****     return (std::numeric_limits<T>::digits + 3) / 4;
  13:fibre-cpp/print_utils.hpp **** }
  14:fibre-cpp/print_utils.hpp **** 
  15:fibre-cpp/print_utils.hpp **** /* @brief Converts a hexadecimal digit to a uint8_t.
ARM GAS  /tmp/ccjyQa7a.s 			page 95


  16:fibre-cpp/print_utils.hpp **** * @param output If not null, the digit's value is stored in this output
  17:fibre-cpp/print_utils.hpp **** * Returns true if the char is a valid hex digit, false otherwise
  18:fibre-cpp/print_utils.hpp **** */
  19:fibre-cpp/print_utils.hpp **** static inline bool hex_digit_to_byte(char ch, uint8_t* output) {
  20:fibre-cpp/print_utils.hpp ****     uint8_t nil_output = 0;
  21:fibre-cpp/print_utils.hpp ****     if (!output)
  22:fibre-cpp/print_utils.hpp ****         output = &nil_output;
  23:fibre-cpp/print_utils.hpp ****     if (ch >= '0' && ch <= '9')
  24:fibre-cpp/print_utils.hpp ****         return (*output) = ch - '0', true;
  25:fibre-cpp/print_utils.hpp ****     if (ch >= 'a' && ch <= 'f')
  26:fibre-cpp/print_utils.hpp ****         return (*output) = ch - 'a' + 10, true;
  27:fibre-cpp/print_utils.hpp ****     if (ch >= 'A' && ch <= 'F')
  28:fibre-cpp/print_utils.hpp ****         return (*output) = ch - 'A' + 10, true;
  29:fibre-cpp/print_utils.hpp ****     return false;
  30:fibre-cpp/print_utils.hpp **** }
  31:fibre-cpp/print_utils.hpp **** 
  32:fibre-cpp/print_utils.hpp **** /* @brief Converts a hex string to an integer
  33:fibre-cpp/print_utils.hpp **** * @param output If not null, the result is stored in this output
  34:fibre-cpp/print_utils.hpp **** * Returns true if the string represents a valid hex value, false otherwise.
  35:fibre-cpp/print_utils.hpp **** */
  36:fibre-cpp/print_utils.hpp **** template<typename TInt>
  37:fibre-cpp/print_utils.hpp **** bool hex_string_to_int(const char * str, size_t length, TInt* output) {
  38:fibre-cpp/print_utils.hpp ****     constexpr size_t N_DIGITS = hex_digits<TInt>();
  39:fibre-cpp/print_utils.hpp ****     TInt result = 0;
  40:fibre-cpp/print_utils.hpp ****     if (length > N_DIGITS)
  41:fibre-cpp/print_utils.hpp ****         length = N_DIGITS;
  42:fibre-cpp/print_utils.hpp ****     for (size_t i = 0; i < length && str[i]; i++) {
  43:fibre-cpp/print_utils.hpp ****         uint8_t digit = 0;
  44:fibre-cpp/print_utils.hpp ****         if (!hex_digit_to_byte(str[i], &digit))
  45:fibre-cpp/print_utils.hpp ****             return false;
  46:fibre-cpp/print_utils.hpp ****         result <<= 4;
  47:fibre-cpp/print_utils.hpp ****         result += digit;
  48:fibre-cpp/print_utils.hpp ****     }
  49:fibre-cpp/print_utils.hpp ****     if (output)
  50:fibre-cpp/print_utils.hpp ****         *output = result;
  51:fibre-cpp/print_utils.hpp ****     return true;
  52:fibre-cpp/print_utils.hpp **** }
  53:fibre-cpp/print_utils.hpp **** 
  54:fibre-cpp/print_utils.hpp **** template<typename TInt>
  55:fibre-cpp/print_utils.hpp **** bool hex_string_to_int(const char * str, TInt* output) {
  56:fibre-cpp/print_utils.hpp ****     return hex_string_to_int<TInt>(str, hex_digits<TInt>(), output);
  57:fibre-cpp/print_utils.hpp **** }
  58:fibre-cpp/print_utils.hpp **** 
  59:fibre-cpp/print_utils.hpp **** template<typename TInt, size_t ICount>
  60:fibre-cpp/print_utils.hpp **** bool hex_string_to_int_arr(const char * str, size_t length, TInt (&output)[ICount]) {
  61:fibre-cpp/print_utils.hpp ****     for (size_t i = 0; i < ICount; i++) {
  62:fibre-cpp/print_utils.hpp ****         if (!hex_string_to_int<TInt>(&str[i * hex_digits<TInt>()], &output[i]))
  63:fibre-cpp/print_utils.hpp ****             return false;
  64:fibre-cpp/print_utils.hpp ****     }
  65:fibre-cpp/print_utils.hpp ****     return true;
  66:fibre-cpp/print_utils.hpp **** }
  67:fibre-cpp/print_utils.hpp **** 
  68:fibre-cpp/print_utils.hpp **** template<typename TInt, size_t ICount>
  69:fibre-cpp/print_utils.hpp **** bool hex_string_to_int_arr(const char * str, TInt (&output)[ICount]) {
  70:fibre-cpp/print_utils.hpp ****     return hex_string_to_int_arr(str, hex_digits<TInt>() * ICount, output);
  71:fibre-cpp/print_utils.hpp **** }
  72:fibre-cpp/print_utils.hpp **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 96


  73:fibre-cpp/print_utils.hpp **** // TODO: move to print_utils.hpp
  74:fibre-cpp/print_utils.hpp **** template<typename T>
  75:fibre-cpp/print_utils.hpp **** class HexPrinter {
  76:fibre-cpp/print_utils.hpp **** public:
  77:fibre-cpp/print_utils.hpp ****     HexPrinter(T val, bool prefix) : val_(val) /*, prefix_(prefix)*/ {
  78:fibre-cpp/print_utils.hpp ****         const char digits[] = "0123456789abcdef";
  79:fibre-cpp/print_utils.hpp ****         size_t prefix_length = prefix ? 2 : 0;
  80:fibre-cpp/print_utils.hpp ****         if (prefix) {
  81:fibre-cpp/print_utils.hpp ****             str[0] = '0';
  82:fibre-cpp/print_utils.hpp ****             str[1] = 'x';
  83:fibre-cpp/print_utils.hpp ****         }
  84:fibre-cpp/print_utils.hpp ****         str[prefix_length + hex_digits<T>()] = '\0';
  85:fibre-cpp/print_utils.hpp ****         
  86:fibre-cpp/print_utils.hpp ****         for (size_t i = 0; i < hex_digits<T>(); ++i) {
  87:fibre-cpp/print_utils.hpp ****             str[prefix_length + hex_digits<T>() - i - 1] = digits[val & 0xf];
  88:fibre-cpp/print_utils.hpp ****             val >>= 4;
  89:fibre-cpp/print_utils.hpp ****         }
  90:fibre-cpp/print_utils.hpp ****     }
  91:fibre-cpp/print_utils.hpp ****     std::string to_string() const { return str; }
  92:fibre-cpp/print_utils.hpp ****     void to_string(char* buf) const {
  93:fibre-cpp/print_utils.hpp ****         for (size_t i = 0; (i < sizeof(str)) && str[i]; ++i)
  94:fibre-cpp/print_utils.hpp ****             buf[i] = str[i];
  95:fibre-cpp/print_utils.hpp ****     }
  96:fibre-cpp/print_utils.hpp **** 
  97:fibre-cpp/print_utils.hpp ****     T val_;
  98:fibre-cpp/print_utils.hpp ****     //bool prefix_;
  99:fibre-cpp/print_utils.hpp ****     char str[hex_digits<T>() + 3]; // 3 additional characters 0x and \0
 100:fibre-cpp/print_utils.hpp **** };
 101:fibre-cpp/print_utils.hpp **** 
 102:fibre-cpp/print_utils.hpp **** template<typename T>
 103:fibre-cpp/print_utils.hpp **** std::ostream& operator<<(std::ostream& stream, const HexPrinter<T>& printer) {
 104:fibre-cpp/print_utils.hpp ****     // TODO: specialize for char
 105:fibre-cpp/print_utils.hpp ****     return stream << printer.to_string();
 106:fibre-cpp/print_utils.hpp **** }
 107:fibre-cpp/print_utils.hpp **** 
 108:fibre-cpp/print_utils.hpp **** template<typename T>
 109:fibre-cpp/print_utils.hpp **** HexPrinter<T> as_hex(T val, bool prefix = true) { return HexPrinter<T>(val, prefix); }
 2713              		.loc 9 109 15 is_stmt 1 view -0
 2714              		.cfi_startproc
 2715              		@ args = 0, pretend = 0, frame = 24
 2716              		@ frame_needed = 0, uses_anonymous_args = 0
 2717              		.loc 9 109 15 is_stmt 0 view .LVU663
 2718 0000 70B5     		push	{r4, r5, r6, lr}
 2719              	.LCFI35:
 2720              		.cfi_def_cfa_offset 16
 2721              		.cfi_offset 4, -16
 2722              		.cfi_offset 5, -12
 2723              		.cfi_offset 6, -8
 2724              		.cfi_offset 14, -4
 2725 0002 86B0     		sub	sp, sp, #24
 2726              	.LCFI36:
 2727              		.cfi_def_cfa_offset 40
 2728 0004 8646     		mov	lr, r0
 2729 0006 8C46     		mov	ip, r1
 2730 0008 1646     		mov	r6, r2
 2731              	.LVL243:
 2732              	.LBB821:
ARM GAS  /tmp/ccjyQa7a.s 			page 97


 2733              	.LBI821:
  77:fibre-cpp/print_utils.hpp ****         const char digits[] = "0123456789abcdef";
 2734              		.loc 9 77 5 is_stmt 1 view .LVU664
 2735              	.LBB822:
 2736              	.LBB823:
  77:fibre-cpp/print_utils.hpp ****         const char digits[] = "0123456789abcdef";
 2737              		.loc 9 77 46 is_stmt 0 view .LVU665
 2738 000a 0180     		strh	r1, [r0]	@ movhi
 2739              	.LBB824:
  78:fibre-cpp/print_utils.hpp ****         size_t prefix_length = prefix ? 2 : 0;
 2740              		.loc 9 78 20 view .LVU666
 2741 000c 01AC     		add	r4, sp, #4
 2742 000e 144D     		ldr	r5, .L135
 2743 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2744              	.LVL244:
  78:fibre-cpp/print_utils.hpp ****         size_t prefix_length = prefix ? 2 : 0;
 2745              		.loc 9 78 20 view .LVU667
 2746 0012 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2747 0014 2B68     		ldr	r3, [r5]
 2748 0016 2370     		strb	r3, [r4]
  79:fibre-cpp/print_utils.hpp ****         if (prefix) {
 2749              		.loc 9 79 39 view .LVU668
 2750 0018 3346     		mov	r3, r6
 2751 001a 66B1     		cbz	r6, .L132
 2752 001c 0220     		movs	r0, #2
 2753              	.L128:
 2754              	.LVL245:
  80:fibre-cpp/print_utils.hpp ****             str[0] = '0';
 2755              		.loc 9 80 9 view .LVU669
 2756 001e 2BB1     		cbz	r3, .L129
  81:fibre-cpp/print_utils.hpp ****             str[1] = 'x';
 2757              		.loc 9 81 20 view .LVU670
 2758 0020 3023     		movs	r3, #48
 2759 0022 8EF80230 		strb	r3, [lr, #2]
  82:fibre-cpp/print_utils.hpp ****         }
 2760              		.loc 9 82 20 view .LVU671
 2761 0026 7823     		movs	r3, #120
 2762 0028 8EF80330 		strb	r3, [lr, #3]
 2763              	.L129:
  84:fibre-cpp/print_utils.hpp ****         
 2764              		.loc 9 84 27 view .LVU672
 2765 002c 031D     		adds	r3, r0, #4
  84:fibre-cpp/print_utils.hpp ****         
 2766              		.loc 9 84 46 view .LVU673
 2767 002e 7344     		add	r3, r3, lr
 2768 0030 0022     		movs	r2, #0
 2769 0032 9A70     		strb	r2, [r3, #2]
 2770              	.LVL246:
  84:fibre-cpp/print_utils.hpp ****         
 2771              		.loc 9 84 46 view .LVU674
 2772 0034 0EE0     		b	.L131
 2773              	.LVL247:
 2774              	.L132:
  79:fibre-cpp/print_utils.hpp ****         if (prefix) {
 2775              		.loc 9 79 39 view .LVU675
 2776 0036 0020     		movs	r0, #0
 2777 0038 F1E7     		b	.L128
ARM GAS  /tmp/ccjyQa7a.s 			page 98


 2778              	.LVL248:
 2779              	.L134:
 2780              	.LBB825:
  87:fibre-cpp/print_utils.hpp ****             val >>= 4;
 2781              		.loc 9 87 71 view .LVU676
 2782 003a 0CF00F01 		and	r1, ip, #15
  87:fibre-cpp/print_utils.hpp ****             val >>= 4;
 2783              		.loc 9 87 49 view .LVU677
 2784 003e 831A     		subs	r3, r0, r2
  87:fibre-cpp/print_utils.hpp ****             val >>= 4;
 2785              		.loc 9 87 53 view .LVU678
 2786 0040 0333     		adds	r3, r3, #3
  87:fibre-cpp/print_utils.hpp ****             val >>= 4;
 2787              		.loc 9 87 66 view .LVU679
 2788 0042 1831     		adds	r1, r1, #24
 2789 0044 6944     		add	r1, sp, r1
 2790 0046 11F8141C 		ldrb	r1, [r1, #-20]	@ zero_extendqisi2
  87:fibre-cpp/print_utils.hpp ****             val >>= 4;
 2791              		.loc 9 87 58 view .LVU680
 2792 004a 7344     		add	r3, r3, lr
 2793 004c 9970     		strb	r1, [r3, #2]
  88:fibre-cpp/print_utils.hpp ****         }
 2794              		.loc 9 88 17 view .LVU681
 2795 004e 4FEA1C1C 		lsr	ip, ip, #4
 2796              	.LVL249:
  86:fibre-cpp/print_utils.hpp ****             str[prefix_length + hex_digits<T>() - i - 1] = digits[val & 0xf];
 2797              		.loc 9 86 9 is_stmt 1 view .LVU682
 2798 0052 0132     		adds	r2, r2, #1
 2799              	.LVL250:
 2800              	.L131:
  86:fibre-cpp/print_utils.hpp ****             str[prefix_length + hex_digits<T>() - i - 1] = digits[val & 0xf];
 2801              		.loc 9 86 30 view .LVU683
 2802 0054 032A     		cmp	r2, #3
 2803 0056 F0D9     		bls	.L134
 2804              	.LBE825:
 2805              	.LBE824:
 2806              	.LBE823:
 2807              	.LBE822:
 2808              	.LBE821:
 2809              		.loc 9 109 86 is_stmt 0 view .LVU684
 2810 0058 7046     		mov	r0, lr
 2811              	.LVL251:
 2812              		.loc 9 109 86 view .LVU685
 2813 005a 06B0     		add	sp, sp, #24
 2814              	.LCFI37:
 2815              		.cfi_def_cfa_offset 16
 2816              		@ sp needed
 2817 005c 70BD     		pop	{r4, r5, r6, pc}
 2818              	.LVL252:
 2819              	.L136:
 2820              		.loc 9 109 86 view .LVU686
 2821 005e 00BF     		.align	2
 2822              	.L135:
 2823 0060 00000000 		.word	.LC0
 2824              		.cfi_endproc
 2825              	.LFE5038:
 2826              		.cantunwind
ARM GAS  /tmp/ccjyQa7a.s 			page 99


 2827              		.fnend
 2829              		.section	.text._ZN5fibre6as_hexIKhEENS_15HexArrayPrinterIT_EENS_16generic_bufptr_tIS3_EE,"axG",%pr
 2830              		.align	1
 2831              		.weak	_ZN5fibre6as_hexIKhEENS_15HexArrayPrinterIT_EENS_16generic_bufptr_tIS3_EE
 2832              		.syntax unified
 2833              		.thumb
 2834              		.thumb_func
 2836              	_ZN5fibre6as_hexIKhEENS_15HexArrayPrinterIT_EENS_16generic_bufptr_tIS3_EE:
 2837              		.fnstart
 2838              	.LVL253:
 2839              	.LFB5047:
 110:fibre-cpp/print_utils.hpp **** 
 111:fibre-cpp/print_utils.hpp **** template<typename T>
 112:fibre-cpp/print_utils.hpp **** class HexArrayPrinter {
 113:fibre-cpp/print_utils.hpp **** public:
 114:fibre-cpp/print_utils.hpp ****     HexArrayPrinter(T* ptr, size_t length) : ptr_(ptr), length_(length) {}
 115:fibre-cpp/print_utils.hpp ****     T* ptr_;
 116:fibre-cpp/print_utils.hpp ****     size_t length_;
 117:fibre-cpp/print_utils.hpp **** };
 118:fibre-cpp/print_utils.hpp **** 
 119:fibre-cpp/print_utils.hpp **** template<typename TStream, typename T>
 120:fibre-cpp/print_utils.hpp **** TStream& operator<<(TStream& stream, const HexArrayPrinter<T>& printer) {
 121:fibre-cpp/print_utils.hpp ****     for (size_t pos = 0; pos < printer.length_; ++pos) {
 122:fibre-cpp/print_utils.hpp ****         stream << " " << as_hex(printer.ptr_[pos]);
 123:fibre-cpp/print_utils.hpp ****         if (((pos + 1) % 16) == 0)
 124:fibre-cpp/print_utils.hpp ****             stream << "\n";
 125:fibre-cpp/print_utils.hpp ****     }
 126:fibre-cpp/print_utils.hpp ****     return stream;
 127:fibre-cpp/print_utils.hpp **** }
 128:fibre-cpp/print_utils.hpp **** 
 129:fibre-cpp/print_utils.hpp **** template<typename T, size_t ILength>
 130:fibre-cpp/print_utils.hpp **** HexArrayPrinter<T> as_hex(T (&val)[ILength]) { return HexArrayPrinter<T>(val, ILength); }
 131:fibre-cpp/print_utils.hpp **** 
 132:fibre-cpp/print_utils.hpp **** template<typename T>
 133:fibre-cpp/print_utils.hpp **** HexArrayPrinter<T> as_hex(generic_bufptr_t<T> buffer) { return HexArrayPrinter<T>(buffer.begin(), b
 2840              		.loc 9 133 20 is_stmt 1 view -0
 2841              		.cfi_startproc
 2842              		@ args = 0, pretend = 0, frame = 8
 2843              		@ frame_needed = 0, uses_anonymous_args = 0
 2844              		@ link register save eliminated.
 2845              		.loc 9 133 20 is_stmt 0 view .LVU688
 2846 0000 82B0     		sub	sp, sp, #8
 2847              	.LCFI38:
 2848              		.cfi_def_cfa_offset 8
 2849 0002 0DF1080C 		add	ip, sp, #8
 2850 0006 0CE90600 		stmdb	ip, {r1, r2}
 2851              	.LVL254:
 2852              	.LBB826:
 2853              	.LBI826:
  74:fibre-cpp/include/fibre/bufptr.hpp ****         return end_ - begin_;
 2854              		.loc 4 74 12 is_stmt 1 view .LVU689
 2855              	.LBB827:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 2856              		.loc 4 75 21 is_stmt 0 view .LVU690
 2857 000a 521A     		subs	r2, r2, r1
 2858              	.LVL255:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
ARM GAS  /tmp/ccjyQa7a.s 			page 100


 2859              		.loc 4 75 21 view .LVU691
 2860              	.LBE827:
 2861              	.LBE826:
 2862              	.LBB828:
 2863              	.LBI828:
 114:fibre-cpp/print_utils.hpp ****     T* ptr_;
 2864              		.loc 9 114 5 is_stmt 1 view .LVU692
 2865              	.LBB829:
 2866              	.LBB830:
 114:fibre-cpp/print_utils.hpp ****     T* ptr_;
 2867              		.loc 9 114 71 is_stmt 0 view .LVU693
 2868 000c 0160     		str	r1, [r0]
 2869 000e 4260     		str	r2, [r0, #4]
 2870              	.LVL256:
 114:fibre-cpp/print_utils.hpp ****     T* ptr_;
 2871              		.loc 9 114 71 view .LVU694
 2872              	.LBE830:
 2873              	.LBE829:
 2874              	.LBE828:
 2875              		.loc 9 133 115 view .LVU695
 2876 0010 02B0     		add	sp, sp, #8
 2877              	.LCFI39:
 2878              		.cfi_def_cfa_offset 0
 2879              		@ sp needed
 2880 0012 7047     		bx	lr
 2881              		.cfi_endproc
 2882              	.LFE5047:
 2883              		.cantunwind
 2884              		.fnend
 2886              		.section	.text._ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_Z
 2887              		.align	1
 2888              		.weak	_ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_
 2889              		.syntax unified
 2890              		.thumb
 2891              		.thumb_func
 2893              	_ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_write_f
 2894              		.fnstart
 2895              	.LVL257:
 2896              	.LFB5050:
 114:fibre-cpp/include/fibre/callback.hpp ****     return MemCb::with(obj);
 2897              		.loc 8 114 22 is_stmt 1 view -0
 2898              		.cfi_startproc
 2899              		@ args = 0, pretend = 0, frame = 0
 2900              		@ frame_needed = 0, uses_anonymous_args = 0
 2901              		@ link register save eliminated.
 2902              	.LBB831:
 2903              	.LBI831:
 104:fibre-cpp/include/fibre/callback.hpp ****         return cb_t{[](void* obj, TArgs... arg) {
 2904              		.loc 8 104 17 view .LVU697
 2905              	.LBB832:
 2906              	.LBB833:
 2907              	.LBI833:
  22:fibre-cpp/include/fibre/callback.hpp ****         cb_(callback), ctx_(ctx) {}
 2908              		.loc 8 22 5 view .LVU698
 2909              	.LBB834:
  23:fibre-cpp/include/fibre/callback.hpp **** 
 2910              		.loc 8 23 32 is_stmt 0 view .LVU699
ARM GAS  /tmp/ccjyQa7a.s 			page 101


 2911 0000 014A     		ldr	r2, .L140
 2912 0002 0260     		str	r2, [r0]
 2913 0004 4160     		str	r1, [r0, #4]
 2914              	.LVL258:
  23:fibre-cpp/include/fibre/callback.hpp **** 
 2915              		.loc 8 23 32 view .LVU700
 2916              	.LBE834:
 2917              	.LBE833:
 2918              	.LBE832:
 2919              	.LBE831:
 2920              		.loc 8 116 1 view .LVU701
 2921 0006 7047     		bx	lr
 2922              	.L141:
 2923              		.align	2
 2924              	.L140:
 2925 0008 00000000 		.word	_ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17o
 2926              		.cfi_endproc
 2927              	.LFE5050:
 2928              		.cantunwind
 2929              		.fnend
 2931              		.section	.text._ZN5fibre6as_hexIhEENS_10HexPrinterIT_EES2_b,"axG",%progbits,_ZN5fibre6as_hexIhEENS
 2932              		.align	1
 2933              		.weak	_ZN5fibre6as_hexIhEENS_10HexPrinterIT_EES2_b
 2934              		.syntax unified
 2935              		.thumb
 2936              		.thumb_func
 2938              	_ZN5fibre6as_hexIhEENS_10HexPrinterIT_EES2_b:
 2939              		.fnstart
 2940              	.LVL259:
 2941              	.LFB5362:
 109:fibre-cpp/print_utils.hpp **** 
 2942              		.loc 9 109 15 is_stmt 1 view -0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 24
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 109:fibre-cpp/print_utils.hpp **** 
 2946              		.loc 9 109 15 is_stmt 0 view .LVU703
 2947 0000 70B5     		push	{r4, r5, r6, lr}
 2948              	.LCFI40:
 2949              		.cfi_def_cfa_offset 16
 2950              		.cfi_offset 4, -16
 2951              		.cfi_offset 5, -12
 2952              		.cfi_offset 6, -8
 2953              		.cfi_offset 14, -4
 2954 0002 86B0     		sub	sp, sp, #24
 2955              	.LCFI41:
 2956              		.cfi_def_cfa_offset 40
 2957 0004 8646     		mov	lr, r0
 2958 0006 8C46     		mov	ip, r1
 2959 0008 1646     		mov	r6, r2
 2960              	.LVL260:
 2961              	.LBB840:
 2962              	.LBI840:
  77:fibre-cpp/print_utils.hpp ****         const char digits[] = "0123456789abcdef";
 2963              		.loc 9 77 5 is_stmt 1 view .LVU704
 2964              	.LBB841:
 2965              	.LBB842:
ARM GAS  /tmp/ccjyQa7a.s 			page 102


  77:fibre-cpp/print_utils.hpp ****         const char digits[] = "0123456789abcdef";
 2966              		.loc 9 77 46 is_stmt 0 view .LVU705
 2967 000a 0170     		strb	r1, [r0]
 2968              	.LBB843:
  78:fibre-cpp/print_utils.hpp ****         size_t prefix_length = prefix ? 2 : 0;
 2969              		.loc 9 78 20 view .LVU706
 2970 000c 01AC     		add	r4, sp, #4
 2971 000e 144D     		ldr	r5, .L150
 2972 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2973              	.LVL261:
  78:fibre-cpp/print_utils.hpp ****         size_t prefix_length = prefix ? 2 : 0;
 2974              		.loc 9 78 20 view .LVU707
 2975 0012 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2976 0014 2B68     		ldr	r3, [r5]
 2977 0016 2370     		strb	r3, [r4]
  79:fibre-cpp/print_utils.hpp ****         if (prefix) {
 2978              		.loc 9 79 39 view .LVU708
 2979 0018 3346     		mov	r3, r6
 2980 001a 66B1     		cbz	r6, .L147
 2981 001c 0220     		movs	r0, #2
 2982              	.L143:
 2983              	.LVL262:
  80:fibre-cpp/print_utils.hpp ****             str[0] = '0';
 2984              		.loc 9 80 9 view .LVU709
 2985 001e 2BB1     		cbz	r3, .L144
  81:fibre-cpp/print_utils.hpp ****             str[1] = 'x';
 2986              		.loc 9 81 20 view .LVU710
 2987 0020 3023     		movs	r3, #48
 2988 0022 8EF80130 		strb	r3, [lr, #1]
  82:fibre-cpp/print_utils.hpp ****         }
 2989              		.loc 9 82 20 view .LVU711
 2990 0026 7823     		movs	r3, #120
 2991 0028 8EF80230 		strb	r3, [lr, #2]
 2992              	.L144:
  84:fibre-cpp/print_utils.hpp ****         
 2993              		.loc 9 84 27 view .LVU712
 2994 002c 821C     		adds	r2, r0, #2
  84:fibre-cpp/print_utils.hpp ****         
 2995              		.loc 9 84 46 view .LVU713
 2996 002e 7244     		add	r2, r2, lr
 2997 0030 0023     		movs	r3, #0
 2998 0032 5370     		strb	r3, [r2, #1]
 2999              	.LVL263:
  84:fibre-cpp/print_utils.hpp ****         
 3000              		.loc 9 84 46 view .LVU714
 3001 0034 0EE0     		b	.L146
 3002              	.LVL264:
 3003              	.L147:
  79:fibre-cpp/print_utils.hpp ****         if (prefix) {
 3004              		.loc 9 79 39 view .LVU715
 3005 0036 0020     		movs	r0, #0
 3006 0038 F1E7     		b	.L143
 3007              	.LVL265:
 3008              	.L149:
 3009              	.LBB844:
  87:fibre-cpp/print_utils.hpp ****             val >>= 4;
 3010              		.loc 9 87 71 view .LVU716
ARM GAS  /tmp/ccjyQa7a.s 			page 103


 3011 003a 0CF00F01 		and	r1, ip, #15
  87:fibre-cpp/print_utils.hpp ****             val >>= 4;
 3012              		.loc 9 87 49 view .LVU717
 3013 003e C21A     		subs	r2, r0, r3
  87:fibre-cpp/print_utils.hpp ****             val >>= 4;
 3014              		.loc 9 87 53 view .LVU718
 3015 0040 0132     		adds	r2, r2, #1
  87:fibre-cpp/print_utils.hpp ****             val >>= 4;
 3016              		.loc 9 87 66 view .LVU719
 3017 0042 1831     		adds	r1, r1, #24
 3018 0044 6944     		add	r1, sp, r1
 3019 0046 11F8141C 		ldrb	r1, [r1, #-20]	@ zero_extendqisi2
  87:fibre-cpp/print_utils.hpp ****             val >>= 4;
 3020              		.loc 9 87 58 view .LVU720
 3021 004a 7244     		add	r2, r2, lr
 3022 004c 5170     		strb	r1, [r2, #1]
  88:fibre-cpp/print_utils.hpp ****         }
 3023              		.loc 9 88 17 view .LVU721
 3024 004e 4FEA1C1C 		lsr	ip, ip, #4
 3025              	.LVL266:
  86:fibre-cpp/print_utils.hpp ****             str[prefix_length + hex_digits<T>() - i - 1] = digits[val & 0xf];
 3026              		.loc 9 86 9 is_stmt 1 view .LVU722
 3027 0052 0133     		adds	r3, r3, #1
 3028              	.LVL267:
 3029              	.L146:
  86:fibre-cpp/print_utils.hpp ****             str[prefix_length + hex_digits<T>() - i - 1] = digits[val & 0xf];
 3030              		.loc 9 86 30 view .LVU723
 3031 0054 012B     		cmp	r3, #1
 3032 0056 F0D9     		bls	.L149
 3033              	.LBE844:
 3034              	.LBE843:
 3035              	.LBE842:
 3036              	.LBE841:
 3037              	.LBE840:
 109:fibre-cpp/print_utils.hpp **** 
 3038              		.loc 9 109 86 is_stmt 0 view .LVU724
 3039 0058 7046     		mov	r0, lr
 3040              	.LVL268:
 109:fibre-cpp/print_utils.hpp **** 
 3041              		.loc 9 109 86 view .LVU725
 3042 005a 06B0     		add	sp, sp, #24
 3043              	.LCFI42:
 3044              		.cfi_def_cfa_offset 16
 3045              		@ sp needed
 3046 005c 70BD     		pop	{r4, r5, r6, pc}
 3047              	.LVL269:
 3048              	.L151:
 109:fibre-cpp/print_utils.hpp **** 
 3049              		.loc 9 109 86 view .LVU726
 3050 005e 00BF     		.align	2
 3051              	.L150:
 3052 0060 00000000 		.word	.LC0
 3053              		.cfi_endproc
 3054              	.LFE5362:
 3055              		.cantunwind
 3056              		.fnend
 3058              		.section	.text._ZN5fibrelsI10NullStreamKhEERT_S4_RKNS_15HexArrayPrinterIT0_EE,"axG",%progbits,_ZN5
ARM GAS  /tmp/ccjyQa7a.s 			page 104


 3059              		.align	1
 3060              		.weak	_ZN5fibrelsI10NullStreamKhEERT_S4_RKNS_15HexArrayPrinterIT0_EE
 3061              		.syntax unified
 3062              		.thumb
 3063              		.thumb_func
 3065              	_ZN5fibrelsI10NullStreamKhEERT_S4_RKNS_15HexArrayPrinterIT0_EE:
 3066              		.fnstart
 3067              	.LVL270:
 3068              	.LFB5048:
 120:fibre-cpp/print_utils.hpp ****     for (size_t pos = 0; pos < printer.length_; ++pos) {
 3069              		.loc 9 120 10 is_stmt 1 view -0
 3070              		.cfi_startproc
 3071              		@ args = 0, pretend = 0, frame = 16
 3072              		@ frame_needed = 0, uses_anonymous_args = 0
 120:fibre-cpp/print_utils.hpp ****     for (size_t pos = 0; pos < printer.length_; ++pos) {
 3073              		.loc 9 120 10 is_stmt 0 view .LVU728
 3074 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3075              	.LCFI43:
 3076              		.cfi_def_cfa_offset 20
 3077              		.cfi_offset 4, -20
 3078              		.cfi_offset 5, -16
 3079              		.cfi_offset 6, -12
 3080              		.cfi_offset 7, -8
 3081              		.cfi_offset 14, -4
 3082 0002 85B0     		sub	sp, sp, #20
 3083              	.LCFI44:
 3084              		.cfi_def_cfa_offset 40
 3085 0004 0746     		mov	r7, r0
 3086 0006 0E46     		mov	r6, r1
 3087              	.LVL271:
 3088              	.LBB845:
 121:fibre-cpp/print_utils.hpp ****         stream << " " << as_hex(printer.ptr_[pos]);
 3089              		.loc 9 121 17 view .LVU729
 3090 0008 0024     		movs	r4, #0
 3091 000a 0CE0     		b	.L154
 3092              	.LVL272:
 3093              	.L156:
 122:fibre-cpp/print_utils.hpp ****         if (((pos + 1) % 16) == 0)
 3094              		.loc 9 122 41 view .LVU730
 3095 000c 3368     		ldr	r3, [r6]
 122:fibre-cpp/print_utils.hpp ****         if (((pos + 1) % 16) == 0)
 3096              		.loc 9 122 23 view .LVU731
 3097 000e 02AD     		add	r5, sp, #8
 3098 0010 0122     		movs	r2, #1
 3099 0012 195D     		ldrb	r1, [r3, r4]	@ zero_extendqisi2
 3100 0014 2846     		mov	r0, r5
 3101 0016 FFF7FEFF 		bl	_ZN5fibre6as_hexIhEENS_10HexPrinterIT_EES2_b
 3102              	.LVL273:
 122:fibre-cpp/print_utils.hpp ****         if (((pos + 1) % 16) == 0)
 3103              		.loc 9 122 23 view .LVU732
 3104 001a 95E80300 		ldm	r5, {r0, r1}
 3105 001e 0090     		str	r0, [sp]
 3106 0020 ADF80410 		strh	r1, [sp, #4]	@ movhi
 3107              	.LBB846:
 3108              	.LBI846:
 3109              		.file 10 "fibre-cpp/logging.hpp"
   1:fibre-cpp/logging.hpp **** /**
ARM GAS  /tmp/ccjyQa7a.s 			page 105


   2:fibre-cpp/logging.hpp ****  * @brief Provides logging facilities
   3:fibre-cpp/logging.hpp ****  * 
   4:fibre-cpp/logging.hpp ****  * Log entries are associated with user defined topics. A user can define a
   5:fibre-cpp/logging.hpp ****  * topic using DEFINE_LOG_TOPIC(topicname) and activate the topic for the
   6:fibre-cpp/logging.hpp ****  * current scope using USE_LOG_TOPIC(topicname).
   7:fibre-cpp/logging.hpp ****  * 
   8:fibre-cpp/logging.hpp ****  * Currently all log entries are posted to stderr in a thread-safe way.
   9:fibre-cpp/logging.hpp ****  *
  10:fibre-cpp/logging.hpp ****  * Whether an event is actually logged depends on the current log verbosity of
  11:fibre-cpp/logging.hpp ****  * the corresponding topic. The log verbosity is defined by the following
  12:fibre-cpp/logging.hpp ****  * sources (in order of their precedence).
  13:fibre-cpp/logging.hpp ****  * 
  14:fibre-cpp/logging.hpp ****  *  0. maximum log verbosity setting (see below)
  15:fibre-cpp/logging.hpp ****  *  1. runtime environment variable "FIBRE_LOG_[topicname]"
  16:fibre-cpp/logging.hpp ****  *  2. runtime environment variable "FIBRE_LOG"
  17:fibre-cpp/logging.hpp ****  *  3. topic specific default log verbosity defined using CONFIG_LOG_TOPIC(...)
  18:fibre-cpp/logging.hpp ****  *  4. FIBRE_DEFAULT_LOG_VERBOSITY defined before this file (using #define or -D compiler flag)
  19:fibre-cpp/logging.hpp ****  *  5. FIBRE_DEFAULT_LOG_VERBOSITY defined in this file
  20:fibre-cpp/logging.hpp ****  * 
  21:fibre-cpp/logging.hpp ****  * The maximum log verbosity can be defined separately from the default log
  22:fibre-cpp/logging.hpp ****  * verbosity. The maximum log verbosity bound always applies, regardless of how
  23:fibre-cpp/logging.hpp ****  * the actual log verbosity is specified. This allows keeping the binary small
  24:fibre-cpp/logging.hpp ****  * by optimizing away unnecessary log entries at compile time.
  25:fibre-cpp/logging.hpp ****  * The maximum log verbosity is defined by the following sources (in order of
  26:fibre-cpp/logging.hpp ****  * their precedence):
  27:fibre-cpp/logging.hpp ****  * 
  28:fibre-cpp/logging.hpp ****  *  1. topic specific max log verbosity defined using CONFIG_LOG_TOPIC(...)
  29:fibre-cpp/logging.hpp ****  *  2. FIBRE_MAX_LOG_VERBOSITY defined before this file (using #define or -D compiler flag)
  30:fibre-cpp/logging.hpp ****  *  3. FIBRE_MAX_LOG_VERBOSITY defined in this file
  31:fibre-cpp/logging.hpp ****  * 
  32:fibre-cpp/logging.hpp ****  * TODO: ensure that the optimizer can indeed strip the unused strings (currently not the case)
  33:fibre-cpp/logging.hpp ****  * 
  34:fibre-cpp/logging.hpp ****  * 
  35:fibre-cpp/logging.hpp ****  * Example:
  36:fibre-cpp/logging.hpp ****  * 
  37:fibre-cpp/logging.hpp ****  * @code
  38:fibre-cpp/logging.hpp ****  * 
  39:fibre-cpp/logging.hpp ****  * DEFINE_LOG_TOPIC(MAIN);
  40:fibre-cpp/logging.hpp ****  * USE_LOG_TOPIC(MAIN);
  41:fibre-cpp/logging.hpp ****  * 
  42:fibre-cpp/logging.hpp ****  * int main(void) {
  43:fibre-cpp/logging.hpp ****  *     FIBRE_LOG(D) << "Hello Log!";
  44:fibre-cpp/logging.hpp ****  *     if (open("inexistent_file", O_RDONLY) < 0) {
  45:fibre-cpp/logging.hpp ****  *         FIBRE_LOG(E) << "Could not open file: " << sys_err();
  46:fibre-cpp/logging.hpp ****  *     }
  47:fibre-cpp/logging.hpp ****  *     return 0;
  48:fibre-cpp/logging.hpp ****  * }
  49:fibre-cpp/logging.hpp ****  * 
  50:fibre-cpp/logging.hpp ****  * @endcode
  51:fibre-cpp/logging.hpp ****  * 
  52:fibre-cpp/logging.hpp ****  * Using logging in header files is possible but undocumented (TODO: fix)
  53:fibre-cpp/logging.hpp ****  */
  54:fibre-cpp/logging.hpp **** 
  55:fibre-cpp/logging.hpp **** #ifndef __FIBRE_LOGGING_HPP
  56:fibre-cpp/logging.hpp **** #define __FIBRE_LOGGING_HPP
  57:fibre-cpp/logging.hpp **** 
  58:fibre-cpp/logging.hpp **** /**
ARM GAS  /tmp/ccjyQa7a.s 			page 106


  59:fibre-cpp/logging.hpp ****  * @brief Tag type to print the last system error
  60:fibre-cpp/logging.hpp ****  * 
  61:fibre-cpp/logging.hpp ****  * The statement `std::out << sys_err();` will print the last system error
  62:fibre-cpp/logging.hpp ****  * in the following format: "error description (errno)".
  63:fibre-cpp/logging.hpp ****  * This is based on `GetLastError()` (Windows) or `errno` (all other systems).
  64:fibre-cpp/logging.hpp ****  */
  65:fibre-cpp/logging.hpp **** struct sys_err {};
  66:fibre-cpp/logging.hpp **** 
  67:fibre-cpp/logging.hpp **** 
  68:fibre-cpp/logging.hpp **** // TODO: support lite-version of logging on embedded systems
  69:fibre-cpp/logging.hpp **** #if FIBRE_MAX_LOG_VERBOSITY
  70:fibre-cpp/logging.hpp **** 
  71:fibre-cpp/logging.hpp **** #include <fibre/cpp_utils.hpp>
  72:fibre-cpp/logging.hpp **** 
  73:fibre-cpp/logging.hpp **** #include <string.h>
  74:fibre-cpp/logging.hpp **** #include <chrono>
  75:fibre-cpp/logging.hpp **** 
  76:fibre-cpp/logging.hpp **** #if defined(_WIN32) || defined(_WIN64)
  77:fibre-cpp/logging.hpp **** #include "windows.h"
  78:fibre-cpp/logging.hpp **** #endif
  79:fibre-cpp/logging.hpp **** 
  80:fibre-cpp/logging.hpp **** #if defined(_WIN32) || defined(_WIN64) || defined(__linux__) || defined(__APPLE__) || defined(EMSCR
  81:fibre-cpp/logging.hpp **** #include <iostream>
  82:fibre-cpp/logging.hpp **** #include <iomanip>
  83:fibre-cpp/logging.hpp **** #else
  84:fibre-cpp/logging.hpp **** 
  85:fibre-cpp/logging.hpp **** // We don't want <iostream> included on an embedded system as it makes the
  86:fibre-cpp/logging.hpp **** // binary huge.
  87:fibre-cpp/logging.hpp **** 
  88:fibre-cpp/logging.hpp **** struct StdoutStream : std::ostream {
  89:fibre-cpp/logging.hpp ****     void operator <<(const char * str) {
  90:fibre-cpp/logging.hpp ****         printf("%s", str);
  91:fibre-cpp/logging.hpp ****     }
  92:fibre-cpp/logging.hpp **** };
  93:fibre-cpp/logging.hpp **** 
  94:fibre-cpp/logging.hpp **** namespace std {
  95:fibre-cpp/logging.hpp **** extern StdoutStream cerr;
  96:fibre-cpp/logging.hpp **** }
  97:fibre-cpp/logging.hpp **** 
  98:fibre-cpp/logging.hpp **** #endif
  99:fibre-cpp/logging.hpp **** 
 100:fibre-cpp/logging.hpp **** #if defined(_WIN32) || defined(_WIN64) || defined(__linux__)
 101:fibre-cpp/logging.hpp **** 
 102:fibre-cpp/logging.hpp **** #include <mutex>
 103:fibre-cpp/logging.hpp **** using TMutex = std::mutex;
 104:fibre-cpp/logging.hpp **** using TLock = std::unique_lock<TMutex>;
 105:fibre-cpp/logging.hpp **** 
 106:fibre-cpp/logging.hpp **** #else
 107:fibre-cpp/logging.hpp **** 
 108:fibre-cpp/logging.hpp **** using TMutex = int;
 109:fibre-cpp/logging.hpp **** struct TLock {
 110:fibre-cpp/logging.hpp ****     TLock() {}
 111:fibre-cpp/logging.hpp ****     TLock(TMutex) {}
 112:fibre-cpp/logging.hpp **** };
 113:fibre-cpp/logging.hpp **** 
 114:fibre-cpp/logging.hpp **** #endif
 115:fibre-cpp/logging.hpp **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 107


 116:fibre-cpp/logging.hpp **** namespace fibre {
 117:fibre-cpp/logging.hpp **** 
 118:fibre-cpp/logging.hpp **** // Maximum log verbosity that should be compiled into the binary.
 119:fibre-cpp/logging.hpp **** // Log entries with a higher verbosity should be optimized away.
 120:fibre-cpp/logging.hpp **** #ifndef FIBRE_MAX_LOG_VERBOSITY
 121:fibre-cpp/logging.hpp **** #  define FIBRE_MAX_LOG_VERBOSITY LOG_LEVEL_T
 122:fibre-cpp/logging.hpp **** #endif
 123:fibre-cpp/logging.hpp **** 
 124:fibre-cpp/logging.hpp **** // Default log verbosity that should be used for all topic. This may be
 125:fibre-cpp/logging.hpp **** // overridden by other sources, see description in the beginning of this file.
 126:fibre-cpp/logging.hpp **** #ifndef FIBRE_DEFAULT_LOG_VERBOSITY
 127:fibre-cpp/logging.hpp **** #  define FIBRE_DEFAULT_LOG_VERBOSITY LOG_LEVEL_W
 128:fibre-cpp/logging.hpp **** #endif
 129:fibre-cpp/logging.hpp **** 
 130:fibre-cpp/logging.hpp **** /**
 131:fibre-cpp/logging.hpp ****  * @brief Generates one log entry.
 132:fibre-cpp/logging.hpp ****  * 
 133:fibre-cpp/logging.hpp ****  * The log entry will be associates with the topic specified in "USE_LOG_TOPIC".
 134:fibre-cpp/logging.hpp ****  * 
 135:fibre-cpp/logging.hpp ****  * Note that the log entry must only be used in the statement it is generated. (TODO: fix)
 136:fibre-cpp/logging.hpp ****  * 
 137:fibre-cpp/logging.hpp ****  * @param level: Can be one of "E", "W", "D", or other levels defined in
 138:fibre-cpp/logging.hpp ****  *        log_level_t.
 139:fibre-cpp/logging.hpp ****  * @returns a stream for writing into the log entry
 140:fibre-cpp/logging.hpp ****  */
 141:fibre-cpp/logging.hpp **** #define FIBRE_LOG(level) \
 142:fibre-cpp/logging.hpp ****     fibre::make_log_entry<current_log_topic, fibre::LOG_LEVEL_ ## level>( \
 143:fibre-cpp/logging.hpp ****         fibre::get_file_name(MAKE_SSTRING(__FILE__){}), __LINE__, __func__ \
 144:fibre-cpp/logging.hpp ****     ).get_stream()
 145:fibre-cpp/logging.hpp **** 
 146:fibre-cpp/logging.hpp **** /**
 147:fibre-cpp/logging.hpp ****  * @brief Defines a log topic. A log topic must be defined exactly once in every
 148:fibre-cpp/logging.hpp ****  * translation unit it is used.
 149:fibre-cpp/logging.hpp ****  */
 150:fibre-cpp/logging.hpp **** #define DEFINE_LOG_TOPIC(name) \
 151:fibre-cpp/logging.hpp ****     struct LOG_TOPIC_ ## name { \
 152:fibre-cpp/logging.hpp ****         static const char * get_label() { \
 153:fibre-cpp/logging.hpp ****             static const char label[] = #name; \
 154:fibre-cpp/logging.hpp ****             return label; \
 155:fibre-cpp/logging.hpp ****         } \
 156:fibre-cpp/logging.hpp ****     }
 157:fibre-cpp/logging.hpp **** 
 158:fibre-cpp/logging.hpp **** /**
 159:fibre-cpp/logging.hpp ****  * @brief Activates the use of the specified log topic for the current scope
 160:fibre-cpp/logging.hpp ****  * (and all subscopes)
 161:fibre-cpp/logging.hpp ****  */
 162:fibre-cpp/logging.hpp **** #define USE_LOG_TOPIC(name) using current_log_topic = LOG_TOPIC_ ## name
 163:fibre-cpp/logging.hpp **** 
 164:fibre-cpp/logging.hpp **** /**
 165:fibre-cpp/logging.hpp ****  * @brief Overrides the general log verbosity settings for a specific topic.
 166:fibre-cpp/logging.hpp ****  * If used, this should be placed in the same scope as the corresponding
 167:fibre-cpp/logging.hpp ****  * DEFINE_LOG_TOPIC.
 168:fibre-cpp/logging.hpp ****  */
 169:fibre-cpp/logging.hpp **** #define CONFIG_LOG_TOPIC(topic, default_verbosity, max_verbosity) \
 170:fibre-cpp/logging.hpp **** template<> constexpr log_level_t get_default_log_verbosity<LOG_TOPIC_ ## topic>() { return (default
 171:fibre-cpp/logging.hpp **** template<> constexpr log_level_t get_max_log_verbosity<LOG_TOPIC_ ## topic>() { return (max_verbosi
 172:fibre-cpp/logging.hpp **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 108


 173:fibre-cpp/logging.hpp **** 
 174:fibre-cpp/logging.hpp **** /** @brief Log verbosity levels */
 175:fibre-cpp/logging.hpp **** enum log_level_t {
 176:fibre-cpp/logging.hpp ****     LOG_LEVEL_F = 0, // fatal
 177:fibre-cpp/logging.hpp ****     LOG_LEVEL_E = 1, // error
 178:fibre-cpp/logging.hpp ****     LOG_LEVEL_W = 2, // warning
 179:fibre-cpp/logging.hpp ****     LOG_LEVEL_I = 3, // info
 180:fibre-cpp/logging.hpp ****     LOG_LEVEL_D = 4, // debug
 181:fibre-cpp/logging.hpp ****     LOG_LEVEL_T = 5, // trace
 182:fibre-cpp/logging.hpp **** };
 183:fibre-cpp/logging.hpp **** 
 184:fibre-cpp/logging.hpp **** class NullBuffer : public std::streambuf {
 185:fibre-cpp/logging.hpp **** public:
 186:fibre-cpp/logging.hpp ****     int overflow(int c) { return c; }
 187:fibre-cpp/logging.hpp **** };
 188:fibre-cpp/logging.hpp **** 
 189:fibre-cpp/logging.hpp **** // Source: https://stackoverflow.com/questions/15845505/how-to-get-higher-precision-fractions-of-a-
 190:fibre-cpp/logging.hpp **** static std::string get_local_time() {
 191:fibre-cpp/logging.hpp ****   auto now(std::chrono::system_clock::now());
 192:fibre-cpp/logging.hpp ****   auto seconds_since_epoch(
 193:fibre-cpp/logging.hpp ****       std::chrono::duration_cast<std::chrono::seconds>(now.time_since_epoch()));
 194:fibre-cpp/logging.hpp **** 
 195:fibre-cpp/logging.hpp ****   // Construct time_t using 'seconds_since_epoch' rather than 'now' since it is
 196:fibre-cpp/logging.hpp ****   // implementation-defined whether the value is rounded or truncated.
 197:fibre-cpp/logging.hpp ****   std::time_t now_t(
 198:fibre-cpp/logging.hpp ****       std::chrono::system_clock::to_time_t(
 199:fibre-cpp/logging.hpp ****           std::chrono::system_clock::time_point(seconds_since_epoch)));
 200:fibre-cpp/logging.hpp **** 
 201:fibre-cpp/logging.hpp ****   char temp[10];
 202:fibre-cpp/logging.hpp ****   if (!std::strftime(temp, 10, "%H:%M:%S.", std::localtime(&now_t)))
 203:fibre-cpp/logging.hpp ****     return "";
 204:fibre-cpp/logging.hpp **** 
 205:fibre-cpp/logging.hpp ****   return std::string(temp) +
 206:fibre-cpp/logging.hpp ****       std::to_string((now.time_since_epoch() - seconds_since_epoch).count());
 207:fibre-cpp/logging.hpp **** }
 208:fibre-cpp/logging.hpp **** 
 209:fibre-cpp/logging.hpp **** class Logger {
 210:fibre-cpp/logging.hpp **** public:
 211:fibre-cpp/logging.hpp ****     class Entry {
 212:fibre-cpp/logging.hpp ****     public:
 213:fibre-cpp/logging.hpp ****         Entry() : base_stream_(null_stream), lock_() {}
 214:fibre-cpp/logging.hpp **** 
 215:fibre-cpp/logging.hpp ****         Entry(std::ostream& base_stream, log_level_t level, const char* topic, const char* filename
 216:fibre-cpp/logging.hpp ****             : base_stream_(base_stream), lock_(mutex)
 217:fibre-cpp/logging.hpp ****         {
 218:fibre-cpp/logging.hpp ****             switch (level) {
 219:fibre-cpp/logging.hpp ****             case LOG_LEVEL_W:
 220:fibre-cpp/logging.hpp ****                 base_stream << "\x1b[93;1m";
 221:fibre-cpp/logging.hpp ****                 break;
 222:fibre-cpp/logging.hpp ****             case LOG_LEVEL_E:
 223:fibre-cpp/logging.hpp ****             case LOG_LEVEL_F:
 224:fibre-cpp/logging.hpp ****                 base_stream << "\x1b[91;1m";
 225:fibre-cpp/logging.hpp ****                 break;
 226:fibre-cpp/logging.hpp ****             default:
 227:fibre-cpp/logging.hpp ****                 break;
 228:fibre-cpp/logging.hpp ****             }
 229:fibre-cpp/logging.hpp ****             base_stream << get_local_time() << " ";
ARM GAS  /tmp/ccjyQa7a.s 			page 109


 230:fibre-cpp/logging.hpp ****             base_stream << std::dec << "[" << topic << "] ";
 231:fibre-cpp/logging.hpp ****             //base_stream << std::dec << filename << ":" << line_no << " in " << funcname << "(): "
 232:fibre-cpp/logging.hpp ****         }
 233:fibre-cpp/logging.hpp ****         ~Entry() { get_stream() << "\x1b[0m" << std::endl; }
 234:fibre-cpp/logging.hpp ****         std::ostream& get_stream() { return base_stream_; };
 235:fibre-cpp/logging.hpp ****     private:
 236:fibre-cpp/logging.hpp ****         NullBuffer null_buffer{};
 237:fibre-cpp/logging.hpp ****         std::ostream null_stream{&null_buffer};
 238:fibre-cpp/logging.hpp ****         std::ostream& base_stream_;
 239:fibre-cpp/logging.hpp ****         TLock lock_;
 240:fibre-cpp/logging.hpp ****     };
 241:fibre-cpp/logging.hpp ****     
 242:fibre-cpp/logging.hpp ****     TMutex mutex_;
 243:fibre-cpp/logging.hpp **** };
 244:fibre-cpp/logging.hpp **** 
 245:fibre-cpp/logging.hpp **** 
 246:fibre-cpp/logging.hpp **** 
 247:fibre-cpp/logging.hpp **** template<typename TOPIC>
 248:fibre-cpp/logging.hpp **** constexpr log_level_t get_default_log_verbosity() { return (log_level_t)FIBRE_DEFAULT_LOG_VERBOSITY
 249:fibre-cpp/logging.hpp **** 
 250:fibre-cpp/logging.hpp **** template<typename TOPIC>
 251:fibre-cpp/logging.hpp **** constexpr log_level_t get_max_log_verbosity() { return (log_level_t)FIBRE_MAX_LOG_VERBOSITY; }
 252:fibre-cpp/logging.hpp **** 
 253:fibre-cpp/logging.hpp **** /**
 254:fibre-cpp/logging.hpp ****  * @brief Resolves the currently active log verbosity for the given topic.
 255:fibre-cpp/logging.hpp ****  * See top of this file for a detailed description of the algorithm.
 256:fibre-cpp/logging.hpp ****  */
 257:fibre-cpp/logging.hpp **** template<typename TOPIC>
 258:fibre-cpp/logging.hpp **** log_level_t get_current_log_verbosity() {
 259:fibre-cpp/logging.hpp ****     char var_name[sizeof("FIBRE_LOG_") + strlen(TOPIC::get_label())];
 260:fibre-cpp/logging.hpp ****     strcpy(var_name, "FIBRE_LOG_");
 261:fibre-cpp/logging.hpp ****     strcat(var_name, TOPIC::get_label());
 262:fibre-cpp/logging.hpp **** 
 263:fibre-cpp/logging.hpp ****     // TODO: provide a way to disable the 
 264:fibre-cpp/logging.hpp ****     const char * var_val = std::getenv(var_name);
 265:fibre-cpp/logging.hpp ****     if (!var_val) {
 266:fibre-cpp/logging.hpp ****         var_val = std::getenv("FIBRE_LOG");
 267:fibre-cpp/logging.hpp ****     }
 268:fibre-cpp/logging.hpp **** 
 269:fibre-cpp/logging.hpp ****     log_level_t log_level = get_default_log_verbosity<TOPIC>();
 270:fibre-cpp/logging.hpp ****     if (var_val) {
 271:fibre-cpp/logging.hpp ****         unsigned long num = strtoul(var_val, nullptr, 10);
 272:fibre-cpp/logging.hpp ****         log_level = (log_level_t)num;
 273:fibre-cpp/logging.hpp ****     }
 274:fibre-cpp/logging.hpp **** 
 275:fibre-cpp/logging.hpp ****     if (log_level > get_max_log_verbosity<TOPIC>()) {
 276:fibre-cpp/logging.hpp ****         log_level = get_max_log_verbosity<TOPIC>();
 277:fibre-cpp/logging.hpp ****     }
 278:fibre-cpp/logging.hpp ****     return log_level;
 279:fibre-cpp/logging.hpp **** }
 280:fibre-cpp/logging.hpp **** 
 281:fibre-cpp/logging.hpp **** 
 282:fibre-cpp/logging.hpp **** 
 283:fibre-cpp/logging.hpp **** /*
 284:fibre-cpp/logging.hpp **** template<typename TStream, typename T, typename... Ts>
 285:fibre-cpp/logging.hpp **** void send_to_stream(TStream&& stream);
 286:fibre-cpp/logging.hpp **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 110


 287:fibre-cpp/logging.hpp **** template<typename TStream>
 288:fibre-cpp/logging.hpp **** void send_to_stream(TStream&& stream) { }
 289:fibre-cpp/logging.hpp **** 
 290:fibre-cpp/logging.hpp **** template<typename TStream, typename T, typename... Ts>
 291:fibre-cpp/logging.hpp **** void send_to_stream(TStream&& stream, T&& value, Ts&&... values) {
 292:fibre-cpp/logging.hpp ****     send_to_stream(std::forward<TStream>(stream) << std::forward<T>(value), std::forward<Ts>(values
 293:fibre-cpp/logging.hpp **** }*/
 294:fibre-cpp/logging.hpp **** 
 295:fibre-cpp/logging.hpp **** 
 296:fibre-cpp/logging.hpp **** Logger* get_logger(); // defined in logging.cpp
 297:fibre-cpp/logging.hpp **** 
 298:fibre-cpp/logging.hpp **** template<typename TOPIC, log_level_t LEVEL>
 299:fibre-cpp/logging.hpp **** Logger::Entry make_log_entry(const char *filename, size_t line_no, const char *funcname) {
 300:fibre-cpp/logging.hpp ****     if (get_current_log_verbosity<TOPIC>() < LEVEL) {
 301:fibre-cpp/logging.hpp ****         return {};
 302:fibre-cpp/logging.hpp ****     } else {
 303:fibre-cpp/logging.hpp ****         Logger* logger = get_logger();
 304:fibre-cpp/logging.hpp ****         return { std::cerr, LEVEL, TOPIC::get_label(), filename, line_no, funcname, logger->mutex_ 
 305:fibre-cpp/logging.hpp ****     }
 306:fibre-cpp/logging.hpp **** }
 307:fibre-cpp/logging.hpp **** 
 308:fibre-cpp/logging.hpp **** template<typename TFilepath>
 309:fibre-cpp/logging.hpp **** constexpr const char * get_file_name(TFilepath file_path) {
 310:fibre-cpp/logging.hpp ****     return (file_path /*file_path.after_last_index_of('/')*/).c_str(); // TODO: extract file name (
 311:fibre-cpp/logging.hpp **** }
 312:fibre-cpp/logging.hpp **** 
 313:fibre-cpp/logging.hpp **** }
 314:fibre-cpp/logging.hpp **** 
 315:fibre-cpp/logging.hpp **** 
 316:fibre-cpp/logging.hpp **** namespace std {
 317:fibre-cpp/logging.hpp **** static inline std::ostream& operator<<(std::ostream& stream, const sys_err&) {
 318:fibre-cpp/logging.hpp **** #if defined(_WIN32) || defined(_WIN64)
 319:fibre-cpp/logging.hpp ****     auto error_code = GetLastError();
 320:fibre-cpp/logging.hpp **** #else
 321:fibre-cpp/logging.hpp ****     auto error_code = errno;
 322:fibre-cpp/logging.hpp **** #endif
 323:fibre-cpp/logging.hpp ****     return stream << strerror(error_code) << " (" << error_code << ")";
 324:fibre-cpp/logging.hpp **** }
 325:fibre-cpp/logging.hpp **** }
 326:fibre-cpp/logging.hpp **** 
 327:fibre-cpp/logging.hpp **** 
 328:fibre-cpp/logging.hpp **** #else
 329:fibre-cpp/logging.hpp **** 
 330:fibre-cpp/logging.hpp **** #define DEFINE_LOG_TOPIC(topic)
 331:fibre-cpp/logging.hpp **** #define USE_LOG_TOPIC(topic)
 332:fibre-cpp/logging.hpp **** 
 333:fibre-cpp/logging.hpp **** struct NullStream {
 334:fibre-cpp/logging.hpp ****     template<typename T> NullStream& operator<<(T val) { return *this; }
 3110              		.loc 10 334 38 is_stmt 1 view .LVU733
 3111              	.LVL274:
 3112              		.loc 10 334 38 is_stmt 0 view .LVU734
 3113              	.LBE846:
 123:fibre-cpp/print_utils.hpp ****             stream << "\n";
 3114              		.loc 9 123 19 view .LVU735
 3115 0024 0134     		adds	r4, r4, #1
 3116              	.LVL275:
 121:fibre-cpp/print_utils.hpp ****         stream << " " << as_hex(printer.ptr_[pos]);
ARM GAS  /tmp/ccjyQa7a.s 			page 111


 3117              		.loc 9 121 5 is_stmt 1 view .LVU736
 3118              	.L154:
 121:fibre-cpp/print_utils.hpp ****         stream << " " << as_hex(printer.ptr_[pos]);
 3119              		.loc 9 121 30 discriminator 1 view .LVU737
 121:fibre-cpp/print_utils.hpp ****         stream << " " << as_hex(printer.ptr_[pos]);
 3120              		.loc 9 121 40 is_stmt 0 discriminator 1 view .LVU738
 3121 0026 7368     		ldr	r3, [r6, #4]
 121:fibre-cpp/print_utils.hpp ****         stream << " " << as_hex(printer.ptr_[pos]);
 3122              		.loc 9 121 30 discriminator 1 view .LVU739
 3123 0028 A342     		cmp	r3, r4
 3124 002a EFD8     		bhi	.L156
 3125              	.LBE845:
 127:fibre-cpp/print_utils.hpp **** 
 3126              		.loc 9 127 1 view .LVU740
 3127 002c 3846     		mov	r0, r7
 3128 002e 05B0     		add	sp, sp, #20
 3129              	.LCFI45:
 3130              		.cfi_def_cfa_offset 20
 3131              		@ sp needed
 3132 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 127:fibre-cpp/print_utils.hpp **** 
 3133              		.loc 9 127 1 view .LVU741
 3134              		.cfi_endproc
 3135              	.LFE5048:
 3136              		.cantunwind
 3137              		.fnend
 3139              		.section	.text._ZN5fibre25LegacyProtocolPacketBased16on_read_finishedENS_10ReadResultE,"ax",%progb
 3140              		.align	1
 3141              		.global	_ZN5fibre25LegacyProtocolPacketBased16on_read_finishedENS_10ReadResultE
 3142              		.syntax unified
 3143              		.thumb
 3144              		.thumb_func
 3146              	_ZN5fibre25LegacyProtocolPacketBased16on_read_finishedENS_10ReadResultE:
 3147              		.fnstart
 3148              	.LVL276:
 3149              	.LFB4605:
 391:fibre-cpp/legacy_protocol.cpp ****     TransferHandle dummy;
 3150              		.loc 1 391 69 is_stmt 1 view -0
 3151              		.cfi_startproc
 3152              		@ args = 0, pretend = 0, frame = 224
 3153              		@ frame_needed = 0, uses_anonymous_args = 0
 391:fibre-cpp/legacy_protocol.cpp ****     TransferHandle dummy;
 3154              		.loc 1 391 69 is_stmt 0 view .LVU743
 3155 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 3156              		.save {r4, r5, r6, r7, r8, r9, lr}
 3157              	.LCFI46:
 3158              		.cfi_def_cfa_offset 28
 3159              		.cfi_offset 4, -28
 3160              		.cfi_offset 5, -24
 3161              		.cfi_offset 6, -20
 3162              		.cfi_offset 7, -16
 3163              		.cfi_offset 8, -12
 3164              		.cfi_offset 9, -8
 3165              		.cfi_offset 14, -4
 3166              		.pad #236
 3167 0004 BBB0     		sub	sp, sp, #236
 3168              	.LCFI47:
ARM GAS  /tmp/ccjyQa7a.s 			page 112


 3169              		.cfi_def_cfa_offset 264
 3170 0006 0446     		mov	r4, r0
 3171 0008 02AB     		add	r3, sp, #8
 3172 000a 83E80600 		stm	r3, {r1, r2}
 392:fibre-cpp/legacy_protocol.cpp **** 
 3173              		.loc 1 392 5 is_stmt 1 view .LVU744
 394:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(D) << "RX stream closed.";
 3174              		.loc 1 394 5 view .LVU745
 394:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(D) << "RX stream closed.";
 3175              		.loc 1 394 16 is_stmt 0 view .LVU746
 3176 000e 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 394:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(D) << "RX stream closed.";
 3177              		.loc 1 394 5 view .LVU747
 3178 0012 022B     		cmp	r3, #2
 3179 0014 0AD0     		beq	.L185
 398:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(W) << "RX operation cancelled.";
 3180              		.loc 1 398 12 is_stmt 1 view .LVU748
 3181 0016 012B     		cmp	r3, #1
 3182 0018 0CD0     		beq	.L186
 402:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(W) << "RX error. Not restarting.";
 3183              		.loc 1 402 12 view .LVU749
 3184 001a 7BB9     		cbnz	r3, .L187
 411:fibre-cpp/legacy_protocol.cpp ****     //FIBRE_LOG(D) << "got packet of length " << (result.end - rx_buf_) /*<< ": " << as_hex(rx_buf)
 3185              		.loc 1 411 5 view .LVU750
 411:fibre-cpp/legacy_protocol.cpp ****     //FIBRE_LOG(D) << "got packet of length " << (result.end - rx_buf_) /*<< ": " << as_hex(rx_buf)
 3186              		.loc 1 411 34 is_stmt 0 view .LVU751
 3187 001c 00F18C05 		add	r5, r0, #140
 411:fibre-cpp/legacy_protocol.cpp ****     //FIBRE_LOG(D) << "got packet of length " << (result.end - rx_buf_) /*<< ": " << as_hex(rx_buf)
 3188              		.loc 1 411 50 view .LVU752
 3189 0020 039E     		ldr	r6, [sp, #12]
 3190              	.LVL277:
 3191              	.LBB995:
 3192              	.LBI995:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 3193              		.loc 4 23 5 is_stmt 1 view .LVU753
 3194              	.LBB996:
 3195              	.LBB997:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 3196              		.loc 4 23 65 is_stmt 0 view .LVU754
 3197 0022 0B95     		str	r5, [sp, #44]
 3198 0024 0C96     		str	r6, [sp, #48]
 3199              	.LVL278:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 3200              		.loc 4 23 65 view .LVU755
 3201              	.LBE997:
 3202              	.LBE996:
 3203              	.LBE995:
 414:fibre-cpp/legacy_protocol.cpp **** 
 3204              		.loc 1 414 5 is_stmt 1 view .LVU756
 3205              	.LBB998:
 3206              	.LBI998:
  68:fibre-cpp/include/fibre/simple_serdes.hpp ****     static_assert(is_complete<LittleEndianSerializer<T>>(), "no LittleEndianSerializer is defined f
 3207              		.loc 3 68 25 view .LVU757
 3208              	.LBB999:
 3209              	.LBI999:
  26:fibre-cpp/include/fibre/simple_serdes.hpp ****         T result = 0;
 3210              		.loc 3 26 29 view .LVU758
ARM GAS  /tmp/ccjyQa7a.s 			page 113


 3211              	.LBB1000:
  27:fibre-cpp/include/fibre/simple_serdes.hpp ****         if (BigEndian) {
 3212              		.loc 3 27 11 is_stmt 0 view .LVU759
 3213 0026 0023     		movs	r3, #0
 3214              	.LBB1001:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3215              		.loc 3 36 25 view .LVU760
 3216 0028 1A46     		mov	r2, r3
 3217 002a 16E0     		b	.L165
 3218              	.LVL279:
 3219              	.L185:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3220              		.loc 3 36 25 view .LVU761
 3221              	.LBE1001:
 3222              	.LBE1000:
 3223              	.LBE999:
 3224              	.LBE998:
 395:fibre-cpp/legacy_protocol.cpp ****         on_rx_closed(kStreamClosed);
 3225              		.loc 1 395 9 is_stmt 1 view .LVU762
 396:fibre-cpp/legacy_protocol.cpp ****         return;
 3226              		.loc 1 396 9 view .LVU763
 396:fibre-cpp/legacy_protocol.cpp ****         return;
 3227              		.loc 1 396 21 is_stmt 0 view .LVU764
 3228 002c 0221     		movs	r1, #2
 3229 002e FFF7FEFF 		bl	_ZN5fibre25LegacyProtocolPacketBased12on_rx_closedENS_12StreamStatusE
 3230              	.LVL280:
 397:fibre-cpp/legacy_protocol.cpp ****     } else if (result.status == kStreamCancelled) {
 3231              		.loc 1 397 9 is_stmt 1 view .LVU765
 3232 0032 0BE1     		b	.L157
 3233              	.LVL281:
 3234              	.L186:
 399:fibre-cpp/legacy_protocol.cpp ****         on_rx_closed(kStreamCancelled);
 3235              		.loc 1 399 9 view .LVU766
 400:fibre-cpp/legacy_protocol.cpp ****         return;
 3236              		.loc 1 400 9 view .LVU767
 400:fibre-cpp/legacy_protocol.cpp ****         return;
 3237              		.loc 1 400 21 is_stmt 0 view .LVU768
 3238 0034 0121     		movs	r1, #1
 3239 0036 FFF7FEFF 		bl	_ZN5fibre25LegacyProtocolPacketBased12on_rx_closedENS_12StreamStatusE
 3240              	.LVL282:
 401:fibre-cpp/legacy_protocol.cpp ****     } else if (result.status != kStreamOk) {
 3241              		.loc 1 401 9 is_stmt 1 view .LVU769
 3242 003a 07E1     		b	.L157
 3243              	.LVL283:
 3244              	.L187:
 403:fibre-cpp/legacy_protocol.cpp ****         // TODO: we should distinguish between permanent and temporary errors.
 3245              		.loc 1 403 9 view .LVU770
 407:fibre-cpp/legacy_protocol.cpp ****         return;
 3246              		.loc 1 407 9 view .LVU771
 407:fibre-cpp/legacy_protocol.cpp ****         return;
 3247              		.loc 1 407 21 is_stmt 0 view .LVU772
 3248 003c 0321     		movs	r1, #3
 3249 003e FFF7FEFF 		bl	_ZN5fibre25LegacyProtocolPacketBased12on_rx_closedENS_12StreamStatusE
 3250              	.LVL284:
 408:fibre-cpp/legacy_protocol.cpp ****     }
 3251              		.loc 1 408 9 is_stmt 1 view .LVU773
 3252 0042 03E1     		b	.L157
ARM GAS  /tmp/ccjyQa7a.s 			page 114


 3253              	.LVL285:
 3254              	.L163:
 3255              	.LBB1033:
 3256              	.LBB1032:
 3257              	.LBB1031:
 3258              	.LBB1011:
 3259              	.LBB1002:
  39:fibre-cpp/include/fibre/simple_serdes.hpp ****                 result |= static_cast<T>(byte) << (i << 3);
 3260              		.loc 3 39 25 is_stmt 0 view .LVU774
 3261 0044 0B99     		ldr	r1, [sp, #44]
 3262 0046 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 3263              	.LVL286:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3264              		.loc 3 40 54 view .LVU775
 3265 004a 4FEAC20C 		lsl	ip, r2, #3
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3266              		.loc 3 40 48 view .LVU776
 3267 004e 00FA0CF0 		lsl	r0, r0, ip
 3268              	.LVL287:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3269              		.loc 3 40 24 view .LVU777
 3270 0052 0343     		orrs	r3, r3, r0
 3271              	.LVL288:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3272              		.loc 3 40 24 view .LVU778
 3273 0054 9BB2     		uxth	r3, r3
 3274              	.LVL289:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3275              		.loc 3 40 24 view .LVU779
 3276              	.LBE1002:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3277              		.loc 3 36 13 is_stmt 1 view .LVU780
 3278 0056 0132     		adds	r2, r2, #1
 3279              	.LVL290:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3280              		.loc 3 36 13 is_stmt 0 view .LVU781
 3281 0058 0B91     		str	r1, [sp, #44]
 3282              	.LVL291:
 3283              	.L165:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3284              		.loc 3 36 34 is_stmt 1 view .LVU782
 3285 005a 012A     		cmp	r2, #1
 3286 005c 0AD8     		bhi	.L162
 3287              	.LBB1010:
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
 3288              		.loc 3 37 17 is_stmt 0 view .LVU783
 3289 005e 002E     		cmp	r6, #0
 3290 0060 F0D0     		beq	.L163
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
 3291              		.loc 3 37 37 view .LVU784
 3292 0062 0B99     		ldr	r1, [sp, #44]
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
 3293              		.loc 3 37 25 view .LVU785
 3294 0064 8E42     		cmp	r6, r1
 3295 0066 EDD8     		bhi	.L163
 3296              	.LVL292:
 3297              	.LBB1003:
ARM GAS  /tmp/ccjyQa7a.s 			page 115


 3298              	.LBI1003:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3299              		.loc 5 692 17 is_stmt 1 view .LVU786
 3300              	.LBB1004:
 3301              	.LBB1005:
 3302              	.LBI1005:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3303              		.loc 5 602 17 view .LVU787
 3304              	.LBB1006:
 3305              	.LBI1006:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 3306              		.loc 5 302 7 view .LVU788
 3307              	.LBB1007:
 3308              	.LBI1007:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3309              		.loc 5 110 7 view .LVU789
 3310              	.LBB1008:
 3311              	.LBB1009:
 3312              	.LBI1009:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3313              		.loc 5 199 14 view .LVU790
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3314              		.loc 5 199 14 is_stmt 0 view .LVU791
 3315              	.LBE1009:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3316              		.loc 5 110 7 view .LVU792
 3317 0068 0023     		movs	r3, #0
 3318              	.LVL293:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3319              		.loc 5 110 7 view .LVU793
 3320 006a 8DF8CA30 		strb	r3, [sp, #202]
 3321              	.LVL294:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3322              		.loc 5 110 7 view .LVU794
 3323              	.LBE1008:
 3324              	.LBE1007:
 3325              	.LBE1006:
 3326              	.LBE1005:
 3327              	.LBE1004:
 3328              	.LBE1003:
  38:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = **begin;
 3329              		.loc 3 38 33 view .LVU795
 3330 006e 329B     		ldr	r3, [sp, #200]
 3331 0070 3393     		str	r3, [sp, #204]
 3332 0072 06E0     		b	.L164
 3333              	.LVL295:
 3334              	.L162:
  38:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = **begin;
 3335              		.loc 3 38 33 view .LVU796
 3336              	.LBE1010:
 3337              	.LBE1011:
 3338              	.LBB1012:
 3339              	.LBI1012:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 3340              		.loc 5 700 2 is_stmt 1 view .LVU797
 3341              	.LBB1013:
 3342              	.LBB1014:
ARM GAS  /tmp/ccjyQa7a.s 			page 116


 3343              	.LBB1015:
 3344              	.LBI1015:
 3345              		.loc 6 76 5 view .LVU798
 3346              		.loc 6 76 5 is_stmt 0 view .LVU799
 3347              	.LBE1015:
 3348              	.LBB1016:
 3349              	.LBI1016:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 3350              		.loc 5 607 28 is_stmt 1 view .LVU800
 3351              	.LBB1017:
 3352              	.LBB1018:
 3353              	.LBB1019:
 3354              	.LBI1019:
 3355              		.loc 6 76 5 view .LVU801
 3356              		.loc 6 76 5 is_stmt 0 view .LVU802
 3357              	.LBE1019:
 3358              	.LBB1020:
 3359              	.LBI1020:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3360              		.loc 5 300 42 is_stmt 1 view .LVU803
 3361              	.LBB1021:
 3362              	.LBB1022:
 3363              	.LBB1023:
 3364              	.LBI1023:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 3365              		.loc 5 115 2 view .LVU804
 3366              	.LBB1024:
 3367              	.LBB1025:
 3368              	.LBB1026:
 3369              	.LBI1026:
 3370              		.loc 6 76 5 view .LVU805
 3371              		.loc 6 76 5 is_stmt 0 view .LVU806
 3372              	.LBE1026:
 3373              	.LBB1027:
 3374              	.LBI1027:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 3375              		.loc 5 203 6 is_stmt 1 view .LVU807
 3376              	.LBB1028:
 3377              	.LBB1029:
 3378              	.LBB1030:
 3379              	.LBI1030:
 3380              		.loc 6 76 5 view .LVU808
 3381              		.loc 6 76 5 is_stmt 0 view .LVU809
 3382              	.LBE1030:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 3383              		.loc 5 204 47 view .LVU810
 3384 0074 ADF8C430 		strh	r3, [sp, #196]	@ movhi
 3385              	.LVL296:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 3386              		.loc 5 204 47 view .LVU811
 3387              	.LBE1029:
 3388              	.LBE1028:
 3389              	.LBE1027:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 3390              		.loc 5 117 19 view .LVU812
 3391 0078 0123     		movs	r3, #1
 3392              	.LVL297:
ARM GAS  /tmp/ccjyQa7a.s 			page 117


 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 3393              		.loc 5 117 19 view .LVU813
 3394 007a 8DF8C630 		strb	r3, [sp, #198]
 3395              	.LVL298:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 3396              		.loc 5 117 19 view .LVU814
 3397              	.LBE1025:
 3398              	.LBE1024:
 3399              	.LBE1023:
 3400              	.LBE1022:
 3401              	.LBE1021:
 3402              	.LBE1020:
 3403              	.LBE1018:
 3404              	.LBE1017:
 3405              	.LBE1016:
 3406              	.LBE1014:
 3407              	.LBE1013:
 3408              	.LBE1012:
  43:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
 3409              		.loc 3 43 16 view .LVU815
 3410 007e 319B     		ldr	r3, [sp, #196]
 3411 0080 3393     		str	r3, [sp, #204]
 3412              	.LVL299:
 3413              	.L164:
  43:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
 3414              		.loc 3 43 16 view .LVU816
 3415 0082 339B     		ldr	r3, [sp, #204]
 3416 0084 2C93     		str	r3, [sp, #176]
 3417              	.LVL300:
  43:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
 3418              		.loc 3 43 16 view .LVU817
 3419 0086 2B93     		str	r3, [sp, #172]
 3420              	.LVL301:
  43:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
 3421              		.loc 3 43 16 view .LVU818
 3422              	.LBE1031:
 3423              	.LBE1032:
 3424              	.LBE1033:
 414:fibre-cpp/legacy_protocol.cpp **** 
 3425              		.loc 1 414 63 view .LVU819
 3426 0088 0A93     		str	r3, [sp, #40]
 416:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(W) << "packet too short";
 3427              		.loc 1 416 5 is_stmt 1 view .LVU820
 3428              	.LVL302:
 3429              	.LBB1034:
 3430              	.LBB1035:
 3431              	.LBI1035:
 3432              		.loc 5 916 22 view .LVU821
 3433              	.LBB1036:
 3434              	.LBI1036:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 3435              		.loc 5 433 22 view .LVU822
 3436              	.LBB1037:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3437              		.loc 5 434 58 is_stmt 0 view .LVU823
 3438 008a 9DF82A30 		ldrb	r3, [sp, #42]	@ zero_extendqisi2
 3439              	.LVL303:
ARM GAS  /tmp/ccjyQa7a.s 			page 118


 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3440              		.loc 5 434 58 view .LVU824
 3441              	.LBE1037:
 3442              	.LBE1036:
 3443              	.LBE1035:
 416:fibre-cpp/legacy_protocol.cpp ****         FIBRE_LOG(W) << "packet too short";
 3444              		.loc 1 416 5 view .LVU825
 3445 008e 002B     		cmp	r3, #0
 3446 0090 00F0CC80 		beq	.L166
 3447              	.LBE1034:
 419:fibre-cpp/legacy_protocol.cpp **** 
 3448              		.loc 1 419 12 is_stmt 1 view .LVU826
 3449              	.LBB1143:
 3450              	.LBB1038:
 419:fibre-cpp/legacy_protocol.cpp **** 
 3451              		.loc 1 419 16 is_stmt 0 view .LVU827
 3452 0094 BDF82870 		ldrh	r7, [sp, #40]
 419:fibre-cpp/legacy_protocol.cpp **** 
 3453              		.loc 1 419 24 view .LVU828
 3454 0098 BDF92830 		ldrsh	r3, [sp, #40]
 419:fibre-cpp/legacy_protocol.cpp **** 
 3455              		.loc 1 419 12 view .LVU829
 3456 009c 002B     		cmp	r3, #0
 3457 009e C0F2C580 		blt	.L166
 3458              	.LBB1039:
 449:fibre-cpp/legacy_protocol.cpp ****             FIBRE_LOG(W) << "packet too short";
 3459              		.loc 1 449 9 is_stmt 1 view .LVU830
 3460              	.LVL304:
 3461              	.LBB1040:
 3462              	.LBI1040:
  74:fibre-cpp/include/fibre/bufptr.hpp ****         return end_ - begin_;
 3463              		.loc 4 74 12 view .LVU831
 3464              	.LBB1041:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 3465              		.loc 4 75 16 is_stmt 0 view .LVU832
 3466 00a2 DDF830C0 		ldr	ip, [sp, #48]
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 3467              		.loc 4 75 23 view .LVU833
 3468 00a6 0B9B     		ldr	r3, [sp, #44]
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 3469              		.loc 4 75 21 view .LVU834
 3470 00a8 ACEB0303 		sub	r3, ip, r3
 3471              	.LVL305:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 3472              		.loc 4 75 21 view .LVU835
 3473              	.LBE1041:
 3474              	.LBE1040:
 449:fibre-cpp/legacy_protocol.cpp ****             FIBRE_LOG(W) << "packet too short";
 3475              		.loc 1 449 9 view .LVU836
 3476 00ac 052B     		cmp	r3, #5
 3477 00ae 02D9     		bls	.L188
 3478              	.LBB1042:
 3479              	.LBB1043:
 3480              	.LBB1044:
  27:fibre-cpp/include/fibre/simple_serdes.hpp ****         if (BigEndian) {
 3481              		.loc 3 27 11 view .LVU837
 3482 00b0 0023     		movs	r3, #0
ARM GAS  /tmp/ccjyQa7a.s 			page 119


 3483              	.LBB1045:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3484              		.loc 3 36 25 view .LVU838
 3485 00b2 1A46     		mov	r2, r3
 3486 00b4 1BE0     		b	.L167
 3487              	.L188:
 3488              	.LBE1045:
 3489              	.LBE1044:
 3490              	.LBE1043:
 3491              	.LBE1042:
 450:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(rx_buf_, &dummy, MEMBER_CB(this, on_read_finished));
 3492              		.loc 1 450 13 is_stmt 1 view .LVU839
 451:fibre-cpp/legacy_protocol.cpp ****             return;
 3493              		.loc 1 451 13 view .LVU840
 3494 00b6 2668     		ldr	r6, [r4]
 451:fibre-cpp/legacy_protocol.cpp ****             return;
 3495              		.loc 1 451 87 is_stmt 0 view .LVU841
 3496 00b8 3368     		ldr	r3, [r6]
 3497 00ba 1F68     		ldr	r7, [r3]
 3498              	.LVL306:
 3499              	.LBB1077:
 3500              	.LBI1077:
  28:fibre-cpp/include/fibre/bufptr.hpp **** 
 3501              		.loc 4 28 5 is_stmt 1 view .LVU842
 3502              	.LBB1078:
 3503              	.LBB1079:
 3504              	.LBI1079:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 3505              		.loc 4 21 5 view .LVU843
 3506              	.LBB1080:
 3507              	.LBB1081:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 3508              		.loc 4 21 83 is_stmt 0 view .LVU844
 3509 00bc 0E95     		str	r5, [sp, #56]
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 3510              		.loc 4 21 75 view .LVU845
 3511 00be 04F58673 		add	r3, r4, #268
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 3512              		.loc 4 21 83 view .LVU846
 3513 00c2 0F93     		str	r3, [sp, #60]
 3514              	.LVL307:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 3515              		.loc 4 21 83 view .LVU847
 3516              	.LBE1081:
 3517              	.LBE1080:
 3518              	.LBE1079:
 3519              	.LBE1078:
 3520              	.LBE1077:
 451:fibre-cpp/legacy_protocol.cpp ****             return;
 3521              		.loc 1 451 54 view .LVU848
 3522 00c4 2146     		mov	r1, r4
 3523 00c6 10A8     		add	r0, sp, #64
 3524 00c8 FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read
 3525              	.LVL308:
 451:fibre-cpp/legacy_protocol.cpp ****             return;
 3526              		.loc 1 451 36 view .LVU849
 3527 00cc 10AB     		add	r3, sp, #64
ARM GAS  /tmp/ccjyQa7a.s 			page 120


 3528 00ce 0DAA     		add	r2, sp, #52
 3529 00d0 0EA9     		add	r1, sp, #56
 3530 00d2 3046     		mov	r0, r6
 3531 00d4 B847     		blx	r7
 3532              	.LVL309:
 452:fibre-cpp/legacy_protocol.cpp ****         }
 3533              		.loc 1 452 13 is_stmt 1 view .LVU850
 3534 00d6 B9E0     		b	.L157
 3535              	.LVL310:
 3536              	.L170:
 3537              	.LBB1082:
 3538              	.LBB1076:
 3539              	.LBB1075:
 3540              	.LBB1055:
 3541              	.LBB1046:
  39:fibre-cpp/include/fibre/simple_serdes.hpp ****                 result |= static_cast<T>(byte) << (i << 3);
 3542              		.loc 3 39 25 is_stmt 0 view .LVU851
 3543 00d8 0B99     		ldr	r1, [sp, #44]
 3544 00da 11F8010B 		ldrb	r0, [r1], #1	@ zero_extendqisi2
 3545              	.LVL311:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3546              		.loc 3 40 54 view .LVU852
 3547 00de 4FEAC20E 		lsl	lr, r2, #3
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3548              		.loc 3 40 48 view .LVU853
 3549 00e2 00FA0EF0 		lsl	r0, r0, lr
 3550              	.LVL312:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3551              		.loc 3 40 24 view .LVU854
 3552 00e6 0343     		orrs	r3, r3, r0
 3553              	.LVL313:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3554              		.loc 3 40 24 view .LVU855
 3555 00e8 9BB2     		uxth	r3, r3
 3556              	.LVL314:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3557              		.loc 3 40 24 view .LVU856
 3558              	.LBE1046:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3559              		.loc 3 36 13 is_stmt 1 view .LVU857
 3560 00ea 0132     		adds	r2, r2, #1
 3561              	.LVL315:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3562              		.loc 3 36 13 is_stmt 0 view .LVU858
 3563 00ec 0B91     		str	r1, [sp, #44]
 3564              	.LVL316:
 3565              	.L167:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3566              		.loc 3 36 34 is_stmt 1 view .LVU859
 3567 00ee 012A     		cmp	r2, #1
 3568 00f0 0BD8     		bhi	.L169
 3569              	.LBB1054:
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
 3570              		.loc 3 37 17 is_stmt 0 view .LVU860
 3571 00f2 BCF1000F 		cmp	ip, #0
 3572 00f6 EFD0     		beq	.L170
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
ARM GAS  /tmp/ccjyQa7a.s 			page 121


 3573              		.loc 3 37 37 view .LVU861
 3574 00f8 0B99     		ldr	r1, [sp, #44]
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
 3575              		.loc 3 37 25 view .LVU862
 3576 00fa 8C45     		cmp	ip, r1
 3577 00fc ECD8     		bhi	.L170
 3578              	.LVL317:
 3579              	.LBB1047:
 3580              	.LBI1047:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3581              		.loc 5 692 17 is_stmt 1 view .LVU863
 3582              	.LBB1048:
 3583              	.LBB1049:
 3584              	.LBI1049:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3585              		.loc 5 602 17 view .LVU864
 3586              	.LBB1050:
 3587              	.LBI1050:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 3588              		.loc 5 302 7 view .LVU865
 3589              	.LBB1051:
 3590              	.LBI1051:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3591              		.loc 5 110 7 view .LVU866
 3592              	.LBB1052:
 3593              	.LBB1053:
 3594              	.LBI1053:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3595              		.loc 5 199 14 view .LVU867
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3596              		.loc 5 199 14 is_stmt 0 view .LVU868
 3597              	.LBE1053:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3598              		.loc 5 110 7 view .LVU869
 3599 00fe 0023     		movs	r3, #0
 3600              	.LVL318:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3601              		.loc 5 110 7 view .LVU870
 3602 0100 8DF8D630 		strb	r3, [sp, #214]
 3603              	.LVL319:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3604              		.loc 5 110 7 view .LVU871
 3605              	.LBE1052:
 3606              	.LBE1051:
 3607              	.LBE1050:
 3608              	.LBE1049:
 3609              	.LBE1048:
 3610              	.LBE1047:
  38:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = **begin;
 3611              		.loc 3 38 33 view .LVU872
 3612 0104 359B     		ldr	r3, [sp, #212]
 3613 0106 3693     		str	r3, [sp, #216]
 3614 0108 06E0     		b	.L171
 3615              	.LVL320:
 3616              	.L169:
  38:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = **begin;
 3617              		.loc 3 38 33 view .LVU873
ARM GAS  /tmp/ccjyQa7a.s 			page 122


 3618              	.LBE1054:
 3619              	.LBE1055:
 3620              	.LBB1056:
 3621              	.LBI1056:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 3622              		.loc 5 700 2 is_stmt 1 view .LVU874
 3623              	.LBB1057:
 3624              	.LBB1058:
 3625              	.LBB1059:
 3626              	.LBI1059:
 3627              		.loc 6 76 5 view .LVU875
 3628              		.loc 6 76 5 is_stmt 0 view .LVU876
 3629              	.LBE1059:
 3630              	.LBB1060:
 3631              	.LBI1060:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 3632              		.loc 5 607 28 is_stmt 1 view .LVU877
 3633              	.LBB1061:
 3634              	.LBB1062:
 3635              	.LBB1063:
 3636              	.LBI1063:
 3637              		.loc 6 76 5 view .LVU878
 3638              		.loc 6 76 5 is_stmt 0 view .LVU879
 3639              	.LBE1063:
 3640              	.LBB1064:
 3641              	.LBI1064:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3642              		.loc 5 300 42 is_stmt 1 view .LVU880
 3643              	.LBB1065:
 3644              	.LBB1066:
 3645              	.LBB1067:
 3646              	.LBI1067:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 3647              		.loc 5 115 2 view .LVU881
 3648              	.LBB1068:
 3649              	.LBB1069:
 3650              	.LBB1070:
 3651              	.LBI1070:
 3652              		.loc 6 76 5 view .LVU882
 3653              		.loc 6 76 5 is_stmt 0 view .LVU883
 3654              	.LBE1070:
 3655              	.LBB1071:
 3656              	.LBI1071:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 3657              		.loc 5 203 6 is_stmt 1 view .LVU884
 3658              	.LBB1072:
 3659              	.LBB1073:
 3660              	.LBB1074:
 3661              	.LBI1074:
 3662              		.loc 6 76 5 view .LVU885
 3663              		.loc 6 76 5 is_stmt 0 view .LVU886
 3664              	.LBE1074:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 3665              		.loc 5 204 47 view .LVU887
 3666 010a ADF8D030 		strh	r3, [sp, #208]	@ movhi
 3667              	.LVL321:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
ARM GAS  /tmp/ccjyQa7a.s 			page 123


 3668              		.loc 5 204 47 view .LVU888
 3669              	.LBE1073:
 3670              	.LBE1072:
 3671              	.LBE1071:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 3672              		.loc 5 117 19 view .LVU889
 3673 010e 0123     		movs	r3, #1
 3674              	.LVL322:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 3675              		.loc 5 117 19 view .LVU890
 3676 0110 8DF8D230 		strb	r3, [sp, #210]
 3677              	.LVL323:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 3678              		.loc 5 117 19 view .LVU891
 3679              	.LBE1069:
 3680              	.LBE1068:
 3681              	.LBE1067:
 3682              	.LBE1066:
 3683              	.LBE1065:
 3684              	.LBE1064:
 3685              	.LBE1062:
 3686              	.LBE1061:
 3687              	.LBE1060:
 3688              	.LBE1058:
 3689              	.LBE1057:
 3690              	.LBE1056:
  43:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
 3691              		.loc 3 43 16 view .LVU892
 3692 0114 349B     		ldr	r3, [sp, #208]
 3693 0116 3693     		str	r3, [sp, #216]
 3694              	.LVL324:
 3695              	.L171:
  43:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
 3696              		.loc 3 43 16 view .LVU893
 3697 0118 369B     		ldr	r3, [sp, #216]
 3698 011a 2E93     		str	r3, [sp, #184]
 3699              	.LVL325:
  43:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
 3700              		.loc 3 43 16 view .LVU894
 3701 011c 2D93     		str	r3, [sp, #180]
 3702              	.LBE1075:
 3703              	.LBE1076:
 3704              	.LBE1082:
 458:fibre-cpp/legacy_protocol.cpp ****         bool expect_response = endpoint_id & 0x8000;
 3705              		.loc 1 458 58 view .LVU895
 3706 011e 1293     		str	r3, [sp, #72]
 3707 0120 BDF84800 		ldrh	r0, [sp, #72]
 3708              	.LVL326:
 459:fibre-cpp/legacy_protocol.cpp ****         endpoint_id &= 0x7fff;
 3709              		.loc 1 459 9 is_stmt 1 view .LVU896
 459:fibre-cpp/legacy_protocol.cpp ****         endpoint_id &= 0x7fff;
 3710              		.loc 1 459 44 is_stmt 0 view .LVU897
 3711 0124 BDF94880 		ldrsh	r8, [sp, #72]
 3712              	.LVL327:
 460:fibre-cpp/legacy_protocol.cpp **** 
 3713              		.loc 1 460 9 is_stmt 1 view .LVU898
 460:fibre-cpp/legacy_protocol.cpp **** 
ARM GAS  /tmp/ccjyQa7a.s 			page 124


 3714              		.loc 1 460 21 is_stmt 0 view .LVU899
 3715 0128 C0F30E00 		ubfx	r0, r0, #0, #15
 3716              	.LVL328:
 462:fibre-cpp/legacy_protocol.cpp ****             // The operation expects a response but the output channel is still
 3717              		.loc 1 462 9 is_stmt 1 view .LVU900
 3718 012c B8F1000F 		cmp	r8, #0
 3719 0130 32DB     		blt	.L189
 3720              	.L172:
 473:fibre-cpp/legacy_protocol.cpp ****         uint16_t actual_trailer = *(rx_buf.end() - 2) | (*(rx_buf.end() - 1) << 8);
 3721              		.loc 1 473 9 view .LVU901
 473:fibre-cpp/legacy_protocol.cpp ****         uint16_t actual_trailer = *(rx_buf.end() - 2) | (*(rx_buf.end() - 1) << 8);
 3722              		.loc 1 473 49 is_stmt 0 view .LVU902
 3723 0132 0028     		cmp	r0, #0
 3724 0134 37D0     		beq	.L182
 473:fibre-cpp/legacy_protocol.cpp ****         uint16_t actual_trailer = *(rx_buf.end() - 2) | (*(rx_buf.end() - 1) << 8);
 3725              		.loc 1 473 49 discriminator 1 view .LVU903
 3726 0136 5D4B     		ldr	r3, .L191
 3727 0138 1988     		ldrh	r1, [r3]
 3728              	.L173:
 3729              	.LVL329:
 474:fibre-cpp/legacy_protocol.cpp ****         if (expected_trailer != actual_trailer) {
 3730              		.loc 1 474 9 is_stmt 1 discriminator 4 view .LVU904
 474:fibre-cpp/legacy_protocol.cpp ****         if (expected_trailer != actual_trailer) {
 3731              		.loc 1 474 47 is_stmt 0 discriminator 4 view .LVU905
 3732 013a 0C9E     		ldr	r6, [sp, #48]
 474:fibre-cpp/legacy_protocol.cpp ****         if (expected_trailer != actual_trailer) {
 3733              		.loc 1 474 35 discriminator 4 view .LVU906
 3734 013c 16F8029C 		ldrb	r9, [r6, #-2]	@ zero_extendqisi2
 474:fibre-cpp/legacy_protocol.cpp ****         if (expected_trailer != actual_trailer) {
 3735              		.loc 1 474 58 discriminator 4 view .LVU907
 3736 0140 16F8013C 		ldrb	r3, [r6, #-1]	@ zero_extendqisi2
 474:fibre-cpp/legacy_protocol.cpp ****         if (expected_trailer != actual_trailer) {
 3737              		.loc 1 474 82 discriminator 4 view .LVU908
 3738 0144 49EA0329 		orr	r9, r9, r3, lsl #8
 3739              	.LVL330:
 475:fibre-cpp/legacy_protocol.cpp ****             FIBRE_LOG(D) << "trailer mismatch for endpoint " << endpoint_id << ": expected " << as_
 3740              		.loc 1 475 9 is_stmt 1 discriminator 4 view .LVU909
 3741 0148 4945     		cmp	r1, r9
 3742 014a 2ED0     		beq	.L183
 476:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(rx_buf_, &dummy, MEMBER_CB(this, on_read_finished));
 3743              		.loc 1 476 13 view .LVU910
 476:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(rx_buf_, &dummy, MEMBER_CB(this, on_read_finished));
 3744              		.loc 1 476 120 is_stmt 0 view .LVU911
 3745 014c 13AE     		add	r6, sp, #76
 3746 014e 0122     		movs	r2, #1
 3747 0150 3046     		mov	r0, r6
 3748              	.LVL331:
 476:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(rx_buf_, &dummy, MEMBER_CB(this, on_read_finished));
 3749              		.loc 1 476 120 view .LVU912
 3750 0152 FFF7FEFF 		bl	_ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b
 3751              	.LVL332:
 476:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(rx_buf_, &dummy, MEMBER_CB(this, on_read_finished));
 3752              		.loc 1 476 120 view .LVU913
 3753 0156 07AB     		add	r3, sp, #28
 3754 0158 96E80700 		ldm	r6, {r0, r1, r2}
 3755 015c 03C3     		stmia	r3!, {r0, r1}
 3756 015e 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  /tmp/ccjyQa7a.s 			page 125


 3757              	.LBB1083:
 3758              	.LBI1083:
 3759              		.loc 10 334 38 is_stmt 1 view .LVU914
 3760              	.LVL333:
 3761              		.loc 10 334 38 is_stmt 0 view .LVU915
 3762              	.LBE1083:
 476:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(rx_buf_, &dummy, MEMBER_CB(this, on_read_finished));
 3763              		.loc 1 476 158 view .LVU916
 3764 0160 16AE     		add	r6, sp, #88
 3765 0162 0122     		movs	r2, #1
 3766 0164 4946     		mov	r1, r9
 3767 0166 3046     		mov	r0, r6
 3768 0168 FFF7FEFF 		bl	_ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b
 3769              	.LVL334:
 476:fibre-cpp/legacy_protocol.cpp ****             rx_channel_->start_read(rx_buf_, &dummy, MEMBER_CB(this, on_read_finished));
 3770              		.loc 1 476 158 view .LVU917
 3771 016c 07AB     		add	r3, sp, #28
 3772 016e 96E80700 		ldm	r6, {r0, r1, r2}
 3773 0172 03C3     		stmia	r3!, {r0, r1}
 3774 0174 1A80     		strh	r2, [r3]	@ movhi
 3775              	.LBB1084:
 3776              	.LBI1084:
 3777              		.loc 10 334 38 is_stmt 1 view .LVU918
 3778              	.LVL335:
 3779              		.loc 10 334 38 is_stmt 0 view .LVU919
 3780              	.LBE1084:
 477:fibre-cpp/legacy_protocol.cpp ****             return;
 3781              		.loc 1 477 13 is_stmt 1 view .LVU920
 3782 0176 2668     		ldr	r6, [r4]
 477:fibre-cpp/legacy_protocol.cpp ****             return;
 3783              		.loc 1 477 87 is_stmt 0 view .LVU921
 3784 0178 3368     		ldr	r3, [r6]
 3785 017a 1F68     		ldr	r7, [r3]
 3786              	.LVL336:
 3787              	.LBB1085:
 3788              	.LBI1085:
  28:fibre-cpp/include/fibre/bufptr.hpp **** 
 3789              		.loc 4 28 5 is_stmt 1 view .LVU922
 3790              	.LBB1086:
 3791              	.LBB1087:
 3792              	.LBI1087:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 3793              		.loc 4 21 5 view .LVU923
 3794              	.LBB1088:
 3795              	.LBB1089:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 3796              		.loc 4 21 83 is_stmt 0 view .LVU924
 3797 017c 1995     		str	r5, [sp, #100]
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 3798              		.loc 4 21 75 view .LVU925
 3799 017e 04F58673 		add	r3, r4, #268
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 3800              		.loc 4 21 83 view .LVU926
 3801 0182 1A93     		str	r3, [sp, #104]
 3802              	.LVL337:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 3803              		.loc 4 21 83 view .LVU927
ARM GAS  /tmp/ccjyQa7a.s 			page 126


 3804              	.LBE1089:
 3805              	.LBE1088:
 3806              	.LBE1087:
 3807              	.LBE1086:
 3808              	.LBE1085:
 477:fibre-cpp/legacy_protocol.cpp ****             return;
 3809              		.loc 1 477 54 view .LVU928
 3810 0184 2146     		mov	r1, r4
 3811 0186 1BA8     		add	r0, sp, #108
 3812 0188 FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read
 3813              	.LVL338:
 477:fibre-cpp/legacy_protocol.cpp ****             return;
 3814              		.loc 1 477 36 view .LVU929
 3815 018c 1BAB     		add	r3, sp, #108
 3816 018e 0DAA     		add	r2, sp, #52
 3817 0190 19A9     		add	r1, sp, #100
 3818 0192 3046     		mov	r0, r6
 3819 0194 B847     		blx	r7
 3820              	.LVL339:
 478:fibre-cpp/legacy_protocol.cpp ****         }
 3821              		.loc 1 478 13 is_stmt 1 view .LVU930
 3822 0196 59E0     		b	.L157
 3823              	.LVL340:
 3824              	.L189:
 462:fibre-cpp/legacy_protocol.cpp ****             // The operation expects a response but the output channel is still
 3825              		.loc 1 462 32 is_stmt 0 discriminator 1 view .LVU931
 3826 0198 D4F80C31 		ldr	r3, [r4, #268]
 462:fibre-cpp/legacy_protocol.cpp ****             // The operation expects a response but the output channel is still
 3827              		.loc 1 462 29 discriminator 1 view .LVU932
 3828 019c 002B     		cmp	r3, #0
 3829 019e C8D0     		beq	.L172
 466:fibre-cpp/legacy_protocol.cpp ****             return;
 3830              		.loc 1 466 13 is_stmt 1 view .LVU933
 466:fibre-cpp/legacy_protocol.cpp ****             return;
 3831              		.loc 1 466 21 is_stmt 0 view .LVU934
 3832 01a0 C4F81061 		str	r6, [r4, #272]
 467:fibre-cpp/legacy_protocol.cpp ****         }
 3833              		.loc 1 467 13 is_stmt 1 view .LVU935
 3834 01a4 52E0     		b	.L157
 3835              	.L182:
 473:fibre-cpp/legacy_protocol.cpp ****         uint16_t actual_trailer = *(rx_buf.end() - 2) | (*(rx_buf.end() - 1) << 8);
 3836              		.loc 1 473 49 is_stmt 0 view .LVU936
 3837 01a6 0121     		movs	r1, #1
 3838 01a8 C7E7     		b	.L173
 3839              	.LVL341:
 3840              	.L183:
 3841              	.LBB1090:
 3842              	.LBB1091:
 3843              	.LBB1092:
  27:fibre-cpp/include/fibre/simple_serdes.hpp ****         if (BigEndian) {
 3844              		.loc 3 27 11 view .LVU937
 3845 01aa 0023     		movs	r3, #0
 3846              	.LBB1093:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3847              		.loc 3 36 25 view .LVU938
 3848 01ac 1A46     		mov	r2, r3
 3849 01ae 0BE0     		b	.L174
ARM GAS  /tmp/ccjyQa7a.s 			page 127


 3850              	.LVL342:
 3851              	.L176:
 3852              	.LBB1094:
  39:fibre-cpp/include/fibre/simple_serdes.hpp ****                 result |= static_cast<T>(byte) << (i << 3);
 3853              		.loc 3 39 25 view .LVU939
 3854 01b0 0B99     		ldr	r1, [sp, #44]
 3855 01b2 11F801CB 		ldrb	ip, [r1], #1	@ zero_extendqisi2
 3856              	.LVL343:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3857              		.loc 3 40 54 view .LVU940
 3858 01b6 4FEAC20E 		lsl	lr, r2, #3
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3859              		.loc 3 40 48 view .LVU941
 3860 01ba 0CFA0EFC 		lsl	ip, ip, lr
 3861              	.LVL344:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3862              		.loc 3 40 24 view .LVU942
 3863 01be 4CEA0303 		orr	r3, ip, r3
 3864              	.LVL345:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3865              		.loc 3 40 24 view .LVU943
 3866 01c2 9BB2     		uxth	r3, r3
 3867              	.LVL346:
  40:fibre-cpp/include/fibre/simple_serdes.hpp ****             }
 3868              		.loc 3 40 24 view .LVU944
 3869              	.LBE1094:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3870              		.loc 3 36 13 is_stmt 1 view .LVU945
 3871 01c4 0132     		adds	r2, r2, #1
 3872              	.LVL347:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3873              		.loc 3 36 13 is_stmt 0 view .LVU946
 3874 01c6 0B91     		str	r1, [sp, #44]
 3875              	.LVL348:
 3876              	.L174:
  36:fibre-cpp/include/fibre/simple_serdes.hpp ****                 if (end && !(*begin < end))
 3877              		.loc 3 36 34 is_stmt 1 view .LVU947
 3878 01c8 012A     		cmp	r2, #1
 3879 01ca 0AD8     		bhi	.L175
 3880              	.LBB1102:
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
 3881              		.loc 3 37 17 is_stmt 0 view .LVU948
 3882 01cc 002E     		cmp	r6, #0
 3883 01ce EFD0     		beq	.L176
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
 3884              		.loc 3 37 37 view .LVU949
 3885 01d0 0B99     		ldr	r1, [sp, #44]
  37:fibre-cpp/include/fibre/simple_serdes.hpp ****                     return std::nullopt;
 3886              		.loc 3 37 25 view .LVU950
 3887 01d2 8E42     		cmp	r6, r1
 3888 01d4 ECD8     		bhi	.L176
 3889              	.LVL349:
 3890              	.LBB1095:
 3891              	.LBI1095:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3892              		.loc 5 692 17 is_stmt 1 view .LVU951
 3893              	.LBB1096:
ARM GAS  /tmp/ccjyQa7a.s 			page 128


 3894              	.LBB1097:
 3895              	.LBI1097:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3896              		.loc 5 602 17 view .LVU952
 3897              	.LBB1098:
 3898              	.LBI1098:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 3899              		.loc 5 302 7 view .LVU953
 3900              	.LBB1099:
 3901              	.LBI1099:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3902              		.loc 5 110 7 view .LVU954
 3903              	.LBB1100:
 3904              	.LBB1101:
 3905              	.LBI1101:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3906              		.loc 5 199 14 view .LVU955
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3907              		.loc 5 199 14 is_stmt 0 view .LVU956
 3908              	.LBE1101:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3909              		.loc 5 110 7 view .LVU957
 3910 01d6 0023     		movs	r3, #0
 3911              	.LVL350:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3912              		.loc 5 110 7 view .LVU958
 3913 01d8 8DF8E230 		strb	r3, [sp, #226]
 3914              	.LVL351:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3915              		.loc 5 110 7 view .LVU959
 3916              	.LBE1100:
 3917              	.LBE1099:
 3918              	.LBE1098:
 3919              	.LBE1097:
 3920              	.LBE1096:
 3921              	.LBE1095:
  38:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = **begin;
 3922              		.loc 3 38 33 view .LVU960
 3923 01dc 389B     		ldr	r3, [sp, #224]
 3924 01de 3993     		str	r3, [sp, #228]
 3925 01e0 06E0     		b	.L177
 3926              	.LVL352:
 3927              	.L175:
  38:fibre-cpp/include/fibre/simple_serdes.hpp ****                 uint8_t byte = **begin;
 3928              		.loc 3 38 33 view .LVU961
 3929              	.LBE1102:
 3930              	.LBE1093:
 3931              	.LBB1103:
 3932              	.LBI1103:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 3933              		.loc 5 700 2 is_stmt 1 view .LVU962
 3934              	.LBB1104:
 3935              	.LBB1105:
 3936              	.LBB1106:
 3937              	.LBI1106:
 3938              		.loc 6 76 5 view .LVU963
 3939              		.loc 6 76 5 is_stmt 0 view .LVU964
ARM GAS  /tmp/ccjyQa7a.s 			page 129


 3940              	.LBE1106:
 3941              	.LBB1107:
 3942              	.LBI1107:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 3943              		.loc 5 607 28 is_stmt 1 view .LVU965
 3944              	.LBB1108:
 3945              	.LBB1109:
 3946              	.LBB1110:
 3947              	.LBI1110:
 3948              		.loc 6 76 5 view .LVU966
 3949              		.loc 6 76 5 is_stmt 0 view .LVU967
 3950              	.LBE1110:
 3951              	.LBB1111:
 3952              	.LBI1111:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3953              		.loc 5 300 42 is_stmt 1 view .LVU968
 3954              	.LBB1112:
 3955              	.LBB1113:
 3956              	.LBB1114:
 3957              	.LBI1114:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 3958              		.loc 5 115 2 view .LVU969
 3959              	.LBB1115:
 3960              	.LBB1116:
 3961              	.LBB1117:
 3962              	.LBI1117:
 3963              		.loc 6 76 5 view .LVU970
 3964              		.loc 6 76 5 is_stmt 0 view .LVU971
 3965              	.LBE1117:
 3966              	.LBB1118:
 3967              	.LBI1118:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 3968              		.loc 5 203 6 is_stmt 1 view .LVU972
 3969              	.LBB1119:
 3970              	.LBB1120:
 3971              	.LBB1121:
 3972              	.LBI1121:
 3973              		.loc 6 76 5 view .LVU973
 3974              		.loc 6 76 5 is_stmt 0 view .LVU974
 3975              	.LBE1121:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 3976              		.loc 5 204 47 view .LVU975
 3977 01e2 ADF8DC30 		strh	r3, [sp, #220]	@ movhi
 3978              	.LVL353:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 3979              		.loc 5 204 47 view .LVU976
 3980              	.LBE1120:
 3981              	.LBE1119:
 3982              	.LBE1118:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 3983              		.loc 5 117 19 view .LVU977
 3984 01e6 0123     		movs	r3, #1
 3985              	.LVL354:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 3986              		.loc 5 117 19 view .LVU978
 3987 01e8 8DF8DE30 		strb	r3, [sp, #222]
 3988              	.LVL355:
ARM GAS  /tmp/ccjyQa7a.s 			page 130


 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 3989              		.loc 5 117 19 view .LVU979
 3990              	.LBE1116:
 3991              	.LBE1115:
 3992              	.LBE1114:
 3993              	.LBE1113:
 3994              	.LBE1112:
 3995              	.LBE1111:
 3996              	.LBE1109:
 3997              	.LBE1108:
 3998              	.LBE1107:
 3999              	.LBE1105:
 4000              	.LBE1104:
 4001              	.LBE1103:
  43:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
 4002              		.loc 3 43 16 view .LVU980
 4003 01ec 379B     		ldr	r3, [sp, #220]
 4004 01ee 3993     		str	r3, [sp, #228]
 4005              	.LVL356:
 4006              	.L177:
  43:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
 4007              		.loc 3 43 16 view .LVU981
 4008 01f0 399B     		ldr	r3, [sp, #228]
 4009 01f2 3093     		str	r3, [sp, #192]
 4010              	.LVL357:
  43:fibre-cpp/include/fibre/simple_serdes.hpp ****     }
 4011              		.loc 3 43 16 view .LVU982
 4012 01f4 2F93     		str	r3, [sp, #188]
 4013              	.LBE1092:
 4014              	.LBE1091:
 4015              	.LBE1090:
 484:fibre-cpp/legacy_protocol.cpp **** 
 4016              		.loc 1 484 71 view .LVU983
 4017 01f6 1D93     		str	r3, [sp, #116]
 4018 01f8 BDF87460 		ldrh	r6, [sp, #116]
 4019              	.LVL358:
 487:fibre-cpp/legacy_protocol.cpp ****             expected_response_length = tx_mtu_ - 2;
 4020              		.loc 1 487 9 is_stmt 1 view .LVU984
 487:fibre-cpp/legacy_protocol.cpp ****             expected_response_length = tx_mtu_ - 2;
 4021              		.loc 1 487 40 is_stmt 0 view .LVU985
 4022 01fc A368     		ldr	r3, [r4, #8]
 487:fibre-cpp/legacy_protocol.cpp ****             expected_response_length = tx_mtu_ - 2;
 4023              		.loc 1 487 48 view .LVU986
 4024 01fe 9A1E     		subs	r2, r3, #2
 487:fibre-cpp/legacy_protocol.cpp ****             expected_response_length = tx_mtu_ - 2;
 4025              		.loc 1 487 9 view .LVU987
 4026 0200 9642     		cmp	r6, r2
 4027 0202 02D9     		bls	.L178
 488:fibre-cpp/legacy_protocol.cpp **** 
 4028              		.loc 1 488 13 is_stmt 1 view .LVU988
 488:fibre-cpp/legacy_protocol.cpp **** 
 4029              		.loc 1 488 48 is_stmt 0 view .LVU989
 4030 0204 9EB2     		uxth	r6, r3
 4031              	.LVL359:
 488:fibre-cpp/legacy_protocol.cpp **** 
 4032              		.loc 1 488 38 view .LVU990
 4033 0206 023E     		subs	r6, r6, #2
ARM GAS  /tmp/ccjyQa7a.s 			page 131


 4034 0208 B6B2     		uxth	r6, r6
 4035              	.LVL360:
 4036              	.L178:
 490:fibre-cpp/legacy_protocol.cpp ****         fibre::bufptr_t output_buffer{tx_buf_ + 2, expected_response_length};
 4037              		.loc 1 490 9 is_stmt 1 view .LVU991
 490:fibre-cpp/legacy_protocol.cpp ****         fibre::bufptr_t output_buffer{tx_buf_ + 2, expected_response_length};
 4038              		.loc 1 490 65 is_stmt 0 view .LVU992
 4039 020a 0C9B     		ldr	r3, [sp, #48]
 490:fibre-cpp/legacy_protocol.cpp ****         fibre::bufptr_t output_buffer{tx_buf_ + 2, expected_response_length};
 4040              		.loc 1 490 71 view .LVU993
 4041 020c 023B     		subs	r3, r3, #2
 4042              	.LVL361:
 4043              	.LBB1122:
 4044              	.LBI1122:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 4045              		.loc 4 23 5 is_stmt 1 view .LVU994
 4046              	.LBB1123:
 4047              	.LBB1124:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 4048              		.loc 4 23 65 is_stmt 0 view .LVU995
 4049 020e 0B9A     		ldr	r2, [sp, #44]
 4050 0210 0592     		str	r2, [sp, #20]
 4051 0212 0693     		str	r3, [sp, #24]
 4052              	.LVL362:
  23:fibre-cpp/include/fibre/bufptr.hpp **** 
 4053              		.loc 4 23 65 view .LVU996
 4054              	.LBE1124:
 4055              	.LBE1123:
 4056              	.LBE1122:
 491:fibre-cpp/legacy_protocol.cpp ****         fibre::endpoint_handler(endpoint_id, &input_buffer, &output_buffer);
 4057              		.loc 1 491 9 is_stmt 1 view .LVU997
 491:fibre-cpp/legacy_protocol.cpp ****         fibre::endpoint_handler(endpoint_id, &input_buffer, &output_buffer);
 4058              		.loc 1 491 76 is_stmt 0 view .LVU998
 4059 0214 04F10E03 		add	r3, r4, #14
 4060              	.LVL363:
 4061              	.LBB1125:
 4062              	.LBI1125:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4063              		.loc 4 21 5 is_stmt 1 view .LVU999
 4064              	.LBB1126:
 4065              	.LBB1127:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4066              		.loc 4 21 83 is_stmt 0 view .LVU1000
 4067 0218 0793     		str	r3, [sp, #28]
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4068              		.loc 4 21 75 view .LVU1001
 4069 021a 3344     		add	r3, r3, r6
 4070              	.LVL364:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4071              		.loc 4 21 83 view .LVU1002
 4072 021c 0893     		str	r3, [sp, #32]
 4073              	.LVL365:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4074              		.loc 4 21 83 view .LVU1003
 4075              	.LBE1127:
 4076              	.LBE1126:
 4077              	.LBE1125:
ARM GAS  /tmp/ccjyQa7a.s 			page 132


 492:fibre-cpp/legacy_protocol.cpp **** 
 4078              		.loc 1 492 9 is_stmt 1 view .LVU1004
 492:fibre-cpp/legacy_protocol.cpp **** 
 4079              		.loc 1 492 32 is_stmt 0 view .LVU1005
 4080 021e 07AA     		add	r2, sp, #28
 4081 0220 05A9     		add	r1, sp, #20
 4082 0222 FFF7FEFF 		bl	_ZN5fibre16endpoint_handlerEiPNS_16generic_bufptr_tIKhEEPNS0_IhEE
 4083              	.LVL366:
 495:fibre-cpp/legacy_protocol.cpp ****             size_t actual_response_length = expected_response_length - output_buffer.size() + 2;
 4084              		.loc 1 495 9 is_stmt 1 view .LVU1006
 4085              	.LBB1128:
 4086 0226 B8F1000F 		cmp	r8, #0
 4087 022a 12DB     		blt	.L190
 4088              	.LVL367:
 4089              	.L166:
 495:fibre-cpp/legacy_protocol.cpp ****             size_t actual_response_length = expected_response_length - output_buffer.size() + 2;
 4090              		.loc 1 495 9 is_stmt 0 view .LVU1007
 4091              	.LBE1128:
 4092              	.LBE1039:
 4093              	.LBE1038:
 4094              	.LBE1143:
 507:fibre-cpp/legacy_protocol.cpp **** }
 4095              		.loc 1 507 5 is_stmt 1 view .LVU1008
 4096 022c 2668     		ldr	r6, [r4]
 507:fibre-cpp/legacy_protocol.cpp **** }
 4097              		.loc 1 507 79 is_stmt 0 view .LVU1009
 4098 022e 3368     		ldr	r3, [r6]
 4099 0230 1F68     		ldr	r7, [r3]
 4100              	.LVL368:
 4101              	.LBB1144:
 4102              	.LBI1144:
  28:fibre-cpp/include/fibre/bufptr.hpp **** 
 4103              		.loc 4 28 5 is_stmt 1 view .LVU1010
 4104              	.LBB1145:
 4105              	.LBB1146:
 4106              	.LBI1146:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4107              		.loc 4 21 5 view .LVU1011
 4108              	.LBB1147:
 4109              	.LBB1148:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4110              		.loc 4 21 83 is_stmt 0 view .LVU1012
 4111 0232 2795     		str	r5, [sp, #156]
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4112              		.loc 4 21 75 view .LVU1013
 4113 0234 04F58673 		add	r3, r4, #268
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4114              		.loc 4 21 83 view .LVU1014
 4115 0238 2893     		str	r3, [sp, #160]
 4116              	.LVL369:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4117              		.loc 4 21 83 view .LVU1015
 4118              	.LBE1148:
 4119              	.LBE1147:
 4120              	.LBE1146:
 4121              	.LBE1145:
 4122              	.LBE1144:
ARM GAS  /tmp/ccjyQa7a.s 			page 133


 507:fibre-cpp/legacy_protocol.cpp **** }
 4123              		.loc 1 507 46 view .LVU1016
 4124 023a 2146     		mov	r1, r4
 4125 023c 29A8     		add	r0, sp, #164
 4126 023e FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read
 4127              	.LVL370:
 507:fibre-cpp/legacy_protocol.cpp **** }
 4128              		.loc 1 507 28 view .LVU1017
 4129 0242 29AB     		add	r3, sp, #164
 4130 0244 0DAA     		add	r2, sp, #52
 4131 0246 27A9     		add	r1, sp, #156
 4132 0248 3046     		mov	r0, r6
 4133 024a B847     		blx	r7
 4134              	.LVL371:
 4135              	.L157:
 508:fibre-cpp/legacy_protocol.cpp **** 
 4136              		.loc 1 508 1 view .LVU1018
 4137 024c 3BB0     		add	sp, sp, #236
 4138              	.LCFI48:
 4139              		.cfi_remember_state
 4140              		.cfi_def_cfa_offset 28
 4141              		@ sp needed
 4142 024e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4143              	.LVL372:
 4144              	.L190:
 4145              	.LCFI49:
 4146              		.cfi_restore_state
 4147              	.LBB1149:
 4148              	.LBB1142:
 4149              	.LBB1141:
 4150              	.LBB1140:
 4151              	.LBB1129:
 496:fibre-cpp/legacy_protocol.cpp ****             write_le<uint16_t>(*seq_no | 0x8000, tx_buf_);
 4152              		.loc 1 496 13 is_stmt 1 view .LVU1019
 4153              	.LBB1130:
 4154              	.LBI1130:
  74:fibre-cpp/include/fibre/bufptr.hpp ****         return end_ - begin_;
 4155              		.loc 4 74 12 view .LVU1020
 4156              	.LBB1131:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 4157              		.loc 4 75 21 is_stmt 0 view .LVU1021
 4158 0252 089B     		ldr	r3, [sp, #32]
 4159 0254 079A     		ldr	r2, [sp, #28]
 4160 0256 9B1A     		subs	r3, r3, r2
 4161              	.LVL373:
  75:fibre-cpp/include/fibre/bufptr.hpp ****     }
 4162              		.loc 4 75 21 view .LVU1022
 4163              	.LBE1131:
 4164              	.LBE1130:
 496:fibre-cpp/legacy_protocol.cpp ****             write_le<uint16_t>(*seq_no | 0x8000, tx_buf_);
 4165              		.loc 1 496 70 view .LVU1023
 4166 0258 F61A     		subs	r6, r6, r3
 4167              	.LVL374:
 496:fibre-cpp/legacy_protocol.cpp ****             write_le<uint16_t>(*seq_no | 0x8000, tx_buf_);
 4168              		.loc 1 496 95 view .LVU1024
 4169 025a 0236     		adds	r6, r6, #2
 4170              	.LVL375:
ARM GAS  /tmp/ccjyQa7a.s 			page 134


 497:fibre-cpp/legacy_protocol.cpp **** 
 4171              		.loc 1 497 13 is_stmt 1 view .LVU1025
 497:fibre-cpp/legacy_protocol.cpp **** 
 4172              		.loc 1 497 31 is_stmt 0 view .LVU1026
 4173 025c 47F40047 		orr	r7, r7, #32768
 4174              	.LVL376:
 4175              	.LBB1132:
 4176              	.LBI1132:
  77:fibre-cpp/include/fibre/simple_serdes.hpp **** }
  78:fibre-cpp/include/fibre/simple_serdes.hpp **** 
  79:fibre-cpp/include/fibre/simple_serdes.hpp **** template<typename T, typename = typename std::enable_if_t<!std::is_const<T>::value>>
  80:fibre-cpp/include/fibre/simple_serdes.hpp **** inline size_t write_le(T value, uint8_t* buffer){
 4177              		.loc 3 80 15 is_stmt 1 view .LVU1027
 4178              	.LBB1133:
  81:fibre-cpp/include/fibre/simple_serdes.hpp ****     //TODO: add static_assert that this is still a little endian machine
  82:fibre-cpp/include/fibre/simple_serdes.hpp ****     std::memcpy(&buffer[0], &value, sizeof(value));
 4179              		.loc 3 82 16 is_stmt 0 view .LVU1028
 4180 0260 A046     		mov	r8, r4
 4181              	.LVL377:
 4182              		.loc 3 82 16 view .LVU1029
 4183 0262 28F80C7F 		strh	r7, [r8, #12]!	@ unaligned
 4184              	.LVL378:
 4185              		.loc 3 82 16 view .LVU1030
 4186              	.LBE1133:
 4187              	.LBE1132:
 499:fibre-cpp/legacy_protocol.cpp ****             tx_channel_->start_write({tx_buf_, actual_response_length}, &tx_handle_, MEMBER_CB(this
 4188              		.loc 1 499 13 is_stmt 1 view .LVU1031
 4189              	.LBB1134:
 4190              	.LBI1134:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4191              		.loc 4 21 5 view .LVU1032
 4192              	.LBB1135:
 4193              	.LBB1136:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4194              		.loc 4 21 83 is_stmt 0 view .LVU1033
 4195 0266 CDF88480 		str	r8, [sp, #132]
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4196              		.loc 4 21 75 view .LVU1034
 4197 026a 4644     		add	r6, r6, r8
 4198              	.LVL379:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4199              		.loc 4 21 83 view .LVU1035
 4200 026c 2296     		str	r6, [sp, #136]
 4201              	.LVL380:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4202              		.loc 4 21 83 view .LVU1036
 4203              	.LBE1136:
 4204              	.LBE1135:
 4205              	.LBE1134:
 499:fibre-cpp/legacy_protocol.cpp ****             tx_channel_->start_write({tx_buf_, actual_response_length}, &tx_handle_, MEMBER_CB(this
 4206              		.loc 1 499 97 view .LVU1037
 4207 026e 21AB     		add	r3, sp, #132
 4208 0270 93E80600 		ldm	r3, {r1, r2}
 4209 0274 1FA8     		add	r0, sp, #124
 4210 0276 FFF7FEFF 		bl	_ZN5fibre6as_hexIKhEENS_15HexArrayPrinterIT_EENS_16generic_bufptr_tIS3_EE
 4211              	.LVL381:
 4212 027a 1FA9     		add	r1, sp, #124
ARM GAS  /tmp/ccjyQa7a.s 			page 135


 4213 027c 1EA8     		add	r0, sp, #120
 4214 027e FFF7FEFF 		bl	_ZN5fibrelsI10NullStreamKhEERT_S4_RKNS_15HexArrayPrinterIT0_EE
 4215              	.LVL382:
 500:fibre-cpp/legacy_protocol.cpp ****         }
 4216              		.loc 1 500 13 is_stmt 1 view .LVU1038
 4217 0282 6768     		ldr	r7, [r4, #4]
 500:fibre-cpp/legacy_protocol.cpp ****         }
 4218              		.loc 1 500 120 is_stmt 0 view .LVU1039
 4219 0284 3B68     		ldr	r3, [r7]
 4220 0286 D3F80090 		ldr	r9, [r3]
 4221              	.LVL383:
 4222              	.LBB1137:
 4223              	.LBI1137:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4224              		.loc 4 21 5 is_stmt 1 view .LVU1040
 4225              	.LBB1138:
 4226              	.LBB1139:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4227              		.loc 4 21 83 is_stmt 0 view .LVU1041
 4228 028a CDF88C80 		str	r8, [sp, #140]
 4229 028e 2496     		str	r6, [sp, #144]
 4230              	.LVL384:
  21:fibre-cpp/include/fibre/bufptr.hpp **** 
 4231              		.loc 4 21 83 view .LVU1042
 4232              	.LBE1139:
 4233              	.LBE1138:
 4234              	.LBE1137:
 500:fibre-cpp/legacy_protocol.cpp ****         }
 4235              		.loc 1 500 86 view .LVU1043
 4236 0290 25AE     		add	r6, sp, #148
 4237 0292 2146     		mov	r1, r4
 4238 0294 3046     		mov	r0, r6
 4239 0296 FFF7FEFF 		bl	_ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_wri
 4240              	.LVL385:
 500:fibre-cpp/legacy_protocol.cpp ****         }
 4241              		.loc 1 500 37 view .LVU1044
 4242 029a 0096     		str	r6, [sp]
 4243 029c 04F58673 		add	r3, r4, #268
 4244 02a0 23AA     		add	r2, sp, #140
 4245 02a2 06CA     		ldm	r2, {r1, r2}
 4246 02a4 3846     		mov	r0, r7
 4247 02a6 C847     		blx	r9
 4248              	.LVL386:
 4249              	.LBE1129:
 4250 02a8 C0E7     		b	.L166
 4251              	.L192:
 4252 02aa 00BF     		.align	2
 4253              	.L191:
 4254 02ac 00000000 		.word	_ZN5fibre9json_crc_E
 4255              	.LBE1140:
 4256              	.LBE1141:
 4257              	.LBE1142:
 4258              	.LBE1149:
 4259              		.cfi_endproc
 4260              	.LFE4605:
 4261              		.fnend
 4263              		.section	.text._ZN5fibre25LegacyProtocolPacketBased17on_write_finishedENS_11WriteResultE,"ax",%pro
ARM GAS  /tmp/ccjyQa7a.s 			page 136


 4264              		.align	1
 4265              		.global	_ZN5fibre25LegacyProtocolPacketBased17on_write_finishedENS_11WriteResultE
 4266              		.syntax unified
 4267              		.thumb
 4268              		.thumb_func
 4270              	_ZN5fibre25LegacyProtocolPacketBased17on_write_finishedENS_11WriteResultE:
 4271              		.fnstart
 4272              	.LVL387:
 4273              	.LFB4604:
 322:fibre-cpp/legacy_protocol.cpp ****     tx_handle_ = 0;
 4274              		.loc 1 322 71 is_stmt 1 view -0
 4275              		.cfi_startproc
 4276              		@ args = 0, pretend = 0, frame = 16
 4277              		@ frame_needed = 0, uses_anonymous_args = 0
 322:fibre-cpp/legacy_protocol.cpp ****     tx_handle_ = 0;
 4278              		.loc 1 322 71 is_stmt 0 view .LVU1046
 4279 0000 00B5     		push	{lr}
 4280              		.save {lr}
 4281              	.LCFI50:
 4282              		.cfi_def_cfa_offset 4
 4283              		.cfi_offset 14, -4
 4284              		.pad #20
 4285 0002 85B0     		sub	sp, sp, #20
 4286              	.LCFI51:
 4287              		.cfi_def_cfa_offset 24
 4288 0004 6B46     		mov	r3, sp
 4289 0006 83E80600 		stm	r3, {r1, r2}
 323:fibre-cpp/legacy_protocol.cpp **** 
 4290              		.loc 1 323 5 is_stmt 1 view .LVU1047
 323:fibre-cpp/legacy_protocol.cpp **** 
 4291              		.loc 1 323 16 is_stmt 0 view .LVU1048
 4292 000a 0023     		movs	r3, #0
 4293 000c C0F80C31 		str	r3, [r0, #268]
 325:fibre-cpp/legacy_protocol.cpp ****         on_rx_tx_closed(rx_status_);
 4294              		.loc 1 325 5 is_stmt 1 view .LVU1049
 325:fibre-cpp/legacy_protocol.cpp ****         on_rx_tx_closed(rx_status_);
 4295              		.loc 1 325 9 is_stmt 0 view .LVU1050
 4296 0010 90F81411 		ldrb	r1, [r0, #276]	@ zero_extendqisi2
 325:fibre-cpp/legacy_protocol.cpp ****         on_rx_tx_closed(rx_status_);
 4297              		.loc 1 325 5 view .LVU1051
 4298 0014 81B9     		cbnz	r1, .L197
 363:fibre-cpp/legacy_protocol.cpp ****         // There is a write operation pending from the server side (i.e. an ack
 4299              		.loc 1 363 5 is_stmt 1 view .LVU1052
 4300              	.LBB1150:
 363:fibre-cpp/legacy_protocol.cpp ****         // There is a write operation pending from the server side (i.e. an ack
 4301              		.loc 1 363 9 is_stmt 0 view .LVU1053
 4302 0016 D0F81031 		ldr	r3, [r0, #272]
 363:fibre-cpp/legacy_protocol.cpp ****         // There is a write operation pending from the server side (i.e. an ack
 4303              		.loc 1 363 5 view .LVU1054
 4304 001a 53B1     		cbz	r3, .L193
 4305              	.LBB1151:
 366:fibre-cpp/legacy_protocol.cpp ****         rx_end_ = nullptr;
 4306              		.loc 1 366 9 is_stmt 1 view .LVU1055
 4307              	.LVL388:
 367:fibre-cpp/legacy_protocol.cpp ****         on_read_finished({kStreamOk, rx_end});
 4308              		.loc 1 367 9 view .LVU1056
 367:fibre-cpp/legacy_protocol.cpp ****         on_read_finished({kStreamOk, rx_end});
ARM GAS  /tmp/ccjyQa7a.s 			page 137


 4309              		.loc 1 367 17 is_stmt 0 view .LVU1057
 4310 001c 0022     		movs	r2, #0
 4311 001e C0F81021 		str	r2, [r0, #272]
 368:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 4312              		.loc 1 368 9 is_stmt 1 view .LVU1058
 368:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 4313              		.loc 1 368 25 is_stmt 0 view .LVU1059
 4314 0022 8DF80820 		strb	r2, [sp, #8]
 4315 0026 0393     		str	r3, [sp, #12]
 4316 0028 04AB     		add	r3, sp, #16
 4317              	.LVL389:
 368:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 4318              		.loc 1 368 25 view .LVU1060
 4319 002a 13E90600 		ldmdb	r3, {r1, r2}
 4320 002e FFF7FEFF 		bl	_ZN5fibre25LegacyProtocolPacketBased16on_read_finishedENS_10ReadResultE
 4321              	.LVL390:
 4322              	.L193:
 368:fibre-cpp/legacy_protocol.cpp **** #if FIBRE_ENABLE_CLIENT
 4323              		.loc 1 368 25 view .LVU1061
 4324              	.LBE1151:
 4325              	.LBE1150:
 389:fibre-cpp/legacy_protocol.cpp **** 
 4326              		.loc 1 389 1 view .LVU1062
 4327 0032 05B0     		add	sp, sp, #20
 4328              	.LCFI52:
 4329              		.cfi_remember_state
 4330              		.cfi_def_cfa_offset 4
 4331              		@ sp needed
 4332 0034 5DF804FB 		ldr	pc, [sp], #4
 4333              	.LVL391:
 4334              	.L197:
 4335              	.LCFI53:
 4336              		.cfi_restore_state
 326:fibre-cpp/legacy_protocol.cpp ****         return;
 4337              		.loc 1 326 9 is_stmt 1 view .LVU1063
 326:fibre-cpp/legacy_protocol.cpp ****         return;
 4338              		.loc 1 326 24 is_stmt 0 view .LVU1064
 4339 0038 FFF7FEFF 		bl	_ZN5fibre25LegacyProtocolPacketBased15on_rx_tx_closedENS_12StreamStatusE
 4340              	.LVL392:
 327:fibre-cpp/legacy_protocol.cpp ****     }
 4341              		.loc 1 327 9 is_stmt 1 view .LVU1065
 4342 003c F9E7     		b	.L193
 4343              		.cfi_endproc
 4344              	.LFE4604:
 4345              		.fnend
 4347              		.section	.text._ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL
 4348              		.align	1
 4349              		.weak	_ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17o
 4350              		.syntax unified
 4351              		.thumb
 4352              		.thumb_func
 4354              	_ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_write
 4355              		.fnstart
 4356              	.LFB5366:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 4357              		.loc 8 105 21 view -0
 4358              		.cfi_startproc
ARM GAS  /tmp/ccjyQa7a.s 			page 138


 4359              		@ args = 0, pretend = 0, frame = 16
 4360              		@ frame_needed = 0, uses_anonymous_args = 0
 4361 0000 00B5     		push	{lr}
 4362              		.save {lr}
 4363              	.LCFI54:
 4364              		.cfi_def_cfa_offset 4
 4365              		.cfi_offset 14, -4
 4366              		.pad #20
 4367 0002 85B0     		sub	sp, sp, #20
 4368              	.LCFI55:
 4369              		.cfi_def_cfa_offset 24
 4370 0004 8446     		mov	ip, r0
 4371 0006 6846     		mov	r0, sp
 4372 0008 80E80600 		stm	r0, {r1, r2}
 4373              	.LVL393:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 4374              		.loc 8 105 21 is_stmt 0 view .LVU1067
 4375 000c 02AB     		add	r3, sp, #8
 4376 000e 03C8     		ldm	r0, {r0, r1}
 4377 0010 83E80500 		stm	r3, {r0, r2}
 4378              	.LBB1152:
 4379              	.LBI1152:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 4380              		.loc 8 105 21 is_stmt 1 view .LVU1068
 4381              	.LBB1153:
 106:fibre-cpp/include/fibre/callback.hpp ****         }, obj};
 4382              		.loc 8 106 41 is_stmt 0 view .LVU1069
 4383 0014 93E80600 		ldm	r3, {r1, r2}
 4384 0018 6046     		mov	r0, ip
 4385 001a FFF7FEFF 		bl	_ZN5fibre25LegacyProtocolPacketBased17on_write_finishedENS_11WriteResultE
 4386              	.LVL394:
 106:fibre-cpp/include/fibre/callback.hpp ****         }, obj};
 4387              		.loc 8 106 41 view .LVU1070
 4388              	.LBE1153:
 4389              	.LBE1152:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 4390              		.loc 8 105 21 view .LVU1071
 4391 001e 05B0     		add	sp, sp, #20
 4392              	.LCFI56:
 4393              		.cfi_def_cfa_offset 4
 4394              		@ sp needed
 4395 0020 5DF804FB 		ldr	pc, [sp], #4
 4396              		.cfi_endproc
 4397              	.LFE5366:
 4398              		.fnend
 4400              		.section	.text._ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_
 4401              		.align	1
 4402              		.weak	_ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on
 4403              		.syntax unified
 4404              		.thumb
 4405              		.thumb_func
 4407              	_ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read_f
 4408              		.fnstart
 4409              	.LFB5354:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 4410              		.loc 8 105 21 is_stmt 1 view -0
 4411              		.cfi_startproc
ARM GAS  /tmp/ccjyQa7a.s 			page 139


 4412              		@ args = 0, pretend = 0, frame = 16
 4413              		@ frame_needed = 0, uses_anonymous_args = 0
 4414 0000 00B5     		push	{lr}
 4415              		.save {lr}
 4416              	.LCFI57:
 4417              		.cfi_def_cfa_offset 4
 4418              		.cfi_offset 14, -4
 4419              		.pad #20
 4420 0002 85B0     		sub	sp, sp, #20
 4421              	.LCFI58:
 4422              		.cfi_def_cfa_offset 24
 4423 0004 8446     		mov	ip, r0
 4424 0006 6846     		mov	r0, sp
 4425 0008 80E80600 		stm	r0, {r1, r2}
 4426              	.LVL395:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 4427              		.loc 8 105 21 is_stmt 0 view .LVU1073
 4428 000c 02AB     		add	r3, sp, #8
 4429 000e 03C8     		ldm	r0, {r0, r1}
 4430 0010 83E80500 		stm	r3, {r0, r2}
 4431              	.LBB1154:
 4432              	.LBI1154:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 4433              		.loc 8 105 21 is_stmt 1 view .LVU1074
 4434              	.LBB1155:
 106:fibre-cpp/include/fibre/callback.hpp ****         }, obj};
 4435              		.loc 8 106 41 is_stmt 0 view .LVU1075
 4436 0014 93E80600 		ldm	r3, {r1, r2}
 4437 0018 6046     		mov	r0, ip
 4438 001a FFF7FEFF 		bl	_ZN5fibre25LegacyProtocolPacketBased16on_read_finishedENS_10ReadResultE
 4439              	.LVL396:
 106:fibre-cpp/include/fibre/callback.hpp ****         }, obj};
 4440              		.loc 8 106 41 view .LVU1076
 4441              	.LBE1155:
 4442              	.LBE1154:
 105:fibre-cpp/include/fibre/callback.hpp ****             return (((TObj*)obj)->*func)(arg...);
 4443              		.loc 8 105 21 view .LVU1077
 4444 001e 05B0     		add	sp, sp, #20
 4445              	.LCFI59:
 4446              		.cfi_def_cfa_offset 4
 4447              		@ sp needed
 4448 0020 5DF804FB 		ldr	pc, [sp], #4
 4449              		.cfi_endproc
 4450              	.LFE5354:
 4451              		.fnend
 4453              		.weak	_ZTSN5fibre17AsyncStreamSourceE
 4454              		.section	.rodata._ZTSN5fibre17AsyncStreamSourceE,"aG",%progbits,_ZTSN5fibre17AsyncStreamSourceE,co
 4455              		.align	2
 4458              	_ZTSN5fibre17AsyncStreamSourceE:
 4459 0000 4E356669 		.ascii	"N5fibre17AsyncStreamSourceE\000"
 4459      62726531 
 4459      37417379 
 4459      6E635374 
 4459      7265616D 
 4460              		.weak	_ZTIN5fibre17AsyncStreamSourceE
 4461              		.section	.rodata._ZTIN5fibre17AsyncStreamSourceE,"aG",%progbits,_ZTIN5fibre17AsyncStreamSourceE,co
 4462              		.align	2
ARM GAS  /tmp/ccjyQa7a.s 			page 140


 4465              	_ZTIN5fibre17AsyncStreamSourceE:
 4466 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 4467 0004 00000000 		.word	_ZTSN5fibre17AsyncStreamSourceE
 4468              		.weak	_ZTSN5fibre15AsyncStreamSinkE
 4469              		.section	.rodata._ZTSN5fibre15AsyncStreamSinkE,"aG",%progbits,_ZTSN5fibre15AsyncStreamSinkE,comdat
 4470              		.align	2
 4473              	_ZTSN5fibre15AsyncStreamSinkE:
 4474 0000 4E356669 		.ascii	"N5fibre15AsyncStreamSinkE\000"
 4474      62726531 
 4474      35417379 
 4474      6E635374 
 4474      7265616D 
 4475              		.weak	_ZTIN5fibre15AsyncStreamSinkE
 4476              		.section	.rodata._ZTIN5fibre15AsyncStreamSinkE,"aG",%progbits,_ZTIN5fibre15AsyncStreamSinkE,comdat
 4477              		.align	2
 4480              	_ZTIN5fibre15AsyncStreamSinkE:
 4481 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 4482 0004 00000000 		.word	_ZTSN5fibre15AsyncStreamSinkE
 4483              		.global	_ZTSN5fibre13PacketWrapperE
 4484              		.global	_ZTIN5fibre13PacketWrapperE
 4485              		.global	_ZTSN5fibre15PacketUnwrapperE
 4486              		.global	_ZTIN5fibre15PacketUnwrapperE
 4487              		.global	_ZTVN5fibre13PacketWrapperE
 4488              		.global	_ZTVN5fibre15PacketUnwrapperE
 4489              		.section	.rodata._ZTIN5fibre13PacketWrapperE,"a"
 4490              		.align	2
 4493              	_ZTIN5fibre13PacketWrapperE:
 4494 0000 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 4495 0004 00000000 		.word	_ZTSN5fibre13PacketWrapperE
 4496 0008 00000000 		.word	_ZTIN5fibre15AsyncStreamSinkE
 4497              		.section	.rodata._ZTIN5fibre15PacketUnwrapperE,"a"
 4498              		.align	2
 4501              	_ZTIN5fibre15PacketUnwrapperE:
 4502 0000 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 4503 0004 00000000 		.word	_ZTSN5fibre15PacketUnwrapperE
 4504 0008 00000000 		.word	_ZTIN5fibre17AsyncStreamSourceE
 4505              		.section	.rodata._ZTSN5fibre13PacketWrapperE,"a"
 4506              		.align	2
 4509              	_ZTSN5fibre13PacketWrapperE:
 4510 0000 4E356669 		.ascii	"N5fibre13PacketWrapperE\000"
 4510      62726531 
 4510      33506163 
 4510      6B657457 
 4510      72617070 
 4511              		.section	.rodata._ZTSN5fibre15PacketUnwrapperE,"a"
 4512              		.align	2
 4515              	_ZTSN5fibre15PacketUnwrapperE:
 4516 0000 4E356669 		.ascii	"N5fibre15PacketUnwrapperE\000"
 4516      62726531 
 4516      35506163 
 4516      6B657455 
 4516      6E777261 
 4517              		.section	.rodata._ZTVN5fibre13PacketWrapperE,"a"
 4518              		.align	2
 4521              	_ZTVN5fibre13PacketWrapperE:
 4522 0000 00000000 		.word	0
 4523 0004 00000000 		.word	_ZTIN5fibre13PacketWrapperE
ARM GAS  /tmp/ccjyQa7a.s 			page 141


 4524 0008 00000000 		.word	_ZN5fibre13PacketWrapper11start_writeENS_16generic_bufptr_tIKhEEPjNS_8CallbackIvJNS_11WriteR
 4525 000c 00000000 		.word	_ZN5fibre13PacketWrapper12cancel_writeEj
 4526              		.section	.rodata._ZTVN5fibre15PacketUnwrapperE,"a"
 4527              		.align	2
 4530              	_ZTVN5fibre15PacketUnwrapperE:
 4531 0000 00000000 		.word	0
 4532 0004 00000000 		.word	_ZTIN5fibre15PacketUnwrapperE
 4533 0008 00000000 		.word	_ZN5fibre15PacketUnwrapper10start_readENS_16generic_bufptr_tIhEEPjNS_8CallbackIvJNS_10ReadRe
 4534 000c 00000000 		.word	_ZN5fibre15PacketUnwrapper11cancel_readEj
 4535              		.text
 4536              	.Letext0:
 4537              		.file 11 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 4538              		.file 12 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdlib"
 4539              		.file 13 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 4540              		.file 14 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/type_traits"
 4541              		.file 15 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v7e-m+fp/har
 4542              		.file 16 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 4543              		.file 17 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 4544              		.file 18 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/allocator.h"
 4545              		.file 19 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility"
 4546              		.file 20 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 4547              		.file 21 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_vector.h"
 4548              		.file 22 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 4549              		.file 23 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/functional"
 4550              		.file 24 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/vector.tcc"
 4551              		.file 25 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath"
 4552              		.file 26 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstring"
 4553              		.file 27 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/enable_special_members.h"
 4554              		.file 28 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cwchar"
 4555              		.file 29 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/char_traits.h"
 4556              		.file 30 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdint"
 4557              		.file 31 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/clocale"
 4558              		.file 32 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/string_view"
 4559              		.file 33 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdio"
 4560              		.file 34 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/alloc_traits.h"
 4561              		.file 35 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/initializer_list"
 4562              		.file 36 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stringfwd.h"
 4563              		.file 37 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cwctype"
 4564              		.file 38 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/shared_ptr_base.h"
 4565              		.file 39 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator_base_types.h"
 4566              		.file 40 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h"
 4567              		.file 41 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/ext/new_allocator.h"
 4568              		.file 42 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/ext/alloc_traits.h"
 4569              		.file 43 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 4570              		.file 44 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 4571              		.file 45 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_types.h"
 4572              		.file 46 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/reent.h"
 4573              		.file 47 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/lock.h"
 4574              		.file 48 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdlib.h"
 4575              		.file 49 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 4576              		.file 50 "<built-in>"
 4577              		.file 51 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/ext/concurrence.h"
 4578              		.file 52 "fibre-cpp/include/fibre/async_stream.hpp"
 4579              		.file 53 "fibre-cpp/legacy_protocol.hpp"
 4580              		.file 54 "fibre-cpp/protocol.hpp"
 4581              		.file 55 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 4582              		.file 56 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdint.h"
ARM GAS  /tmp/ccjyQa7a.s 			page 142


 4583              		.file 57 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/math.h"
 4584              		.file 58 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 4585              		.file 59 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdio.h"
 4586              		.file 60 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/string.h"
 4587              		.file 61 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/wchar.h"
 4588              		.file 62 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/locale.h"
 4589              		.file 63 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/wctype.h"
 4590              		.file 64 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/pstl/execution_defs.h"
ARM GAS  /tmp/ccjyQa7a.s 			page 143


DEFINED SYMBOLS
                            *ABS*:0000000000000000 legacy_protocol.cpp
     /tmp/ccjyQa7a.s:20     .text._ZN5fibre13PacketWrapper12cancel_writeEj:0000000000000000 $t
     /tmp/ccjyQa7a.s:26     .text._ZN5fibre13PacketWrapper12cancel_writeEj:0000000000000000 _ZN5fibre13PacketWrapper12cancel_writeEj
.ARM.extab.text._ZN5fibre13PacketWrapper12cancel_writeEj:0000000000000000 $d
.ARM.exidx.text._ZN5fibre13PacketWrapper12cancel_writeEj:0000000000000000 $d
     /tmp/ccjyQa7a.s:66     .text._ZN5fibre15PacketUnwrapper11cancel_readEj:0000000000000000 $t
     /tmp/ccjyQa7a.s:72     .text._ZN5fibre15PacketUnwrapper11cancel_readEj:0000000000000000 _ZN5fibre15PacketUnwrapper11cancel_readEj
.ARM.extab.text._ZN5fibre15PacketUnwrapper11cancel_readEj:0000000000000000 $d
.ARM.exidx.text._ZN5fibre15PacketUnwrapper11cancel_readEj:0000000000000000 $d
     /tmp/ccjyQa7a.s:111    .text._Z8calc_crcIhLj55EET_S0_h:0000000000000000 $t
     /tmp/ccjyQa7a.s:116    .text._Z8calc_crcIhLj55EET_S0_h:0000000000000000 _Z8calc_crcIhLj55EET_S0_h
.ARM.exidx.text._Z8calc_crcIhLj55EET_S0_h:0000000000000000 $d
     /tmp/ccjyQa7a.s:175    .text._Z8calc_crcIhLj55EET_S0_PKhj:0000000000000000 $t
     /tmp/ccjyQa7a.s:180    .text._Z8calc_crcIhLj55EET_S0_PKhj:0000000000000000 _Z8calc_crcIhLj55EET_S0_PKhj
.ARM.exidx.text._Z8calc_crcIhLj55EET_S0_PKhj:0000000000000000 $d
     /tmp/ccjyQa7a.s:225    .text._Z9calc_crc8ILj55EEhhPKhj:0000000000000000 $t
     /tmp/ccjyQa7a.s:230    .text._Z9calc_crc8ILj55EEhhPKhj:0000000000000000 _Z9calc_crc8ILj55EEhhPKhj
.ARM.exidx.text._Z9calc_crc8ILj55EEhhPKhj:0000000000000000 $d
     /tmp/ccjyQa7a.s:255    .text._Z8calc_crcItLj15717EET_S0_h:0000000000000000 $t
     /tmp/ccjyQa7a.s:260    .text._Z8calc_crcItLj15717EET_S0_h:0000000000000000 _Z8calc_crcItLj15717EET_S0_h
.ARM.exidx.text._Z8calc_crcItLj15717EET_S0_h:0000000000000000 $d
     /tmp/ccjyQa7a.s:319    .text._Z8calc_crcItLj15717EET_S0_PKhj:0000000000000000 $t
     /tmp/ccjyQa7a.s:324    .text._Z8calc_crcItLj15717EET_S0_PKhj:0000000000000000 _Z8calc_crcItLj15717EET_S0_PKhj
.ARM.exidx.text._Z8calc_crcItLj15717EET_S0_PKhj:0000000000000000 $d
     /tmp/ccjyQa7a.s:369    .text._Z10calc_crc16ILj15717EEttPKhj:0000000000000000 $t
     /tmp/ccjyQa7a.s:374    .text._Z10calc_crc16ILj15717EEttPKhj:0000000000000000 _Z10calc_crc16ILj15717EEttPKhj
.ARM.exidx.text._Z10calc_crc16ILj15717EEttPKhj:0000000000000000 $d
     /tmp/ccjyQa7a.s:399    .text._ZN5fibre17endpoint0_handlerEPNS_16generic_bufptr_tIKhEEPNS0_IhEE:0000000000000000 $t
     /tmp/ccjyQa7a.s:405    .text._ZN5fibre17endpoint0_handlerEPNS_16generic_bufptr_tIKhEEPNS0_IhEE:0000000000000000 _ZN5fibre17endpoint0_handlerEPNS_16generic_bufptr_tIKhEEPNS0_IhEE
     /tmp/ccjyQa7a.s:860    .text._ZN5fibre17endpoint0_handlerEPNS_16generic_bufptr_tIKhEEPNS0_IhEE:00000000000000cc $d
.ARM.exidx.text._ZN5fibre17endpoint0_handlerEPNS_16generic_bufptr_tIKhEEPNS0_IhEE:0000000000000000 $d
     /tmp/ccjyQa7a.s:875    .text._ZN5fibre25LegacyProtocolPacketBased15on_rx_tx_closedENS_12StreamStatusE:0000000000000000 $t
     /tmp/ccjyQa7a.s:881    .text._ZN5fibre25LegacyProtocolPacketBased15on_rx_tx_closedENS_12StreamStatusE:0000000000000000 _ZN5fibre25LegacyProtocolPacketBased15on_rx_tx_closedENS_12StreamStatusE
.ARM.exidx.text._ZN5fibre25LegacyProtocolPacketBased15on_rx_tx_closedENS_12StreamStatusE:0000000000000000 $d
     /tmp/ccjyQa7a.s:948    .text._ZN5fibre25LegacyProtocolPacketBased12on_rx_closedENS_12StreamStatusE:0000000000000000 $t
     /tmp/ccjyQa7a.s:954    .text._ZN5fibre25LegacyProtocolPacketBased12on_rx_closedENS_12StreamStatusE:0000000000000000 _ZN5fibre25LegacyProtocolPacketBased12on_rx_closedENS_12StreamStatusE
.ARM.extab.text._ZN5fibre25LegacyProtocolPacketBased12on_rx_closedENS_12StreamStatusE:0000000000000000 $d
.ARM.exidx.text._ZN5fibre25LegacyProtocolPacketBased12on_rx_closedENS_12StreamStatusE:0000000000000000 $d
     /tmp/ccjyQa7a.s:1005   .text._ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 $t
     /tmp/ccjyQa7a.s:1011   .text._ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 _ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE
     /tmp/ccjyQa7a.s:1043   .text._ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000008 $d
     /tmp/ccjyQa7a.s:1630   .text._ZZN5fibre14MemberCallbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 _ZZN5fibre14MemberCallbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_
.ARM.exidx.text._ZN5fibre13make_callbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 $d
     /tmp/ccjyQa7a.s:1050   .text._ZN5fibre13PacketWrapper11start_writeENS_16generic_bufptr_tIKhEEPjNS_8CallbackIvJNS_11WriteResultEEEE:0000000000000000 $t
     /tmp/ccjyQa7a.s:1056   .text._ZN5fibre13PacketWrapper11start_writeENS_16generic_bufptr_tIKhEEPjNS_8CallbackIvJNS_11WriteResultEEEE:0000000000000000 _ZN5fibre13PacketWrapper11start_writeENS_16generic_bufptr_tIKhEEPjNS_8CallbackIvJNS_11WriteResultEEEE
.ARM.exidx.text._ZN5fibre13PacketWrapper11start_writeENS_16generic_bufptr_tIKhEEPjNS_8CallbackIvJNS_11WriteResultEEEE:0000000000000000 $d
     /tmp/ccjyQa7a.s:1279   .text._ZN5fibre13PacketWrapper8completeENS_11WriteResultE:0000000000000000 $t
     /tmp/ccjyQa7a.s:1285   .text._ZN5fibre13PacketWrapper8completeENS_11WriteResultE:0000000000000000 _ZN5fibre13PacketWrapper8completeENS_11WriteResultE
.ARM.exidx.text._ZN5fibre13PacketWrapper8completeENS_11WriteResultE:0000000000000000 $d
     /tmp/ccjyQa7a.s:1624   .text._ZZN5fibre14MemberCallbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 $t
.ARM.exidx.text._ZZN5fibre14MemberCallbackIMNS_13PacketWrapperEFvNS_11WriteResultEEXadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 $d
     /tmp/ccjyQa7a.s:1677   .text._ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 $t
     /tmp/ccjyQa7a.s:1683   .text._ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 _ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE
     /tmp/ccjyQa7a.s:1715   .text._ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000008 $d
     /tmp/ccjyQa7a.s:2518   .text._ZZN5fibre14MemberCallbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 _ZZN5fibre14MemberCallbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_
.ARM.exidx.text._ZN5fibre13make_callbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 $d
ARM GAS  /tmp/ccjyQa7a.s 			page 144


     /tmp/ccjyQa7a.s:1722   .text._ZN5fibre15PacketUnwrapper10start_readENS_16generic_bufptr_tIhEEPjNS_8CallbackIvJNS_10ReadResultEEEE:0000000000000000 $t
     /tmp/ccjyQa7a.s:1728   .text._ZN5fibre15PacketUnwrapper10start_readENS_16generic_bufptr_tIhEEPjNS_8CallbackIvJNS_10ReadResultEEEE:0000000000000000 _ZN5fibre15PacketUnwrapper10start_readENS_16generic_bufptr_tIhEEPjNS_8CallbackIvJNS_10ReadResultEEEE
.ARM.exidx.text._ZN5fibre15PacketUnwrapper10start_readENS_16generic_bufptr_tIhEEPjNS_8CallbackIvJNS_10ReadResultEEEE:0000000000000000 $d
     /tmp/ccjyQa7a.s:1866   .text._ZN5fibre15PacketUnwrapper8completeENS_10ReadResultE:0000000000000000 $t
     /tmp/ccjyQa7a.s:1872   .text._ZN5fibre15PacketUnwrapper8completeENS_10ReadResultE:0000000000000000 _ZN5fibre15PacketUnwrapper8completeENS_10ReadResultE
.ARM.exidx.text._ZN5fibre15PacketUnwrapper8completeENS_10ReadResultE:0000000000000000 $d
     /tmp/ccjyQa7a.s:2512   .text._ZZN5fibre14MemberCallbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 $t
.ARM.exidx.text._ZZN5fibre14MemberCallbackIMNS_15PacketUnwrapperEFvNS_10ReadResultEEXadL_ZNS1_8completeES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 $d
     /tmp/ccjyQa7a.s:2565   .text._ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read_finishedES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_16on_read_finishedES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 $t
     /tmp/ccjyQa7a.s:2571   .text._ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read_finishedES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_16on_read_finishedES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 _ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read_finishedES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_16on_read_finishedES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE
     /tmp/ccjyQa7a.s:2603   .text._ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read_finishedES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_16on_read_finishedES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000008 $d
     /tmp/ccjyQa7a.s:4407   .text._ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read_finishedES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 _ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read_finishedES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_
.ARM.exidx.text._ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read_finishedES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_16on_read_finishedES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 $d
     /tmp/ccjyQa7a.s:2610   .text._ZN5fibre25LegacyProtocolPacketBased5startENS_8CallbackIvJPS0_NS_12StreamStatusEEEE:0000000000000000 $t
     /tmp/ccjyQa7a.s:2616   .text._ZN5fibre25LegacyProtocolPacketBased5startENS_8CallbackIvJPS0_NS_12StreamStatusEEEE:0000000000000000 _ZN5fibre25LegacyProtocolPacketBased5startENS_8CallbackIvJPS0_NS_12StreamStatusEEEE
.ARM.exidx.text._ZN5fibre25LegacyProtocolPacketBased5startENS_8CallbackIvJPS0_NS_12StreamStatusEEEE:0000000000000000 $d
     /tmp/ccjyQa7a.s:2698   .rodata._ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b.str1.4:0000000000000000 $d
     /tmp/ccjyQa7a.s:2702   .text._ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b:0000000000000000 $t
     /tmp/ccjyQa7a.s:2708   .text._ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b:0000000000000000 _ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b
     /tmp/ccjyQa7a.s:2823   .text._ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b:0000000000000060 $d
.ARM.exidx.text._ZN5fibre6as_hexItEENS_10HexPrinterIT_EES2_b:0000000000000000 $d
     /tmp/ccjyQa7a.s:2830   .text._ZN5fibre6as_hexIKhEENS_15HexArrayPrinterIT_EENS_16generic_bufptr_tIS3_EE:0000000000000000 $t
     /tmp/ccjyQa7a.s:2836   .text._ZN5fibre6as_hexIKhEENS_15HexArrayPrinterIT_EENS_16generic_bufptr_tIS3_EE:0000000000000000 _ZN5fibre6as_hexIKhEENS_15HexArrayPrinterIT_EENS_16generic_bufptr_tIS3_EE
.ARM.exidx.text._ZN5fibre6as_hexIKhEENS_15HexArrayPrinterIT_EENS_16generic_bufptr_tIS3_EE:0000000000000000 $d
     /tmp/ccjyQa7a.s:2887   .text._ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_write_finishedES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_17on_write_finishedES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 $t
     /tmp/ccjyQa7a.s:2893   .text._ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_write_finishedES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_17on_write_finishedES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 _ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_write_finishedES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_17on_write_finishedES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE
     /tmp/ccjyQa7a.s:2925   .text._ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_write_finishedES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_17on_write_finishedES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000008 $d
     /tmp/ccjyQa7a.s:4354   .text._ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_write_finishedES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 _ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_write_finishedES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_
.ARM.exidx.text._ZN5fibre13make_callbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_write_finishedES2_EENS_15function_traitsIvS1_JS2_EEENS_14MemberCallbackIS4_XadL_ZNS1_17on_write_finishedES2_EES1_vSt5tupleIJS2_EEEEEENT2_4cb_tEPNT1_4TObjE:0000000000000000 $d
     /tmp/ccjyQa7a.s:2932   .text._ZN5fibre6as_hexIhEENS_10HexPrinterIT_EES2_b:0000000000000000 $t
     /tmp/ccjyQa7a.s:2938   .text._ZN5fibre6as_hexIhEENS_10HexPrinterIT_EES2_b:0000000000000000 _ZN5fibre6as_hexIhEENS_10HexPrinterIT_EES2_b
     /tmp/ccjyQa7a.s:3052   .text._ZN5fibre6as_hexIhEENS_10HexPrinterIT_EES2_b:0000000000000060 $d
.ARM.exidx.text._ZN5fibre6as_hexIhEENS_10HexPrinterIT_EES2_b:0000000000000000 $d
     /tmp/ccjyQa7a.s:3059   .text._ZN5fibrelsI10NullStreamKhEERT_S4_RKNS_15HexArrayPrinterIT0_EE:0000000000000000 $t
     /tmp/ccjyQa7a.s:3065   .text._ZN5fibrelsI10NullStreamKhEERT_S4_RKNS_15HexArrayPrinterIT0_EE:0000000000000000 _ZN5fibrelsI10NullStreamKhEERT_S4_RKNS_15HexArrayPrinterIT0_EE
.ARM.exidx.text._ZN5fibrelsI10NullStreamKhEERT_S4_RKNS_15HexArrayPrinterIT0_EE:0000000000000000 $d
     /tmp/ccjyQa7a.s:3140   .text._ZN5fibre25LegacyProtocolPacketBased16on_read_finishedENS_10ReadResultE:0000000000000000 $t
     /tmp/ccjyQa7a.s:3146   .text._ZN5fibre25LegacyProtocolPacketBased16on_read_finishedENS_10ReadResultE:0000000000000000 _ZN5fibre25LegacyProtocolPacketBased16on_read_finishedENS_10ReadResultE
     /tmp/ccjyQa7a.s:4254   .text._ZN5fibre25LegacyProtocolPacketBased16on_read_finishedENS_10ReadResultE:00000000000002ac $d
.ARM.exidx.text._ZN5fibre25LegacyProtocolPacketBased16on_read_finishedENS_10ReadResultE:0000000000000000 $d
     /tmp/ccjyQa7a.s:4264   .text._ZN5fibre25LegacyProtocolPacketBased17on_write_finishedENS_11WriteResultE:0000000000000000 $t
     /tmp/ccjyQa7a.s:4270   .text._ZN5fibre25LegacyProtocolPacketBased17on_write_finishedENS_11WriteResultE:0000000000000000 _ZN5fibre25LegacyProtocolPacketBased17on_write_finishedENS_11WriteResultE
.ARM.exidx.text._ZN5fibre25LegacyProtocolPacketBased17on_write_finishedENS_11WriteResultE:0000000000000000 $d
     /tmp/ccjyQa7a.s:4348   .text._ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_write_finishedES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 $t
.ARM.exidx.text._ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_11WriteResultEEXadL_ZNS1_17on_write_finishedES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 $d
     /tmp/ccjyQa7a.s:4401   .text._ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read_finishedES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 $t
.ARM.exidx.text._ZZN5fibre14MemberCallbackIMNS_25LegacyProtocolPacketBasedEFvNS_10ReadResultEEXadL_ZNS1_16on_read_finishedES2_EES1_vSt5tupleIJS2_EEE4withEPS1_ENUlPvS2_E_4_FUNES9_S2_:0000000000000000 $d
     /tmp/ccjyQa7a.s:4458   .rodata._ZTSN5fibre17AsyncStreamSourceE:0000000000000000 _ZTSN5fibre17AsyncStreamSourceE
     /tmp/ccjyQa7a.s:4455   .rodata._ZTSN5fibre17AsyncStreamSourceE:0000000000000000 $d
     /tmp/ccjyQa7a.s:4465   .rodata._ZTIN5fibre17AsyncStreamSourceE:0000000000000000 _ZTIN5fibre17AsyncStreamSourceE
     /tmp/ccjyQa7a.s:4462   .rodata._ZTIN5fibre17AsyncStreamSourceE:0000000000000000 $d
     /tmp/ccjyQa7a.s:4473   .rodata._ZTSN5fibre15AsyncStreamSinkE:0000000000000000 _ZTSN5fibre15AsyncStreamSinkE
     /tmp/ccjyQa7a.s:4470   .rodata._ZTSN5fibre15AsyncStreamSinkE:0000000000000000 $d
     /tmp/ccjyQa7a.s:4480   .rodata._ZTIN5fibre15AsyncStreamSinkE:0000000000000000 _ZTIN5fibre15AsyncStreamSinkE
     /tmp/ccjyQa7a.s:4477   .rodata._ZTIN5fibre15AsyncStreamSinkE:0000000000000000 $d
     /tmp/ccjyQa7a.s:4509   .rodata._ZTSN5fibre13PacketWrapperE:0000000000000000 _ZTSN5fibre13PacketWrapperE
     /tmp/ccjyQa7a.s:4493   .rodata._ZTIN5fibre13PacketWrapperE:0000000000000000 _ZTIN5fibre13PacketWrapperE
ARM GAS  /tmp/ccjyQa7a.s 			page 145


     /tmp/ccjyQa7a.s:4515   .rodata._ZTSN5fibre15PacketUnwrapperE:0000000000000000 _ZTSN5fibre15PacketUnwrapperE
     /tmp/ccjyQa7a.s:4501   .rodata._ZTIN5fibre15PacketUnwrapperE:0000000000000000 _ZTIN5fibre15PacketUnwrapperE
     /tmp/ccjyQa7a.s:4521   .rodata._ZTVN5fibre13PacketWrapperE:0000000000000000 _ZTVN5fibre13PacketWrapperE
     /tmp/ccjyQa7a.s:4530   .rodata._ZTVN5fibre15PacketUnwrapperE:0000000000000000 _ZTVN5fibre15PacketUnwrapperE
     /tmp/ccjyQa7a.s:4490   .rodata._ZTIN5fibre13PacketWrapperE:0000000000000000 $d
     /tmp/ccjyQa7a.s:4498   .rodata._ZTIN5fibre15PacketUnwrapperE:0000000000000000 $d
     /tmp/ccjyQa7a.s:4506   .rodata._ZTSN5fibre13PacketWrapperE:0000000000000000 $d
     /tmp/ccjyQa7a.s:4512   .rodata._ZTSN5fibre15PacketUnwrapperE:0000000000000000 $d
     /tmp/ccjyQa7a.s:4518   .rodata._ZTVN5fibre13PacketWrapperE:0000000000000000 $d
     /tmp/ccjyQa7a.s:4527   .rodata._ZTVN5fibre15PacketUnwrapperE:0000000000000000 $d

UNDEFINED SYMBOLS
__aeabi_unwind_cpp_pr1
memcpy
_ZN5fibre20embedded_json_lengthE
_ZN5fibre13embedded_jsonE
_ZN5fibre16json_version_id_E
__aeabi_unwind_cpp_pr0
memmove
_ZN5fibre16endpoint_handlerEiPNS_16generic_bufptr_tIKhEEPNS0_IhEE
_ZN5fibre9json_crc_E
_ZTVN10__cxxabiv117__class_type_infoE
_ZTVN10__cxxabiv120__si_class_type_infoE
