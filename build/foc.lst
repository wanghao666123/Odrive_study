ARM GAS  /tmp/ccx1vdif.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"foc.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata._ZNKSt19bad_optional_access4whatEv.str1.4,"aMS",%progbits,1
  20              		.align	2
  21              	.LC0:
  22 0000 62616420 		.ascii	"bad optional access\000"
  22      6F707469 
  22      6F6E616C 
  22      20616363 
  22      65737300 
  23              		.section	.text._ZNKSt19bad_optional_access4whatEv,"axG",%progbits,_ZNKSt19bad_optional_access4what
  24              		.align	1
  25              		.weak	_ZNKSt19bad_optional_access4whatEv
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  30              	_ZNKSt19bad_optional_access4whatEv:
  31              		.fnstart
  32              	.LVL0:
  33              	.LFB1329:
  34              		.file 1 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // <optional> -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // Copyright (C) 2013-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // You should have received a copy of the GNU General Public License and
ARM GAS  /tmp/ccx1vdif.s 			page 2


  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** /** @file include/optional
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****  *  This is a Standard C++ Library header.
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****  */
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #ifndef _GLIBCXX_OPTIONAL
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #define _GLIBCXX_OPTIONAL 1
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #if __cplusplus >= 201703L
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <utility>
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <type_traits>
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <exception>
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <new>
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <initializer_list>
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <bits/exception_defines.h>
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <bits/functional_hash.h>
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <bits/enable_special_members.h>
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #if __cplusplus > 201703L
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** # include <compare>
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #endif
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** {
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @addtogroup utilities
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @{
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    */
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #define __cpp_lib_optional 201606L
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     class optional;
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /// Tag type to disengage optional objects.
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   struct nullopt_t
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   {
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // Do not user-declare default constructor at all for
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // optional_value = {} syntax to work.
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // nullopt_t() = delete;
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // Used for constructing nullopt.
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     enum class _Construct { _Token };
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // Must be constexpr for nullopt_t to be literal.
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     explicit constexpr nullopt_t(_Construct) { }
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   };
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /// Tag to disengage optional objects.
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   inline constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };
ARM GAS  /tmp/ccx1vdif.s 			page 3


  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @brief Exception class thrown when a disengaged optional object is
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  dereferenced.
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @ingroup exceptions
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    */
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   class bad_optional_access : public exception
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   {
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   public:
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     bad_optional_access() = default;
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     virtual ~bad_optional_access() = default;
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     const char* what() const noexcept override
  35              		.loc 1 90 17 view -0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 0
  38              		@ frame_needed = 0, uses_anonymous_args = 0
  39              		@ link register save eliminated.
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return "bad optional access"; }
  40              		.loc 1 91 7 view .LVU1
  41              		.loc 1 91 37 is_stmt 0 view .LVU2
  42 0000 0048     		ldr	r0, .L2
  43              	.LVL1:
  44              		.loc 1 91 37 view .LVU3
  45 0002 7047     		bx	lr
  46              	.L3:
  47              		.align	2
  48              	.L2:
  49 0004 00000000 		.word	.LC0
  50              		.cfi_endproc
  51              	.LFE1329:
  52              		.cantunwind
  53              		.fnend
  55              		.section	.text._ZNKSt18bad_variant_access4whatEv,"axG",%progbits,_ZNKSt18bad_variant_access4whatEv
  56              		.align	1
  57              		.weak	_ZNKSt18bad_variant_access4whatEv
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  62              	_ZNKSt18bad_variant_access4whatEv:
  63              		.fnstart
  64              	.LVL2:
  65              	.LFB2859:
  66              		.file 2 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // <variant> -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  /tmp/ccx1vdif.s 			page 4


  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** /** @file variant
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****  *  This is the `<variant>` C++ Library header.
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****  */
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #ifndef _GLIBCXX_VARIANT
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #define _GLIBCXX_VARIANT 1
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #if __cplusplus >= 201703L
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <type_traits>
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <utility>
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/enable_special_members.h>
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/functexcept.h>
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/move.h>
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/functional_hash.h>
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/invoke.h>
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <ext/aligned_buffer.h>
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/parse_numbers.h>
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/stl_iterator_base_types.h>
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/stl_iterator_base_funcs.h>
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/stl_construct.h>
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #if __cplusplus > 201703L
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** # include <compare>
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #endif
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** {
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** namespace __detail
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** {
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** namespace __variant
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** {
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Nth_type;
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Nth_type<_Np, _First, _Rest...>
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : _Nth_type<_Np-1, _Rest...> { };
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _First, typename... _Rest>
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Nth_type<0, _First, _Rest...>
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { using type = _First; };
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
ARM GAS  /tmp/ccx1vdif.s 			page 5


  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** } // namespace __variant
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** } // namespace __detail
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #define __cpp_lib_variant 201606L
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types> class tuple;
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types> class variant;
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template <typename> struct hash;
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_size;
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_size<const _Variant> : variant_size<_Variant> {};
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_size<volatile _Variant> : variant_size<_Variant> {};
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_size<const volatile _Variant> : variant_size<_Variant> {};
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_size<variant<_Types...>>
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : std::integral_constant<size_t, sizeof...(_Types)> {};
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     inline constexpr size_t variant_size_v = variant_size<_Variant>::value;
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative;
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative<_Np, variant<_First, _Rest...>>
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : variant_alternative<_Np-1, variant<_Rest...>> {};
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _First, typename... _Rest>
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative<0, variant<_First, _Rest...>>
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { using type = _First; };
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using variant_alternative_t =
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       typename variant_alternative<_Np, _Variant>::type;
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative<_Np, const _Variant>
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { using type = add_const_t<variant_alternative_t<_Np, _Variant>>; };
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative<_Np, volatile _Variant>
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { using type = add_volatile_t<variant_alternative_t<_Np, _Variant>>; };
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative<_Np, const volatile _Variant>
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { using type = add_cv_t<variant_alternative_t<_Np, _Variant>>; };
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   inline constexpr size_t variant_npos = -1;
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
ARM GAS  /tmp/ccx1vdif.s 			page 6


 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get(variant<_Types...>&);
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&&
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get(variant<_Types...>&&);
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get(const variant<_Types...>&);
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&&
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get(const variant<_Types...>&&);
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr decltype(auto)
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __do_visit(_Visitor&& __visitor, _Variants&&... __variants);
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template <typename... _Types, typename _Tp>
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     decltype(auto)
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __variant_cast(_Tp&& __rhs)
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       if constexpr (is_lvalue_reference_v<_Tp>)
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    return static_cast<const variant<_Types...>&>(__rhs);
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    return static_cast<variant<_Types...>&>(__rhs);
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       else
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         return static_cast<variant<_Types...>&&>(__rhs);
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** namespace __detail
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** {
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** namespace __variant
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** {
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Returns the first appearence of _Tp in _Types.
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Returns sizeof...(_Types) if _Tp is not in _Types.
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __index_of : std::integral_constant<size_t, 0> {};
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     inline constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __index_of<_Tp, _First, _Rest...> :
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       std::integral_constant<size_t, is_same_v<_Tp, _First>
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	? 0 : __index_of_v<_Tp, _Rest...> + 1> {};
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // used for raw visitation
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   struct __variant_cookie {};
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // used for raw visitation with indices passed in
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   struct __variant_idx_cookie { using type = __variant_idx_cookie; };
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Used to enable deduction (and same-type checking) for std::visit:
ARM GAS  /tmp/ccx1vdif.s 			page 7


 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename> struct __deduce_visit_result { };
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Visit variants that might be valueless.
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Visitor, typename... _Variants>
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr void
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				        std::forward<_Variants>(__variants)...);
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Visit variants that might be valueless, passing indices to the visitor.
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Visitor, typename... _Variants>
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr void
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __raw_idx_visit(_Visitor&& __visitor, _Variants&&... __variants)
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       std::__do_visit<__variant_idx_cookie>(std::forward<_Visitor>(__visitor),
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  std::forward<_Variants>(__variants)...);
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // _Uninitialized<T> is guaranteed to be a trivially destructible type,
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // even if T is not.
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Uninitialized;
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Type>
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Uninitialized<_Type, true>
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename... _Args>
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr const _Type& _M_get() const & noexcept
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr _Type& _M_get() & noexcept
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr const _Type&& _M_get() const && noexcept
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return std::move(_M_storage); }
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr _Type&& _M_get() && noexcept
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return std::move(_M_storage); }
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Type _M_storage;
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Type>
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Uninitialized<_Type, false>
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename... _Args>
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  ::new ((void*)std::addressof(_M_storage))
ARM GAS  /tmp/ccx1vdif.s 			page 8


 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    _Type(std::forward<_Args>(__args)...);
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       const _Type& _M_get() const & noexcept
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return *_M_storage._M_ptr(); }
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Type& _M_get() & noexcept
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return *_M_storage._M_ptr(); }
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       const _Type&& _M_get() const && noexcept
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Type&& _M_get() && noexcept
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __gnu_cxx::__aligned_membuf<_Type> _M_storage;
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Union>
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr decltype(auto)
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __get(in_place_index_t<0>, _Union&& __u) noexcept
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Union>
 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr decltype(auto)
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return __variant::__get(in_place_index<_Np-1>,
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Returns the typed storage for __v.
 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr decltype(auto)
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __get(_Variant&& __v) noexcept
 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return __variant::__get(std::in_place_index<_Np>,
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Traits
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_default_ctor =
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_copy_ctor =
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_copy_constructible_v<_Types> && ...);
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_move_ctor =
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_move_constructible_v<_Types> && ...);
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_copy_assign =
 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _S_copy_ctor
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  && (is_copy_assignable_v<_Types> && ...);
 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_move_assign =
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _S_move_ctor
 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  && (is_move_assignable_v<_Types> && ...);
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_trivial_dtor =
ARM GAS  /tmp/ccx1vdif.s 			page 9


 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_trivially_destructible_v<_Types> && ...);
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_trivial_copy_ctor =
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_trivially_copy_constructible_v<_Types> && ...);
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_trivial_move_ctor =
 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_trivially_move_constructible_v<_Types> && ...);
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_trivial_copy_assign =
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _S_trivial_dtor && _S_trivial_copy_ctor
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  && (is_trivially_copy_assignable_v<_Types> && ...);
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_trivial_move_assign =
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _S_trivial_dtor && _S_trivial_move_ctor
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  && (is_trivially_move_assignable_v<_Types> && ...);
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // The following nothrow traits are for non-trivial SMFs. Trivial SMFs
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // are always nothrow.
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_nothrow_default_ctor =
 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  is_nothrow_default_constructible_v<
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      typename _Nth_type<0, _Types...>::type>;
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_nothrow_copy_ctor = false;
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_nothrow_move_ctor =
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_nothrow_move_constructible_v<_Types> && ...);
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_nothrow_copy_assign = false;
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_nothrow_move_assign =
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _S_nothrow_move_ctor
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  && (is_nothrow_move_assignable_v<_Types> && ...);
 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Defines members and ctors.
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     union _Variadic_union { };
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _First, typename... _Rest>
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     union _Variadic_union<_First, _Rest...>
 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr _Variadic_union() : _M_rest() { }
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename... _Args>
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args>
 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Uninitialized<_First> _M_first;
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variadic_union<_Rest...> _M_rest;
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // _Never_valueless_alt is true for variant alternatives that can
 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // always be placed in a variant without it becoming valueless.
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // For suitably-small, trivially copyable types we can create temporaries
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // on the stack and then memcpy them into place.
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp>
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Never_valueless_alt
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
ARM GAS  /tmp/ccx1vdif.s 			page 10


 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { };
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Specialize _Never_valueless_alt for other types which have a
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // non-throwing and cheap move construction and move assignment operator,
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // so that emplacing the type will provide the strong exception-safety
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // guarantee, by creating and moving a temporary.
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Whether _Never_valueless_alt<T> is true or not affects the ABI of a
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // variant using that alternative, so we can't change the value later!
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // True if every alternative in _Types... can be emplaced in a variant
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // without it becoming valueless. If this is true, variant<_Types...>
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // can never be valueless, which enables some minor optimizations.
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template <typename... _Types>
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr bool __never_valueless()
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return _Traits<_Types...>::_S_move_assign
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	&& (_Never_valueless_alt<_Types>::value && ...);
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Defines index and the dtor, possibly trivial.
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<bool __trivially_destructible, typename... _Types>
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_storage;
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template <typename... _Types>
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using __select_index =
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       typename __select_int::_Select_int_base<sizeof...(_Types),
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 					      unsigned char,
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 					      unsigned short>::type::value_type;
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_storage<false, _Types...>
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_storage()
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { }
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args>
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_M_index{_Np}
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void _M_reset()
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	if (!_M_valid()) [[unlikely]]
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return;
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	std::__do_visit<void>([](auto&& __this_mem) mutable
 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  {
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    std::_Destroy(std::__addressof(__this_mem));
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  }, __variant_cast<_Types...>(*this));
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_M_index = static_cast<__index_type>(variant_npos);
 411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
ARM GAS  /tmp/ccx1vdif.s 			page 11


 413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       ~_Variant_storage()
 414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { _M_reset(); }
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void*
 417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _M_storage() const noexcept
 418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    std::addressof(_M_u)));
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr bool
 424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _M_valid() const noexcept
 425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return true;
 428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return this->_M_index != __index_type(variant_npos);
 429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variadic_union<_Types...> _M_u;
 432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using __index_type = __select_index<_Types...>;
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __index_type _M_index;
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_storage<true, _Types...>
 438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr
 440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_storage()
 441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { }
 443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args>
 445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_M_index{_Np}
 449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void _M_reset() noexcept
 452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { _M_index = static_cast<__index_type>(variant_npos); }
 453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void*
 455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _M_storage() const noexcept
 456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    std::addressof(_M_u)));
 459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr bool
 462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _M_valid() const noexcept
 463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return true;
 466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return this->_M_index != static_cast<__index_type>(variant_npos);
 467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variadic_union<_Types...> _M_u;
ARM GAS  /tmp/ccx1vdif.s 			page 12


 470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using __index_type = __select_index<_Types...>;
 471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __index_type _M_index;
 472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _Variant_storage_alias =
 476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;
 477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Up>
 479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void* __storage = std::addressof(__lhs._M_u);
 482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Type = remove_reference_t<decltype(__rhs_mem)>;
 483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       if constexpr (!is_same_v<_Type, __variant_cookie>)
 484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         ::new (__storage)
 485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types, typename _Tp, typename _Up>
 489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
 490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __lhs._M_index = __rhs._M_index;
 492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __variant_construct_single(std::forward<_Tp>(__lhs),
 495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
 496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
 497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // The following are (Copy|Move) (ctor|assign) layers for forwarding
 500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // triviality and handling non-trivial SMF behaviors.
 501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<bool, typename... _Types>
 503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
 510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__variant_construct<_Types...>(*this, __rhs);
 512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_ctor_base(_Copy_ctor_base&&) = default;
 515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_ctor_base& operator=(const _Copy_ctor_base&) = default;
 516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_ctor_base& operator=(_Copy_ctor_base&&) = default;
 517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Copy_ctor_base<true, _Types...> : _Variant_storage_alias<_Types...>
 521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
ARM GAS  /tmp/ccx1vdif.s 			page 13


 527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _Copy_ctor_alias =
 528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;
 529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<bool, typename... _Types>
 531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_ctor_base(_Move_ctor_base&& __rhs)
 537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
 538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__variant_construct<_Types...>(*this, std::move(__rhs));
 540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Up>
 543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_reset();
 546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_index = __rhs_index;
 548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Up>
 551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_reset();
 554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __variant_construct_single(*this, __rhs);
 555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_index = __rhs_index;
 556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_ctor_base(const _Move_ctor_base&) = default;
 559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_ctor_base& operator=(const _Move_ctor_base&) = default;
 560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_ctor_base& operator=(_Move_ctor_base&&) = default;
 561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Move_ctor_base<true, _Types...> : _Copy_ctor_alias<_Types...>
 565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Up>
 570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_reset();
 573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_index = __rhs_index;
 575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Up>
 578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_reset();
 581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __variant_construct_single(*this, __rhs);
 582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_index = __rhs_index;
 583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
ARM GAS  /tmp/ccx1vdif.s 			page 14


 584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _Move_ctor_alias =
 588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;
 589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<bool, typename... _Types>
 591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_assign_base&
 597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       operator=(const _Copy_assign_base& __rhs)
 598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)
 599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__variant::__raw_idx_visit(
 601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  {
 603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      {
 605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		if (this->_M_index == __rhs_index)
 606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		else
 608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  {
 609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    using __rhs_type = __remove_cvref_t<decltype(__rhs_mem)>;
 610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    if constexpr (is_nothrow_copy_constructible_v<__rhs_type>
 611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			|| !is_nothrow_move_constructible_v<__rhs_type>)
 612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // The standard says this->emplace<__rhs_type>(__rhs_mem)
 613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // should be used here, but _M_destructive_copy is
 614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // equivalent in this case. Either copy construction
 615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // doesn't throw, so _M_destructive_copy gives strong
 616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // exception safety guarantee, or both copy construction
 617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // and move construction can throw, so emplace only gives
 618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // basic exception safety anyway.
 619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    else
 621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      __variant_cast<_Types...>(*this)
 622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			= variant<_Types...>(std::in_place_index<__rhs_index>,
 623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 					     __rhs_mem);
 624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  }
 625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      }
 626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    else
 627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
 628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return *this;
 630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_assign_base(const _Copy_assign_base&) = default;
 633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_assign_base(_Copy_assign_base&&) = default;
 634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_assign_base& operator=(_Copy_assign_base&&) = default;
 635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Copy_assign_base<true, _Types...> : _Move_ctor_alias<_Types...>
 639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
ARM GAS  /tmp/ccx1vdif.s 			page 15


 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _Copy_assign_alias =
 646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign, _Types...>;
 647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<bool, typename... _Types>
 649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Move_assign_base : _Copy_assign_alias<_Types...>
 650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_assign_base&
 655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       operator=(_Move_assign_base&& __rhs)
 656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)
 657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__variant::__raw_idx_visit(
 659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  {
 661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      {
 663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		if (this->_M_index == __rhs_index)
 664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		else
 666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __variant_cast<_Types...>(*this)
 667:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 668:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      }
 669:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    else
 670:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
 671:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 672:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return *this;
 673:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 674:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 675:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_assign_base(const _Move_assign_base&) = default;
 676:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_assign_base(_Move_assign_base&&) = default;
 677:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_assign_base& operator=(const _Move_assign_base&) = default;
 678:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 679:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 681:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Move_assign_base<true, _Types...> : _Copy_assign_alias<_Types...>
 682:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 683:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 685:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 686:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 687:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 688:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _Move_assign_alias =
 689:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign, _Types...>;
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 691:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_base : _Move_assign_alias<_Types...>
 693:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 694:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Move_assign_alias<_Types...>;
 695:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 696:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_base()
ARM GAS  /tmp/ccx1vdif.s 			page 16


 698:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 699:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       : _Variant_base(in_place_index<0>) { }
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args>
 702:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr explicit
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 704:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 705:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 706:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 707:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_base(const _Variant_base&) = default;
 708:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_base(_Variant_base&&) = default;
 709:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_base& operator=(const _Variant_base&) = default;
 710:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_base& operator=(_Variant_base&&) = default;
 711:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 712:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 713:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // For how many times does _Tp appear in _Tuple?
 714:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Tuple>
 715:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __tuple_count;
 716:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 717:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Tuple>
 718:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     inline constexpr size_t __tuple_count_v =
 719:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __tuple_count<_Tp, _Tuple>::value;
 720:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 721:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
 722:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __tuple_count<_Tp, tuple<_Types...>>
 723:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : integral_constant<size_t, 0> { };
 724:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 725:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 726:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __tuple_count<_Tp, tuple<_First, _Rest...>>
 727:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : integral_constant<
 728:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	size_t,
 729:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__tuple_count_v<_Tp, tuple<_Rest...>> + is_same_v<_Tp, _First>> { };
 730:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 731:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // TODO: Reuse this in <tuple> ?
 732:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
 733:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     inline constexpr bool __exactly_once =
 734:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __tuple_count_v<_Tp, tuple<_Types...>> == 1;
 735:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 736:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Helper used to check for valid conversions that don't involve narrowing.
 737:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Ti> struct _Arr { _Ti _M_x[1]; };
 738:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 739:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Build an imaginary function FUN(Ti) for each alternative type Ti
 740:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti,
 741:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   bool _Ti_is_cv_bool = is_same_v<remove_cv_t<_Ti>, bool>,
 742:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   typename = void>
 743:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Build_FUN
 744:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 745:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // This function means 'using _Build_FUN<I, T, Ti>::_S_fun;' is valid,
 746:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // but only static functions will be considered in the call below.
 747:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void _S_fun();
 748:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 749:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 750:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // ... for which Ti x[] = {std::forward<T>(t)}; is well-formed,
 751:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 752:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, false,
 753:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      void_t<decltype(_Arr<_Ti>{{std::declval<_Tp>()}})>>
 754:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
ARM GAS  /tmp/ccx1vdif.s 			page 17


 755:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // This is the FUN function for type _Ti, with index _Ind
 756:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 757:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 758:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 759:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // ... and if Ti is cv bool, remove_cvref_t<T> is bool.
 760:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 761:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, true,
 762:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      enable_if_t<is_same_v<__remove_cvref_t<_Tp>, bool>>>
 763:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 764:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // This is the FUN function for when _Ti is cv bool, with index _Ind
 765:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 766:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 767:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 768:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Variant,
 769:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   typename = make_index_sequence<variant_size_v<_Variant>>>
 770:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Build_FUNs;
 771:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 772:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Ti, size_t... _Ind>
 773:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Build_FUNs<_Tp, variant<_Ti...>, index_sequence<_Ind...>>
 774:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : _Build_FUN<_Ind, _Tp, _Ti>...
 775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 776:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Build_FUN<_Ind, _Tp, _Ti>::_S_fun...;
 777:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 778:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 779:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // The index j of the overload FUN(Tj) selected by overload resolution
 780:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // for FUN(std::forward<_Tp>(t))
 781:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Variant>
 782:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _FUN_type
 783:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       = decltype(_Build_FUNs<_Tp, _Variant>::_S_fun(std::declval<_Tp>()));
 784:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 785:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // The index selected for FUN(std::forward<T>(t)), or variant_npos if none.
 786:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Variant, typename = void>
 787:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __accepted_index
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : integral_constant<size_t, variant_npos>
 789:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { };
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Variant>
 792:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>
 793:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : _FUN_type<_Tp, _Variant>
 794:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { };
 795:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 796:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Returns the raw storage for __v.
 797:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
 798:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     void* __get_storage(_Variant&& __v) noexcept
 799:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return __v._M_storage(); }
 800:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 801:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template <typename _Maybe_variant_cookie, typename _Variant>
 802:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Extra_visit_slot_needed
 803:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 804:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename> struct _Variant_never_valueless;
 805:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 806:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename... _Types>
 807:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct _Variant_never_valueless<variant<_Types...>>
 808:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: bool_constant<__variant::__never_valueless<_Types...>()> {};
 809:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 810:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool value =
 811:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	(is_same_v<_Maybe_variant_cookie, __variant_cookie>
ARM GAS  /tmp/ccx1vdif.s 			page 18


 812:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	 || is_same_v<_Maybe_variant_cookie, __variant_idx_cookie>)
 813:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	&& !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
 814:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 815:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 816:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Used for storing a multi-dimensional vtable.
 817:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, size_t... _Dimensions>
 818:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Multi_array;
 819:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 820:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Partial specialization with rank zero, stores a single _Tp element.
 821:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp>
 822:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Multi_array<_Tp>
 823:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 824:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename>
 825:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __untag_result
 826:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: false_type
 827:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ using element_type = _Tp; };
 828:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 829:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename... _Args>
 830:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __untag_result<const void(*)(_Args...)>
 831:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: false_type
 832:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ using element_type = void(*)(_Args...); };
 833:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 834:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename... _Args>
 835:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __untag_result<__variant_cookie(*)(_Args...)>
 836:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: false_type
 837:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ using element_type = void(*)(_Args...); };
 838:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 839:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename... _Args>
 840:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __untag_result<__variant_idx_cookie(*)(_Args...)>
 841:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: false_type
 842:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ using element_type = void(*)(_Args...); };
 843:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 844:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename _Res, typename... _Args>
 845:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __untag_result<__deduce_visit_result<_Res>(*)(_Args...)>
 846:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: true_type
 847:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ using element_type = _Res(*)(_Args...); };
 848:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 849:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using __result_is_deduced = __untag_result<_Tp>;
 850:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 851:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr const typename __untag_result<_Tp>::element_type&
 852:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _M_access() const
 853:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_data; }
 854:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 855:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       typename __untag_result<_Tp>::element_type _M_data;
 856:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 857:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 858:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Partial specialization with rank >= 1.
 859:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Ret,
 860:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   typename _Visitor,
 861:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   typename... _Variants,
 862:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   size_t __first, size_t... __rest>
 863:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Multi_array<_Ret(*)(_Visitor, _Variants...), __first, __rest...>
 864:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 865:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr size_t __index =
 866:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	sizeof...(_Variants) - sizeof...(__rest) - 1;
 867:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 868:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Variant = typename _Nth_type<__index, _Variants...>::type;
ARM GAS  /tmp/ccx1vdif.s 			page 19


 869:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 870:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr int __do_cookie =
 871:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;
 872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 873:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Tp = _Ret(*)(_Visitor, _Variants...);
 874:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 875:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename... _Args>
 876:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr decltype(auto)
 877:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_M_access(size_t __first_index, _Args... __rest_indices) const
 878:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 879:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return _M_arr[__first_index + __do_cookie]
 880:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    ._M_access(__rest_indices...);
 881:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 882:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 883:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
 884:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 885:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 886:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Creates a multi-dimensional vtable recursively.
 887:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //
 888:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // For example,
 889:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // visit([](auto, auto){},
 890:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //       variant<int, char>(),  // typedef'ed as V1
 891:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //       variant<float, double, long double>())  // typedef'ed as V2
 892:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // will trigger instantiations of:
 893:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 2, 3>,
 894:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                   tuple<V1&&, V2&&>, std::index_sequence<>>
 895:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 896:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<0>>
 897:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 898:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 0>>
 899:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 900:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 1>>
 901:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 902:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 2>>
 903:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 904:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<1>>
 905:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 906:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 0>>
 907:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 908:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 1>>
 909:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 910:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 2>>
 911:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // The returned multi-dimensional vtable can be fast accessed by the visitor
 912:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // using index calculation.
 913:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Array_type, typename _Index_seq>
 914:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __gen_vtable_impl;
 915:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Defines the _S_apply() member that returns a _Multi_array populated
 917:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // with function pointers that perform the visitation expressions e(m)
 918:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // for each valid pack of indexes into the variant types _Variants.
 919:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //
 920:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // This partial specialization builds up the index sequences by recursively
 921:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // calling _S_apply() on the next specialization of __gen_vtable_impl.
 922:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // The base case of the recursion defines the actual function pointers.
 923:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Result_type, typename _Visitor, size_t... __dimensions,
 924:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   typename... _Variants, size_t... __indices>
 925:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __gen_vtable_impl<
ARM GAS  /tmp/ccx1vdif.s 			page 20


 926:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,
 927:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	std::index_sequence<__indices...>>
 928:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 929:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Next =
 930:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  remove_reference_t<typename _Nth_type<sizeof...(__indices),
 931:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			     _Variants...>::type>;
 932:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Array_type =
 933:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
 934:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		       __dimensions...>;
 935:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 936:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr _Array_type
 937:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _S_apply()
 938:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 939:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Array_type __vtable{};
 940:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_S_apply_all_alts(
 941:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __vtable, make_index_sequence<variant_size_v<_Next>>());
 942:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return __vtable;
 943:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 944:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 945:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t... __var_indices>
 946:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr void
 947:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_S_apply_all_alts(_Array_type& __vtable,
 948:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			  std::index_sequence<__var_indices...>)
 949:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
 950:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)
 951:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    (_S_apply_single_alt<true, __var_indices>(
 952:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __vtable._M_arr[__var_indices + 1],
 953:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      &(__vtable._M_arr[0])), ...);
 954:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
 955:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    (_S_apply_single_alt<false, __var_indices>(
 956:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __vtable._M_arr[__var_indices]), ...);
 957:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 958:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 959:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<bool __do_cookie, size_t __index, typename _Tp>
 960:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr void
 961:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
 962:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
 963:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (__do_cookie)
 964:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
 965:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __element = __gen_vtable_impl<
 966:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		_Tp,
 967:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 968:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      *__cookie_element = __gen_vtable_impl<
 969:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		_Tp,
 970:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::index_sequence<__indices..., variant_npos>>::_S_apply();
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
 972:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
 973:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
 974:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __element = __gen_vtable_impl<
 975:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		remove_reference_t<decltype(__element)>,
 976:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 977:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
 978:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 979:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 980:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 981:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // This partial specialization is the base case for the recursion.
 982:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // It populates a _Multi_array element with the address of a function
ARM GAS  /tmp/ccx1vdif.s 			page 21


 983:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // that invokes the visitor with the alternatives specified by __indices.
 984:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants,
 985:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   size_t... __indices>
 986:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __gen_vtable_impl<
 987:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,
 988:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		   std::index_sequence<__indices...>>
 989:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 990:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Array_type =
 991:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...)>;
 992:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 993:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t __index, typename _Variant>
 994:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr decltype(auto)
 995:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__element_by_index_or_cookie(_Variant&& __var) noexcept
 996:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 997:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (__index != variant_npos)
 998:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 999:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
1000:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    return __variant_cookie{};
1001:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1002:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1003:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr decltype(auto)
1004:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
1005:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
1006:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
1007:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // For raw visitation using indices, pass the indices to the visitor
1008:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // and discard the return value:
1009:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1010:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1011:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::forward<_Variants>(__vars))...,
1012:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      integral_constant<size_t, __indices>()...);
1013:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
1014:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // For raw visitation without indices, and discard the return value:
1015:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1016:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1017:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::forward<_Variants>(__vars))...);
1018:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (_Array_type::__result_is_deduced::value)
1019:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // For the usual std::visit case deduce the return value:
1020:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return std::__invoke(std::forward<_Visitor>(__visitor),
1021:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1022:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::forward<_Variants>(__vars))...);
1023:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else // for std::visit<R> use INVOKE<R>
1024:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return std::__invoke_r<_Result_type>(
1025:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      std::forward<_Visitor>(__visitor),
1026:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
1027:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
1028:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1029:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr auto
1030:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _S_apply()
1031:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _Array_type{&__visit_invoke}; }
1032:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
1033:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1034:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
1035:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __gen_vtable
1036:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1037:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Array_type =
1038:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
1039:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		       variant_size_v<remove_reference_t<_Variants>>...>;
ARM GAS  /tmp/ccx1vdif.s 			page 22


1040:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1041:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr _Array_type _S_vtable
1042:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	= __gen_vtable_impl<_Array_type, std::index_sequence<>>::_S_apply();
1043:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
1044:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1045:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Tp>
1046:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Base_dedup : public _Tp { };
1047:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1048:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant, typename __indices>
1049:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_hash_base;
1050:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1051:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types, size_t... __indices>
1052:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_hash_base<variant<_Types...>,
1053:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			      std::index_sequence<__indices...>>
1054:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };
1055:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1056:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
1057:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using __get_t = decltype(std::get<_Np>(std::declval<_Variant>()));
1058:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1059:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Return type of std::visit.
1060:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Visitor, typename... _Variants>
1061:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using __visit_result_t
1062:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       = invoke_result_t<_Visitor, __get_t<0, _Variants>...>;
1063:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1064:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** } // namespace __variant
1065:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** } // namespace __detail
1066:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1067:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant, typename... _Args>
1068:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
1069:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1070:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __v._M_index = _Np;
1071:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
1072:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       ::new ((void*)std::addressof(__storage))
1073:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         remove_reference_t<decltype(__storage)>
1074:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (std::forward<_Args>(__args)...);
1075:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1076:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1077:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1078:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr bool
1079:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     holds_alternative(const variant<_Types...>& __v) noexcept
1080:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1081:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1082:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1083:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
1084:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1085:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1086:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1087:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr _Tp& get(variant<_Types...>& __v)
1088:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1089:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1090:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1091:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1092:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1093:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1094:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1095:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1096:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr _Tp&& get(variant<_Types...>&& __v)
ARM GAS  /tmp/ccx1vdif.s 			page 23


1097:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1098:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1099:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	std::move(__v));
1103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr const _Tp& get(const variant<_Types...>& __v)
1107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr const _Tp&& get(const variant<_Types...>&& __v)
1116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	std::move(__v));
1122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
1125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>
1126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(_Np < sizeof...(_Types),
1130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "The index must be in [0, number of alternatives)");
1131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       if (__ptr && __ptr->index() == _Np)
1133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return nullptr;
1135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
1138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr
1139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>>
1140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(_Np < sizeof...(_Types),
1144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "The index must be in [0, number of alternatives)");
1145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       if (__ptr && __ptr->index() == _Np)
1147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return nullptr;
1149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr add_pointer_t<_Tp>
1153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
ARM GAS  /tmp/ccx1vdif.s 			page 24


1154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __ptr);
1160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr add_pointer_t<const _Tp>
1164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __ptr);
1171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   struct monostate { };
1174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \
1176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types> \
1177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr bool operator __OP(const variant<_Types...>& __lhs, \
1178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				 const variant<_Types...>& __rhs) \
1179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { \
1180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       bool __ret = true; \
1181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __detail::__variant::__raw_idx_visit( \
1182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         [&__ret, &__lhs] (auto&& __rhs_mem, auto __rhs_index) mutable \
1183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         { \
1184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (__rhs_index != variant_npos) \
1185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    { \
1186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      if (__lhs.index() == __rhs_index) \
1187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	        { \
1188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  auto& __this_mem = std::get<__rhs_index>(__lhs);	\
1189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****                   __ret = __this_mem __OP __rhs_mem; \
1190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****                 } \
1191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      else \
1192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		__ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****             } \
1194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****           else \
1195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****             __ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}, __rhs); \
1197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return __ret; \
1198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
1201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
1202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)
1203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)
1204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
1205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
1206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator==(monostate, monostate) noexcept { return true; }
1210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
ARM GAS  /tmp/ccx1vdif.s 			page 25


1211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #ifdef __cpp_lib_three_way_comparison
1212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
1213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     requires (three_way_comparable<_Types> && ...)
1214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr
1215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     common_comparison_category_t<compare_three_way_result_t<_Types>...>
1216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     operator<=>(const variant<_Types...>& __v, const variant<_Types...>& __w)
1217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       common_comparison_category_t<compare_three_way_result_t<_Types>...> __ret
1219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	= strong_ordering::equal;
1220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __detail::__variant::__raw_idx_visit(
1222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	[&__ret, &__v] (auto&& __w_mem, auto __w_index) mutable
1223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
1224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (__w_index != variant_npos)
1225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      if (__v.index() == __w_index)
1227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		{
1228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  auto& __this_mem = std::get<__w_index>(__v);
1229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __ret = __this_mem <=> __w_mem;
1230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  return;
1231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		}
1232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __ret = (__v.index() + 1) <=> (__w_index + 1);
1234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}, __w);
1235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return __ret;
1236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr strong_ordering
1239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   operator<=>(monostate, monostate) noexcept { return strong_ordering::equal; }
1240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #else
1241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator!=(monostate, monostate) noexcept { return false; }
1242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator<(monostate, monostate) noexcept { return false; }
1243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator>(monostate, monostate) noexcept { return false; }
1244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator<=(monostate, monostate) noexcept { return true; }
1245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator>=(monostate, monostate) noexcept { return true; }
1246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #endif
1247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Visitor, typename... _Variants>
1249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr __detail::__variant::__visit_result_t<_Visitor, _Variants...>
1250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     visit(_Visitor&&, _Variants&&...);
1251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
1253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     inline enable_if_t<(is_move_constructible_v<_Types> && ...)
1254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			&& (is_swappable_v<_Types> && ...)>
1255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
1256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     noexcept(noexcept(__lhs.swap(__rhs)))
1257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { __lhs.swap(__rhs); }
1258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
1260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     enable_if_t<!((is_move_constructible_v<_Types> && ...)
1261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		   && (is_swappable_v<_Types> && ...))>
1262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     swap(variant<_Types...>&, variant<_Types...>&) = delete;
1263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   class bad_variant_access : public exception
1265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
1266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   public:
1267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     bad_variant_access() noexcept { }
ARM GAS  /tmp/ccx1vdif.s 			page 26


1268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     const char* what() const noexcept override
  67              		.loc 2 1269 17 is_stmt 1 view -0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              		@ link register save eliminated.
1270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return _M_reason; }
  72              		.loc 2 1270 7 view .LVU5
  73              		.loc 2 1270 25 is_stmt 0 view .LVU6
  74 0000 4068     		ldr	r0, [r0, #4]
  75              	.LVL3:
  76              		.loc 2 1270 25 view .LVU7
  77 0002 7047     		bx	lr
  78              		.cfi_endproc
  79              	.LFE2859:
  80              		.cantunwind
  81              		.fnend
  83              		.section	.text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm,"
  84              		.align	1
  85              		.global	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  90              	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:
  91              		.fnstart
  92              	.LVL4:
  93              	.LFB4269:
  94              		.file 3 "MotorControl/foc.cpp"
   1:MotorControl/foc.cpp **** 
   2:MotorControl/foc.cpp **** #include "foc.hpp"
   3:MotorControl/foc.cpp **** #include <board.h>
   4:MotorControl/foc.cpp **** 
   5:MotorControl/foc.cpp **** Motor::Error AlphaBetaFrameController::on_measurement(
   6:MotorControl/foc.cpp ****             std::optional<float> vbus_voltage,
   7:MotorControl/foc.cpp ****             std::optional<std::array<float, 3>> currents,
   8:MotorControl/foc.cpp ****             uint32_t input_timestamp) {
  95              		.loc 3 8 39 is_stmt 1 view -0
  96              		.cfi_startproc
  97              		@ args = 24, pretend = 8, frame = 32
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		.loc 3 8 39 is_stmt 0 view .LVU9
 100              		.pad #8
 101 0000 82B0     		sub	sp, sp, #8
 102              	.LCFI0:
 103              		.cfi_def_cfa_offset 8
 104 0002 10B5     		push	{r4, lr}
 105              		.save {r4, lr}
 106              	.LCFI1:
 107              		.cfi_def_cfa_offset 16
 108              		.cfi_offset 4, -16
 109              		.cfi_offset 14, -12
 110              		.pad #48
 111 0004 8CB0     		sub	sp, sp, #48
 112              	.LCFI2:
 113              		.cfi_def_cfa_offset 64
 114 0006 8446     		mov	ip, r0
ARM GAS  /tmp/ccx1vdif.s 			page 27


 115 0008 04A8     		add	r0, sp, #16
 116 000a 80E80600 		stm	r0, {r1, r2}
 117 000e 0F93     		str	r3, [sp, #60]
   9:MotorControl/foc.cpp **** 
  10:MotorControl/foc.cpp ****     std::optional<float2D> Ialpha_beta;
 118              		.loc 3 10 5 is_stmt 1 view .LVU10
 119              		.loc 3 10 28 is_stmt 0 view .LVU11
 120 0010 0023     		movs	r3, #0
 121 0012 0793     		str	r3, [sp, #28]
 122 0014 0893     		str	r3, [sp, #32]
 123 0016 0993     		str	r3, [sp, #36]
  11:MotorControl/foc.cpp ****     
  12:MotorControl/foc.cpp ****     if (currents.has_value()) {
 124              		.loc 3 12 5 is_stmt 1 view .LVU12
 125              	.LVL5:
 126              	.LBB1101:
 127              	.LBI1101:
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   };
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   void
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   __throw_bad_optional_access()
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   __attribute__((__noreturn__));
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // XXX Does not belong here.
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   inline void
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   __throw_bad_optional_access()
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // This class template manages construction/destruction of
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // the contained value for a std::optional.
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload_base
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base() = default;
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_engaged(true)
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args>
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_Optional_payload_base(std::initializer_list<_Up> __il,
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			       _Args&&... __args)
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__il, std::forward<_Args>(__args)...),
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_engaged(true)
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructor used by _Optional_base copy constructor when the
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // contained value is not trivially copy constructible.
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(bool __engaged,
ARM GAS  /tmp/ccx1vdif.s 			page 28


 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			     const _Optional_payload_base& __other)
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (__other._M_engaged)
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(__other._M_get());
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructor used by _Optional_base move constructor when the
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // contained value is not trivially move constructible.
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(bool __engaged,
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			     _Optional_payload_base&& __other)
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (__other._M_engaged)
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(std::move(__other._M_get()));
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy constructor is only used to when the contained value is
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // trivially copy constructible.
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(const _Optional_payload_base&) = default;
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Move constructor is only used to when the contained value is
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // trivially copy constructible.
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(_Optional_payload_base&&) = default;
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base&
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(const _Optional_payload_base&) = default;
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base&
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(_Optional_payload_base&&) = default;
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // used to perform non-trivial copy assignment.
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_copy_assign(const _Optional_payload_base& __other)
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         if (this->_M_engaged && __other._M_engaged)
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           this->_M_get() = __other._M_get();
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         else
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    if (__other._M_engaged)
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(__other._M_get());
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    else
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // used to perform non-trivial move assignment.
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_move_assign(_Optional_payload_base&& __other)
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (this->_M_engaged && __other._M_engaged)
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	else
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    if (__other._M_engaged)
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
ARM GAS  /tmp/ccx1vdif.s 			page 29


 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    else
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       struct _Empty_byte { };
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, bool = is_trivially_destructible_v<_Up>>
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	union _Storage
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename... _Args>
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename _Vp, typename... _Args>
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _Empty_byte _M_empty;
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           _Up _M_value;
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	};
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	union _Storage<_Up, false>
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename... _Args>
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename _Vp, typename... _Args>
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  // User-provided destructor is needed when _Up has non-trivial dtor.
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ~_Storage() { }
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _Empty_byte _M_empty;
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           _Up _M_value;
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	};
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Storage<_Stored_type> _M_payload;
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       bool _M_engaged = false;
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
ARM GAS  /tmp/ccx1vdif.s 			page 30


 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         void
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         _M_construct(_Args&&... __args)
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         {
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           ::new ((void *) std::__addressof(this->_M_payload))
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           this->_M_engaged = true;
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         }
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_destroy() noexcept
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_engaged = false;
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // The _M_get() operations have _M_engaged as a precondition.
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // They exist to access the contained value with the appropriate
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // const-qualification, because _M_payload has had the const removed.
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() noexcept
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_payload._M_value; }
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() const noexcept
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_payload._M_value; }
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_reset() noexcept
 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (this->_M_engaged)
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Class template that manages the payload for optionals.
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp,
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    bool /*_HasTrivialDestructor*/ =
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      is_trivially_destructible_v<_Tp>,
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    bool /*_HasTrivialCopy */ =
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      is_trivially_copy_assignable_v<_Tp>
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      && is_trivially_copy_constructible_v<_Tp>,
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    bool /*_HasTrivialMove */ =
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      is_trivially_move_assignable_v<_Tp>
 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      && is_trivially_move_constructible_v<_Tp>>
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload;
 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for potentially-constexpr optionals (trivial copy/move/destroy).
 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, true, true>
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
ARM GAS  /tmp/ccx1vdif.s 			page 31


 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial copy construction/assignment.
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, false, true>
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial copy assignment.
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(const _Optional_payload& __other)
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_copy_assign(__other);
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial move construction/assignment.
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, true, false>
 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial move assignment.
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(_Optional_payload&& __other)
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_move_assign(std::move(__other));
 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial copy and move assignment.
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, false, false>
 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
ARM GAS  /tmp/ccx1vdif.s 			page 32


 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial copy assignment.
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(const _Optional_payload& __other)
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_copy_assign(__other);
 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial move assignment.
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(_Optional_payload&& __other)
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_move_assign(std::move(__other));
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial destructors.
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp, bool _Copy, bool _Move>
 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, false, _Copy, _Move>
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload<_Tp, true, false, false>
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Base class implements all the constructors and assignment operators:
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Destructor needs to destroy the contained value:
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() { this->_M_reset(); }
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Common base class for _Optional_base<T> to avoid repeating these
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // member functions in each specialization.
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Dp>
 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     class _Optional_base_impl
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     protected:
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // The _M_construct operation has !_M_engaged as a precondition
 412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // while _M_destruct has _M_engaged as a precondition.
 413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
 414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	void
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_construct(_Args&&... __args)
 416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
ARM GAS  /tmp/ccx1vdif.s 			page 33


 417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ::new
 419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       void
 425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_destruct() noexcept
 426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_destroy(); }
 427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_reset() noexcept
 431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr bool _M_is_engaged() const noexcept
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // The _M_get operations have _M_engaged as a precondition.
 437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&
 438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() noexcept
 439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return static_cast<_Dp*>(this)->_M_payload._M_get();
 442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&
 445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() const noexcept
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
 453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * @brief Class template that provides copy/move constructors of optional.
 454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
 455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * Such a separate base class template is necessary in order to
 456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * conditionally make copy/move constructors trivial.
 457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
 458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * When the contained value is trivially copy/move constructible,
 459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * the copy/move constructors of _Optional_base will invoke the
 460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * trivial copy/move constructor of _Optional_payload. Otherwise,
 461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * they will invoke _Optional_payload(bool, const _Optional_payload&)
 462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * or _Optional_payload(bool, _Optional_payload&&) to initialize
 463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * the contained value, if copying/moving an engaged optional.
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
 465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * Whether the other special members are trivial is determined by the
 466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * _Optional_payload<_Tp> specialization used for the _M_payload member.
 467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
 468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * @see optional, _Enable_special_members
 469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     */
 470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp,
 471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	   bool = is_trivially_copy_constructible_v<_Tp>,
 472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	   bool = is_trivially_move_constructible_v<_Tp>>
 473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base
ARM GAS  /tmp/ccx1vdif.s 			page 34


 474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
 478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __other._M_payload)
 501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::move(__other._M_payload))
 507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base<_Tp, false, true>
 518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
 522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
ARM GAS  /tmp/ccx1vdif.s 			page 35


 531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __other._M_payload)
 545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base<_Tp, true, false>
 558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
 562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::move(__other._M_payload))
ARM GAS  /tmp/ccx1vdif.s 			page 36


 588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base<_Tp, true, true>
 599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
 603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   class optional;
 635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __converts_from_optional =
 638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       __or_<is_constructible<_Tp, const optional<_Up>&>,
 639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_constructible<_Tp, optional<_Up>&>,
 640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_constructible<_Tp, const optional<_Up>&&>,
 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_constructible<_Tp, optional<_Up>&&>,
 642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<const optional<_Up>&, _Tp>,
 643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<optional<_Up>&, _Tp>,
 644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<const optional<_Up>&&, _Tp>,
ARM GAS  /tmp/ccx1vdif.s 			page 37


 645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<optional<_Up>&&, _Tp>>;
 646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __assigns_from_optional =
 649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       __or_<is_assignable<_Tp&, const optional<_Up>&>,
 650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&>,
 651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_assignable<_Tp&, const optional<_Up>&&>,
 652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&&>>;
 653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
 655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * @brief Class template for optional values.
 656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     */
 657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     class optional
 659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : private _Optional_base<_Tp>,
 660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       private _Enable_copy_move<
 661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Copy constructor.
 662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	is_copy_constructible_v<_Tp>,
 663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Copy assignment.
 664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__and_v<is_copy_constructible<_Tp>, is_copy_assignable<_Tp>>,
 665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Move constructor.
 666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	is_move_constructible_v<_Tp>,
 667:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Move assignment.
 668:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__and_v<is_move_constructible<_Tp>, is_move_assignable<_Tp>>,
 669:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Unique tag type.
 670:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional<_Tp>>
 671:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 672:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, nullopt_t>);
 673:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, in_place_t>);
 674:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       static_assert(!is_reference_v<_Tp>);
 675:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 676:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     private:
 677:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Base = _Optional_base<_Tp>;
 678:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 679:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // SFINAE helpers
 680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 681:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using __not_self = __not_<is_same<optional, __remove_cvref_t<_Up>>>;
 682:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 683:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using __not_tag = __not_<is_same<in_place_t, __remove_cvref_t<_Up>>>;
 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Cond>
 685:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using _Requires = enable_if_t<__and_v<_Cond...>, bool>;
 686:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 687:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     public:
 688:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using value_type = _Tp;
 689:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr optional() = default;
 691:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr optional(nullopt_t) noexcept { }
 693:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 694:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Converting constructors for engaged optionals.
 695:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up = _Tp,
 696:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 698:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_convertible<_Up&&, _Tp>> = true>
 699:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(_Up&& __t)
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
ARM GAS  /tmp/ccx1vdif.s 			page 38


 702:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up = _Tp,
 704:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 705:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 706:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<is_convertible<_Up&&, _Tp>>> = false>
 707:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 708:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(_Up&& __t)
 709:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _Base(std::in_place, std::forward<_Up>(__t)) { }
 710:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 711:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up,
 712:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 713:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 714:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_convertible<const _Up&, _Tp>,
 715:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = true>
 716:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 717:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(const optional<_Up>& __t)
 718:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 719:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 720:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(*__t);
 721:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 722:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 723:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up,
 724:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 725:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 726:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<is_convertible<const _Up&, _Tp>>,
 727:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = false>
 728:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 729:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(const optional<_Up>& __t)
 730:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 731:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 732:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(*__t);
 733:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 734:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 735:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template <typename _Up,
 736:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 737:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 738:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  is_convertible<_Up&&, _Tp>,
 739:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = true>
 740:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 741:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(optional<_Up>&& __t)
 742:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 743:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 744:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(std::move(*__t));
 745:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 746:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 747:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template <typename _Up,
 748:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 749:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 750:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  __not_<is_convertible<_Up&&, _Tp>>,
 751:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = false>
 752:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 753:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(optional<_Up>&& __t)
 754:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 755:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 756:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(std::move(*__t));
 757:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 758:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
ARM GAS  /tmp/ccx1vdif.s 			page 39


 759:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 760:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<is_constructible<_Tp, _Args&&...>> = false>
 761:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 762:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(in_place_t, _Args&&... __args)
 763:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Args>(__args)...) { }
 764:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 765:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 766:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<is_constructible<_Tp,
 767:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					  initializer_list<_Up>&,
 768:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					  _Args&&...>> = false>
 769:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 770:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
 771:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, __il, std::forward<_Args>(__args)...) { }
 772:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 773:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 774:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       optional&
 775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(nullopt_t) noexcept
 776:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 777:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_reset();
 778:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 779:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 780:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 781:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up = _Tp>
 782:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<__and_v<__not_self<_Up>,
 783:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__and_<is_scalar<_Tp>,
 784:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					  is_same<_Tp, decay_t<_Up>>>>,
 785:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_constructible<_Tp, _Up>,
 786:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_assignable<_Tp&, _Up>>,
 787:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		    optional&>
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	operator=(_Up&& __u)
 789:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (this->_M_is_engaged())
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 792:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 793:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_construct(std::forward<_Up>(__u));
 794:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 795:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return *this;
 796:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 797:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 798:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 799:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 800:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_constructible<_Tp, const _Up&>,
 801:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_assignable<_Tp&, const _Up&>,
 802:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 803:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 804:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		    optional&>
 805:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	operator=(const optional<_Up>& __u)
 806:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 807:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__u)
 808:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
 809:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      if (this->_M_is_engaged())
 810:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_get() = *__u;
 811:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      else
 812:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_construct(*__u);
 813:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 814:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 815:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
ARM GAS  /tmp/ccx1vdif.s 			page 40


 816:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 817:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 818:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return *this;
 819:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 820:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 821:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 822:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 823:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_constructible<_Tp, _Up>,
 824:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_assignable<_Tp&, _Up>,
 825:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 826:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 827:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		    optional&>
 828:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	operator=(optional<_Up>&& __u)
 829:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 830:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__u)
 831:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
 832:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      if (this->_M_is_engaged())
 833:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_get() = std::move(*__u);
 834:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      else
 835:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_construct(std::move(*__u));
 836:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 837:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 838:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
 839:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 840:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 841:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 842:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return *this;
 843:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 844:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 845:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
 846:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<is_constructible_v<_Tp, _Args&&...>, _Tp&>
 847:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	emplace(_Args&&... __args)
 848:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 849:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_reset();
 850:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(std::forward<_Args>(__args)...);
 851:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return this->_M_get();
 852:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 853:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 854:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args>
 855:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&,
 856:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 				       _Args&&...>, _Tp&>
 857:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
 858:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 859:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_reset();
 860:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(__il, std::forward<_Args>(__args)...);
 861:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return this->_M_get();
 862:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 863:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 864:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Destructor is implicit, implemented in _Optional_base.
 865:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 866:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Swap.
 867:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       void
 868:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       swap(optional& __other)
 869:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>
 870:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       && is_nothrow_swappable_v<_Tp>)
 871:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using std::swap;
ARM GAS  /tmp/ccx1vdif.s 			page 41


 873:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 874:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (this->_M_is_engaged() && __other._M_is_engaged())
 875:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  swap(this->_M_get(), __other._M_get());
 876:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	else if (this->_M_is_engaged())
 877:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 878:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    __other._M_construct(std::move(this->_M_get()));
 879:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_destruct();
 880:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 881:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	else if (__other._M_is_engaged())
 882:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 883:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_construct(std::move(__other._M_get()));
 884:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    __other._M_destruct();
 885:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 886:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 887:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 888:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Observers.
 889:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp*
 890:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator->() const
 891:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::__addressof(this->_M_get()); }
 892:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 893:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp*
 894:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator->()
 895:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::__addressof(this->_M_get()); }
 896:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 897:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&
 898:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*() const&
 899:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_get(); }
 900:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 901:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&
 902:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*()&
 903:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_get(); }
 904:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 905:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&&
 906:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*()&&
 907:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::move(this->_M_get()); }
 908:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 909:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&&
 910:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*() const&&
 911:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::move(this->_M_get()); }
 912:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 913:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr explicit operator bool() const noexcept
 914:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_is_engaged(); }
 915:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr bool has_value() const noexcept
 128              		.loc 1 916 22 view .LVU13
 129              	.LBB1102:
 130              	.LBI1102:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 131              		.loc 1 433 22 view .LVU14
 132              	.LBB1103:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 133              		.loc 1 434 58 is_stmt 0 view .LVU15
 134 0018 9DF84830 		ldrb	r3, [sp, #72]	@ zero_extendqisi2
 135              	.LVL6:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 136              		.loc 1 434 58 view .LVU16
 137              	.LBE1103:
ARM GAS  /tmp/ccx1vdif.s 			page 42


 138              	.LBE1102:
 139              	.LBE1101:
 140              		.loc 3 12 5 view .LVU17
 141 001c B3B1     		cbz	r3, .L6
  13:MotorControl/foc.cpp ****         // Clarke transform
  14:MotorControl/foc.cpp ****         Ialpha_beta = {
 142              		.loc 3 14 9 is_stmt 1 view .LVU18
  15:MotorControl/foc.cpp ****             (*currents)[0],
  16:MotorControl/foc.cpp ****             one_by_sqrt3 * ((*currents)[1] - (*currents)[2])
 143              		.loc 3 16 44 is_stmt 0 view .LVU19
 144 001e DDED107A 		vldr.32	s15, [sp, #64]
 145 0022 9DED117A 		vldr.32	s14, [sp, #68]
 146 0026 77EEC77A 		vsub.f32	s15, s15, s14
 147              		.loc 3 16 26 view .LVU20
 148 002a 9FED127A 		vldr.32	s14, .L8
 149 002e 67EE877A 		vmul.f32	s15, s15, s14
 150              	.LVL7:
 151              	.LBB1104:
 152              	.LBI1104:
 153              		.file 4 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** /*
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *
ARM GAS  /tmp/ccx1vdif.s 			page 43


  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  */
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  */
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** # include <type_traits> // for std::__decay_and_strip, std::is_reference_v
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus > 201703L
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** # include <compare>
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** # define __cpp_lib_constexpr_utility 201811L
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** {
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   /**
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  @addtogroup utilities
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  @{
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    */
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   /// Tag type for piecewise construction of std::pair objects.
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   /// Tag for piecewise construction of std::pair objects.
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     piecewise_construct_t();
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   /// @cond undocumented
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // Forward declarations.
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template<typename...>
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     class tuple;
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template<std::size_t...>
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     struct _Index_tuple;
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccx1vdif.s 			page 44


  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // constructors.
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // is_convertible if the types are the same to
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     struct _PCC
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     {
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				       __do_converts,
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      __converts
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      >::value;
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				       __do_converts,
ARM GAS  /tmp/ccx1vdif.s 			page 45


 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      __converts
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      >::value;
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   };
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     {
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return false;
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return false;
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return false;
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return false;
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   };
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif // C++11
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   {
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     __pair_base() = default;
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     ~__pair_base() = default;
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif // C++11
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   };
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   /// @endcond
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  /**
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
ARM GAS  /tmp/ccx1vdif.s 			page 46


 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    */
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     struct pair
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     {
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       typedef _T1 first_type;    ///< The type of the `first` member
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       typedef _T2 second_type;   ///< The type of the `second` member
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       _T1 first;                 ///< The first member
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       _T2 second;                ///< The second member
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        *  respective default constructors.  */
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(), second() { }
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                        __not_<
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       explicit constexpr pair()
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(), second() { }
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// Two objects may be passed to a @c pair constructor to be copied.
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #else
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// @cond undocumented
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// @endcond
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// Construct from two const lvalues, allowing implicit conversions.
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	                 && _PCCP::template
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=true>
ARM GAS  /tmp/ccx1vdif.s 			page 47


 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// Construct from two const lvalues, disallowing implicit conversions.
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		enable_if<_PCCP::template
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	                  && !_PCCP::template
 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// There is also a templated constructor to convert from other pairs.
 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #else
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// @cond undocumented
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			    _T1, _T2>;
 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// @endcond
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			  bool>::type=true>
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****         constexpr pair(const pair<_U1, _U2>& __p)
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****         : first(__p.first), second(__p.second) { }
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       constexpr pair(const pair&) = default;	///< Copy constructor
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       constexpr pair(pair&&) = default;		///< Move constructor
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       // DR 811.
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveCopyPair<true, _U1, _T2>(),
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=true>
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        constexpr pair(_U1&& __x, const _T2& __y)
ARM GAS  /tmp/ccx1vdif.s 			page 48


 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveCopyPair<false, _U1, _T2>(),
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        explicit constexpr pair(_U1&& __x, const _T2& __y)
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U2, typename
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _CopyMovePair<true, _T1, _U2>(),
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=true>
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        constexpr pair(const _T1& __x, _U2&& __y)
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U2, typename
 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _CopyMovePair<false, _T1, _U2>(),
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        explicit pair(const _T1& __x, _U2&& __y)
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			  && _PCCP::template
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=true>
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	constexpr pair(_U1&& __x, _U2&& __y)
 154              		.loc 4 352 12 is_stmt 1 view .LVU21
 155              	.LBB1105:
 156              	.LBB1106:
 157              	.LBB1107:
 158              	.LBI1107:
 159              		.file 5 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
ARM GAS  /tmp/ccx1vdif.s 			page 49


  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** /** @file bits/move.h
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****  */
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #ifndef _MOVE_H
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #define _MOVE_H 1
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #include <bits/c++config.h>
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #if __cplusplus < 201103L
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** # include <bits/concept_check.h>
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #endif
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** {
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   /**
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @ingroup utilities
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    */
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   template<typename _Tp>
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     { return __builtin_addressof(__r); }
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #if __cplusplus >= 201103L
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** } // namespace
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** {
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   /**
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @addtogroup utilities
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @{
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    */
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   /**
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    */
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   template<typename _Tp>
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     constexpr _Tp&&
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 160              		.loc 5 76 5 view .LVU22
 161              		.loc 5 76 5 is_stmt 0 view .LVU23
ARM GAS  /tmp/ccx1vdif.s 			page 50


 162              	.LBE1107:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 163              		.loc 4 353 64 view .LVU24
 164 0032 0F9B     		ldr	r3, [sp, #60]	@ float
 165 0034 0A93     		str	r3, [sp, #40]	@ float
 166              	.LVL8:
 167              	.LBB1108:
 168              	.LBI1108:
 169              		.loc 5 76 5 is_stmt 1 view .LVU25
 170              		.loc 5 76 5 is_stmt 0 view .LVU26
 171              	.LBE1108:
 172              		.loc 4 353 64 view .LVU27
 173 0036 CDED0B7A 		vstr.32	s15, [sp, #44]
 174              	.LVL9:
 175              		.loc 4 353 64 view .LVU28
 176              	.LBE1106:
 177              	.LBE1105:
 178              	.LBE1104:
 179              	.LBB1109:
 180              	.LBI1109:
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 181              		.loc 1 788 2 is_stmt 1 view .LVU29
 182              	.LBB1110:
 183              	.LBI1110:
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 184              		.loc 1 415 2 view .LVU30
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 185              		.loc 1 415 2 is_stmt 0 view .LVU31
 186              	.LBE1110:
 187              	.LBE1109:
 188              		.file 6 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // Copyright (C) 1994-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // This file is part of GCC.
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** //
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // it under the terms of the GNU General Public License as published by
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // any later version.
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // 
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // GNU General Public License for more details.
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // 
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // You should have received a copy of the GNU General Public License and
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // <http://www.gnu.org/licenses/>.
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** /** @file new
ARM GAS  /tmp/ccx1vdif.s 			page 51


  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  This is a Standard C++ Library header.
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  handling memory allocation errors; see
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  for more.
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  */
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #ifndef _NEW
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #define _NEW
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #pragma GCC system_header
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #include <bits/c++config.h>
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #include <exception>
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #pragma GCC visibility push(default)
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** extern "C++" {
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** namespace std 
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** {
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   /**
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *  @brief  Exception possibly thrown by @c new.
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *  @ingroup exceptions
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *  errors from the throwing forms of @c new.  */
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   class bad_alloc : public exception 
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   {
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   public:
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     bad_alloc() throw() { }
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cplusplus >= 201103L
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     bad_alloc(const bad_alloc&) = default;
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // This declaration is not useless:
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     virtual ~bad_alloc() throw();
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // See comment in eh_exception.cc.
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     virtual const char* what() const throw();
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   };
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cplusplus >= 201103L
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   class bad_array_new_length : public bad_alloc
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   {
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   public:
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     bad_array_new_length() throw() { }
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // This declaration is not useless:
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     virtual ~bad_array_new_length() throw();
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // See comment in eh_exception.cc.
ARM GAS  /tmp/ccx1vdif.s 			page 52


  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     virtual const char* what() const throw();
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   };
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cpp_aligned_new
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   enum class align_val_t: size_t {};
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   struct nothrow_t
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   {
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cplusplus >= 201103L
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     explicit nothrow_t() = default;
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   };
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   extern const nothrow_t nothrow;
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   /** If you write your own error handler to be called by @c new, it must
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *  be of this type.  */
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   typedef void (*new_handler)();
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   /// Takes a replacement handler as the argument, returns the
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   /// previous handler.
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   new_handler set_new_handler(new_handler) throw();
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cplusplus >= 201103L
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   /// Return the current new handler.
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   new_handler get_new_handler() noexcept;
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** } // namespace std
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** //@{
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** /** These are replaceable signatures:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  - normal array new and delete (same)
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *    @c NULL on error)
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  - @c nothrow array new and delete (same)
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  Placement new and delete signatures (take a memory address argument,
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  does nothing) may not be replaced by a user's program.
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** */
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cpp_sized_deallocation
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
ARM GAS  /tmp/ccx1vdif.s 			page 53


 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__, __malloc__));
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__, __malloc__));
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cpp_aligned_new
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*, std::align_val_t)
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*, std::align_val_t)
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cpp_sized_deallocation
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif // __cpp_sized_deallocation
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif // __cpp_aligned_new
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // Default placement versions of operator new.
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** { return __p; }
 189              		.loc 6 175 3 is_stmt 1 view .LVU32
 190              	.LBB1113:
 191              	.LBB1112:
 192              	.LBB1111:
 193              		.loc 6 175 3 is_stmt 0 view .LVU33
 194 003a 07AB     		add	r3, sp, #28
 195 003c 0CAA     		add	r2, sp, #48
 196 003e 12E90300 		ldmdb	r2, {r0, r1}
 197              	.LVL10:
 198              		.loc 6 175 3 view .LVU34
 199 0042 83E80300 		stm	r3, {r0, r1}
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 200              		.loc 1 421 51 view .LVU35
 201 0046 0123     		movs	r3, #1
 202 0048 8DF82430 		strb	r3, [sp, #36]
 203              	.LVL11:
 204              	.L6:
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 205              		.loc 1 421 51 view .LVU36
 206              	.LBE1111:
 207              	.LBE1112:
 208              	.LBE1113:
ARM GAS  /tmp/ccx1vdif.s 			page 54


  17:MotorControl/foc.cpp ****         };
  18:MotorControl/foc.cpp ****     }
  19:MotorControl/foc.cpp ****     
  20:MotorControl/foc.cpp ****     return on_measurement(vbus_voltage, Ialpha_beta, input_timestamp);
 209              		.loc 3 20 5 is_stmt 1 view .LVU37
 210              		.loc 3 20 69 is_stmt 0 view .LVU38
 211 004c DCF80030 		ldr	r3, [ip]
 212 0050 DC68     		ldr	r4, [r3, #12]
 213              		.loc 3 20 26 view .LVU39
 214 0052 139B     		ldr	r3, [sp, #76]
 215 0054 0293     		str	r3, [sp, #8]
 216 0056 08AB     		add	r3, sp, #32
 217 0058 93E80300 		ldm	r3, {r0, r1}
 218 005c 8DE80300 		stm	sp, {r0, r1}
 219 0060 079B     		ldr	r3, [sp, #28]
 220 0062 04AA     		add	r2, sp, #16
 221 0064 06CA     		ldm	r2, {r1, r2}
 222 0066 6046     		mov	r0, ip
 223 0068 A047     		blx	r4
 224              	.LVL12:
  21:MotorControl/foc.cpp **** }
 225              		.loc 3 21 1 view .LVU40
 226 006a 0CB0     		add	sp, sp, #48
 227              	.LCFI3:
 228              		.cfi_def_cfa_offset 16
 229              		@ sp needed
 230 006c BDE81040 		pop	{r4, lr}
 231              	.LCFI4:
 232              		.cfi_restore 14
 233              		.cfi_restore 4
 234              		.cfi_def_cfa_offset 8
 235 0070 02B0     		add	sp, sp, #8
 236              	.LCFI5:
 237              		.cfi_def_cfa_offset 0
 238 0072 7047     		bx	lr
 239              	.L9:
 240              		.align	2
 241              	.L8:
 242 0074 3ACD133F 		.word	1058262330
 243              		.cfi_endproc
 244              	.LFE4269:
 245              		.fnend
 247              		.section	.text._ZN23FieldOrientedController5resetEv,"ax",%progbits
 248              		.align	1
 249              		.global	_ZN23FieldOrientedController5resetEv
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 254              	_ZN23FieldOrientedController5resetEv:
 255              		.fnstart
 256              	.LVL13:
 257              	.LFB4329:
  22:MotorControl/foc.cpp **** 
  23:MotorControl/foc.cpp **** Motor::Error AlphaBetaFrameController::get_output(
  24:MotorControl/foc.cpp ****             uint32_t output_timestamp, float (&pwm_timings)[3],
  25:MotorControl/foc.cpp ****             std::optional<float>* ibus) {
  26:MotorControl/foc.cpp ****     std::optional<float2D> mod_alpha_beta;
ARM GAS  /tmp/ccx1vdif.s 			page 55


  27:MotorControl/foc.cpp ****     Motor::Error status = get_alpha_beta_output(output_timestamp, &mod_alpha_beta, ibus);
  28:MotorControl/foc.cpp ****     
  29:MotorControl/foc.cpp ****     if (status != Motor::ERROR_NONE) {
  30:MotorControl/foc.cpp ****         return status;
  31:MotorControl/foc.cpp ****     } else if (!mod_alpha_beta.has_value() || is_nan(mod_alpha_beta->first) || is_nan(mod_alpha_bet
  32:MotorControl/foc.cpp ****         return Motor::ERROR_MODULATION_IS_NAN;
  33:MotorControl/foc.cpp ****     }
  34:MotorControl/foc.cpp **** 
  35:MotorControl/foc.cpp ****     auto [tA, tB, tC, success] = SVM(mod_alpha_beta->first, mod_alpha_beta->second);
  36:MotorControl/foc.cpp ****     if (!success) {
  37:MotorControl/foc.cpp ****         return Motor::ERROR_MODULATION_MAGNITUDE;
  38:MotorControl/foc.cpp ****     }
  39:MotorControl/foc.cpp **** 
  40:MotorControl/foc.cpp ****     pwm_timings[0] = tA;
  41:MotorControl/foc.cpp ****     pwm_timings[1] = tB;
  42:MotorControl/foc.cpp ****     pwm_timings[2] = tC;
  43:MotorControl/foc.cpp **** 
  44:MotorControl/foc.cpp ****     return Motor::ERROR_NONE;
  45:MotorControl/foc.cpp **** }
  46:MotorControl/foc.cpp **** 
  47:MotorControl/foc.cpp **** void FieldOrientedController::reset() {
 258              		.loc 3 47 39 is_stmt 1 view -0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
  48:MotorControl/foc.cpp ****     v_current_control_integral_d_ = 0.0f;
 263              		.loc 3 48 5 view .LVU42
 264              		.loc 3 48 35 is_stmt 0 view .LVU43
 265 0000 0023     		movs	r3, #0
 266 0002 C0F89430 		str	r3, [r0, #148]	@ float
  49:MotorControl/foc.cpp ****     v_current_control_integral_q_ = 0.0f;
 267              		.loc 3 49 5 is_stmt 1 view .LVU44
 268              		.loc 3 49 35 is_stmt 0 view .LVU45
 269 0006 C0F89830 		str	r3, [r0, #152]	@ float
  50:MotorControl/foc.cpp ****     vbus_voltage_measured_ = std::nullopt;
 270              		.loc 3 50 5 is_stmt 1 view .LVU46
 271              	.LVL14:
 272              	.LBB1114:
 273              	.LBI1114:
 775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 274              		.loc 1 775 7 view .LVU47
 275              	.LBB1115:
 276              	.LBI1115:
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 277              		.loc 1 430 7 view .LVU48
 278              	.LBB1116:
 279              	.LBI1116:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 280              		.loc 1 276 7 view .LVU49
 281              	.LBB1117:
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 282              		.loc 1 278 12 is_stmt 0 view .LVU50
 283 000a 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 284              		.loc 1 278 2 view .LVU51
 285 000e 13B1     		cbz	r3, .L11
ARM GAS  /tmp/ccx1vdif.s 			page 56


 286              	.LVL15:
 287              	.LBB1118:
 288              	.LBI1118:
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 289              		.loc 1 256 7 is_stmt 1 view .LVU52
 290              	.LBB1119:
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 291              		.loc 1 258 13 is_stmt 0 view .LVU53
 292 0010 0023     		movs	r3, #0
 293 0012 80F87C30 		strb	r3, [r0, #124]
 294              	.LVL16:
 295              	.L11:
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 296              		.loc 1 258 13 view .LVU54
 297              	.LBE1119:
 298              	.LBE1118:
 299              	.LBE1117:
 300              	.LBE1116:
 301              	.LBE1115:
 302              	.LBE1114:
  51:MotorControl/foc.cpp ****     Ialpha_beta_measured_ = std::nullopt;
 303              		.loc 3 51 5 is_stmt 1 view .LVU55
 304              	.LBB1120:
 305              	.LBI1120:
 775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 306              		.loc 1 775 7 view .LVU56
 307              	.LBB1121:
 308              	.LBI1121:
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 309              		.loc 1 430 7 view .LVU57
 310              	.LBB1122:
 311              	.LBI1122:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 312              		.loc 1 276 7 view .LVU58
 313              	.LBB1123:
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 314              		.loc 1 278 12 is_stmt 0 view .LVU59
 315 0016 90F88830 		ldrb	r3, [r0, #136]	@ zero_extendqisi2
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 316              		.loc 1 278 2 view .LVU60
 317 001a 13B1     		cbz	r3, .L12
 318              	.LVL17:
 319              	.LBB1124:
 320              	.LBI1124:
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 321              		.loc 1 256 7 is_stmt 1 view .LVU61
 322              	.LBB1125:
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 323              		.loc 1 258 13 is_stmt 0 view .LVU62
 324 001c 0023     		movs	r3, #0
 325 001e 80F88830 		strb	r3, [r0, #136]
 326              	.LVL18:
 327              	.L12:
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 328              		.loc 1 258 13 view .LVU63
 329              	.LBE1125:
 330              	.LBE1124:
ARM GAS  /tmp/ccx1vdif.s 			page 57


 331              	.LBE1123:
 332              	.LBE1122:
 333              	.LBE1121:
 334              	.LBE1120:
  52:MotorControl/foc.cpp ****     power_ = 0.0f;
 335              		.loc 3 52 5 is_stmt 1 view .LVU64
 336              		.loc 3 52 12 is_stmt 0 view .LVU65
 337 0022 0023     		movs	r3, #0
 338 0024 C0F8A430 		str	r3, [r0, #164]	@ float
  53:MotorControl/foc.cpp **** }
 339              		.loc 3 53 1 view .LVU66
 340 0028 7047     		bx	lr
 341              		.cfi_endproc
 342              	.LFE4329:
 343              		.cantunwind
 344              		.fnend
 346              		.section	.text._ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm,"ax",%
 347              		.align	1
 348              		.global	_ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 349              		.syntax unified
 350              		.thumb
 351              		.thumb_func
 353              	_ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm:
 354              		.fnstart
 355              	.LVL19:
 356              	.LFB4330:
  54:MotorControl/foc.cpp **** 
  55:MotorControl/foc.cpp **** Motor::Error FieldOrientedController::on_measurement(
  56:MotorControl/foc.cpp ****         std::optional<float> vbus_voltage, std::optional<float2D> Ialpha_beta,
  57:MotorControl/foc.cpp ****         uint32_t input_timestamp) {
 357              		.loc 3 57 35 is_stmt 1 view -0
 358              		.cfi_startproc
 359              		@ args = 20, pretend = 8, frame = 8
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 362              		.loc 3 57 35 is_stmt 0 view .LVU68
 363 0000 82B0     		sub	sp, sp, #8
 364              	.LCFI6:
 365              		.cfi_def_cfa_offset 8
 366 0002 82B0     		sub	sp, sp, #8
 367              	.LCFI7:
 368              		.cfi_def_cfa_offset 16
 369 0004 8446     		mov	ip, r0
 370 0006 6846     		mov	r0, sp
 371 0008 80E80600 		stm	r0, {r1, r2}
 372 000c 0393     		str	r3, [sp, #12]
  58:MotorControl/foc.cpp ****     // Store the measurements for later processing.
  59:MotorControl/foc.cpp ****     i_timestamp_ = input_timestamp;
 373              		.loc 3 59 5 is_stmt 1 view .LVU69
 374              		.loc 3 59 18 is_stmt 0 view .LVU70
 375 000e 069B     		ldr	r3, [sp, #24]
 376 0010 CCF87430 		str	r3, [ip, #116]
  60:MotorControl/foc.cpp ****     vbus_voltage_measured_ = vbus_voltage;
 377              		.loc 3 60 5 is_stmt 1 view .LVU71
 378              		.loc 3 60 28 is_stmt 0 view .LVU72
 379 0014 0CF17803 		add	r3, ip, #120
 380 0018 03C8     		ldm	r0, {r0, r1}
ARM GAS  /tmp/ccx1vdif.s 			page 58


 381              	.LVL20:
 382              		.loc 3 60 28 view .LVU73
 383 001a 83E80500 		stm	r3, {r0, r2}
  61:MotorControl/foc.cpp ****     Ialpha_beta_measured_ = Ialpha_beta;
 384              		.loc 3 61 5 is_stmt 1 view .LVU74
 385              	.LVL21:
 386              	.LBB1140:
 387              	.LBI1140:
 658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : private _Optional_base<_Tp>,
 388              		.loc 1 658 11 view .LVU75
 389              	.LBB1141:
 390              	.LBI1141:
 627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 391              		.loc 1 627 23 view .LVU76
 392              	.LBB1142:
 393              	.LBI1142:
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 394              		.loc 1 368 7 view .LVU77
 395              	.LBB1143:
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 396              		.loc 1 370 22 is_stmt 0 view .LVU78
 397 001e 0CF18003 		add	r3, ip, #128
 398              	.LVL22:
 399              	.LBB1144:
 400              	.LBI1144:
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 401              		.loc 1 164 7 is_stmt 1 view .LVU79
 402              	.LBB1145:
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           this->_M_get() = __other._M_get();
 403              		.loc 1 166 19 is_stmt 0 view .LVU80
 404 0022 9CF88820 		ldrb	r2, [ip, #136]	@ zero_extendqisi2
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           this->_M_get() = __other._M_get();
 405              		.loc 1 166 9 view .LVU81
 406 0026 42B1     		cbz	r2, .L14
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           this->_M_get() = __other._M_get();
 407              		.loc 1 166 41 view .LVU82
 408 0028 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           this->_M_get() = __other._M_get();
 409              		.loc 1 166 30 view .LVU83
 410 002c 29B1     		cbz	r1, .L14
 411              	.LVL23:
 412              	.LBB1146:
 413              	.LBI1146:
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			  && !_PCCP::template
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	explicit constexpr pair(_U1&& __x, _U2&& __y)
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
ARM GAS  /tmp/ccx1vdif.s 			page 59


 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			  && _PCCFP<_U1, _U2>::template
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=true>
 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	constexpr pair(pair<_U1, _U2>&& __p)
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			  && !_PCCFP<_U1, _U2>::template
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	explicit constexpr pair(pair<_U1, _U2>&& __p)
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename... _Args1, typename... _Args2>
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	_GLIBCXX20_CONSTEXPR
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       operator=(typename conditional<
 414              		.loc 4 390 7 is_stmt 1 view .LVU84
 415              	.LBB1147:
 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		       is_copy_assignable<_T2>>::value,
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		const pair&, const __nonesuch&>::type __p)
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	first = __p.first;
 416              		.loc 4 395 14 is_stmt 0 view .LVU85
 417 002e 039A     		ldr	r2, [sp, #12]	@ float
 418              		.loc 4 395 8 view .LVU86
 419 0030 CCF88020 		str	r2, [ip, #128]	@ float
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	second = __p.second;
 420              		.loc 4 396 15 view .LVU87
 421 0034 049A     		ldr	r2, [sp, #16]	@ float
 422              		.loc 4 396 9 view .LVU88
 423 0036 5A60     		str	r2, [r3, #4]	@ float
 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return *this;
 424              		.loc 4 397 10 view .LVU89
 425 0038 09E0     		b	.L15
 426              	.LVL24:
 427              	.L14:
 428              		.loc 4 397 10 view .LVU90
 429              	.LBE1147:
 430              	.LBE1146:
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(__other._M_get());
 431              		.loc 1 170 18 view .LVU91
 432 003a 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(__other._M_get());
 433              		.loc 1 170 6 view .LVU92
 434 003e 59B1     		cbz	r1, .L16
 435              	.LVL25:
 436              	.LBB1148:
 437              	.LBI1148:
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
ARM GAS  /tmp/ccx1vdif.s 			page 60


 438              		.loc 1 247 9 is_stmt 1 view .LVU93
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 439              		.loc 1 247 9 is_stmt 0 view .LVU94
 440              	.LBE1148:
 441              	.LBE1145:
 442              	.LBE1144:
 443              	.LBE1143:
 444              	.LBE1142:
 445              	.LBE1141:
 446              	.LBE1140:
 447              		.loc 6 175 3 is_stmt 1 view .LVU95
 448              	.LBB1165:
 449              	.LBB1163:
 450              	.LBB1161:
 451              	.LBB1159:
 452              	.LBB1157:
 453              	.LBB1155:
 454              	.LBB1150:
 455              	.LBB1149:
 456              		.loc 6 175 3 is_stmt 0 view .LVU96
 457 0040 03AA     		add	r2, sp, #12
 458 0042 92E80300 		ldm	r2, {r0, r1}
 459 0046 83E80300 		stm	r3, {r0, r1}
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         }
 460              		.loc 1 252 28 view .LVU97
 461 004a 0122     		movs	r2, #1
 462 004c 1A72     		strb	r2, [r3, #8]
 463              	.LVL26:
 464              	.L15:
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         }
 465              		.loc 1 252 28 view .LVU98
 466              	.LBE1149:
 467              	.LBE1150:
 468              	.LBE1155:
 469              	.LBE1157:
 470              	.LBE1159:
 471              	.LBE1161:
 472              	.LBE1163:
 473              	.LBE1165:
  62:MotorControl/foc.cpp **** 
  63:MotorControl/foc.cpp ****     return Motor::ERROR_NONE;
 474              		.loc 3 63 5 is_stmt 1 view .LVU99
  64:MotorControl/foc.cpp **** }
 475              		.loc 3 64 1 is_stmt 0 view .LVU100
 476 004e 0020     		movs	r0, #0
 477 0050 0021     		movs	r1, #0
 478 0052 02B0     		add	sp, sp, #8
 479              	.LCFI8:
 480              		.cfi_remember_state
 481              		.cfi_def_cfa_offset 8
 482              		@ sp needed
 483 0054 02B0     		add	sp, sp, #8
 484              	.LCFI9:
 485              		.cfi_def_cfa_offset 0
 486 0056 7047     		bx	lr
 487              	.LVL27:
 488              	.L16:
ARM GAS  /tmp/ccx1vdif.s 			page 61


 489              	.LCFI10:
 490              		.cfi_restore_state
 491              	.LBB1166:
 492              	.LBB1164:
 493              	.LBB1162:
 494              	.LBB1160:
 495              	.LBB1158:
 496              	.LBB1156:
 497              	.LBB1151:
 498              	.LBI1151:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 499              		.loc 1 276 7 is_stmt 1 view .LVU101
 500              	.LBB1152:
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 501              		.loc 1 278 2 is_stmt 0 view .LVU102
 502 0058 002A     		cmp	r2, #0
 503 005a F8D0     		beq	.L15
 504              	.LVL28:
 505              	.LBB1153:
 506              	.LBI1153:
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 507              		.loc 1 256 7 is_stmt 1 view .LVU103
 508              	.LBB1154:
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 509              		.loc 1 258 13 is_stmt 0 view .LVU104
 510 005c 0022     		movs	r2, #0
 511 005e 1A72     		strb	r2, [r3, #8]
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 512              		.loc 1 260 7 view .LVU105
 513 0060 F5E7     		b	.L15
 514              	.LBE1154:
 515              	.LBE1153:
 516              	.LBE1152:
 517              	.LBE1151:
 518              	.LBE1156:
 519              	.LBE1158:
 520              	.LBE1160:
 521              	.LBE1162:
 522              	.LBE1164:
 523              	.LBE1166:
 524              		.cfi_endproc
 525              	.LFE4330:
 526              		.cantunwind
 527              		.fnend
 529              		.section	.text._ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE,"ax",%progbits
 530              		.align	1
 531              		.global	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 536              	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE:
 537              		.fnstart
 538              	.LVL29:
 539              	.LFB4297:
  25:MotorControl/foc.cpp ****     std::optional<float2D> mod_alpha_beta;
 540              		.loc 3 25 41 is_stmt 1 view -0
 541              		.cfi_startproc
ARM GAS  /tmp/ccx1vdif.s 			page 62


 542              		@ args = 0, pretend = 0, frame = 32
 543              		@ frame_needed = 0, uses_anonymous_args = 0
  25:MotorControl/foc.cpp ****     std::optional<float2D> mod_alpha_beta;
 544              		.loc 3 25 41 is_stmt 0 view .LVU107
 545 0000 70B5     		push	{r4, r5, r6, lr}
 546              		.save {r4, r5, r6, lr}
 547              	.LCFI11:
 548              		.cfi_def_cfa_offset 16
 549              		.cfi_offset 4, -16
 550              		.cfi_offset 5, -12
 551              		.cfi_offset 6, -8
 552              		.cfi_offset 14, -4
 553              		.pad #32
 554 0002 88B0     		sub	sp, sp, #32
 555              	.LCFI12:
 556              		.cfi_def_cfa_offset 48
 557 0004 1646     		mov	r6, r2
  26:MotorControl/foc.cpp ****     Motor::Error status = get_alpha_beta_output(output_timestamp, &mod_alpha_beta, ibus);
 558              		.loc 3 26 5 is_stmt 1 view .LVU108
  26:MotorControl/foc.cpp ****     Motor::Error status = get_alpha_beta_output(output_timestamp, &mod_alpha_beta, ibus);
 559              		.loc 3 26 28 is_stmt 0 view .LVU109
 560 0006 0024     		movs	r4, #0
 561 0008 0594     		str	r4, [sp, #20]
 562 000a 0694     		str	r4, [sp, #24]
 563 000c 0794     		str	r4, [sp, #28]
  27:MotorControl/foc.cpp ****     
 564              		.loc 3 27 5 is_stmt 1 view .LVU110
  27:MotorControl/foc.cpp ****     
 565              		.loc 3 27 88 is_stmt 0 view .LVU111
 566 000e 0268     		ldr	r2, [r0]
 567              	.LVL30:
  27:MotorControl/foc.cpp ****     
 568              		.loc 3 27 88 view .LVU112
 569 0010 1469     		ldr	r4, [r2, #16]
  27:MotorControl/foc.cpp ****     
 570              		.loc 3 27 48 view .LVU113
 571 0012 05AA     		add	r2, sp, #20
 572 0014 A047     		blx	r4
 573              	.LVL31:
  27:MotorControl/foc.cpp ****     
 574              		.loc 3 27 48 view .LVU114
 575 0016 0546     		mov	r5, r0
 576 0018 0C46     		mov	r4, r1
 577              	.LVL32:
  29:MotorControl/foc.cpp ****         return status;
 578              		.loc 3 29 5 is_stmt 1 view .LVU115
 579 001a 50EA0103 		orrs	r3, r0, r1
 580 001e 1CD1     		bne	.L18
  31:MotorControl/foc.cpp ****         return Motor::ERROR_MODULATION_IS_NAN;
 581              		.loc 3 31 12 view .LVU116
 582              	.LVL33:
 583              	.LBB1167:
 584              	.LBI1167:
 585              		.loc 1 916 22 view .LVU117
 586              	.LBB1168:
 587              	.LBI1168:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
ARM GAS  /tmp/ccx1vdif.s 			page 63


 588              		.loc 1 433 22 view .LVU118
 589              	.LBB1169:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 590              		.loc 1 434 58 is_stmt 0 view .LVU119
 591 0020 9DF81C30 		ldrb	r3, [sp, #28]	@ zero_extendqisi2
 592              	.LVL34:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 593              		.loc 1 434 58 view .LVU120
 594              	.LBE1169:
 595              	.LBE1168:
 596              	.LBE1167:
  31:MotorControl/foc.cpp ****         return Motor::ERROR_MODULATION_IS_NAN;
 597              		.loc 3 31 77 view .LVU121
 598 0024 EBB1     		cbz	r3, .L20
  31:MotorControl/foc.cpp ****         return Motor::ERROR_MODULATION_IS_NAN;
 599              		.loc 3 31 53 view .LVU122
 600 0026 9DED050A 		vldr.32	s0, [sp, #20]
 601              	.LVL35:
 602              		.file 7 "./MotorControl/utils.hpp"
   1:./MotorControl/utils.hpp **** #pragma once
   2:./MotorControl/utils.hpp **** 
   3:./MotorControl/utils.hpp **** #include <stdint.h>
   4:./MotorControl/utils.hpp **** #include <limits>
   5:./MotorControl/utils.hpp **** #include <algorithm>
   6:./MotorControl/utils.hpp **** #include <array>
   7:./MotorControl/utils.hpp **** #include <tuple>
   8:./MotorControl/utils.hpp **** #include <cmath>
   9:./MotorControl/utils.hpp **** 
  10:./MotorControl/utils.hpp **** /**
  11:./MotorControl/utils.hpp ****  * @brief Flash size register address
  12:./MotorControl/utils.hpp ****  */
  13:./MotorControl/utils.hpp **** #define ID_FLASH_ADDRESS (0x1FFF7A22)
  14:./MotorControl/utils.hpp **** 
  15:./MotorControl/utils.hpp **** /**
  16:./MotorControl/utils.hpp ****  * @brief Device ID register address
  17:./MotorControl/utils.hpp ****  */
  18:./MotorControl/utils.hpp **** #define ID_DBGMCU_IDCODE (0xE0042000)
  19:./MotorControl/utils.hpp **** 
  20:./MotorControl/utils.hpp **** /**
  21:./MotorControl/utils.hpp ****  * "Returns" the device signature
  22:./MotorControl/utils.hpp ****  *
  23:./MotorControl/utils.hpp ****  * Possible returns:
  24:./MotorControl/utils.hpp ****  *    - 0x0413: STM32F405xx/07xx and STM32F415xx/17xx)
  25:./MotorControl/utils.hpp ****  *    - 0x0419: STM32F42xxx and STM32F43xxx
  26:./MotorControl/utils.hpp ****  *    - 0x0423: STM32F401xB/C
  27:./MotorControl/utils.hpp ****  *    - 0x0433: STM32F401xD/E
  28:./MotorControl/utils.hpp ****  *    - 0x0431: STM32F411xC/E
  29:./MotorControl/utils.hpp ****  *
  30:./MotorControl/utils.hpp ****  * Returned data is in 16-bit mode, but only bits 11:0 are valid, bits 15:12 are always 0.
  31:./MotorControl/utils.hpp ****  * Defined as macro
  32:./MotorControl/utils.hpp ****  */
  33:./MotorControl/utils.hpp **** #define STM_ID_GetSignature() ((*(uint16_t *)(ID_DBGMCU_IDCODE)) & 0x0FFF)
  34:./MotorControl/utils.hpp **** 
  35:./MotorControl/utils.hpp **** /**
  36:./MotorControl/utils.hpp ****  * "Returns" the device revision
  37:./MotorControl/utils.hpp ****  *
  38:./MotorControl/utils.hpp ****  * Revisions possible:
ARM GAS  /tmp/ccx1vdif.s 			page 64


  39:./MotorControl/utils.hpp ****  *    - 0x1000: Revision A
  40:./MotorControl/utils.hpp ****  *    - 0x1001: Revision Z
  41:./MotorControl/utils.hpp ****  *    - 0x1003: Revision Y
  42:./MotorControl/utils.hpp ****  *    - 0x1007: Revision 1
  43:./MotorControl/utils.hpp ****  *    - 0x2001: Revision 3
  44:./MotorControl/utils.hpp ****  *
  45:./MotorControl/utils.hpp ****  * Returned data is in 16-bit mode.
  46:./MotorControl/utils.hpp ****  */
  47:./MotorControl/utils.hpp **** #define STM_ID_GetRevision() (*(uint16_t *)(ID_DBGMCU_IDCODE + 2))
  48:./MotorControl/utils.hpp **** 
  49:./MotorControl/utils.hpp **** /**
  50:./MotorControl/utils.hpp **** * "Returns" the Flash size
  51:./MotorControl/utils.hpp **** *
  52:./MotorControl/utils.hpp **** * Returned data is in 16-bit mode, returned value is flash size in kB (kilo bytes).
  53:./MotorControl/utils.hpp **** */
  54:./MotorControl/utils.hpp **** #define STM_ID_GetFlashSize() (*(uint16_t *)(ID_FLASH_ADDRESS))
  55:./MotorControl/utils.hpp **** 
  56:./MotorControl/utils.hpp **** #ifdef M_PI
  57:./MotorControl/utils.hpp **** #undef M_PI
  58:./MotorControl/utils.hpp **** #endif
  59:./MotorControl/utils.hpp **** 
  60:./MotorControl/utils.hpp **** // Math Constants
  61:./MotorControl/utils.hpp **** constexpr float M_PI = 3.14159265358979323846f;
  62:./MotorControl/utils.hpp **** constexpr float one_by_sqrt3 = 0.57735026919f;
  63:./MotorControl/utils.hpp **** constexpr float two_by_sqrt3 = 1.15470053838f;
  64:./MotorControl/utils.hpp **** constexpr float sqrt3_by_2 = 0.86602540378f;
  65:./MotorControl/utils.hpp **** 
  66:./MotorControl/utils.hpp **** // Function prototypes for implementations in utils.cpp
  67:./MotorControl/utils.hpp **** std::tuple<float, float, float, bool> SVM(float alpha, float beta);
  68:./MotorControl/utils.hpp **** float fast_atan2(float y, float x);
  69:./MotorControl/utils.hpp **** uint32_t deadline_to_timeout(uint32_t deadline_ms);
  70:./MotorControl/utils.hpp **** uint32_t timeout_to_deadline(uint32_t timeout_ms);
  71:./MotorControl/utils.hpp **** int is_in_the_future(uint32_t time_ms);
  72:./MotorControl/utils.hpp **** uint32_t micros(void);
  73:./MotorControl/utils.hpp **** void delay_us(uint32_t us);
  74:./MotorControl/utils.hpp **** 
  75:./MotorControl/utils.hpp **** extern "C" {
  76:./MotorControl/utils.hpp **** float our_arm_sin_f32(float x);
  77:./MotorControl/utils.hpp **** float our_arm_cos_f32(float x);
  78:./MotorControl/utils.hpp **** }
  79:./MotorControl/utils.hpp **** 
  80:./MotorControl/utils.hpp **** // ----------------
  81:./MotorControl/utils.hpp **** // Inline functions
  82:./MotorControl/utils.hpp **** 
  83:./MotorControl/utils.hpp **** template<typename T>
  84:./MotorControl/utils.hpp **** constexpr T SQ(const T& x){
  85:./MotorControl/utils.hpp ****     return x * x;
  86:./MotorControl/utils.hpp **** }
  87:./MotorControl/utils.hpp **** 
  88:./MotorControl/utils.hpp **** /**
  89:./MotorControl/utils.hpp ****  * @brief Small helper to make array with known size
  90:./MotorControl/utils.hpp ****  * in contrast to initializer lists the number of arguments
  91:./MotorControl/utils.hpp ****  * has to match exactly. Whereas initializer lists allow
  92:./MotorControl/utils.hpp ****  * less arguments.
  93:./MotorControl/utils.hpp ****  */
  94:./MotorControl/utils.hpp **** template <class T, class... Tail>
  95:./MotorControl/utils.hpp **** std::array<T, 1 + sizeof...(Tail)> make_array(T head, Tail... tail) {
ARM GAS  /tmp/ccx1vdif.s 			page 65


  96:./MotorControl/utils.hpp ****     return std::array<T, 1 + sizeof...(Tail)>({head, tail...});
  97:./MotorControl/utils.hpp **** }
  98:./MotorControl/utils.hpp **** 
  99:./MotorControl/utils.hpp **** // To allow use of -ffast-math we need to have a special check for nan
 100:./MotorControl/utils.hpp **** // that bypasses the "ignore nan" flag
 101:./MotorControl/utils.hpp **** __attribute__((optimize("-fno-finite-math-only")))
 102:./MotorControl/utils.hpp **** inline bool is_nan(float x) {
 103:./MotorControl/utils.hpp ****     return __builtin_isnan(x);
 603              		.loc 7 103 5 is_stmt 1 view .LVU123
  31:MotorControl/foc.cpp ****         return Motor::ERROR_MODULATION_IS_NAN;
 604              		.loc 3 31 44 is_stmt 0 view .LVU124
 605 002a B4EE400A 		vcmp.f32	s0, s0
 606 002e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 607 0032 1AD6     		bvs	.L21
  31:MotorControl/foc.cpp ****         return Motor::ERROR_MODULATION_IS_NAN;
 608              		.loc 3 31 86 view .LVU125
 609 0034 DDED060A 		vldr.32	s1, [sp, #24]
 610              	.LVL36:
 611              		.loc 7 103 5 is_stmt 1 view .LVU126
  31:MotorControl/foc.cpp ****         return Motor::ERROR_MODULATION_IS_NAN;
 612              		.loc 3 31 77 is_stmt 0 view .LVU127
 613 0038 F4EE600A 		vcmp.f32	s1, s1
 614 003c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 615 0040 17D6     		bvs	.L22
  35:MotorControl/foc.cpp ****     if (!success) {
 616              		.loc 3 35 5 is_stmt 1 view .LVU128
  35:MotorControl/foc.cpp ****     if (!success) {
 617              		.loc 3 35 83 is_stmt 0 view .LVU129
 618 0042 01A8     		add	r0, sp, #4
 619              	.LVL37:
  35:MotorControl/foc.cpp ****     if (!success) {
 620              		.loc 3 35 83 view .LVU130
 621 0044 FFF7FEFF 		bl	_Z3SVMff
 622              	.LVL38:
  36:MotorControl/foc.cpp ****         return Motor::ERROR_MODULATION_MAGNITUDE;
 623              		.loc 3 36 5 is_stmt 1 view .LVU131
  36:MotorControl/foc.cpp ****         return Motor::ERROR_MODULATION_MAGNITUDE;
 624              		.loc 3 36 10 is_stmt 0 view .LVU132
 625 0048 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
  36:MotorControl/foc.cpp ****         return Motor::ERROR_MODULATION_MAGNITUDE;
 626              		.loc 3 36 5 view .LVU133
 627 004c ABB1     		cbz	r3, .L23
  40:MotorControl/foc.cpp ****     pwm_timings[1] = tB;
 628              		.loc 3 40 5 is_stmt 1 view .LVU134
  40:MotorControl/foc.cpp ****     pwm_timings[1] = tB;
 629              		.loc 3 40 22 is_stmt 0 view .LVU135
 630 004e 049B     		ldr	r3, [sp, #16]	@ float
  40:MotorControl/foc.cpp ****     pwm_timings[1] = tB;
 631              		.loc 3 40 20 view .LVU136
 632 0050 3360     		str	r3, [r6]	@ float
  41:MotorControl/foc.cpp ****     pwm_timings[2] = tC;
 633              		.loc 3 41 5 is_stmt 1 view .LVU137
  41:MotorControl/foc.cpp ****     pwm_timings[2] = tC;
 634              		.loc 3 41 22 is_stmt 0 view .LVU138
 635 0052 039B     		ldr	r3, [sp, #12]	@ float
  41:MotorControl/foc.cpp ****     pwm_timings[2] = tC;
 636              		.loc 3 41 20 view .LVU139
ARM GAS  /tmp/ccx1vdif.s 			page 66


 637 0054 7360     		str	r3, [r6, #4]	@ float
  42:MotorControl/foc.cpp **** 
 638              		.loc 3 42 5 is_stmt 1 view .LVU140
  42:MotorControl/foc.cpp **** 
 639              		.loc 3 42 22 is_stmt 0 view .LVU141
 640 0056 029B     		ldr	r3, [sp, #8]	@ float
  42:MotorControl/foc.cpp **** 
 641              		.loc 3 42 20 view .LVU142
 642 0058 B360     		str	r3, [r6, #8]	@ float
  44:MotorControl/foc.cpp **** }
 643              		.loc 3 44 5 is_stmt 1 view .LVU143
 644              	.LVL39:
 645              	.L18:
  45:MotorControl/foc.cpp **** 
 646              		.loc 3 45 1 is_stmt 0 view .LVU144
 647 005a 2846     		mov	r0, r5
 648 005c 2146     		mov	r1, r4
 649 005e 08B0     		add	sp, sp, #32
 650              	.LCFI13:
 651              		.cfi_remember_state
 652              		.cfi_def_cfa_offset 16
 653              		@ sp needed
 654 0060 70BD     		pop	{r4, r5, r6, pc}
 655              	.LVL40:
 656              	.L20:
 657              	.LCFI14:
 658              		.cfi_restore_state
  32:MotorControl/foc.cpp ****     }
 659              		.loc 3 32 23 view .LVU145
 660 0062 4FF48035 		mov	r5, #65536
 661 0066 0024     		movs	r4, #0
 662 0068 F7E7     		b	.L18
 663              	.L21:
  32:MotorControl/foc.cpp ****     }
 664              		.loc 3 32 23 view .LVU146
 665 006a 4FF48035 		mov	r5, #65536
 666 006e 0024     		movs	r4, #0
 667 0070 F3E7     		b	.L18
 668              	.L22:
  32:MotorControl/foc.cpp ****     }
 669              		.loc 3 32 23 view .LVU147
 670 0072 4FF48035 		mov	r5, #65536
 671 0076 0024     		movs	r4, #0
 672 0078 EFE7     		b	.L18
 673              	.LVL41:
 674              	.L23:
  37:MotorControl/foc.cpp ****     }
 675              		.loc 3 37 23 view .LVU148
 676 007a 8025     		movs	r5, #128
 677              	.LVL42:
  37:MotorControl/foc.cpp ****     }
 678              		.loc 3 37 23 view .LVU149
 679 007c 0024     		movs	r4, #0
 680 007e ECE7     		b	.L18
 681              		.cfi_endproc
 682              	.LFE4297:
 683              		.fnend
ARM GAS  /tmp/ccx1vdif.s 			page 67


 685              		.section	.text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_I
 686              		.align	1
 687              		.global	_ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
 688              		.syntax unified
 689              		.thumb
 690              		.thumb_func
 692              	_ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:
 693              		.fnstart
 694              	.LVL43:
 695              	.LFB4334:
  65:MotorControl/foc.cpp **** 
  66:MotorControl/foc.cpp **** ODriveIntf::MotorIntf::Error FieldOrientedController::get_alpha_beta_output(
  67:MotorControl/foc.cpp ****         uint32_t output_timestamp, std::optional<float2D>* mod_alpha_beta,
  68:MotorControl/foc.cpp ****         std::optional<float>* ibus) {
 696              		.loc 3 68 37 is_stmt 1 view -0
 697              		.cfi_startproc
 698              		@ args = 0, pretend = 0, frame = 72
 699              		@ frame_needed = 0, uses_anonymous_args = 0
 700              		.loc 3 68 37 is_stmt 0 view .LVU151
 701 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 702              		.save {r4, r5, r6, r7, r8, lr}
 703              	.LCFI15:
 704              		.cfi_def_cfa_offset 24
 705              		.cfi_offset 4, -24
 706              		.cfi_offset 5, -20
 707              		.cfi_offset 6, -16
 708              		.cfi_offset 7, -12
 709              		.cfi_offset 8, -8
 710              		.cfi_offset 14, -4
 711 0004 2DED088B 		vpush.64	{d8, d9, d10, d11}
 712              		.vsave {d8, d9, d10, d11}
 713              	.LCFI16:
 714              		.cfi_def_cfa_offset 56
 715              		.cfi_offset 80, -56
 716              		.cfi_offset 81, -52
 717              		.cfi_offset 82, -48
 718              		.cfi_offset 83, -44
 719              		.cfi_offset 84, -40
 720              		.cfi_offset 85, -36
 721              		.cfi_offset 86, -32
 722              		.cfi_offset 87, -28
 723              		.pad #72
 724 0008 92B0     		sub	sp, sp, #72
 725              	.LCFI17:
 726              		.cfi_def_cfa_offset 128
 727 000a 0446     		mov	r4, r0
  69:MotorControl/foc.cpp **** 
  70:MotorControl/foc.cpp ****     if (!vbus_voltage_measured_.has_value() || !Ialpha_beta_measured_.has_value()) {
 728              		.loc 3 70 5 is_stmt 1 view .LVU152
 729              	.LVL44:
 730              	.LBB1250:
 731              	.LBI1250:
 732              		.loc 1 916 22 view .LVU153
 733              	.LBB1251:
 734              	.LBI1251:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 735              		.loc 1 433 22 view .LVU154
ARM GAS  /tmp/ccx1vdif.s 			page 68


 736              	.LBB1252:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 737              		.loc 1 434 58 is_stmt 0 view .LVU155
 738 000c 90F87C00 		ldrb	r0, [r0, #124]	@ zero_extendqisi2
 739              	.LVL45:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 740              		.loc 1 434 58 view .LVU156
 741              	.LBE1252:
 742              	.LBE1251:
 743              	.LBE1250:
 744              		.loc 3 70 45 view .LVU157
 745 0010 0028     		cmp	r0, #0
 746 0012 00F08E81 		beq	.L36
 747 0016 0F46     		mov	r7, r1
 748 0018 1646     		mov	r6, r2
 749 001a 1D46     		mov	r5, r3
 750              	.LVL46:
 751              	.LBB1253:
 752              	.LBI1253:
 753              		.loc 1 916 22 is_stmt 1 discriminator 2 view .LVU158
 754              	.LBB1254:
 755              	.LBI1254:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 756              		.loc 1 433 22 discriminator 2 view .LVU159
 757              	.LBB1255:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 758              		.loc 1 434 58 is_stmt 0 discriminator 2 view .LVU160
 759 001c 94F88830 		ldrb	r3, [r4, #136]	@ zero_extendqisi2
 760              	.LVL47:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 761              		.loc 1 434 58 discriminator 2 view .LVU161
 762              	.LBE1255:
 763              	.LBE1254:
 764              	.LBE1253:
 765              		.loc 3 70 45 discriminator 2 view .LVU162
 766 0020 002B     		cmp	r3, #0
 767 0022 00F08D81 		beq	.L37
  71:MotorControl/foc.cpp ****         // FOC didn't receive a current measurement yet.
  72:MotorControl/foc.cpp ****         return Motor::ERROR_CONTROLLER_INITIALIZING;
  73:MotorControl/foc.cpp ****     } else if (abs((int32_t)(i_timestamp_ - ctrl_timestamp_)) > MAX_CONTROL_LOOP_UPDATE_TO_CURRENT_
 768              		.loc 3 73 12 is_stmt 1 view .LVU163
 769              		.loc 3 73 30 is_stmt 0 view .LVU164
 770 0026 626F     		ldr	r2, [r4, #116]
 771              	.LVL48:
 772              		.loc 3 73 45 view .LVU165
 773 0028 636C     		ldr	r3, [r4, #68]
 774              		.loc 3 73 43 view .LVU166
 775 002a A2EB030C 		sub	ip, r2, r3
 776              	.LVL49:
 777              	.LBB1256:
 778              	.LBI1256:
 779              		.file 8 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // -*- C++ -*- C library enhancements header.
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
ARM GAS  /tmp/ccx1vdif.s 			page 69


   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** /** @file include/bits/std_abs.h
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****  *  Do not attempt to use it directly. @headername{cmath, cstdlib}
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****  */
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #ifndef _GLIBCXX_BITS_STD_ABS_H
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #define _GLIBCXX_BITS_STD_ABS_H
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #pragma GCC system_header
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #include <bits/c++config.h>
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #include_next <stdlib.h>
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #ifdef __CORRECT_ISO_CPP_MATH_H_PROTO
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** # include_next <math.h>
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #endif
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #undef abs
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** extern "C++"
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** {
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** {
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   using ::abs;
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   inline long
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   abs(long __i) { return __builtin_labs(__i); }
 780              		.loc 8 56 3 is_stmt 1 view .LVU167
 781              	.LBB1257:
 782              		.loc 8 56 19 view .LVU168
 783              		.loc 8 56 44 is_stmt 0 view .LVU169
 784 002e 8CEAEC72 		eor	r2, ip, ip, asr #31
 785 0032 A2EBEC72 		sub	r2, r2, ip, asr #31
ARM GAS  /tmp/ccx1vdif.s 			page 70


 786              	.LVL50:
 787              		.loc 8 56 44 view .LVU170
 788              	.LBE1257:
 789              	.LBE1256:
 790              		.loc 3 73 12 view .LVU171
 791 0036 40F25673 		movw	r3, #1878
 792 003a 9A42     		cmp	r2, r3
 793 003c 00F38381 		bgt	.L38
  74:MotorControl/foc.cpp ****         // Data from control loop and current measurement are too far apart.
  75:MotorControl/foc.cpp ****         return Motor::ERROR_BAD_TIMING;
  76:MotorControl/foc.cpp ****     }
  77:MotorControl/foc.cpp **** 
  78:MotorControl/foc.cpp ****     // TODO: improve efficiency in case PWM updates are requested at a higher
  79:MotorControl/foc.cpp ****     // rate than current sensor updates. In this case we can reuse mod_d and
  80:MotorControl/foc.cpp ****     // mod_q from a previous iteration.
  81:MotorControl/foc.cpp **** 
  82:MotorControl/foc.cpp ****     if (!Vdq_setpoint_.has_value()) {
 794              		.loc 3 82 5 is_stmt 1 view .LVU172
 795              	.LVL51:
 796              	.LBB1258:
 797              	.LBI1258:
 798              		.loc 1 916 22 view .LVU173
 799              	.LBB1259:
 800              	.LBI1259:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 801              		.loc 1 433 22 view .LVU174
 802              	.LBB1260:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 803              		.loc 1 434 58 is_stmt 0 view .LVU175
 804 0040 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 805              	.LVL52:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 806              		.loc 1 434 58 view .LVU176
 807              	.LBE1260:
 808              	.LBE1259:
 809              	.LBE1258:
 810              		.loc 3 82 5 view .LVU177
 811 0044 002B     		cmp	r3, #0
 812 0046 00F08281 		beq	.L39
  83:MotorControl/foc.cpp ****         return Motor::ERROR_UNKNOWN_VOLTAGE_COMMAND;
  84:MotorControl/foc.cpp ****     } else if (!phase_.has_value() || !phase_vel_.has_value()) {
 813              		.loc 3 84 12 is_stmt 1 view .LVU178
 814              	.LVL53:
 815              	.LBB1261:
 816              	.LBI1261:
 817              		.loc 1 916 22 view .LVU179
 818              	.LBB1262:
 819              	.LBI1262:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 820              		.loc 1 433 22 view .LVU180
 821              	.LBB1263:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 822              		.loc 1 434 58 is_stmt 0 view .LVU181
 823 004a 94F86830 		ldrb	r3, [r4, #104]	@ zero_extendqisi2
 824              	.LVL54:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 825              		.loc 1 434 58 view .LVU182
ARM GAS  /tmp/ccx1vdif.s 			page 71


 826              	.LBE1263:
 827              	.LBE1262:
 828              	.LBE1261:
 829              		.loc 3 84 36 view .LVU183
 830 004e 002B     		cmp	r3, #0
 831 0050 00F08081 		beq	.L40
 832              	.LVL55:
 833              	.LBB1264:
 834              	.LBI1264:
 835              		.loc 1 916 22 is_stmt 1 discriminator 2 view .LVU184
 836              	.LBB1265:
 837              	.LBI1265:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 838              		.loc 1 433 22 discriminator 2 view .LVU185
 839              	.LBB1266:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 840              		.loc 1 434 58 is_stmt 0 discriminator 2 view .LVU186
 841 0054 94F87030 		ldrb	r3, [r4, #112]	@ zero_extendqisi2
 842              	.LVL56:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 843              		.loc 1 434 58 discriminator 2 view .LVU187
 844              	.LBE1266:
 845              	.LBE1265:
 846              	.LBE1264:
 847              		.loc 3 84 36 discriminator 2 view .LVU188
 848 0058 002B     		cmp	r3, #0
 849 005a 00F07F81 		beq	.L41
  85:MotorControl/foc.cpp ****         return Motor::ERROR_UNKNOWN_PHASE_ESTIMATE;
  86:MotorControl/foc.cpp ****     } else if (!vbus_voltage_measured_.has_value()) {
 850              		.loc 3 86 12 is_stmt 1 view .LVU189
  87:MotorControl/foc.cpp ****         return Motor::ERROR_UNKNOWN_VBUS_VOLTAGE;
  88:MotorControl/foc.cpp ****     }
  89:MotorControl/foc.cpp **** 
  90:MotorControl/foc.cpp ****     auto [Vd, Vq] = *Vdq_setpoint_;
 851              		.loc 3 90 5 view .LVU190
 852              		.loc 3 90 22 is_stmt 0 view .LVU191
 853 005e 0AAB     		add	r3, sp, #40
 854 0060 04F15802 		add	r2, r4, #88
 855 0064 92E80300 		ldm	r2, {r0, r1}
 856              	.LVL57:
 857              		.loc 3 90 22 view .LVU192
 858 0068 83E80300 		stm	r3, {r0, r1}
 859              	.LVL58:
  91:MotorControl/foc.cpp ****     float phase = *phase_;
 860              		.loc 3 91 5 is_stmt 1 view .LVU193
 861              		.loc 3 91 20 is_stmt 0 view .LVU194
 862 006c 94ED199A 		vldr.32	s18, [r4, #100]
 863              	.LVL59:
  92:MotorControl/foc.cpp ****     float phase_vel = *phase_vel_;
 864              		.loc 3 92 5 is_stmt 1 view .LVU195
 865              		.loc 3 92 24 is_stmt 0 view .LVU196
 866 0070 D4ED1B9A 		vldr.32	s19, [r4, #108]
 867              	.LVL60:
  93:MotorControl/foc.cpp ****     float vbus_voltage = *vbus_voltage_measured_;
 868              		.loc 3 93 5 is_stmt 1 view .LVU197
 869              		.loc 3 93 27 is_stmt 0 view .LVU198
 870 0074 D4ED1E8A 		vldr.32	s17, [r4, #120]
ARM GAS  /tmp/ccx1vdif.s 			page 72


 871              	.LVL61:
  94:MotorControl/foc.cpp **** 
  95:MotorControl/foc.cpp ****     std::optional<float2D> Idq;
 872              		.loc 3 95 5 is_stmt 1 view .LVU199
 873              		.loc 3 95 28 is_stmt 0 view .LVU200
 874 0078 0DF11C08 		add	r8, sp, #28
 875 007c 0023     		movs	r3, #0
 876              	.LVL62:
 877              		.loc 3 95 28 view .LVU201
 878 007e 0793     		str	r3, [sp, #28]
 879 0080 0893     		str	r3, [sp, #32]
 880 0082 0993     		str	r3, [sp, #36]
  96:MotorControl/foc.cpp **** 
  97:MotorControl/foc.cpp ****     // Park transform
  98:MotorControl/foc.cpp ****     if (Ialpha_beta_measured_.has_value()) {
 881              		.loc 3 98 5 is_stmt 1 view .LVU202
 882              	.LBB1267:
  99:MotorControl/foc.cpp ****         auto [Ialpha, Ibeta] = *Ialpha_beta_measured_;
 883              		.loc 3 99 9 view .LVU203
 884              		.loc 3 99 33 is_stmt 0 view .LVU204
 885 0084 05AB     		add	r3, sp, #20
 886 0086 04F18002 		add	r2, r4, #128
 887 008a 92E80300 		ldm	r2, {r0, r1}
 888 008e 83E80300 		stm	r3, {r0, r1}
 889              	.LVL63:
 100:MotorControl/foc.cpp ****         float I_phase = phase + phase_vel * ((float)(int32_t)(i_timestamp_ - ctrl_timestamp_) / (fl
 890              		.loc 3 100 9 is_stmt 1 view .LVU205
 891              		.loc 3 100 46 is_stmt 0 view .LVU206
 892 0092 07EE90CA 		vmov	s15, ip	@ int
 893 0096 F8EEE77A 		vcvt.f32.s32	s15, s15
 894              		.loc 3 100 95 view .LVU207
 895 009a 9FEDB27A 		vldr.32	s14, .L49
 896 009e 87EE878A 		vdiv.f32	s16, s15, s14
 897              		.loc 3 100 43 view .LVU208
 898 00a2 28EE298A 		vmul.f32	s16, s16, s19
 899              		.loc 3 100 15 view .LVU209
 900 00a6 38EE098A 		vadd.f32	s16, s16, s18
 901              	.LVL64:
 101:MotorControl/foc.cpp ****         float c_I = our_arm_cos_f32(I_phase);
 902              		.loc 3 101 9 is_stmt 1 view .LVU210
 903              		.loc 3 101 36 is_stmt 0 view .LVU211
 904 00aa B0EE480A 		vmov.f32	s0, s16
 905 00ae FFF7FEFF 		bl	our_arm_cos_f32
 906              	.LVL65:
 907              		.loc 3 101 36 view .LVU212
 908 00b2 B0EE40AA 		vmov.f32	s20, s0
 909              	.LVL66:
 102:MotorControl/foc.cpp ****         float s_I = our_arm_sin_f32(I_phase);
 910              		.loc 3 102 9 is_stmt 1 view .LVU213
 911              		.loc 3 102 36 is_stmt 0 view .LVU214
 912 00b6 B0EE480A 		vmov.f32	s0, s16
 913              	.LVL67:
 914              		.loc 3 102 36 view .LVU215
 915 00ba FFF7FEFF 		bl	our_arm_sin_f32
 916              	.LVL68:
 103:MotorControl/foc.cpp ****         Idq = {
 917              		.loc 3 103 9 is_stmt 1 view .LVU216
ARM GAS  /tmp/ccx1vdif.s 			page 73


 104:MotorControl/foc.cpp ****             c_I * Ialpha + s_I * Ibeta,
 918              		.loc 3 104 19 is_stmt 0 view .LVU217
 919 00be DDED057A 		vldr.32	s15, [sp, #20]
 920              		.loc 3 104 17 view .LVU218
 921 00c2 67EE8A6A 		vmul.f32	s13, s15, s20
 922              		.loc 3 104 34 view .LVU219
 923 00c6 9DED067A 		vldr.32	s14, [sp, #24]
 924              		.loc 3 104 32 view .LVU220
 925 00ca 27EE006A 		vmul.f32	s12, s14, s0
 926              		.loc 3 104 26 view .LVU221
 927 00ce 76EE866A 		vadd.f32	s13, s13, s12
 105:MotorControl/foc.cpp ****             c_I * Ibeta - s_I * Ialpha
 928              		.loc 3 105 17 view .LVU222
 929 00d2 27EE0A7A 		vmul.f32	s14, s14, s20
 930              		.loc 3 105 31 view .LVU223
 931 00d6 67EE807A 		vmul.f32	s15, s15, s0
 932              		.loc 3 105 25 view .LVU224
 933 00da 77EE677A 		vsub.f32	s15, s14, s15
 934              	.LVL69:
 935              	.LBB1268:
 936              	.LBI1268:
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 937              		.loc 4 352 12 is_stmt 1 view .LVU225
 938              	.LBB1269:
 939              	.LBB1270:
 940              	.LBB1271:
 941              	.LBI1271:
 942              		.loc 5 76 5 view .LVU226
 943              		.loc 5 76 5 is_stmt 0 view .LVU227
 944              	.LBE1271:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 945              		.loc 4 353 64 view .LVU228
 946 00de CDED0C6A 		vstr.32	s13, [sp, #48]
 947              	.LVL70:
 948              	.LBB1272:
 949              	.LBI1272:
 950              		.loc 5 76 5 is_stmt 1 view .LVU229
 951              		.loc 5 76 5 is_stmt 0 view .LVU230
 952              	.LBE1272:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 953              		.loc 4 353 64 view .LVU231
 954 00e2 CDED0D7A 		vstr.32	s15, [sp, #52]
 955              	.LVL71:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 956              		.loc 4 353 64 view .LVU232
 957              	.LBE1270:
 958              	.LBE1269:
 959              	.LBE1268:
 960              	.LBB1273:
 961              	.LBI1273:
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 962              		.loc 1 788 2 is_stmt 1 view .LVU233
 963              	.LBB1274:
 964              	.LBI1274:
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 965              		.loc 1 415 2 view .LVU234
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
ARM GAS  /tmp/ccx1vdif.s 			page 74


 966              		.loc 1 415 2 is_stmt 0 view .LVU235
 967              	.LBE1274:
 968              	.LBE1273:
 969              	.LBE1267:
 970              		.loc 6 175 3 is_stmt 1 view .LVU236
 971              	.LBB1278:
 972              	.LBB1277:
 973              	.LBB1276:
 974              	.LBB1275:
 975              		.loc 6 175 3 is_stmt 0 view .LVU237
 976 00e6 0CAB     		add	r3, sp, #48
 977              	.LVL72:
 978              		.loc 6 175 3 view .LVU238
 979 00e8 93E80300 		ldm	r3, {r0, r1}
 980 00ec 88E80300 		stm	r8, {r0, r1}
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 981              		.loc 1 421 51 view .LVU239
 982 00f0 0123     		movs	r3, #1
 983              	.LVL73:
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 984              		.loc 1 421 51 view .LVU240
 985 00f2 8DF82430 		strb	r3, [sp, #36]
 986              	.LVL74:
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 987              		.loc 1 421 51 view .LVU241
 988              	.LBE1275:
 989              	.LBE1276:
 990              	.LBE1277:
 106:MotorControl/foc.cpp ****         };
 107:MotorControl/foc.cpp ****         Id_measured_ += I_measured_report_filter_k_ * (Idq->first - Id_measured_);
 991              		.loc 3 107 9 is_stmt 1 view .LVU242
 992              		.loc 3 107 25 is_stmt 0 view .LVU243
 993 00f6 94ED056A 		vldr.32	s12, [r4, #20]
 994              		.loc 3 107 69 view .LVU244
 995 00fa 94ED237A 		vldr.32	s14, [r4, #140]
 996              		.loc 3 107 67 view .LVU245
 997 00fe 76EEC76A 		vsub.f32	s13, s13, s14
 998              		.loc 3 107 53 view .LVU246
 999 0102 66EE266A 		vmul.f32	s13, s12, s13
 1000              		.loc 3 107 22 view .LVU247
 1001 0106 77EE266A 		vadd.f32	s13, s14, s13
 1002 010a C4ED236A 		vstr.32	s13, [r4, #140]
 108:MotorControl/foc.cpp ****         Iq_measured_ += I_measured_report_filter_k_ * (Idq->second - Iq_measured_);
 1003              		.loc 3 108 9 is_stmt 1 view .LVU248
 1004              		.loc 3 108 70 is_stmt 0 view .LVU249
 1005 010e 94ED247A 		vldr.32	s14, [r4, #144]
 1006              		.loc 3 108 68 view .LVU250
 1007 0112 77EEC77A 		vsub.f32	s15, s15, s14
 1008              		.loc 3 108 53 view .LVU251
 1009 0116 66EE277A 		vmul.f32	s15, s12, s15
 1010              		.loc 3 108 22 view .LVU252
 1011 011a 37EE277A 		vadd.f32	s14, s14, s15
 1012 011e 84ED247A 		vstr.32	s14, [r4, #144]
 1013              	.LBE1278:
 109:MotorControl/foc.cpp ****     } else {
 110:MotorControl/foc.cpp ****         Id_measured_ = 0.0f;
 111:MotorControl/foc.cpp ****         Iq_measured_ = 0.0f;
ARM GAS  /tmp/ccx1vdif.s 			page 75


 112:MotorControl/foc.cpp ****     }
 113:MotorControl/foc.cpp **** 
 114:MotorControl/foc.cpp **** 
 115:MotorControl/foc.cpp ****     float mod_to_V = (2.0f / 3.0f) * vbus_voltage;
 1014              		.loc 3 115 5 is_stmt 1 view .LVU253
 1015              		.loc 3 115 11 is_stmt 0 view .LVU254
 1016 0122 9FED91AA 		vldr.32	s20, .L49+4
 1017              	.LVL75:
 1018              		.loc 3 115 11 view .LVU255
 1019 0126 28EE8AAA 		vmul.f32	s20, s17, s20
 1020              	.LVL76:
 116:MotorControl/foc.cpp ****     float V_to_mod = 1.0f / mod_to_V;
 1021              		.loc 3 116 5 is_stmt 1 view .LVU256
 1022              		.loc 3 116 11 is_stmt 0 view .LVU257
 1023 012a F7EE007A 		vmov.f32	s15, #1.0e+0
 1024 012e C7EE8AAA 		vdiv.f32	s21, s15, s20
 1025              	.LVL77:
 117:MotorControl/foc.cpp ****     float mod_d;
 1026              		.loc 3 117 5 is_stmt 1 view .LVU258
 118:MotorControl/foc.cpp ****     float mod_q;
 1027              		.loc 3 118 5 view .LVU259
 119:MotorControl/foc.cpp **** 
 120:MotorControl/foc.cpp ****     if (enable_current_control_) {
 1028              		.loc 3 120 5 view .LVU260
 1029              	.LBB1279:
 1030              		.loc 3 120 9 is_stmt 0 view .LVU261
 1031 0132 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 1032              		.loc 3 120 5 view .LVU262
 1033 0136 002B     		cmp	r3, #0
 1034 0138 00F08380 		beq	.L27
 1035              	.LBB1280:
 121:MotorControl/foc.cpp ****         // Current control mode
 122:MotorControl/foc.cpp **** 
 123:MotorControl/foc.cpp ****         if (!pi_gains_.has_value()) {
 1036              		.loc 3 123 9 is_stmt 1 view .LVU263
 1037              	.LVL78:
 1038              	.LBB1281:
 1039              	.LBI1281:
 1040              		.loc 1 916 22 view .LVU264
 1041              	.LBB1282:
 1042              	.LBI1282:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 1043              		.loc 1 433 22 view .LVU265
 1044              	.LBB1283:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1045              		.loc 1 434 58 is_stmt 0 view .LVU266
 1046 013c 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 1047              	.LVL79:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1048              		.loc 1 434 58 view .LVU267
 1049              	.LBE1283:
 1050              	.LBE1282:
 1051              	.LBE1281:
 1052              		.loc 3 123 9 view .LVU268
 1053 013e 002B     		cmp	r3, #0
 1054 0140 7CD0     		beq	.L42
 124:MotorControl/foc.cpp ****             return Motor::ERROR_UNKNOWN_GAINS;
ARM GAS  /tmp/ccx1vdif.s 			page 76


 125:MotorControl/foc.cpp ****         } else if (!Idq.has_value()) {
 1055              		.loc 3 125 16 is_stmt 1 view .LVU269
 126:MotorControl/foc.cpp ****             return Motor::ERROR_UNKNOWN_CURRENT_MEASUREMENT;
 127:MotorControl/foc.cpp ****         } else if (!Idq_setpoint_.has_value()) {
 1056              		.loc 3 127 16 view .LVU270
 1057              	.LVL80:
 1058              	.LBB1284:
 1059              	.LBI1284:
 1060              		.loc 1 916 22 view .LVU271
 1061              	.LBB1285:
 1062              	.LBI1285:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 1063              		.loc 1 433 22 view .LVU272
 1064              	.LBB1286:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1065              		.loc 1 434 58 is_stmt 0 view .LVU273
 1066 0142 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 1067              	.LVL81:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1068              		.loc 1 434 58 view .LVU274
 1069              	.LBE1286:
 1070              	.LBE1285:
 1071              	.LBE1284:
 1072              		.loc 3 127 16 view .LVU275
 1073 0146 1BB9     		cbnz	r3, .L47
 128:MotorControl/foc.cpp ****             return Motor::ERROR_UNKNOWN_CURRENT_COMMAND;
 1074              		.loc 3 128 27 view .LVU276
 1075 0148 4FF00050 		mov	r0, #536870912
 1076 014c 0021     		movs	r1, #0
 1077 014e F2E0     		b	.L25
 1078              	.L47:
 129:MotorControl/foc.cpp ****         }
 130:MotorControl/foc.cpp **** 
 131:MotorControl/foc.cpp ****         auto [p_gain, i_gain] = *pi_gains_;
 1079              		.loc 3 131 9 is_stmt 1 view .LVU277
 1080              		.loc 3 131 34 is_stmt 0 view .LVU278
 1081 0150 01AB     		add	r3, sp, #4
 1082 0152 04F10802 		add	r2, r4, #8
 1083 0156 92E80300 		ldm	r2, {r0, r1}
 1084 015a 83E80300 		stm	r3, {r0, r1}
 1085              	.LVL82:
 132:MotorControl/foc.cpp ****         auto [Id, Iq] = *Idq;
 1086              		.loc 3 132 9 is_stmt 1 view .LVU279
 1087              		.loc 3 132 26 is_stmt 0 view .LVU280
 1088 015e 03AB     		add	r3, sp, #12
 1089              	.LVL83:
 1090              		.loc 3 132 26 view .LVU281
 1091 0160 D8E90001 		ldrd	r0, r1, [r8]
 1092 0164 83E80300 		stm	r3, {r0, r1}
 1093              	.LVL84:
 133:MotorControl/foc.cpp ****         auto [Id_setpoint, Iq_setpoint] = *Idq_setpoint_;
 1094              		.loc 3 133 9 is_stmt 1 view .LVU282
 1095              		.loc 3 133 44 is_stmt 0 view .LVU283
 1096 0168 05AB     		add	r3, sp, #20
 1097              	.LVL85:
 1098              		.loc 3 133 44 view .LVU284
 1099 016a 04F14C02 		add	r2, r4, #76
ARM GAS  /tmp/ccx1vdif.s 			page 77


 1100 016e 92E80300 		ldm	r2, {r0, r1}
 1101 0172 83E80300 		stm	r3, {r0, r1}
 1102              	.LVL86:
 134:MotorControl/foc.cpp **** 
 135:MotorControl/foc.cpp ****         float Ierr_d = Id_setpoint - Id;
 1103              		.loc 3 135 9 is_stmt 1 view .LVU285
 1104              		.loc 3 135 15 is_stmt 0 view .LVU286
 1105 0176 9DED058A 		vldr.32	s16, [sp, #20]
 1106              	.LVL87:
 1107              		.loc 3 135 15 view .LVU287
 1108 017a DDED037A 		vldr.32	s15, [sp, #12]
 1109 017e 38EE678A 		vsub.f32	s16, s16, s15
 1110              	.LVL88:
 136:MotorControl/foc.cpp ****         float Ierr_q = Iq_setpoint - Iq;
 1111              		.loc 3 136 9 is_stmt 1 view .LVU288
 1112              		.loc 3 136 15 is_stmt 0 view .LVU289
 1113 0182 DDED06BA 		vldr.32	s23, [sp, #24]
 1114 0186 DDED047A 		vldr.32	s15, [sp, #16]
 1115 018a 7BEEE7BA 		vsub.f32	s23, s23, s15
 1116              	.LVL89:
 137:MotorControl/foc.cpp **** 
 138:MotorControl/foc.cpp ****         // Apply PI control (V{d,q}_setpoint act as feed-forward terms in this mode)
 139:MotorControl/foc.cpp ****         mod_d = V_to_mod * (Vd + v_current_control_integral_d_ + Ierr_d * p_gain);
 1117              		.loc 3 139 9 is_stmt 1 view .LVU290
 1118              		.loc 3 139 34 is_stmt 0 view .LVU291
 1119 018e D4ED257A 		vldr.32	s15, [r4, #148]
 1120              		.loc 3 139 32 view .LVU292
 1121 0192 9DED0ABA 		vldr.32	s22, [sp, #40]
 1122 0196 3BEE27BA 		vadd.f32	s22, s22, s15
 1123              		.loc 3 139 75 view .LVU293
 1124 019a 9DED017A 		vldr.32	s14, [sp, #4]
 1125              		.loc 3 139 73 view .LVU294
 1126 019e 67EE087A 		vmul.f32	s15, s14, s16
 1127              		.loc 3 139 64 view .LVU295
 1128 01a2 3BEE27BA 		vadd.f32	s22, s22, s15
 1129              		.loc 3 139 15 view .LVU296
 1130 01a6 2BEE2ABA 		vmul.f32	s22, s22, s21
 1131              	.LVL90:
 140:MotorControl/foc.cpp ****         mod_q = V_to_mod * (Vq + v_current_control_integral_q_ + Ierr_q * p_gain);
 1132              		.loc 3 140 9 is_stmt 1 view .LVU297
 1133              		.loc 3 140 34 is_stmt 0 view .LVU298
 1134 01aa D4ED266A 		vldr.32	s13, [r4, #152]
 1135              		.loc 3 140 32 view .LVU299
 1136 01ae DDED0B7A 		vldr.32	s15, [sp, #44]
 1137 01b2 77EEA67A 		vadd.f32	s15, s15, s13
 1138              		.loc 3 140 73 view .LVU300
 1139 01b6 27EE2B7A 		vmul.f32	s14, s14, s23
 1140              		.loc 3 140 64 view .LVU301
 1141 01ba 77EE877A 		vadd.f32	s15, s15, s14
 1142              		.loc 3 140 15 view .LVU302
 1143 01be 67EEAAAA 		vmul.f32	s21, s15, s21
 1144              	.LVL91:
 141:MotorControl/foc.cpp **** 
 142:MotorControl/foc.cpp ****         // Vector modulation saturation, lock integrator if saturated
 143:MotorControl/foc.cpp ****         // TODO make maximum modulation configurable
 144:MotorControl/foc.cpp ****         float mod_scalefactor = 0.80f * sqrt3_by_2 * 1.0f / std::sqrt(mod_d * mod_d + mod_q * mod_q
 1145              		.loc 3 144 9 is_stmt 1 view .LVU303
ARM GAS  /tmp/ccx1vdif.s 			page 78


 1146              		.loc 3 144 77 is_stmt 0 view .LVU304
 1147 01c2 2BEE0B0A 		vmul.f32	s0, s22, s22
 1148              	.LVL92:
 1149              		.loc 3 144 93 view .LVU305
 1150 01c6 6AEEAA7A 		vmul.f32	s15, s21, s21
 1151              	.LVL93:
 1152              	.LBB1287:
 1153              	.LBI1287:
 1154              		.file 9 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // -*- C++ -*- C forwarding header.
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** /** @file include/cmath
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  as macros in C).
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  */
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** //
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // ISO C++ 14882: 26.5  C library
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** //
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #pragma GCC system_header
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <bits/c++config.h>
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <bits/cpp_type_traits.h>
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <ext/type_traits.h>
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include_next <math.h>
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <bits/std_abs.h>
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
ARM GAS  /tmp/ccx1vdif.s 			page 79


  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef _GLIBCXX_CMATH
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #define _GLIBCXX_CMATH 1
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef div
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef acos
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef asin
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef atan
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef atan2
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef ceil
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef cos
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef cosh
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef exp
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fabs
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef floor
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fmod
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef frexp
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef ldexp
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log10
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef modf
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef pow
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef sin
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef sinh
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef sqrt
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef tan
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef tanh
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** extern "C++"
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** {
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** {
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::acos;
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   acos(float __x)
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_acosf(__x); }
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   acos(long double __x)
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_acosl(__x); }
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     acos(_Tp __x)
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_acos(__x); }
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::asin;
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
ARM GAS  /tmp/ccx1vdif.s 			page 80


 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   asin(float __x)
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_asinf(__x); }
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   asin(long double __x)
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_asinl(__x); }
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     asin(_Tp __x)
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_asin(__x); }
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::atan;
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan(float __x)
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atanf(__x); }
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan(long double __x)
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atanl(__x); }
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     atan(_Tp __x)
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_atan(__x); }
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::atan2;
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan2(float __y, float __x)
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atan2f(__y, __x); }
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan2(long double __y, long double __x)
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atan2l(__y, __x); }
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     atan2(_Tp __y, _Up __x)
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return atan2(__type(__y), __type(__x));
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::ceil;
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
ARM GAS  /tmp/ccx1vdif.s 			page 81


 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ceil(float __x)
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ceilf(__x); }
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ceil(long double __x)
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ceill(__x); }
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     ceil(_Tp __x)
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_ceil(__x); }
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::cos;
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cos(float __x)
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_cosf(__x); }
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cos(long double __x)
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_cosl(__x); }
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     cos(_Tp __x)
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_cos(__x); }
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::cosh;
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cosh(float __x)
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_coshf(__x); }
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cosh(long double __x)
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_coshl(__x); }
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     cosh(_Tp __x)
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_cosh(__x); }
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::exp;
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
ARM GAS  /tmp/ccx1vdif.s 			page 82


 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   exp(float __x)
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_expf(__x); }
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   exp(long double __x)
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_expl(__x); }
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     exp(_Tp __x)
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_exp(__x); }
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fabs;
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fabs(float __x)
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fabsf(__x); }
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fabs(long double __x)
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fabsl(__x); }
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     fabs(_Tp __x)
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_fabs(__x); }
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::floor;
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   floor(float __x)
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_floorf(__x); }
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   floor(long double __x)
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_floorl(__x); }
 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     floor(_Tp __x)
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_floor(__x); }
 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fmod;
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
ARM GAS  /tmp/ccx1vdif.s 			page 83


 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fmod(float __x, float __y)
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fmodf(__x, __y); }
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fmod(long double __x, long double __y)
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fmodl(__x, __y); }
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     fmod(_Tp __x, _Up __y)
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return fmod(__type(__x), __type(__y));
 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::frexp;
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline float
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   frexp(float __x, int* __exp)
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_frexpf(__x, __exp); }
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline long double
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   frexp(long double __x, int* __exp)
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_frexpl(__x, __exp); }
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     frexp(_Tp __x, int* __exp)
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_frexp(__x, __exp); }
 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::ldexp;
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ldexp(float __x, int __exp)
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ldexpf(__x, __exp); }
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ldexp(long double __x, int __exp)
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ldexpl(__x, __exp); }
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     ldexp(_Tp __x, int __exp)
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_ldexp(__x, __exp); }
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
ARM GAS  /tmp/ccx1vdif.s 			page 84


 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log;
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log(float __x)
 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_logf(__x); }
 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log(long double __x)
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_logl(__x); }
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     log(_Tp __x)
 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_log(__x); }
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log10;
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log10(float __x)
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_log10f(__x); }
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log10(long double __x)
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_log10l(__x); }
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     log10(_Tp __x)
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_log10(__x); }
 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::modf;
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline float
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   modf(float __x, float* __iptr)
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_modff(__x, __iptr); }
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline long double
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   modf(long double __x, long double* __iptr)
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_modfl(__x, __iptr); }
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::pow;
 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(float __x, float __y)
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powf(__x, __y); }
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
ARM GAS  /tmp/ccx1vdif.s 			page 85


 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(long double __x, long double __y)
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powl(__x, __y); }
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #if __cplusplus < 201103L
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   // DR 550. What should the return type of pow(float,int) be?
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline double
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(double __x, int __i)
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powi(__x, __i); }
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline float
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(float __x, int __n)
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powif(__x, __n); }
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline long double
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(long double __x, int __n)
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powil(__x, __n); }
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     pow(_Tp __x, _Up __y)
 416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return pow(__type(__x), __type(__y));
 419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::sin;
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sin(float __x)
 426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinf(__x); }
 427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sin(long double __x)
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinl(__x); }
 431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     sin(_Tp __x)
 438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_sin(__x); }
 439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::sinh;
 441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sinh(float __x)
 445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinhf(__x); }
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
ARM GAS  /tmp/ccx1vdif.s 			page 86


 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sinh(long double __x)
 449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinhl(__x); }
 450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     sinh(_Tp __x)
 457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_sinh(__x); }
 458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::sqrt;
 460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sqrt(float __x)
 1155              		.loc 9 463 3 is_stmt 1 view .LVU306
 1156              	.LBB1288:
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sqrtf(__x); }
 1157              		.loc 9 464 5 view .LVU307
 1158              		.loc 9 464 27 is_stmt 0 view .LVU308
 1159 01ca 30EE270A 		vadd.f32	s0, s0, s15
 1160              	.LVL94:
 1161              		.loc 9 464 27 view .LVU309
 1162 01ce FFF7FEFF 		bl	sqrtf
 1163              	.LVL95:
 1164              		.loc 9 464 27 view .LVU310
 1165              	.LBE1288:
 1166              	.LBE1287:
 1167              		.loc 3 144 100 view .LVU311
 1168 01d2 9FED667A 		vldr.32	s14, .L49+8
 1169 01d6 C7EE007A 		vdiv.f32	s15, s14, s0
 1170              	.LVL96:
 145:MotorControl/foc.cpp ****         if (mod_scalefactor < 1.0f) {
 1171              		.loc 3 145 9 is_stmt 1 view .LVU312
 1172 01da B7EE007A 		vmov.f32	s14, #1.0e+0
 1173              	.LVL97:
 1174              		.loc 3 145 9 is_stmt 0 view .LVU313
 1175 01de F4EEC77A 		vcmpe.f32	s15, s14
 1176 01e2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1177 01e6 16D4     		bmi	.L48
 146:MotorControl/foc.cpp ****             mod_d *= mod_scalefactor;
 147:MotorControl/foc.cpp ****             mod_q *= mod_scalefactor;
 148:MotorControl/foc.cpp ****             // TODO make decayfactor configurable
 149:MotorControl/foc.cpp ****             v_current_control_integral_d_ *= 0.99f;
 150:MotorControl/foc.cpp ****             v_current_control_integral_q_ *= 0.99f;
 151:MotorControl/foc.cpp ****         } else {
 152:MotorControl/foc.cpp ****             v_current_control_integral_d_ += Ierr_d * (i_gain * current_meas_period);
 1178              		.loc 3 152 13 is_stmt 1 view .LVU314
 1179              		.loc 3 152 63 is_stmt 0 view .LVU315
 1180 01e8 DDED027A 		vldr.32	s15, [sp, #8]
 1181              	.LVL98:
 1182              		.loc 3 152 63 view .LVU316
 1183 01ec 9FED607A 		vldr.32	s14, .L49+12
 1184              	.LVL99:
 1185              		.loc 3 152 63 view .LVU317
 1186 01f0 67EE877A 		vmul.f32	s15, s15, s14
ARM GAS  /tmp/ccx1vdif.s 			page 87


 1187              		.loc 3 152 53 view .LVU318
 1188 01f4 27EE888A 		vmul.f32	s16, s15, s16
 1189              	.LVL100:
 1190              		.loc 3 152 43 view .LVU319
 1191 01f8 94ED257A 		vldr.32	s14, [r4, #148]
 1192 01fc 37EE088A 		vadd.f32	s16, s14, s16
 1193 0200 84ED258A 		vstr.32	s16, [r4, #148]
 153:MotorControl/foc.cpp ****             v_current_control_integral_q_ += Ierr_q * (i_gain * current_meas_period);
 1194              		.loc 3 153 13 is_stmt 1 view .LVU320
 1195              		.loc 3 153 53 is_stmt 0 view .LVU321
 1196 0204 67EEAB7A 		vmul.f32	s15, s15, s23
 1197              		.loc 3 153 43 view .LVU322
 1198 0208 D4ED26BA 		vldr.32	s23, [r4, #152]
 1199              	.LVL101:
 1200              		.loc 3 153 43 view .LVU323
 1201 020c 7BEEA77A 		vadd.f32	s15, s23, s15
 1202 0210 C4ED267A 		vstr.32	s15, [r4, #152]
 1203              		.loc 3 153 43 view .LVU324
 1204 0214 1DE0     		b	.L32
 1205              	.LVL102:
 1206              	.L48:
 146:MotorControl/foc.cpp ****             mod_d *= mod_scalefactor;
 1207              		.loc 3 146 13 is_stmt 1 view .LVU325
 146:MotorControl/foc.cpp ****             mod_d *= mod_scalefactor;
 1208              		.loc 3 146 19 is_stmt 0 view .LVU326
 1209 0216 2BEE27BA 		vmul.f32	s22, s22, s15
 1210              	.LVL103:
 147:MotorControl/foc.cpp ****             // TODO make decayfactor configurable
 1211              		.loc 3 147 13 is_stmt 1 view .LVU327
 147:MotorControl/foc.cpp ****             // TODO make decayfactor configurable
 1212              		.loc 3 147 19 is_stmt 0 view .LVU328
 1213 021a 6AEEA7AA 		vmul.f32	s21, s21, s15
 1214              	.LVL104:
 149:MotorControl/foc.cpp ****             v_current_control_integral_q_ *= 0.99f;
 1215              		.loc 3 149 13 is_stmt 1 view .LVU329
 149:MotorControl/foc.cpp ****             v_current_control_integral_q_ *= 0.99f;
 1216              		.loc 3 149 43 is_stmt 0 view .LVU330
 1217 021e D4ED257A 		vldr.32	s15, [r4, #148]
 1218              	.LVL105:
 149:MotorControl/foc.cpp ****             v_current_control_integral_q_ *= 0.99f;
 1219              		.loc 3 149 43 view .LVU331
 1220 0222 9FED547A 		vldr.32	s14, .L49+16
 1221              	.LVL106:
 149:MotorControl/foc.cpp ****             v_current_control_integral_q_ *= 0.99f;
 1222              		.loc 3 149 43 view .LVU332
 1223 0226 67EE877A 		vmul.f32	s15, s15, s14
 1224 022a C4ED257A 		vstr.32	s15, [r4, #148]
 150:MotorControl/foc.cpp ****         } else {
 1225              		.loc 3 150 13 is_stmt 1 view .LVU333
 150:MotorControl/foc.cpp ****         } else {
 1226              		.loc 3 150 43 is_stmt 0 view .LVU334
 1227 022e D4ED267A 		vldr.32	s15, [r4, #152]
 1228 0232 67EE877A 		vmul.f32	s15, s15, s14
 1229 0236 C4ED267A 		vstr.32	s15, [r4, #152]
 1230 023a 0AE0     		b	.L32
 1231              	.LVL107:
 1232              	.L42:
ARM GAS  /tmp/ccx1vdif.s 			page 88


 124:MotorControl/foc.cpp ****         } else if (!Idq.has_value()) {
 1233              		.loc 3 124 27 view .LVU335
 1234 023c 0020     		movs	r0, #0
 1235 023e 0221     		movs	r1, #2
 1236 0240 79E0     		b	.L25
 1237              	.L27:
 1238              	.LBE1280:
 154:MotorControl/foc.cpp ****         }
 155:MotorControl/foc.cpp **** 
 156:MotorControl/foc.cpp ****     } else {
 157:MotorControl/foc.cpp ****         // Voltage control mode
 158:MotorControl/foc.cpp ****         mod_d = V_to_mod * Vd;
 1239              		.loc 3 158 9 is_stmt 1 view .LVU336
 1240              		.loc 3 158 28 is_stmt 0 view .LVU337
 1241 0242 9DED0ABA 		vldr.32	s22, [sp, #40]
 1242              		.loc 3 158 15 view .LVU338
 1243 0246 2BEE2ABA 		vmul.f32	s22, s22, s21
 1244              	.LVL108:
 159:MotorControl/foc.cpp ****         mod_q = V_to_mod * Vq;
 1245              		.loc 3 159 9 is_stmt 1 view .LVU339
 1246              		.loc 3 159 28 is_stmt 0 view .LVU340
 1247 024a DDED0B7A 		vldr.32	s15, [sp, #44]
 1248              		.loc 3 159 15 view .LVU341
 1249 024e 67EEAAAA 		vmul.f32	s21, s15, s21
 1250              	.LVL109:
 1251              	.L32:
 1252              		.loc 3 159 15 view .LVU342
 1253              	.LBE1279:
 160:MotorControl/foc.cpp ****     }
 161:MotorControl/foc.cpp **** 
 162:MotorControl/foc.cpp ****     // Inverse park transform
 163:MotorControl/foc.cpp ****     float pwm_phase = phase + phase_vel * ((float)(int32_t)(output_timestamp - ctrl_timestamp_) / (
 1254              		.loc 3 163 5 is_stmt 1 view .LVU343
 1255              		.loc 3 163 80 is_stmt 0 view .LVU344
 1256 0252 616C     		ldr	r1, [r4, #68]
 1257              		.loc 3 163 78 view .LVU345
 1258 0254 791A     		subs	r1, r7, r1
 1259              		.loc 3 163 44 view .LVU346
 1260 0256 07EE901A 		vmov	s15, r1	@ int
 1261 025a F8EEE77A 		vcvt.f32.s32	s15, s15
 1262              		.loc 3 163 97 view .LVU347
 1263 025e DFED416A 		vldr.32	s13, .L49
 1264 0262 87EEA67A 		vdiv.f32	s14, s15, s13
 1265              		.loc 3 163 41 view .LVU348
 1266 0266 67EE299A 		vmul.f32	s19, s14, s19
 1267              	.LVL110:
 1268              		.loc 3 163 11 view .LVU349
 1269 026a 39EE899A 		vadd.f32	s18, s19, s18
 1270              	.LVL111:
 164:MotorControl/foc.cpp ****     float c_p = our_arm_cos_f32(pwm_phase);
 1271              		.loc 3 164 5 is_stmt 1 view .LVU350
 1272              		.loc 3 164 32 is_stmt 0 view .LVU351
 1273 026e B0EE490A 		vmov.f32	s0, s18
 1274 0272 FFF7FEFF 		bl	our_arm_cos_f32
 1275              	.LVL112:
 1276 0276 B0EE408A 		vmov.f32	s16, s0
 1277              	.LVL113:
ARM GAS  /tmp/ccx1vdif.s 			page 89


 165:MotorControl/foc.cpp ****     float s_p = our_arm_sin_f32(pwm_phase);
 1278              		.loc 3 165 5 is_stmt 1 view .LVU352
 1279              		.loc 3 165 32 is_stmt 0 view .LVU353
 1280 027a B0EE490A 		vmov.f32	s0, s18
 1281              	.LVL114:
 1282              		.loc 3 165 32 view .LVU354
 1283 027e FFF7FEFF 		bl	our_arm_sin_f32
 1284              	.LVL115:
 166:MotorControl/foc.cpp ****     float mod_alpha = c_p * mod_d - s_p * mod_q;
 1285              		.loc 3 166 5 is_stmt 1 view .LVU355
 1286              		.loc 3 166 27 is_stmt 0 view .LVU356
 1287 0282 2BEE087A 		vmul.f32	s14, s22, s16
 1288              		.loc 3 166 41 view .LVU357
 1289 0286 6AEE807A 		vmul.f32	s15, s21, s0
 1290              		.loc 3 166 35 view .LVU358
 1291 028a 37EE677A 		vsub.f32	s14, s14, s15
 1292              	.LVL116:
 167:MotorControl/foc.cpp ****     float mod_beta = c_p * mod_q + s_p * mod_d;
 1293              		.loc 3 167 5 is_stmt 1 view .LVU359
 1294              		.loc 3 167 26 is_stmt 0 view .LVU360
 1295 028e 2AEE888A 		vmul.f32	s16, s21, s16
 1296              	.LVL117:
 1297              		.loc 3 167 40 view .LVU361
 1298 0292 2BEE000A 		vmul.f32	s0, s22, s0
 1299              	.LVL118:
 1300              		.loc 3 167 34 view .LVU362
 1301 0296 78EE007A 		vadd.f32	s15, s16, s0
 1302              	.LVL119:
 168:MotorControl/foc.cpp **** 
 169:MotorControl/foc.cpp ****     // Report final applied voltage in stationary frame (for sensorless estimator)
 170:MotorControl/foc.cpp ****     final_v_alpha_ = mod_to_V * mod_alpha;
 1303              		.loc 3 170 5 is_stmt 1 view .LVU363
 1304              		.loc 3 170 31 is_stmt 0 view .LVU364
 1305 029a 67EE0A6A 		vmul.f32	s13, s14, s20
 1306              		.loc 3 170 20 view .LVU365
 1307 029e C4ED276A 		vstr.32	s13, [r4, #156]
 171:MotorControl/foc.cpp ****     final_v_beta_ = mod_to_V * mod_beta;
 1308              		.loc 3 171 5 is_stmt 1 view .LVU366
 1309              		.loc 3 171 30 is_stmt 0 view .LVU367
 1310 02a2 27EE8AAA 		vmul.f32	s20, s15, s20
 1311              	.LVL120:
 1312              		.loc 3 171 19 view .LVU368
 1313 02a6 84ED28AA 		vstr.32	s20, [r4, #160]
 172:MotorControl/foc.cpp **** 
 173:MotorControl/foc.cpp ****     *mod_alpha_beta = {mod_alpha, mod_beta};
 1314              		.loc 3 173 5 is_stmt 1 view .LVU369
 1315              	.LVL121:
 1316              	.LBB1289:
 1317              	.LBI1289:
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1318              		.loc 4 352 12 view .LVU370
 1319              	.LBB1290:
 1320              	.LBB1291:
 1321              	.LBB1292:
 1322              	.LBI1292:
 1323              		.loc 5 76 5 view .LVU371
 1324              		.loc 5 76 5 is_stmt 0 view .LVU372
ARM GAS  /tmp/ccx1vdif.s 			page 90


 1325              	.LBE1292:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 1326              		.loc 4 353 64 view .LVU373
 1327 02aa 8DED0E7A 		vstr.32	s14, [sp, #56]
 1328              	.LVL122:
 1329              	.LBB1293:
 1330              	.LBI1293:
 1331              		.loc 5 76 5 is_stmt 1 view .LVU374
 1332              		.loc 5 76 5 is_stmt 0 view .LVU375
 1333              	.LBE1293:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 1334              		.loc 4 353 64 view .LVU376
 1335 02ae CDED0F7A 		vstr.32	s15, [sp, #60]
 1336              	.LVL123:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 1337              		.loc 4 353 64 view .LVU377
 1338              	.LBE1291:
 1339              	.LBE1290:
 1340              	.LBE1289:
 1341              	.LBB1294:
 1342              	.LBI1294:
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 1343              		.loc 1 788 2 is_stmt 1 view .LVU378
 1344              	.LBB1295:
 1345              	.LBB1296:
 1346              	.LBI1296:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 1347              		.loc 1 433 22 view .LVU379
 1348              	.LBB1297:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1349              		.loc 1 434 58 is_stmt 0 view .LVU380
 1350 02b2 337A     		ldrb	r3, [r6, #8]	@ zero_extendqisi2
 1351              	.LVL124:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1352              		.loc 1 434 58 view .LVU381
 1353              	.LBE1297:
 1354              	.LBE1296:
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 1355              		.loc 1 790 4 view .LVU382
 1356 02b4 43B3     		cbz	r3, .L33
 1357              	.LVL125:
 1358              	.LBB1298:
 1359              	.LBI1298:
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       operator=(typename conditional<
 1360              		.loc 4 401 7 is_stmt 1 view .LVU383
 1361              	.LBB1299:
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		       is_move_assignable<_T2>>::value,
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		pair&&, __nonesuch&&>::type __p)
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       noexcept(__and_<is_nothrow_move_assignable<_T1>,
 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_nothrow_move_assignable<_T2>>::value)
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	first = std::forward<first_type>(__p.first);
 1362              		.loc 4 408 8 is_stmt 0 view .LVU384
ARM GAS  /tmp/ccx1vdif.s 			page 91


 1363 02b6 86ED007A 		vstr.32	s14, [r6]
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 1364              		.loc 4 409 9 view .LVU385
 1365 02ba C6ED017A 		vstr.32	s15, [r6, #4]
 1366              	.LVL126:
 1367              	.L34:
 1368              		.loc 4 409 9 view .LVU386
 1369              	.LBE1299:
 1370              	.LBE1298:
 1371              	.LBE1295:
 1372              	.LBE1294:
 174:MotorControl/foc.cpp **** 
 175:MotorControl/foc.cpp ****     if (Idq.has_value()) {
 1373              		.loc 3 175 5 is_stmt 1 view .LVU387
 1374              	.LBB1305:
 176:MotorControl/foc.cpp ****         auto [Id, Iq] = *Idq;
 1375              		.loc 3 176 9 view .LVU388
 1376              		.loc 3 176 26 is_stmt 0 view .LVU389
 1377 02be 05AB     		add	r3, sp, #20
 1378              	.LVL127:
 1379              		.loc 3 176 26 view .LVU390
 1380 02c0 07AA     		add	r2, sp, #28
 1381 02c2 92E80300 		ldm	r2, {r0, r1}
 1382 02c6 83E80300 		stm	r3, {r0, r1}
 1383              	.LVL128:
 177:MotorControl/foc.cpp ****         *ibus = mod_d * Id + mod_q * Iq;
 1384              		.loc 3 177 9 is_stmt 1 view .LVU391
 1385              		.loc 3 177 25 is_stmt 0 view .LVU392
 1386 02ca DDED057A 		vldr.32	s15, [sp, #20]
 1387              	.LVL129:
 1388              		.loc 3 177 23 view .LVU393
 1389 02ce 27EE8BBA 		vmul.f32	s22, s15, s22
 1390              	.LVL130:
 1391              		.loc 3 177 38 view .LVU394
 1392 02d2 DDED067A 		vldr.32	s15, [sp, #24]
 1393              		.loc 3 177 36 view .LVU395
 1394 02d6 67EEAAAA 		vmul.f32	s21, s15, s21
 1395              	.LVL131:
 1396              		.loc 3 177 28 view .LVU396
 1397 02da 7BEE2AAA 		vadd.f32	s21, s22, s21
 1398              	.LVL132:
 1399              	.LBB1306:
 1400              	.LBI1306:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 1401              		.loc 1 700 2 is_stmt 1 view .LVU397
 1402              	.LBB1307:
 1403              	.LBB1308:
 1404              	.LBB1309:
 1405              	.LBI1309:
 1406              		.loc 5 76 5 view .LVU398
 1407              		.loc 5 76 5 is_stmt 0 view .LVU399
 1408              	.LBE1309:
 1409              	.LBB1310:
 1410              	.LBI1310:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 1411              		.loc 1 607 28 is_stmt 1 view .LVU400
 1412              	.LBB1311:
ARM GAS  /tmp/ccx1vdif.s 			page 92


 1413              	.LBB1312:
 1414              	.LBB1313:
 1415              	.LBI1313:
 1416              		.loc 5 76 5 view .LVU401
 1417              		.loc 5 76 5 is_stmt 0 view .LVU402
 1418              	.LBE1313:
 1419              	.LBB1314:
 1420              	.LBI1314:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1421              		.loc 1 300 42 is_stmt 1 view .LVU403
 1422              	.LBB1315:
 1423              	.LBB1316:
 1424              	.LBB1317:
 1425              	.LBI1317:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 1426              		.loc 1 115 2 view .LVU404
 1427              	.LBB1318:
 1428              	.LBB1319:
 1429              	.LBB1320:
 1430              	.LBI1320:
 1431              		.loc 5 76 5 view .LVU405
 1432              		.loc 5 76 5 is_stmt 0 view .LVU406
 1433              	.LBE1320:
 1434              	.LBB1321:
 1435              	.LBI1321:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 1436              		.loc 1 203 6 is_stmt 1 view .LVU407
 1437              	.LBB1322:
 1438              	.LBB1323:
 1439              	.LBB1324:
 1440              	.LBI1324:
 1441              		.loc 5 76 5 view .LVU408
 1442              		.loc 5 76 5 is_stmt 0 view .LVU409
 1443              	.LBE1324:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 1444              		.loc 1 204 47 view .LVU410
 1445 02de CDED10AA 		vstr.32	s21, [sp, #64]
 1446              	.LVL133:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 1447              		.loc 1 204 47 view .LVU411
 1448              	.LBE1323:
 1449              	.LBE1322:
 1450              	.LBE1321:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 1451              		.loc 1 117 19 view .LVU412
 1452 02e2 0123     		movs	r3, #1
 1453              	.LVL134:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 1454              		.loc 1 117 19 view .LVU413
 1455 02e4 8DF84430 		strb	r3, [sp, #68]
 1456              	.LVL135:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 1457              		.loc 1 117 19 view .LVU414
 1458              	.LBE1319:
 1459              	.LBE1318:
 1460              	.LBE1317:
 1461              	.LBE1316:
ARM GAS  /tmp/ccx1vdif.s 			page 93


 1462              	.LBE1315:
 1463              	.LBE1314:
 1464              	.LBE1312:
 1465              	.LBE1311:
 1466              	.LBE1310:
 1467              	.LBE1308:
 1468              	.LBE1307:
 1469              	.LBE1306:
 1470              		.loc 3 177 15 view .LVU415
 1471 02e8 12AB     		add	r3, sp, #72
 1472 02ea 13E90300 		ldmdb	r3, {r0, r1}
 1473 02ee 85E80300 		stm	r5, {r0, r1}
 178:MotorControl/foc.cpp ****         power_ = vbus_voltage * (*ibus).value();
 1474              		.loc 3 178 9 is_stmt 1 view .LVU416
 1475              	.LVL136:
 1476              	.LBB1325:
 1477              	.LBI1325:
 917:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_is_engaged(); }
 918:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 919:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&
 920:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       value() const&
 921:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 922:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return this->_M_is_engaged()
 923:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ? this->_M_get()
 924:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 925:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 926:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 927:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&
 928:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       value()&
 1478              		.loc 1 928 7 view .LVU417
 1479              	.LBB1326:
 1480              	.LBB1327:
 1481              	.LBI1327:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 1482              		.loc 1 433 22 view .LVU418
 1483              	.LBB1328:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1484              		.loc 1 434 58 is_stmt 0 view .LVU419
 1485 02f2 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 1486              	.LVL137:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1487              		.loc 1 434 58 view .LVU420
 1488              	.LBE1328:
 1489              	.LBE1327:
 929:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 930:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return this->_M_is_engaged()
 931:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ? this->_M_get()
 1490              		.loc 1 931 4 view .LVU421
 1491 02f4 83B1     		cbz	r3, .L35
 1492              	.LVL138:
 1493              		.loc 1 931 4 view .LVU422
 1494              	.LBE1326:
 1495              	.LBE1325:
 1496              		.loc 3 178 46 view .LVU423
 1497 02f6 D5ED007A 		vldr.32	s15, [r5]
 1498              		.loc 3 178 31 view .LVU424
 1499 02fa 67EEA88A 		vmul.f32	s17, s15, s17
ARM GAS  /tmp/ccx1vdif.s 			page 94


 1500              	.LVL139:
 1501              		.loc 3 178 16 view .LVU425
 1502 02fe C4ED298A 		vstr.32	s17, [r4, #164]
 1503              	.LBE1305:
 179:MotorControl/foc.cpp ****     }
 180:MotorControl/foc.cpp ****     
 181:MotorControl/foc.cpp ****     return Motor::ERROR_NONE;
 1504              		.loc 3 181 5 is_stmt 1 view .LVU426
 1505              		.loc 3 181 19 is_stmt 0 view .LVU427
 1506 0302 0020     		movs	r0, #0
 1507 0304 0021     		movs	r1, #0
 1508 0306 16E0     		b	.L25
 1509              	.LVL140:
 1510              	.L33:
 1511              	.LBB1337:
 1512              	.LBB1303:
 1513              	.LBB1300:
 1514              	.LBI1300:
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1515              		.loc 1 415 2 is_stmt 1 view .LVU428
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1516              		.loc 1 415 2 is_stmt 0 view .LVU429
 1517              	.LBE1300:
 1518              	.LBE1303:
 1519              	.LBE1337:
 1520              		.loc 6 175 3 is_stmt 1 view .LVU430
 1521              	.LBB1338:
 1522              	.LBB1304:
 1523              	.LBB1302:
 1524              	.LBB1301:
 1525              		.loc 6 175 3 is_stmt 0 view .LVU431
 1526 0308 0EAB     		add	r3, sp, #56
 1527              	.LVL141:
 1528              		.loc 6 175 3 view .LVU432
 1529 030a 93E80300 		ldm	r3, {r0, r1}
 1530 030e 86E80300 		stm	r6, {r0, r1}
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 1531              		.loc 1 421 51 view .LVU433
 1532 0312 0123     		movs	r3, #1
 1533              	.LVL142:
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 1534              		.loc 1 421 51 view .LVU434
 1535 0314 3372     		strb	r3, [r6, #8]
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1536              		.loc 1 422 2 view .LVU435
 1537 0316 D2E7     		b	.L34
 1538              	.LVL143:
 1539              	.L35:
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1540              		.loc 1 422 2 view .LVU436
 1541              	.LBE1301:
 1542              	.LBE1302:
 1543              	.LBE1304:
 1544              	.LBE1338:
 1545              	.LBB1339:
 1546              	.LBB1336:
 1547              	.LBB1335:
ARM GAS  /tmp/ccx1vdif.s 			page 95


 1548              	.LBB1329:
 1549              	.LBI1329:
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 1550              		.loc 1 100 3 is_stmt 1 view .LVU437
 1551              	.LBB1330:
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1552              		.loc 1 101 5 view .LVU438
 1553 0318 0420     		movs	r0, #4
 1554 031a FFF7FEFF 		bl	__cxa_allocate_exception
 1555              	.LVL144:
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1556              		.loc 1 101 5 is_stmt 0 view .LVU439
 1557 031e 0022     		movs	r2, #0
 1558 0320 0260     		str	r2, [r0]
 1559              	.LVL145:
 1560              	.LBB1331:
 1561              	.LBI1331:
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     virtual ~bad_optional_access() = default;
 1562              		.loc 1 87 5 is_stmt 1 view .LVU440
 1563              	.LBB1332:
 1564              	.LBB1333:
 1565              	.LBI1333:
 1566              		.file 10 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // Exception Handling support header for -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // This file is part of GCC.
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** //
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // GCC is free software; you can redistribute it and/or modify
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // it under the terms of the GNU General Public License as published by
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // the Free Software Foundation; either version 3, or (at your option)
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // any later version.
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** //
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // GCC is distributed in the hope that it will be useful,
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // GNU General Public License for more details.
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** //
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** /** @file bits/exception.h
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****  *  This is an internal header file, included by other library headers.
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****  *  Do not attempt to use it directly.
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****  */
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** #ifndef __EXCEPTION_H
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** #define __EXCEPTION_H 1
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** #pragma GCC system_header
ARM GAS  /tmp/ccx1vdif.s 			page 96


  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** #pragma GCC visibility push(default)
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** #include <bits/c++config.h>
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** extern "C++" {
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** namespace std
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** {
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****   /**
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    * @defgroup exceptions Exceptions
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    * @ingroup diagnostics
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    * Classes and functions for reporting errors via exceptions.
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    * @{
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    */
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****   /**
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *  @brief Base class for all library exceptions.
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *  This is the base class for all exceptions thrown by the standard
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *  library, and by certain language expressions.  You are free to derive
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *  your own %exception classes, or use a different hierarchy, or to
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *  throw non-class data (e.g., fundamental types).
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    */
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****   class exception
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****   {
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****   public:
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****     exception() _GLIBCXX_NOTHROW { }
 1567              		.loc 10 63 5 view .LVU441
 1568              	.LBB1334:
 1569              		.loc 10 63 34 is_stmt 0 view .LVU442
 1570 0322 154A     		ldr	r2, .L49+20
 1571 0324 0260     		str	r2, [r0]
 1572              	.LVL146:
 1573              		.loc 10 63 34 view .LVU443
 1574              	.LBE1334:
 1575              	.LBE1333:
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     virtual ~bad_optional_access() = default;
 1576              		.loc 1 87 5 view .LVU444
 1577 0326 154A     		ldr	r2, .L49+24
 1578 0328 0260     		str	r2, [r0]
 1579              	.LVL147:
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     virtual ~bad_optional_access() = default;
 1580              		.loc 1 87 5 view .LVU445
 1581              	.LBE1332:
 1582              	.LBE1331:
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1583              		.loc 1 101 5 view .LVU446
 1584 032a 154A     		ldr	r2, .L49+28
 1585 032c 1549     		ldr	r1, .L49+32
 1586 032e FFF7FEFF 		bl	__cxa_throw
 1587              	.LVL148:
 1588              	.L36:
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1589              		.loc 1 101 5 view .LVU447
 1590              	.LBE1330:
ARM GAS  /tmp/ccx1vdif.s 			page 97


 1591              	.LBE1329:
 1592              	.LBE1335:
 1593              	.LBE1336:
 1594              	.LBE1339:
  72:MotorControl/foc.cpp ****     } else if (abs((int32_t)(i_timestamp_ - ctrl_timestamp_)) > MAX_CONTROL_LOOP_UPDATE_TO_CURRENT_
 1595              		.loc 3 72 23 view .LVU448
 1596 0332 0020     		movs	r0, #0
 1597 0334 0421     		movs	r1, #4
 1598              	.LVL149:
 1599              	.L25:
 182:MotorControl/foc.cpp **** }
 1600              		.loc 3 182 1 view .LVU449
 1601 0336 12B0     		add	sp, sp, #72
 1602              	.LCFI18:
 1603              		.cfi_remember_state
 1604              		.cfi_def_cfa_offset 56
 1605              		@ sp needed
 1606 0338 BDEC088B 		vldm	sp!, {d8-d11}
 1607              	.LCFI19:
 1608              		.cfi_restore 86
 1609              		.cfi_restore 87
 1610              		.cfi_restore 84
 1611              		.cfi_restore 85
 1612              		.cfi_restore 82
 1613              		.cfi_restore 83
 1614              		.cfi_restore 80
 1615              		.cfi_restore 81
 1616              		.cfi_def_cfa_offset 24
 1617 033c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1618              	.LVL150:
 1619              	.L37:
 1620              	.LCFI20:
 1621              		.cfi_restore_state
  72:MotorControl/foc.cpp ****     } else if (abs((int32_t)(i_timestamp_ - ctrl_timestamp_)) > MAX_CONTROL_LOOP_UPDATE_TO_CURRENT_
 1622              		.loc 3 72 23 view .LVU450
 1623 0340 0020     		movs	r0, #0
 1624 0342 0421     		movs	r1, #4
 1625              	.LVL151:
  72:MotorControl/foc.cpp ****     } else if (abs((int32_t)(i_timestamp_ - ctrl_timestamp_)) > MAX_CONTROL_LOOP_UPDATE_TO_CURRENT_
 1626              		.loc 3 72 23 view .LVU451
 1627 0344 F7E7     		b	.L25
 1628              	.LVL152:
 1629              	.L38:
  75:MotorControl/foc.cpp ****     }
 1630              		.loc 3 75 23 view .LVU452
 1631 0346 4FF00070 		mov	r0, #33554432
 1632 034a 0021     		movs	r1, #0
 1633              	.LVL153:
  75:MotorControl/foc.cpp ****     }
 1634              		.loc 3 75 23 view .LVU453
 1635 034c F3E7     		b	.L25
 1636              	.LVL154:
 1637              	.L39:
  83:MotorControl/foc.cpp ****     } else if (!phase_.has_value() || !phase_vel_.has_value()) {
 1638              		.loc 3 83 23 view .LVU454
 1639 034e 0020     		movs	r0, #0
 1640 0350 0121     		movs	r1, #1
ARM GAS  /tmp/ccx1vdif.s 			page 98


 1641              	.LVL155:
  83:MotorControl/foc.cpp ****     } else if (!phase_.has_value() || !phase_vel_.has_value()) {
 1642              		.loc 3 83 23 view .LVU455
 1643 0352 F0E7     		b	.L25
 1644              	.LVL156:
 1645              	.L40:
  85:MotorControl/foc.cpp ****     } else if (!vbus_voltage_measured_.has_value()) {
 1646              		.loc 3 85 23 view .LVU456
 1647 0354 4FF08060 		mov	r0, #67108864
 1648 0358 0021     		movs	r1, #0
 1649              	.LVL157:
  85:MotorControl/foc.cpp ****     } else if (!vbus_voltage_measured_.has_value()) {
 1650              		.loc 3 85 23 view .LVU457
 1651 035a ECE7     		b	.L25
 1652              	.LVL158:
 1653              	.L41:
  85:MotorControl/foc.cpp ****     } else if (!vbus_voltage_measured_.has_value()) {
 1654              		.loc 3 85 23 view .LVU458
 1655 035c 4FF08060 		mov	r0, #67108864
 1656 0360 0021     		movs	r1, #0
 1657              	.LVL159:
  85:MotorControl/foc.cpp ****     } else if (!vbus_voltage_measured_.has_value()) {
 1658              		.loc 3 85 23 view .LVU459
 1659 0362 E8E7     		b	.L25
 1660              	.L50:
 1661              		.align	2
 1662              	.L49:
 1663 0364 A037204D 		.word	1293957024
 1664 0368 ABAA2A3F 		.word	1059760811
 1665 036c AC5C313F 		.word	1060199596
 1666 0370 6F120339 		.word	956502639
 1667 0374 A4707D3F 		.word	1065185444
 1668 0378 08000000 		.word	_ZTVSt9exception+8
 1669 037c 08000000 		.word	_ZTVSt19bad_optional_access+8
 1670 0380 00000000 		.word	_ZNSt19bad_optional_accessD1Ev
 1671 0384 00000000 		.word	_ZTISt19bad_optional_access
 1672              		.cfi_endproc
 1673              	.LFE4334:
 1674              		.fnend
 1676              		.section	.text._ZNSt19bad_optional_accessD2Ev,"axG",%progbits,_ZNSt19bad_optional_accessD5Ev,comda
 1677              		.align	1
 1678              		.weak	_ZNSt19bad_optional_accessD2Ev
 1679              		.syntax unified
 1680              		.thumb
 1681              		.thumb_func
 1683              	_ZNSt19bad_optional_accessD2Ev:
 1684              		.fnstart
 1685              	.LVL160:
 1686              	.LFB4971:
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1687              		.loc 1 88 13 is_stmt 1 view -0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 0
 1690              		@ frame_needed = 0, uses_anonymous_args = 0
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1691              		.loc 1 88 13 is_stmt 0 view .LVU461
 1692 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccx1vdif.s 			page 99


 1693              	.LCFI21:
 1694              		.cfi_def_cfa_offset 8
 1695              		.cfi_offset 4, -8
 1696              		.cfi_offset 14, -4
 1697 0002 0446     		mov	r4, r0
 1698              	.LBB1340:
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1699              		.loc 1 88 13 view .LVU462
 1700 0004 024B     		ldr	r3, .L53
 1701 0006 0360     		str	r3, [r0]
 1702 0008 FFF7FEFF 		bl	_ZNSt9exceptionD2Ev
 1703              	.LVL161:
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1704              		.loc 1 88 13 view .LVU463
 1705              	.LBE1340:
 1706 000c 2046     		mov	r0, r4
 1707 000e 10BD     		pop	{r4, pc}
 1708              	.LVL162:
 1709              	.L54:
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1710              		.loc 1 88 13 view .LVU464
 1711              		.align	2
 1712              	.L53:
 1713 0010 08000000 		.word	_ZTVSt19bad_optional_access+8
 1714              		.cfi_endproc
 1715              	.LFE4971:
 1716              		.cantunwind
 1717              		.fnend
 1719              		.weak	_ZNSt19bad_optional_accessD1Ev
 1720              		.thumb_set _ZNSt19bad_optional_accessD1Ev,_ZNSt19bad_optional_accessD2Ev
 1721              		.section	.text._ZNSt18bad_variant_accessD2Ev,"axG",%progbits,_ZNSt18bad_variant_accessD5Ev,comdat
 1722              		.align	1
 1723              		.weak	_ZNSt18bad_variant_accessD2Ev
 1724              		.syntax unified
 1725              		.thumb
 1726              		.thumb_func
 1728              	_ZNSt18bad_variant_accessD2Ev:
 1729              		.fnstart
 1730              	.LVL163:
 1731              	.LFB4967:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 1732              		.loc 2 1264 9 is_stmt 1 view -0
 1733              		.cfi_startproc
 1734              		@ args = 0, pretend = 0, frame = 0
 1735              		@ frame_needed = 0, uses_anonymous_args = 0
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 1736              		.loc 2 1264 9 is_stmt 0 view .LVU466
 1737 0000 10B5     		push	{r4, lr}
 1738              	.LCFI22:
 1739              		.cfi_def_cfa_offset 8
 1740              		.cfi_offset 4, -8
 1741              		.cfi_offset 14, -4
 1742 0002 0446     		mov	r4, r0
 1743              	.LBB1341:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 1744              		.loc 2 1264 9 view .LVU467
 1745 0004 024B     		ldr	r3, .L57
ARM GAS  /tmp/ccx1vdif.s 			page 100


 1746 0006 0360     		str	r3, [r0]
 1747 0008 FFF7FEFF 		bl	_ZNSt9exceptionD2Ev
 1748              	.LVL164:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 1749              		.loc 2 1264 9 view .LVU468
 1750              	.LBE1341:
 1751 000c 2046     		mov	r0, r4
 1752 000e 10BD     		pop	{r4, pc}
 1753              	.LVL165:
 1754              	.L58:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 1755              		.loc 2 1264 9 view .LVU469
 1756              		.align	2
 1757              	.L57:
 1758 0010 08000000 		.word	_ZTVSt18bad_variant_access+8
 1759              		.cfi_endproc
 1760              	.LFE4967:
 1761              		.cantunwind
 1762              		.fnend
 1764              		.weak	_ZNSt18bad_variant_accessD1Ev
 1765              		.thumb_set _ZNSt18bad_variant_accessD1Ev,_ZNSt18bad_variant_accessD2Ev
 1766              		.section	.text._ZNSt19bad_optional_accessD0Ev,"axG",%progbits,_ZNSt19bad_optional_accessD5Ev,comda
 1767              		.align	1
 1768              		.weak	_ZNSt19bad_optional_accessD0Ev
 1769              		.syntax unified
 1770              		.thumb
 1771              		.thumb_func
 1773              	_ZNSt19bad_optional_accessD0Ev:
 1774              		.fnstart
 1775              	.LVL166:
 1776              	.LFB4973:
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1777              		.loc 1 88 13 is_stmt 1 view -0
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 0
 1780              		@ frame_needed = 0, uses_anonymous_args = 0
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1781              		.loc 1 88 13 is_stmt 0 view .LVU471
 1782 0000 10B5     		push	{r4, lr}
 1783              	.LCFI23:
 1784              		.cfi_def_cfa_offset 8
 1785              		.cfi_offset 4, -8
 1786              		.cfi_offset 14, -4
 1787 0002 0446     		mov	r4, r0
 1788              	.LVL167:
 1789              	.LBB1342:
 1790              	.LBI1342:
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1791              		.loc 1 88 13 is_stmt 1 view .LVU472
 1792              	.LBB1343:
 1793 0004 044B     		ldr	r3, .L61
 1794 0006 0360     		str	r3, [r0]
 1795 0008 FFF7FEFF 		bl	_ZNSt9exceptionD2Ev
 1796              	.LVL168:
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1797              		.loc 1 88 13 is_stmt 0 view .LVU473
 1798              	.LBE1343:
ARM GAS  /tmp/ccx1vdif.s 			page 101


 1799              	.LBE1342:
 1800 000c 0421     		movs	r1, #4
 1801 000e 2046     		mov	r0, r4
 1802 0010 FFF7FEFF 		bl	_ZdlPvj
 1803              	.LVL169:
 1804 0014 2046     		mov	r0, r4
 1805 0016 10BD     		pop	{r4, pc}
 1806              	.LVL170:
 1807              	.L62:
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1808              		.loc 1 88 13 view .LVU474
 1809              		.align	2
 1810              	.L61:
 1811 0018 08000000 		.word	_ZTVSt19bad_optional_access+8
 1812              		.cfi_endproc
 1813              	.LFE4973:
 1814              		.cantunwind
 1815              		.fnend
 1817              		.section	.text._ZNSt18bad_variant_accessD0Ev,"axG",%progbits,_ZNSt18bad_variant_accessD5Ev,comdat
 1818              		.align	1
 1819              		.weak	_ZNSt18bad_variant_accessD0Ev
 1820              		.syntax unified
 1821              		.thumb
 1822              		.thumb_func
 1824              	_ZNSt18bad_variant_accessD0Ev:
 1825              		.fnstart
 1826              	.LVL171:
 1827              	.LFB4969:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 1828              		.loc 2 1264 9 is_stmt 1 view -0
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 0
 1831              		@ frame_needed = 0, uses_anonymous_args = 0
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 1832              		.loc 2 1264 9 is_stmt 0 view .LVU476
 1833 0000 10B5     		push	{r4, lr}
 1834              	.LCFI24:
 1835              		.cfi_def_cfa_offset 8
 1836              		.cfi_offset 4, -8
 1837              		.cfi_offset 14, -4
 1838 0002 0446     		mov	r4, r0
 1839              	.LVL172:
 1840              	.LBB1344:
 1841              	.LBI1344:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 1842              		.loc 2 1264 9 is_stmt 1 view .LVU477
 1843              	.LBB1345:
 1844 0004 044B     		ldr	r3, .L65
 1845 0006 0360     		str	r3, [r0]
 1846 0008 FFF7FEFF 		bl	_ZNSt9exceptionD2Ev
 1847              	.LVL173:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 1848              		.loc 2 1264 9 is_stmt 0 view .LVU478
 1849              	.LBE1345:
 1850              	.LBE1344:
 1851 000c 0821     		movs	r1, #8
 1852 000e 2046     		mov	r0, r4
ARM GAS  /tmp/ccx1vdif.s 			page 102


 1853 0010 FFF7FEFF 		bl	_ZdlPvj
 1854              	.LVL174:
 1855 0014 2046     		mov	r0, r4
 1856 0016 10BD     		pop	{r4, pc}
 1857              	.LVL175:
 1858              	.L66:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 1859              		.loc 2 1264 9 view .LVU479
 1860              		.align	2
 1861              	.L65:
 1862 0018 08000000 		.word	_ZTVSt18bad_variant_access+8
 1863              		.cfi_endproc
 1864              	.LFE4969:
 1865              		.cantunwind
 1866              		.fnend
 1868              		.section	.text._ZSt26__throw_bad_variant_accessPKc,"axG",%progbits,_ZSt26__throw_bad_variant_acces
 1869              		.align	1
 1870              		.weak	_ZSt26__throw_bad_variant_accessPKc
 1871              		.syntax unified
 1872              		.thumb
 1873              		.thumb_func
 1875              	_ZSt26__throw_bad_variant_accessPKc:
 1876              		.fnstart
 1877              	.LVL176:
 1878              	.LFB2863:
1271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   private:
1273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     bad_variant_access(const char* __reason) noexcept : _M_reason(__reason) { }
1274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     // Must point to a string with static storage duration:
1276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     const char* _M_reason = "bad variant access";
1277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     friend void __throw_bad_variant_access(const char* __what);
1279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   };
1280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Must only be called with a string literal
1282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   inline void
1283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   __throw_bad_variant_access(const char* __what)
1284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 1879              		.loc 2 1284 3 is_stmt 1 view -0
 1880              		.cfi_startproc
 1881              		@ args = 0, pretend = 0, frame = 0
 1882              		@ frame_needed = 0, uses_anonymous_args = 0
 1883              		.loc 2 1284 3 is_stmt 0 view .LVU481
 1884 0000 10B5     		push	{r4, lr}
 1885              		.save {r4, lr}
 1886              	.LCFI25:
 1887              		.cfi_def_cfa_offset 8
 1888              		.cfi_offset 4, -8
 1889              		.cfi_offset 14, -4
 1890 0002 0446     		mov	r4, r0
 1891              		.loc 2 1284 5 is_stmt 1 view .LVU482
 1892 0004 0820     		movs	r0, #8
 1893              	.LVL177:
 1894              		.loc 2 1284 5 is_stmt 0 view .LVU483
 1895 0006 FFF7FEFF 		bl	__cxa_allocate_exception
 1896              	.LVL178:
ARM GAS  /tmp/ccx1vdif.s 			page 103


 1897              	.LBB1346:
 1898              	.LBI1346:
1273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 1899              		.loc 2 1273 5 is_stmt 1 view .LVU484
 1900              	.LBB1347:
 1901              	.LBB1348:
 1902              	.LBI1348:
 1903              		.loc 10 63 5 view .LVU485
 1904              	.LBB1349:
 1905              		.loc 10 63 34 is_stmt 0 view .LVU486
 1906 000a 044A     		ldr	r2, .L69
 1907 000c 0260     		str	r2, [r0]
 1908              	.LVL179:
 1909              		.loc 10 63 34 view .LVU487
 1910              	.LBE1349:
 1911              	.LBE1348:
1273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 1912              		.loc 2 1273 75 view .LVU488
 1913 000e 044A     		ldr	r2, .L69+4
 1914 0010 0260     		str	r2, [r0]
 1915 0012 4460     		str	r4, [r0, #4]
 1916              	.LVL180:
1273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 1917              		.loc 2 1273 75 view .LVU489
 1918              	.LBE1347:
 1919              	.LBE1346:
 1920              		.loc 2 1284 5 view .LVU490
 1921 0014 034A     		ldr	r2, .L69+8
 1922 0016 0449     		ldr	r1, .L69+12
 1923 0018 FFF7FEFF 		bl	__cxa_throw
 1924              	.LVL181:
 1925              	.L70:
 1926              		.align	2
 1927              	.L69:
 1928 001c 08000000 		.word	_ZTVSt9exception+8
 1929 0020 08000000 		.word	_ZTVSt18bad_variant_access+8
 1930 0024 00000000 		.word	_ZNSt18bad_variant_accessD1Ev
 1931 0028 00000000 		.word	_ZTISt18bad_variant_access
 1932              		.cfi_endproc
 1933              	.LFE2863:
 1934              		.fnend
 1936              		.section	.rodata._ZSt26__throw_bad_variant_accessb.str1.4,"aMS",%progbits,1
 1937              		.align	2
 1938              	.LC1:
 1939 0000 7374643A 		.ascii	"std::get: variant is valueless\000"
 1939      3A676574 
 1939      3A207661 
 1939      7269616E 
 1939      74206973 
 1940 001f 00       		.align	2
 1941              	.LC2:
 1942 0020 7374643A 		.ascii	"std::get: wrong index for variant\000"
 1942      3A676574 
 1942      3A207772 
 1942      6F6E6720 
 1942      696E6465 
 1943              		.section	.text._ZSt26__throw_bad_variant_accessb,"axG",%progbits,_ZSt26__throw_bad_variant_accessb
ARM GAS  /tmp/ccx1vdif.s 			page 104


 1944              		.align	1
 1945              		.weak	_ZSt26__throw_bad_variant_accessb
 1946              		.syntax unified
 1947              		.thumb
 1948              		.thumb_func
 1950              	_ZSt26__throw_bad_variant_accessb:
 1951              		.fnstart
 1952              	.LVL182:
 1953              	.LFB2864:
1285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   inline void
1287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   __throw_bad_variant_access(bool __valueless)
1288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 1954              		.loc 2 1288 3 is_stmt 1 view -0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 0
 1957              		@ frame_needed = 0, uses_anonymous_args = 0
 1958              		.loc 2 1288 3 is_stmt 0 view .LVU492
 1959 0000 08B5     		push	{r3, lr}
 1960              		.save {r3, lr}
 1961              	.LCFI26:
 1962              		.cfi_def_cfa_offset 8
 1963              		.cfi_offset 3, -8
 1964              		.cfi_offset 14, -4
1289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     if (__valueless) [[__unlikely__]]
 1965              		.loc 2 1289 5 is_stmt 1 view .LVU493
 1966 0002 10B1     		cbz	r0, .L72
1290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
 1967              		.loc 2 1290 7 view .LVU494
 1968              		.loc 2 1290 33 is_stmt 0 view .LVU495
 1969 0004 0248     		ldr	r0, .L74
 1970              	.LVL183:
 1971              		.loc 2 1290 33 view .LVU496
 1972 0006 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
 1973              	.LVL184:
 1974              	.L72:
1291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     else
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __throw_bad_variant_access("std::get: wrong index for variant");
 1975              		.loc 2 1292 7 is_stmt 1 view .LVU497
 1976              		.loc 2 1292 33 is_stmt 0 view .LVU498
 1977 000a 0248     		ldr	r0, .L74+4
 1978              	.LVL185:
 1979              		.loc 2 1292 33 view .LVU499
 1980 000c FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
 1981              	.LVL186:
 1982              	.L75:
 1983              		.align	2
 1984              	.L74:
 1985 0010 00000000 		.word	.LC1
 1986 0014 20000000 		.word	.LC2
 1987              		.cfi_endproc
 1988              	.LFE2864:
 1989              		.fnend
 1991              		.section	.text._ZN9InputPortISt4pairIffEE7presentEv,"axG",%progbits,_ZN9InputPortISt4pairIffEE7pre
 1992              		.align	1
 1993              		.weak	_ZN9InputPortISt4pairIffEE7presentEv
 1994              		.syntax unified
ARM GAS  /tmp/ccx1vdif.s 			page 105


 1995              		.thumb
 1996              		.thumb_func
 1998              	_ZN9InputPortISt4pairIffEE7presentEv:
 1999              		.fnstart
 2000              	.LVL187:
 2001              	.LFB4528:
 2002              		.file 11 "MotorControl/component.hpp"
   1:MotorControl/component.hpp **** #ifndef __COMPONENT_HPP
   2:MotorControl/component.hpp **** #define __COMPONENT_HPP
   3:MotorControl/component.hpp **** 
   4:MotorControl/component.hpp **** #include <stdint.h>
   5:MotorControl/component.hpp **** #include <optional>
   6:MotorControl/component.hpp **** #include <variant>
   7:MotorControl/component.hpp **** 
   8:MotorControl/component.hpp **** class ComponentBase {
   9:MotorControl/component.hpp **** public:
  10:MotorControl/component.hpp ****     /**
  11:MotorControl/component.hpp ****      * @brief Shall run the update action of this component.
  12:MotorControl/component.hpp ****      * 
  13:MotorControl/component.hpp ****      * This function gets called in a low priority interrupt context and is
  14:MotorControl/component.hpp ****      * allowed to call CMSIS functions.
  15:MotorControl/component.hpp ****      * 
  16:MotorControl/component.hpp ****      * @param timestamp: The timestamp (in HCLK ticks) for which this update
  17:MotorControl/component.hpp ****      * is run.
  18:MotorControl/component.hpp ****      */
  19:MotorControl/component.hpp ****     virtual void update(uint32_t timestamp) = 0;
  20:MotorControl/component.hpp **** };
  21:MotorControl/component.hpp **** 
  22:MotorControl/component.hpp **** 
  23:MotorControl/component.hpp **** template<typename T>
  24:MotorControl/component.hpp **** class InputPort;
  25:MotorControl/component.hpp **** 
  26:MotorControl/component.hpp **** /**
  27:MotorControl/component.hpp ****  * @brief An output port stores a value for consumption by a connecting input
  28:MotorControl/component.hpp ****  * port.
  29:MotorControl/component.hpp ****  * 
  30:MotorControl/component.hpp ****  * Output ports are supposed to be reset at the beginning of a control loop
  31:MotorControl/component.hpp ****  * iteration. This ensures that connecting input ports don't use an outdated
  32:MotorControl/component.hpp ****  * value and, more importantly, ensures proper handling if the producer of the
  33:MotorControl/component.hpp ****  * value is incapable of producing the value for any reason.
  34:MotorControl/component.hpp ****  * 
  35:MotorControl/component.hpp ****  * Member functions of this class are not thread-safe unless noted otherwise.
  36:MotorControl/component.hpp ****  */
  37:MotorControl/component.hpp **** template<typename T>
  38:MotorControl/component.hpp **** class OutputPort {
  39:MotorControl/component.hpp **** public:
  40:MotorControl/component.hpp ****     /**
  41:MotorControl/component.hpp ****      * @brief Initializes the output port with the specified value.
  42:MotorControl/component.hpp ****      * 
  43:MotorControl/component.hpp ****      * An initialization value is required for any() to work properly.
  44:MotorControl/component.hpp ****      * present() and previous() cannot be used to fetch the
  45:MotorControl/component.hpp ****      * initialization value.
  46:MotorControl/component.hpp ****      */
  47:MotorControl/component.hpp ****     OutputPort(T val) : content_(val) {}
  48:MotorControl/component.hpp ****     
  49:MotorControl/component.hpp ****     /**
  50:MotorControl/component.hpp ****      * @brief Updates the underlying value of this output port.
ARM GAS  /tmp/ccx1vdif.s 			page 106


  51:MotorControl/component.hpp ****      */
  52:MotorControl/component.hpp ****     void operator=(T value) {
  53:MotorControl/component.hpp ****         content_ = value;
  54:MotorControl/component.hpp ****         age_ = 0;
  55:MotorControl/component.hpp ****     }
  56:MotorControl/component.hpp **** 
  57:MotorControl/component.hpp ****     /**
  58:MotorControl/component.hpp ****      * @brief Marks the contained value as outdated. The value is not actually
  59:MotorControl/component.hpp ****      * deleted and can still be accessed through some of the member functions
  60:MotorControl/component.hpp ****      * of this class.
  61:MotorControl/component.hpp ****      */
  62:MotorControl/component.hpp ****     void reset() {
  63:MotorControl/component.hpp ****         // This will eventually overflow to 0 so present() could
  64:MotorControl/component.hpp ****         // theoretically return a very old value however it is very likely that
  65:MotorControl/component.hpp ****         // the motor will be long disarmed by then.
  66:MotorControl/component.hpp ****         age_++;
  67:MotorControl/component.hpp ****     }
  68:MotorControl/component.hpp **** 
  69:MotorControl/component.hpp ****     /**
  70:MotorControl/component.hpp ****      * @brief Returns the value from this control loop iteration or std::nullopt
  71:MotorControl/component.hpp ****      * if the value was not yet set during this control loop iteration.
  72:MotorControl/component.hpp ****      */
  73:MotorControl/component.hpp ****     std::optional<T> present() {
  74:MotorControl/component.hpp ****         if (age_ == 0) {
  75:MotorControl/component.hpp ****             return content_;
  76:MotorControl/component.hpp ****         } else {
  77:MotorControl/component.hpp ****             return std::nullopt;
  78:MotorControl/component.hpp ****         }
  79:MotorControl/component.hpp ****     }
  80:MotorControl/component.hpp **** 
  81:MotorControl/component.hpp ****     /**
  82:MotorControl/component.hpp ****      * @brief Returns the value from exactly the previous control loop iteration.
  83:MotorControl/component.hpp ****      * 
  84:MotorControl/component.hpp ****      * If during the last iteration no value was set or the value was already
  85:MotorControl/component.hpp ****      * overwritten during this control loop iteration then this function returns
  86:MotorControl/component.hpp ****      * std::nullopt.
  87:MotorControl/component.hpp ****      */
  88:MotorControl/component.hpp ****     std::optional<T> previous() {
  89:MotorControl/component.hpp ****         if (age_ == 1) {
  90:MotorControl/component.hpp ****             return content_;
  91:MotorControl/component.hpp ****         } else {
  92:MotorControl/component.hpp ****             return std::nullopt;
  93:MotorControl/component.hpp ****         }
  94:MotorControl/component.hpp ****     }
  95:MotorControl/component.hpp **** 
  96:MotorControl/component.hpp ****     /**
  97:MotorControl/component.hpp ****      * @brief Returns the value contained in this output port with disregard of
  98:MotorControl/component.hpp ****      * when the value was set.
  99:MotorControl/component.hpp ****      * 
 100:MotorControl/component.hpp ****      * This function is thread-safe if load/store operations of T are atomic.
 101:MotorControl/component.hpp ****      */
 102:MotorControl/component.hpp ****     std::optional<T> any() {
 103:MotorControl/component.hpp ****         return content_;
 104:MotorControl/component.hpp ****     }
 105:MotorControl/component.hpp ****     
 106:MotorControl/component.hpp **** private:
 107:MotorControl/component.hpp ****     uint32_t age_ = 2; // Age in number of control loop iterations
ARM GAS  /tmp/ccx1vdif.s 			page 107


 108:MotorControl/component.hpp ****     T content_;
 109:MotorControl/component.hpp **** };
 110:MotorControl/component.hpp **** 
 111:MotorControl/component.hpp **** /**
 112:MotorControl/component.hpp ****  * @brief An input port provides a value from the source to which it's configured.
 113:MotorControl/component.hpp ****  * 
 114:MotorControl/component.hpp ****  * The source can be one of:
 115:MotorControl/component.hpp ****  *  - an internally stored value
 116:MotorControl/component.hpp ****  *  - an externally stored value (referenced by a pointer)
 117:MotorControl/component.hpp ****  *  - an external OutputPort (referenced by a pointer)
 118:MotorControl/component.hpp ****  *  - none (all queries will return std::nullopt)
 119:MotorControl/component.hpp ****  * 
 120:MotorControl/component.hpp ****  * Member functions of this class are not thread-safe unless otherwise noted.
 121:MotorControl/component.hpp ****  */
 122:MotorControl/component.hpp **** template<typename T>
 123:MotorControl/component.hpp **** class InputPort {
 124:MotorControl/component.hpp **** public:
 125:MotorControl/component.hpp ****     void connect_to(OutputPort<T>* input_port) {
 126:MotorControl/component.hpp ****         content_ = input_port;
 127:MotorControl/component.hpp ****     }
 128:MotorControl/component.hpp **** 
 129:MotorControl/component.hpp ****     void connect_to(T* input_ptr) {
 130:MotorControl/component.hpp ****         content_ = input_ptr;
 131:MotorControl/component.hpp ****     }
 132:MotorControl/component.hpp **** 
 133:MotorControl/component.hpp ****     void disconnect() {
 134:MotorControl/component.hpp ****         content_ = (OutputPort<T>*)nullptr;
 135:MotorControl/component.hpp ****     }
 136:MotorControl/component.hpp **** 
 137:MotorControl/component.hpp ****     std::optional<T> present() {
 2003              		.loc 11 137 22 is_stmt 1 view -0
 2004              		.cfi_startproc
 2005              		@ args = 0, pretend = 0, frame = 0
 2006              		@ frame_needed = 0, uses_anonymous_args = 0
 2007              		.loc 11 137 22 is_stmt 0 view .LVU501
 2008 0000 08B5     		push	{r3, lr}
 2009              		.save {r3, lr}
 2010              	.LCFI27:
 2011              		.cfi_def_cfa_offset 8
 2012              		.cfi_offset 3, -8
 2013              		.cfi_offset 14, -4
 2014 0002 0346     		mov	r3, r0
 2015              	.LVL188:
 2016              	.LBB1480:
 2017              	.LBB1481:
 2018              	.LBI1481:
1293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
1294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
1296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     class variant
1297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : private __detail::__variant::_Variant_base<_Types...>,
1298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       private _Enable_default_constructor<
1299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_default_ctor,
1300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  variant<_Types...>>,
1301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       private _Enable_copy_move<
1302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_ctor,
1303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_assign,
ARM GAS  /tmp/ccx1vdif.s 			page 108


1304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_ctor,
1305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_assign,
1306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant<_Types...>>
1307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     private:
1309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename... _UTypes, typename _Tp>
1310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	friend decltype(auto) __variant_cast(_Tp&&);
1311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename _Variant, typename... _Args>
1312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	friend void __variant_construct_by_index(_Variant& __v,
1313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 						 _Args&&... __args);
1314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(sizeof...(_Types) > 0,
1316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "variant must have at least one alternative");
1317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!(std::is_reference_v<_Types> || ...),
1318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "variant must have no reference alternative");
1319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!(std::is_void_v<_Types> || ...),
1320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "variant must have no void alternative");
1321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = __detail::__variant::_Variant_base<_Types...>;
1323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Default_ctor_enabler =
1324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Enable_default_constructor<
1325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __detail::__variant::_Traits<_Types...>::_S_default_ctor,
1326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    variant<_Types...>>;
1327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr bool __not_self
1330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  = !is_same_v<__remove_cvref_t<_Tp>, variant>;
1331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr bool
1334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;
1335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr size_t __accepted_index
1338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  = __detail::__variant::__accepted_index<_Tp, variant>::value;
1339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>
1341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	using __to_type = variant_alternative_t<_Np, variant>;
1342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>
1344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	using __accepted_type = __to_type<__accepted_index<_Tp>>;
1345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr size_t __index_of =
1348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __detail::__variant::__index_of_v<_Tp, _Types...>;
1349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Traits = __detail::__variant::_Traits<_Types...>;
1351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __is_in_place_tag : false_type { };
1354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __is_in_place_tag<in_place_type_t<_Tp>> : true_type { };
1356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np>
1357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __is_in_place_tag<in_place_index_t<_Np>> : true_type { };
1358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr bool __not_in_place_tag
ARM GAS  /tmp/ccx1vdif.s 			page 109


1361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  = !__is_in_place_tag<__remove_cvref_t<_Tp>>::value;
1362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     public:
1364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       variant() = default;
1365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       variant(const variant& __rhs) = default;
1366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       variant(variant&&) = default;
1367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       variant& operator=(const variant&) = default;
1368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       variant& operator=(variant&&) = default;
1369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       ~variant() = default;
1370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp,
1372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<sizeof...(_Types) != 0>,
1373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<__not_in_place_tag<_Tp>>,
1374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename _Tj = __accepted_type<_Tp&&>,
1375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tj>
1376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				      && is_constructible_v<_Tj, _Tp>>>
1377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr
1378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant(_Tp&& __t)
1379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
1380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: variant(in_place_index<__accepted_index<_Tp>>,
1381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  std::forward<_Tp>(__t))
1382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
1383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp, typename... _Args,
1385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				      && is_constructible_v<_Tp, _Args...>>>
1387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr explicit
1388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant(in_place_type_t<_Tp>, _Args&&... __args)
1389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>,
1390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  std::forward<_Args>(__args)...)
1391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
1392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp, typename _Up, typename... _Args,
1394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				      && is_constructible_v<_Tp,
1396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 					   initializer_list<_Up>&, _Args...>>>
1397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr explicit
1398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant(in_place_type_t<_Tp>, initializer_list<_Up> __il,
1399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		_Args&&... __args)
1400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>, __il,
1401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  std::forward<_Args>(__args)...)
1402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
1403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args,
1405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename _Tp = __to_type<_Np>,
1406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>
1407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr explicit
1408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant(in_place_index_t<_Np>, _Args&&... __args)
1409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
1410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
1412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename _Up, typename... _Args,
1414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename _Tp = __to_type<_Np>,
1415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp,
1416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 							 initializer_list<_Up>&,
1417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 							 _Args...>>>
ARM GAS  /tmp/ccx1vdif.s 			page 110


1418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr explicit
1419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant(in_place_index_t<_Np>, initializer_list<_Up> __il,
1420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		_Args&&... __args)
1421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),
1422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
1424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	enable_if_t<__exactly_once<__accepted_type<_Tp&&>>
1427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    && is_constructible_v<__accepted_type<_Tp&&>, _Tp>
1428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,
1429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    variant&>
1430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	operator=(_Tp&& __rhs)
1431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
1432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		 && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)
1433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
1434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  constexpr auto __index = __accepted_index<_Tp>;
1435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if (index() == __index)
1436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
1437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
1438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      using _Tj = __accepted_type<_Tp&&>;
1440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      if constexpr (is_nothrow_constructible_v<_Tj, _Tp>
1441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			    || !is_nothrow_move_constructible_v<_Tj>)
1442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		this->emplace<__index>(std::forward<_Tp>(__rhs));
1443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      else
1444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		operator=(variant(std::forward<_Tp>(__rhs)));
1445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return *this;
1447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp, typename... _Args>
1450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	enable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,
1451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    _Tp&>
1452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	emplace(_Args&&... __args)
1453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
1454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return this->emplace<__index>(std::forward<_Args>(__args)...);
1456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp, typename _Up, typename... _Args>
1459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>
1460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    && __exactly_once<_Tp>,
1461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    _Tp&>
1462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
1464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return this->emplace<__index>(__il, std::forward<_Args>(__args)...);
1466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args>
1469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				       _Args...>,
1471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	emplace(_Args&&... __args)
1473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
1474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
ARM GAS  /tmp/ccx1vdif.s 			page 111


1475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			"The index must be in [0, number of alternatives)");
1476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // to avoid becoming valueless.
1479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type, _Args...>)
1480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
1482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __variant_construct_by_index<_Np>(*this,
1483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  std::forward<_Args>(__args)...);
1484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else if constexpr (is_scalar_v<type>)
1486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // This might invoke a potentially-throwing conversion operator:
1488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      const type __tmp(std::forward<_Args>(__args)...);
1489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // But these steps won't throw:
1490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
1491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __tmp);
1492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      && _Traits::_S_move_assign)
1495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // This construction might throw:
1497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      variant __tmp(in_place_index<_Np>,
1498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			    std::forward<_Args>(__args)...);
1499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      *this = std::move(__tmp);
1501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
1503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // i.e. the variant can become valueless.
1506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
1507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __try
1508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		{
1509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __variant_construct_by_index<_Np>(*this,
1510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    std::forward<_Args>(__args)...);
1511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		}
1512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __catch (...)
1513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		{
1514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  this->_M_index = variant_npos;
1515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __throw_exception_again;
1516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		}
1517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return std::get<_Np>(*this);
1519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename _Up, typename... _Args>
1522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				       initializer_list<_Up>&, _Args...>,
1524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
1527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			"The index must be in [0, number of alternatives)");
1529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // to avoid becoming valueless.
ARM GAS  /tmp/ccx1vdif.s 			page 112


1532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type,
1533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 						   initializer_list<_Up>&,
1534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 						   _Args...>)
1535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
1537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __il,
1538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  std::forward<_Args>(__args)...);
1539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      && _Traits::_S_move_assign)
1542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // This construction might throw:
1544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      variant __tmp(in_place_index<_Np>, __il,
1545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			    std::forward<_Args>(__args)...);
1546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      *this = std::move(__tmp);
1548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
1550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // i.e. the variant can become valueless.
1553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
1554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __try
1555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		{
1556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __variant_construct_by_index<_Np>(*this, __il,
1557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    std::forward<_Args>(__args)...);
1558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		}
1559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __catch (...)
1560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		{
1561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  this->_M_index = variant_npos;
1562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __throw_exception_again;
1563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		}
1564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return std::get<_Np>(*this);
1566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr bool valueless_by_exception() const noexcept
1569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return !this->_M_valid(); }
1570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr size_t index() const noexcept
 2019              		.loc 2 1571 24 is_stmt 1 view .LVU502
 2020              	.LBB1482:
1572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
1573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	using __index_type = typename _Base::__index_type;
1574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	if constexpr (__detail::__variant::__never_valueless<_Types...>())
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return this->_M_index;
1576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
1577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return make_signed_t<__index_type>(this->_M_index);
 2021              		.loc 2 1577 45 is_stmt 0 view .LVU503
 2022 0004 0A7A     		ldrb	r2, [r1, #8]	@ zero_extendqisi2
 2023              	.LVL189:
 2024              		.loc 2 1577 45 view .LVU504
 2025              	.LBE1482:
 2026              	.LBE1481:
 138:MotorControl/component.hpp ****         if (content_.index() == 2) {
 2027              		.loc 11 138 9 view .LVU505
 2028 0006 022A     		cmp	r2, #2
ARM GAS  /tmp/ccx1vdif.s 			page 113


 2029 0008 0CD0     		beq	.L87
 2030              	.LBB1483:
 139:MotorControl/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 140:MotorControl/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 141:MotorControl/component.hpp ****         } else if (content_.index() == 1) {
 2031              		.loc 11 141 16 view .LVU506
 2032 000a 012A     		cmp	r2, #1
 2033 000c 24D0     		beq	.L88
 2034              	.LVL190:
 2035              	.LBB1484:
 2036              	.LBI1484:
1578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else
1579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return size_t(__index_type(this->_M_index + 1)) - 1;
1580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
1581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void
1583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       swap(variant& __rhs)
1584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       noexcept((__is_nothrow_swappable<_Types>::value && ...)
1585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       && is_nothrow_move_constructible_v<variant>)
1586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
1587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::__raw_idx_visit(
1588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
1589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  {
1590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
1591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      {
1592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		if (this->index() == __rhs_index)
1593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  {
1594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    auto& __this_mem =
1595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      std::get<__rhs_index>(*this);
1596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    using std::swap;
1597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    swap(__this_mem, __rhs_mem);
1598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  }
1599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		else
1600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  {
1601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    if (!this->valueless_by_exception()) [[__likely__]]
1602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      {
1603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			auto __tmp(std::move(__rhs_mem));
1604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			__rhs = std::move(*this);
1605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			this->_M_destructive_move(__rhs_index,
1606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 						  std::move(__tmp));
1607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      }
1608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    else
1609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      {
1610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			this->_M_destructive_move(__rhs_index,
1611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 						  std::move(__rhs_mem));
1612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			__rhs._M_reset();
1613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      }
1614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  }
1615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      }
1616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    else
1617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      {
1618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		if (!this->valueless_by_exception()) [[__likely__]]
1619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  {
1620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    __rhs = std::move(*this);
1621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    this->_M_reset();
1622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  }
1623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      }
ARM GAS  /tmp/ccx1vdif.s 			page 114


1624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  }, __rhs);
1625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
1626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     private:
1628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #if defined(__clang__) && __clang_major__ <= 7
1630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     public:
1631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_M_u; // See https://bugs.llvm.org/show_bug.cgi?id=31852
1632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     private:
1633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #endif
1634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename _Vp>
1636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	friend constexpr decltype(auto)
1637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::__get(_Vp&& __v) noexcept;
1638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Vp>
1640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	friend void*
1641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::__get_storage(_Vp&& __v) noexcept;
1642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP) \
1644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename... _Tp> \
1645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	friend constexpr bool \
1646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	operator __OP(const variant<_Tp...>& __lhs, \
1647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      const variant<_Tp...>& __rhs);
1648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<)
1650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<=)
1651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(==)
1652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(!=)
1653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>=)
1654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>)
1655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
1658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
1660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
1661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get(variant<_Types...>& __v)
 2037              		.loc 2 1661 5 is_stmt 1 view .LVU507
 2038              	.LBB1485:
 2039              	.LBB1486:
 2040              	.LBI1486:
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 2041              		.loc 2 1571 24 view .LVU508
 2042              	.LBB1487:
1577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else
 2043              		.loc 2 1577 45 is_stmt 0 view .LVU509
 2044 000e 087A     		ldrb	r0, [r1, #8]	@ zero_extendqisi2
 2045              	.LVL191:
1577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else
 2046              		.loc 2 1577 45 view .LVU510
 2047              	.LBE1487:
 2048              	.LBE1486:
1662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(_Np < sizeof...(_Types),
1664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "The index must be in [0, number of alternatives)");
1665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       if (__v.index() != _Np)
ARM GAS  /tmp/ccx1vdif.s 			page 115


 2049              		.loc 2 1665 7 view .LVU511
 2050 0010 0028     		cmp	r0, #0
 2051 0012 36D1     		bne	.L89
 2052              	.LVL192:
 2053              	.LBB1488:
 2054              	.LBI1488:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2055              		.loc 2 276 5 is_stmt 1 view .LVU512
 2056              	.LBB1489:
 2057              	.LBB1490:
 2058              	.LBI1490:
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 2059              		.loc 2 262 5 view .LVU513
 2060              	.LBB1491:
 2061              	.LBI1491:
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 2062              		.loc 2 222 24 view .LVU514
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 2063              		.loc 2 222 24 is_stmt 0 view .LVU515
 2064              	.LBE1491:
 2065              	.LBE1490:
 2066              	.LBE1489:
 2067              	.LBE1488:
 2068              	.LBE1485:
 2069              	.LBE1484:
 2070              	.LBB1494:
 2071              	.LBI1494:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 2072              		.loc 1 700 2 is_stmt 1 view .LVU516
 2073              	.LBB1495:
 2074              	.LBB1496:
 2075              	.LBB1497:
 2076              	.LBI1497:
 2077              		.loc 5 76 5 view .LVU517
 2078              		.loc 5 76 5 is_stmt 0 view .LVU518
 2079              	.LBE1497:
 2080              	.LBB1498:
 2081              	.LBI1498:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 2082              		.loc 1 607 28 is_stmt 1 view .LVU519
 2083              	.LBB1499:
 2084              	.LBB1500:
 2085              	.LBB1501:
 2086              	.LBI1501:
 2087              		.loc 5 76 5 view .LVU520
 2088              		.loc 5 76 5 is_stmt 0 view .LVU521
 2089              	.LBE1501:
 2090              	.LBB1502:
 2091              	.LBI1502:
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2092              		.loc 1 358 42 is_stmt 1 view .LVU522
 2093              	.LBB1503:
 2094              	.LBB1504:
 2095              	.LBB1505:
 2096              	.LBI1505:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2097              		.loc 1 115 2 view .LVU523
ARM GAS  /tmp/ccx1vdif.s 			page 116


 2098              	.LBB1506:
 2099              	.LBB1507:
 2100              	.LBB1508:
 2101              	.LBI1508:
 2102              		.loc 5 76 5 view .LVU524
 2103              		.loc 5 76 5 is_stmt 0 view .LVU525
 2104              	.LBE1508:
 2105              	.LBB1509:
 2106              	.LBI1509:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2107              		.loc 1 203 6 is_stmt 1 view .LVU526
 2108              	.LBB1510:
 2109              	.LBB1511:
 2110              	.LBB1512:
 2111              	.LBI1512:
 2112              		.loc 5 76 5 view .LVU527
 2113              	.LBE1512:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2114              		.loc 1 204 47 is_stmt 0 view .LVU528
 2115 0014 D1E90001 		ldrd	r0, r1, [r1]
 2116              	.LVL193:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2117              		.loc 1 204 47 view .LVU529
 2118 0018 83E80300 		stm	r3, {r0, r1}
 2119              	.LVL194:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2120              		.loc 1 204 47 view .LVU530
 2121              	.LBE1511:
 2122              	.LBE1510:
 2123              	.LBE1509:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2124              		.loc 1 117 19 view .LVU531
 2125 001c 0122     		movs	r2, #1
 2126 001e 1A72     		strb	r2, [r3, #8]
 2127              	.LVL195:
 2128              	.L76:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2129              		.loc 1 117 19 view .LVU532
 2130              	.LBE1507:
 2131              	.LBE1506:
 2132              	.LBE1505:
 2133              	.LBE1504:
 2134              	.LBE1503:
 2135              	.LBE1502:
 2136              	.LBE1500:
 2137              	.LBE1499:
 2138              	.LBE1498:
 2139              	.LBE1496:
 2140              	.LBE1495:
 2141              	.LBE1494:
 2142              	.LBE1483:
 2143              	.LBE1480:
 142:MotorControl/component.hpp ****             T* ptr = std::get<1>(content_);
 143:MotorControl/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 144:MotorControl/component.hpp ****         } else {
 145:MotorControl/component.hpp ****             return std::get<0>(content_);
 146:MotorControl/component.hpp ****         }
ARM GAS  /tmp/ccx1vdif.s 			page 117


 147:MotorControl/component.hpp ****     }
 2144              		.loc 11 147 5 view .LVU533
 2145 0020 1846     		mov	r0, r3
 2146 0022 08BD     		pop	{r3, pc}
 2147              	.LVL196:
 2148              	.L87:
 2149              	.LBB1610:
 2150              	.LBB1556:
 2151              	.LBB1557:
 2152              	.LBI1557:
1661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2153              		.loc 2 1661 5 is_stmt 1 view .LVU534
 2154              	.LBB1558:
 2155              	.LBB1559:
 2156              	.LBI1559:
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 2157              		.loc 2 1571 24 view .LVU535
 2158              	.LBB1560:
1577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else
 2159              		.loc 2 1577 45 is_stmt 0 view .LVU536
 2160 0024 1046     		mov	r0, r2
 2161              	.LVL197:
1577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else
 2162              		.loc 2 1577 45 view .LVU537
 2163              	.LBE1560:
 2164              	.LBE1559:
 2165              		.loc 2 1665 7 view .LVU538
 2166 0026 06D1     		bne	.L90
 2167              	.LVL198:
 2168              	.LBB1561:
 2169              	.LBI1561:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2170              		.loc 2 276 5 is_stmt 1 view .LVU539
 2171              	.LBB1562:
 2172              	.LBB1563:
 2173              	.LBI1563:
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2174              		.loc 2 267 5 view .LVU540
 2175              	.LBB1564:
 2176              	.LBB1565:
 2177              	.LBI1565:
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2178              		.loc 2 267 5 view .LVU541
 2179              	.LBB1566:
 2180              	.LBB1567:
 2181              	.LBI1567:
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 2182              		.loc 2 262 5 view .LVU542
 2183              	.LBB1568:
 2184              	.LBI1568:
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 2185              		.loc 2 222 24 view .LVU543
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 2186              		.loc 2 222 24 is_stmt 0 view .LVU544
 2187              	.LBE1568:
 2188              	.LBE1567:
 2189              	.LBE1566:
ARM GAS  /tmp/ccx1vdif.s 			page 118


 2190              	.LBE1565:
 2191              	.LBE1564:
 2192              	.LBE1563:
 2193              	.LBE1562:
 2194              	.LBE1561:
 2195              	.LBE1558:
 2196              	.LBE1557:
 139:MotorControl/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 2197              		.loc 11 139 28 view .LVU545
 2198 0028 0A68     		ldr	r2, [r1]
 2199              	.LVL199:
 140:MotorControl/component.hpp ****         } else if (content_.index() == 1) {
 2200              		.loc 11 140 48 view .LVU546
 2201 002a 92B1     		cbz	r2, .L79
 2202              	.LVL200:
 2203              	.LBB1571:
 2204              	.LBI1571:
  73:MotorControl/component.hpp ****         if (age_ == 0) {
 2205              		.loc 11 73 22 is_stmt 1 view .LVU547
 2206              	.LBB1572:
  74:MotorControl/component.hpp ****             return content_;
 2207              		.loc 11 74 13 is_stmt 0 view .LVU548
 2208 002c 1168     		ldr	r1, [r2]
 2209              	.LVL201:
  74:MotorControl/component.hpp ****             return content_;
 2210              		.loc 11 74 9 view .LVU549
 2211 002e 41B1     		cbz	r1, .L91
 2212              	.LVL202:
 2213              	.LBB1573:
 2214              	.LBI1573:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2215              		.loc 1 692 17 is_stmt 1 view .LVU550
 2216              	.LBB1574:
 2217              	.LBB1575:
 2218              	.LBI1575:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2219              		.loc 1 602 17 view .LVU551
 2220              	.LBB1576:
 2221              	.LBI1576:
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 2222              		.loc 1 360 7 view .LVU552
 2223              	.LBB1577:
 2224              	.LBI1577:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2225              		.loc 1 110 7 view .LVU553
 2226              	.LBB1578:
 2227              	.LBB1579:
 2228              	.LBI1579:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2229              		.loc 1 199 14 view .LVU554
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2230              		.loc 1 199 14 is_stmt 0 view .LVU555
 2231              	.LBE1579:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2232              		.loc 1 110 7 view .LVU556
 2233 0030 0022     		movs	r2, #0
 2234              	.LVL203:
ARM GAS  /tmp/ccx1vdif.s 			page 119


 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2235              		.loc 1 110 7 view .LVU557
 2236 0032 1A72     		strb	r2, [r3, #8]
 2237              	.LVL204:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2238              		.loc 1 110 7 view .LVU558
 2239              	.LBE1578:
 2240              	.LBE1577:
 2241              	.LBE1576:
 2242              	.LBE1575:
 2243              	.LBE1574:
 2244              	.LBE1573:
  77:MotorControl/component.hpp ****         }
 2245              		.loc 11 77 25 view .LVU559
 2246 0034 F4E7     		b	.L76
 2247              	.LVL205:
 2248              	.L90:
  77:MotorControl/component.hpp ****         }
 2249              		.loc 11 77 25 view .LVU560
 2250              	.LBE1572:
 2251              	.LBE1571:
 2252              	.LBB1600:
 2253              	.LBB1570:
 2254              	.LBB1569:
 2255              	.LBI1569:
1568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return !this->_M_valid(); }
 2256              		.loc 2 1568 22 is_stmt 1 view .LVU561
1568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return !this->_M_valid(); }
 2257              		.loc 2 1568 22 is_stmt 0 view .LVU562
 2258              	.LBE1569:
1666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 2259              		.loc 2 1666 28 view .LVU563
 2260 0036 FF2A     		cmp	r2, #255
 2261 0038 14BF     		ite	ne
 2262 003a 0020     		movne	r0, #0
 2263 003c 0120     		moveq	r0, #1
 2264 003e FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 2265              	.LVL206:
 2266              	.L91:
 2267              		.loc 2 1666 28 view .LVU564
 2268              	.LBE1570:
 2269              	.LBE1600:
 2270              	.LBB1601:
 2271              	.LBB1599:
  75:MotorControl/component.hpp ****         } else {
 2272              		.loc 11 75 20 view .LVU565
 2273 0042 0432     		adds	r2, r2, #4
 2274              	.LVL207:
 2275              	.LBB1580:
 2276              	.LBI1580:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 2277              		.loc 1 700 2 is_stmt 1 view .LVU566
 2278              	.LBB1581:
 2279              	.LBB1582:
 2280              	.LBB1583:
 2281              	.LBI1583:
 2282              		.loc 5 76 5 view .LVU567
ARM GAS  /tmp/ccx1vdif.s 			page 120


 2283              		.loc 5 76 5 is_stmt 0 view .LVU568
 2284              	.LBE1583:
 2285              	.LBB1584:
 2286              	.LBI1584:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 2287              		.loc 1 607 28 is_stmt 1 view .LVU569
 2288              	.LBB1585:
 2289              	.LBB1586:
 2290              	.LBB1587:
 2291              	.LBI1587:
 2292              		.loc 5 76 5 view .LVU570
 2293              		.loc 5 76 5 is_stmt 0 view .LVU571
 2294              	.LBE1587:
 2295              	.LBB1588:
 2296              	.LBI1588:
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2297              		.loc 1 358 42 is_stmt 1 view .LVU572
 2298              	.LBB1589:
 2299              	.LBB1590:
 2300              	.LBB1591:
 2301              	.LBI1591:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2302              		.loc 1 115 2 view .LVU573
 2303              	.LBB1592:
 2304              	.LBB1593:
 2305              	.LBB1594:
 2306              	.LBI1594:
 2307              		.loc 5 76 5 view .LVU574
 2308              		.loc 5 76 5 is_stmt 0 view .LVU575
 2309              	.LBE1594:
 2310              	.LBB1595:
 2311              	.LBI1595:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2312              		.loc 1 203 6 is_stmt 1 view .LVU576
 2313              	.LBB1596:
 2314              	.LBB1597:
 2315              	.LBB1598:
 2316              	.LBI1598:
 2317              		.loc 5 76 5 view .LVU577
 2318              		.loc 5 76 5 is_stmt 0 view .LVU578
 2319              	.LBE1598:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2320              		.loc 1 204 47 view .LVU579
 2321 0044 92E80300 		ldm	r2, {r0, r1}
 2322 0048 83E80300 		stm	r3, {r0, r1}
 2323              	.LVL208:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2324              		.loc 1 204 47 view .LVU580
 2325              	.LBE1597:
 2326              	.LBE1596:
 2327              	.LBE1595:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2328              		.loc 1 117 19 view .LVU581
 2329 004c 0122     		movs	r2, #1
 2330              	.LVL209:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2331              		.loc 1 117 19 view .LVU582
ARM GAS  /tmp/ccx1vdif.s 			page 121


 2332 004e 1A72     		strb	r2, [r3, #8]
 2333              	.LVL210:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2334              		.loc 1 117 19 view .LVU583
 2335              	.LBE1593:
 2336              	.LBE1592:
 2337              	.LBE1591:
 2338              	.LBE1590:
 2339              	.LBE1589:
 2340              	.LBE1588:
 2341              	.LBE1586:
 2342              	.LBE1585:
 2343              	.LBE1584:
 2344              	.LBE1582:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2345              		.loc 1 701 51 view .LVU584
 2346 0050 E6E7     		b	.L76
 2347              	.LVL211:
 2348              	.L79:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2349              		.loc 1 701 51 view .LVU585
 2350              	.LBE1581:
 2351              	.LBE1580:
 2352              	.LBE1599:
 2353              	.LBE1601:
 2354              	.LBB1602:
 2355              	.LBI1602:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2356              		.loc 1 692 17 is_stmt 1 discriminator 2 view .LVU586
 2357              	.LBB1603:
 2358              	.LBB1604:
 2359              	.LBI1604:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2360              		.loc 1 602 17 discriminator 2 view .LVU587
 2361              	.LBB1605:
 2362              	.LBI1605:
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 2363              		.loc 1 360 7 discriminator 2 view .LVU588
 2364              	.LBB1606:
 2365              	.LBI1606:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2366              		.loc 1 110 7 discriminator 2 view .LVU589
 2367              	.LBB1607:
 2368              	.LBB1608:
 2369              	.LBI1608:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2370              		.loc 1 199 14 discriminator 2 view .LVU590
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2371              		.loc 1 199 14 is_stmt 0 discriminator 2 view .LVU591
 2372              	.LBE1608:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2373              		.loc 1 110 7 discriminator 2 view .LVU592
 2374 0052 0022     		movs	r2, #0
 2375              	.LVL212:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2376              		.loc 1 110 7 discriminator 2 view .LVU593
 2377 0054 1A72     		strb	r2, [r3, #8]
ARM GAS  /tmp/ccx1vdif.s 			page 122


 2378              	.LVL213:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2379              		.loc 1 110 7 discriminator 2 view .LVU594
 2380 0056 E3E7     		b	.L76
 2381              	.LVL214:
 2382              	.L88:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2383              		.loc 1 110 7 discriminator 2 view .LVU595
 2384              	.LBE1607:
 2385              	.LBE1606:
 2386              	.LBE1605:
 2387              	.LBE1604:
 2388              	.LBE1603:
 2389              	.LBE1602:
 2390              	.LBE1556:
 2391              	.LBB1609:
 2392              	.LBB1513:
 2393              	.LBB1514:
 2394              	.LBI1514:
1661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2395              		.loc 2 1661 5 is_stmt 1 view .LVU596
 2396              	.LBB1515:
 2397              	.LBB1516:
 2398              	.LBI1516:
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 2399              		.loc 2 1571 24 view .LVU597
 2400              	.LBB1517:
1577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else
 2401              		.loc 2 1577 45 is_stmt 0 view .LVU598
 2402 0058 087A     		ldrb	r0, [r1, #8]	@ zero_extendqisi2
 2403              	.LVL215:
1577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else
 2404              		.loc 2 1577 45 view .LVU599
 2405              	.LBE1517:
 2406              	.LBE1516:
1665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 2407              		.loc 2 1665 7 view .LVU600
 2408 005a 0128     		cmp	r0, #1
 2409 005c 08D1     		bne	.L92
 2410              	.LVL216:
 2411              	.LBB1518:
 2412              	.LBI1518:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2413              		.loc 2 276 5 is_stmt 1 view .LVU601
 2414              	.LBB1519:
 2415              	.LBB1520:
 2416              	.LBI1520:
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2417              		.loc 2 267 5 view .LVU602
 2418              	.LBB1521:
 2419              	.LBB1522:
 2420              	.LBI1522:
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 2421              		.loc 2 262 5 view .LVU603
 2422              	.LBB1523:
 2423              	.LBI1523:
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
ARM GAS  /tmp/ccx1vdif.s 			page 123


 2424              		.loc 2 222 24 view .LVU604
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 2425              		.loc 2 222 24 is_stmt 0 view .LVU605
 2426              	.LBE1523:
 2427              	.LBE1522:
 2428              	.LBE1521:
 2429              	.LBE1520:
 2430              	.LBE1519:
 2431              	.LBE1518:
 2432              	.LBE1515:
 2433              	.LBE1514:
 142:MotorControl/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 2434              		.loc 11 142 16 view .LVU606
 2435 005e 0A68     		ldr	r2, [r1]
 2436              	.LVL217:
 143:MotorControl/component.hpp ****         } else {
 2437              		.loc 11 143 58 view .LVU607
 2438 0060 62B1     		cbz	r2, .L84
 2439              	.LVL218:
 2440              	.LBB1526:
 2441              	.LBI1526:
 932:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 933:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 934:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 935:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&&
 936:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       value()&&
 937:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 938:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return this->_M_is_engaged()
 939:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ? std::move(this->_M_get())
 940:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 941:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 942:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 943:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&&
 944:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       value() const&&
 945:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 946:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return this->_M_is_engaged()
 947:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ? std::move(this->_M_get())
 948:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 949:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 950:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 951:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 952:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr _Tp
 953:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	value_or(_Up&& __u) const&
 954:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 955:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  static_assert(is_copy_constructible_v<_Tp>);
 956:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 957:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 958:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return this->_M_is_engaged()
 959:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    ? this->_M_get() : static_cast<_Tp>(std::forward<_Up>(__u));
 960:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 961:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 962:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 963:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr _Tp
 964:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	value_or(_Up&& __u) &&
 965:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 966:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  static_assert(is_move_constructible_v<_Tp>);
 967:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
ARM GAS  /tmp/ccx1vdif.s 			page 124


 968:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 969:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return this->_M_is_engaged()
 970:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    ? std::move(this->_M_get())
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : static_cast<_Tp>(std::forward<_Up>(__u));
 972:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 973:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 974:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       void reset() noexcept { this->_M_reset(); }
 975:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 976:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 977:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 978:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_relop_t =
 979:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       enable_if_t<is_convertible<_Tp, bool>::value, bool>;
 980:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 981:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 982:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_eq_t = __optional_relop_t<
 983:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() == std::declval<const _Up&>())
 984:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
 985:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 986:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 987:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_ne_t = __optional_relop_t<
 988:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() != std::declval<const _Up&>())
 989:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
 990:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 991:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 992:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_lt_t = __optional_relop_t<
 993:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() < std::declval<const _Up&>())
 994:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
 995:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 996:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 997:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_gt_t = __optional_relop_t<
 998:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() > std::declval<const _Up&>())
 999:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
1000:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1001:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1002:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_le_t = __optional_relop_t<
1003:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() <= std::declval<const _Up&>())
1004:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
1005:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1006:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1007:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_ge_t = __optional_relop_t<
1008:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() >= std::declval<const _Up&>())
1009:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
1010:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1011:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Comparisons between optional values.
1012:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1013:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1014:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator==(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1015:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_eq_t<_Tp, _Up>
1016:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1017:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return static_cast<bool>(__lhs) == static_cast<bool>(__rhs)
1018:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	     && (!__lhs || *__lhs == *__rhs);
1019:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1020:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1021:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1022:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1023:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator!=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1024:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ne_t<_Tp, _Up>
ARM GAS  /tmp/ccx1vdif.s 			page 125


1025:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1026:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return static_cast<bool>(__lhs) != static_cast<bool>(__rhs)
1027:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	|| (static_cast<bool>(__lhs) && *__lhs != *__rhs);
1028:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1029:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1030:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1031:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1032:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1033:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_lt_t<_Tp, _Up>
1034:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1035:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return static_cast<bool>(__rhs) && (!__lhs || *__lhs < *__rhs);
1036:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1037:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1038:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1039:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1040:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1041:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_gt_t<_Tp, _Up>
1042:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1043:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return static_cast<bool>(__lhs) && (!__rhs || *__lhs > *__rhs);
1044:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1045:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1046:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1047:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1048:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1049:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_le_t<_Tp, _Up>
1050:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1051:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return !__lhs || (static_cast<bool>(__rhs) && *__lhs <= *__rhs);
1052:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1053:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1054:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1055:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1056:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1057:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ge_t<_Tp, _Up>
1058:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1059:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return !__rhs || (static_cast<bool>(__lhs) && *__lhs >= *__rhs);
1060:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1061:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1062:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #ifdef __cpp_lib_three_way_comparison
1063:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, three_way_comparable_with<_Tp> _Up>
1064:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
1065:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=>(const optional<_Tp>& __x, const optional<_Up>& __y)
1066:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1067:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return __x && __y ? *__x <=> *__y : bool(__x) <=> bool(__y);
1068:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1069:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #endif
1070:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1071:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Comparisons with nullopt.
1072:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1073:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1074:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator==(const optional<_Tp>& __lhs, nullopt_t) noexcept
1075:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__lhs; }
1076:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1077:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #ifdef __cpp_lib_three_way_comparison
1078:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1079:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr strong_ordering
1080:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=>(const optional<_Tp>& __x, nullopt_t) noexcept
1081:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return bool(__x) <=> false; }
ARM GAS  /tmp/ccx1vdif.s 			page 126


1082:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #else
1083:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1084:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1085:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator==(nullopt_t, const optional<_Tp>& __rhs) noexcept
1086:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__rhs; }
1087:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1088:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1089:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1090:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator!=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1091:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return static_cast<bool>(__lhs); }
1092:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1093:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1094:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1095:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator!=(nullopt_t, const optional<_Tp>& __rhs) noexcept
1096:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return static_cast<bool>(__rhs); }
1097:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1098:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1099:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return false; }
1102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<(nullopt_t, const optional<_Tp>& __rhs) noexcept
1106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return static_cast<bool>(__rhs); }
1107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>(const optional<_Tp>& __lhs, nullopt_t) noexcept
1111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return static_cast<bool>(__lhs); }
1112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return false; }
1117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__lhs; }
1122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return true; }
1127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>=(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return true; }
1132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>=(nullopt_t, const optional<_Tp>& __rhs) noexcept
1136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__rhs; }
1137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #endif // three-way-comparison
1138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
ARM GAS  /tmp/ccx1vdif.s 			page 127


1139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Comparisons with value type.
1140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator==(const optional<_Tp>& __lhs, const _Up& __rhs)
1143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_eq_t<_Tp, _Up>
1144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __lhs && *__lhs == __rhs; }
1145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator==(const _Up& __lhs, const optional<_Tp>& __rhs)
1149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_eq_t<_Up, _Tp>
1150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __rhs && __lhs == *__rhs; }
1151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator!=(const optional<_Tp>& __lhs, const _Up& __rhs)
1155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ne_t<_Tp, _Up>
1156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__lhs || *__lhs != __rhs; }
1157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator!=(const _Up& __lhs, const optional<_Tp>& __rhs)
1161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ne_t<_Up, _Tp>
1162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__rhs || __lhs != *__rhs; }
1163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<(const optional<_Tp>& __lhs, const _Up& __rhs)
1167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_lt_t<_Tp, _Up>
1168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__lhs || *__lhs < __rhs; }
1169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<(const _Up& __lhs, const optional<_Tp>& __rhs)
1173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_lt_t<_Up, _Tp>
1174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __rhs && __lhs < *__rhs; }
1175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>(const optional<_Tp>& __lhs, const _Up& __rhs)
1179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_gt_t<_Tp, _Up>
1180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __lhs && *__lhs > __rhs; }
1181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>(const _Up& __lhs, const optional<_Tp>& __rhs)
1185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_gt_t<_Up, _Tp>
1186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__rhs || __lhs > *__rhs; }
1187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=(const optional<_Tp>& __lhs, const _Up& __rhs)
1191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_le_t<_Tp, _Up>
1192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__lhs || *__lhs <= __rhs; }
1193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
ARM GAS  /tmp/ccx1vdif.s 			page 128


1196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=(const _Up& __lhs, const optional<_Tp>& __rhs)
1197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_le_t<_Up, _Tp>
1198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __rhs && __lhs <= *__rhs; }
1199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>=(const optional<_Tp>& __lhs, const _Up& __rhs)
1203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ge_t<_Tp, _Up>
1204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __lhs && *__lhs >= __rhs; }
1205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>=(const _Up& __lhs, const optional<_Tp>& __rhs)
1209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ge_t<_Up, _Tp>
1210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__rhs || __lhs >= *__rhs; }
1211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #ifdef __cpp_lib_three_way_comparison
1213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     inline constexpr bool __is_optional_v = false;
1215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     inline constexpr bool __is_optional_v<optional<_Tp>> = true;
1217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     requires (!__is_optional_v<_Up>)
1220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       && three_way_comparable_with<_Tp, _Up>
1221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
1222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=>(const optional<_Tp>& __x, const _Up& __v)
1223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return bool(__x) ? *__x <=> __v : strong_ordering::less; }
1224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #endif
1225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Swap and creation functions.
1227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // 2748. swappable traits for optionals
1230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     inline enable_if_t<is_move_constructible_v<_Tp> && is_swappable_v<_Tp>>
1232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     swap(optional<_Tp>& __lhs, optional<_Tp>& __rhs)
1233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     noexcept(noexcept(__lhs.swap(__rhs)))
1234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { __lhs.swap(__rhs); }
1235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     enable_if_t<!(is_move_constructible_v<_Tp> && is_swappable_v<_Tp>)>
1238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     swap(optional<_Tp>&, optional<_Tp>&) = delete;
1239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr optional<decay_t<_Tp>>
1242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     make_optional(_Tp&& __t)
 2442              		.loc 1 1242 5 is_stmt 1 view .LVU608
 2443              	.LBB1527:
 2444              	.LBB1528:
 2445              	.LBI1528:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 2446              		.loc 1 700 2 view .LVU609
 2447              	.LBB1529:
 2448              	.LBB1530:
 2449              	.LBB1531:
 2450              	.LBI1531:
ARM GAS  /tmp/ccx1vdif.s 			page 129


 2451              		.loc 5 76 5 view .LVU610
 2452              		.loc 5 76 5 is_stmt 0 view .LVU611
 2453              	.LBE1531:
 2454              	.LBB1532:
 2455              	.LBI1532:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 2456              		.loc 1 607 28 is_stmt 1 view .LVU612
 2457              	.LBB1533:
 2458              	.LBB1534:
 2459              	.LBB1535:
 2460              	.LBI1535:
 2461              		.loc 5 76 5 view .LVU613
 2462              		.loc 5 76 5 is_stmt 0 view .LVU614
 2463              	.LBE1535:
 2464              	.LBB1536:
 2465              	.LBI1536:
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2466              		.loc 1 358 42 is_stmt 1 view .LVU615
 2467              	.LBB1537:
 2468              	.LBB1538:
 2469              	.LBB1539:
 2470              	.LBI1539:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2471              		.loc 1 115 2 view .LVU616
 2472              	.LBB1540:
 2473              	.LBB1541:
 2474              	.LBB1542:
 2475              	.LBI1542:
 2476              		.loc 5 76 5 view .LVU617
 2477              		.loc 5 76 5 is_stmt 0 view .LVU618
 2478              	.LBE1542:
 2479              	.LBB1543:
 2480              	.LBI1543:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2481              		.loc 1 203 6 is_stmt 1 view .LVU619
 2482              	.LBB1544:
 2483              	.LBB1545:
 2484              	.LBB1546:
 2485              	.LBI1546:
 2486              		.loc 5 76 5 view .LVU620
 2487              		.loc 5 76 5 is_stmt 0 view .LVU621
 2488              	.LBE1546:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2489              		.loc 1 204 47 view .LVU622
 2490 0062 92E80300 		ldm	r2, {r0, r1}
 2491              	.LVL219:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2492              		.loc 1 204 47 view .LVU623
 2493 0066 83E80300 		stm	r3, {r0, r1}
 2494              	.LVL220:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2495              		.loc 1 204 47 view .LVU624
 2496              	.LBE1545:
 2497              	.LBE1544:
 2498              	.LBE1543:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2499              		.loc 1 117 19 view .LVU625
ARM GAS  /tmp/ccx1vdif.s 			page 130


 2500 006a 0122     		movs	r2, #1
 2501              	.LVL221:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2502              		.loc 1 117 19 view .LVU626
 2503 006c 1A72     		strb	r2, [r3, #8]
 2504              	.LVL222:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2505              		.loc 1 117 19 view .LVU627
 2506              	.LBE1541:
 2507              	.LBE1540:
 2508              	.LBE1539:
 2509              	.LBE1538:
 2510              	.LBE1537:
 2511              	.LBE1536:
 2512              	.LBE1534:
 2513              	.LBE1533:
 2514              	.LBE1532:
 2515              	.LBE1530:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2516              		.loc 1 701 51 view .LVU628
 2517 006e D7E7     		b	.L76
 2518              	.LVL223:
 2519              	.L92:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2520              		.loc 1 701 51 view .LVU629
 2521              	.LBE1529:
 2522              	.LBE1528:
 2523              	.LBE1527:
 2524              	.LBE1526:
 2525              	.LBB1547:
 2526              	.LBB1525:
 2527              	.LBB1524:
 2528              	.LBI1524:
1568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return !this->_M_valid(); }
 2529              		.loc 2 1568 22 is_stmt 1 view .LVU630
1568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return !this->_M_valid(); }
 2530              		.loc 2 1568 22 is_stmt 0 view .LVU631
 2531              	.LBE1524:
 2532              		.loc 2 1666 28 view .LVU632
 2533 0070 FF28     		cmp	r0, #255
 2534 0072 14BF     		ite	ne
 2535 0074 0020     		movne	r0, #0
 2536 0076 0120     		moveq	r0, #1
 2537 0078 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 2538              	.LVL224:
 2539              	.L84:
 2540              		.loc 2 1666 28 view .LVU633
 2541              	.LBE1525:
 2542              	.LBE1547:
 2543              	.LBB1548:
 2544              	.LBI1548:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2545              		.loc 1 692 17 is_stmt 1 discriminator 2 view .LVU634
 2546              	.LBB1549:
 2547              	.LBB1550:
 2548              	.LBI1550:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
ARM GAS  /tmp/ccx1vdif.s 			page 131


 2549              		.loc 1 602 17 discriminator 2 view .LVU635
 2550              	.LBB1551:
 2551              	.LBI1551:
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 2552              		.loc 1 360 7 discriminator 2 view .LVU636
 2553              	.LBB1552:
 2554              	.LBI1552:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2555              		.loc 1 110 7 discriminator 2 view .LVU637
 2556              	.LBB1553:
 2557              	.LBB1554:
 2558              	.LBI1554:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2559              		.loc 1 199 14 discriminator 2 view .LVU638
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2560              		.loc 1 199 14 is_stmt 0 discriminator 2 view .LVU639
 2561              	.LBE1554:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2562              		.loc 1 110 7 discriminator 2 view .LVU640
 2563 007c 0022     		movs	r2, #0
 2564              	.LVL225:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2565              		.loc 1 110 7 discriminator 2 view .LVU641
 2566 007e 1A72     		strb	r2, [r3, #8]
 2567              	.LVL226:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2568              		.loc 1 110 7 discriminator 2 view .LVU642
 2569 0080 CEE7     		b	.L76
 2570              	.LVL227:
 2571              	.L89:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2572              		.loc 1 110 7 discriminator 2 view .LVU643
 2573              	.LBE1553:
 2574              	.LBE1552:
 2575              	.LBE1551:
 2576              	.LBE1550:
 2577              	.LBE1549:
 2578              	.LBE1548:
 2579              	.LBE1513:
 2580              	.LBB1555:
 2581              	.LBB1493:
 2582              	.LBB1492:
 2583              	.LBI1492:
1568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return !this->_M_valid(); }
 2584              		.loc 2 1568 22 is_stmt 1 view .LVU644
1568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return !this->_M_valid(); }
 2585              		.loc 2 1568 22 is_stmt 0 view .LVU645
 2586              	.LBE1492:
 2587              		.loc 2 1666 28 view .LVU646
 2588 0082 FF28     		cmp	r0, #255
 2589 0084 14BF     		ite	ne
 2590 0086 0020     		movne	r0, #0
 2591 0088 0120     		moveq	r0, #1
 2592 008a FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessb
 2593              	.LVL228:
 2594              		.loc 2 1666 28 view .LVU647
 2595              	.LBE1493:
ARM GAS  /tmp/ccx1vdif.s 			page 132


 2596              	.LBE1555:
 2597              	.LBE1609:
 2598              	.LBE1610:
 2599              		.cfi_endproc
 2600              	.LFE4528:
 2601              		.fnend
 2603              		.section	.text._ZN9InputPortIfE7presentEv,"axG",%progbits,_ZN9InputPortIfE7presentEv,comdat
 2604              		.align	1
 2605              		.weak	_ZN9InputPortIfE7presentEv
 2606              		.syntax unified
 2607              		.thumb
 2608              		.thumb_func
 2610              	_ZN9InputPortIfE7presentEv:
 2611              		.fnstart
 2612              	.LVL229:
 2613              	.LFB4530:
 137:MotorControl/component.hpp ****         if (content_.index() == 2) {
 2614              		.loc 11 137 22 is_stmt 1 view -0
 2615              		.cfi_startproc
 2616              		@ args = 0, pretend = 0, frame = 0
 2617              		@ frame_needed = 0, uses_anonymous_args = 0
 137:MotorControl/component.hpp ****         if (content_.index() == 2) {
 2618              		.loc 11 137 22 is_stmt 0 view .LVU649
 2619 0000 08B5     		push	{r3, lr}
 2620              		.save {r3, lr}
 2621              	.LCFI28:
 2622              		.cfi_def_cfa_offset 8
 2623              		.cfi_offset 3, -8
 2624              		.cfi_offset 14, -4
 2625              	.LVL230:
 2626              	.LBB1741:
 2627              	.LBB1742:
 2628              	.LBI1742:
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 2629              		.loc 2 1571 24 is_stmt 1 view .LVU650
 2630              	.LBB1743:
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 2631              		.loc 2 1575 17 is_stmt 0 view .LVU651
 2632 0002 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 2633              	.LVL231:
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 2634              		.loc 2 1575 17 view .LVU652
 2635              	.LBE1743:
 2636              	.LBE1742:
 138:MotorControl/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 2637              		.loc 11 138 9 view .LVU653
 2638 0004 022B     		cmp	r3, #2
 2639 0006 08D0     		beq	.L105
 2640              	.LBB1744:
 141:MotorControl/component.hpp ****             T* ptr = std::get<1>(content_);
 2641              		.loc 11 141 16 view .LVU654
 2642 0008 012B     		cmp	r3, #1
 2643 000a 19D0     		beq	.L106
 2644              	.LVL232:
 2645              	.LBB1745:
 2646              	.LBI1745:
1661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
ARM GAS  /tmp/ccx1vdif.s 			page 133


 2647              		.loc 2 1661 5 is_stmt 1 view .LVU655
 2648              	.LBB1746:
 2649              	.LBB1747:
 2650              	.LBI1747:
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 2651              		.loc 2 1571 24 view .LVU656
 2652              	.LBB1748:
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 2653              		.loc 2 1575 17 is_stmt 0 view .LVU657
 2654 000c 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 2655              	.LVL233:
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 2656              		.loc 2 1575 17 view .LVU658
 2657              	.LBE1748:
 2658              	.LBE1747:
1665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 2659              		.loc 2 1665 7 view .LVU659
 2660 000e 3BBB     		cbnz	r3, .L107
 2661              	.LVL234:
 2662              	.LBB1749:
 2663              	.LBI1749:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2664              		.loc 2 276 5 is_stmt 1 view .LVU660
 2665              	.LBB1750:
 2666              	.LBB1751:
 2667              	.LBI1751:
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 2668              		.loc 2 262 5 view .LVU661
 2669              	.LBB1752:
 2670              	.LBI1752:
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 2671              		.loc 2 222 24 view .LVU662
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 2672              		.loc 2 222 24 is_stmt 0 view .LVU663
 2673              	.LBE1752:
 2674              	.LBE1751:
 2675              	.LBE1750:
 2676              	.LBE1749:
 2677              	.LBE1746:
 2678              	.LBE1745:
 2679              	.LBB1756:
 2680              	.LBI1756:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 2681              		.loc 1 700 2 is_stmt 1 view .LVU664
 2682              	.LBB1757:
 2683              	.LBB1758:
 2684              	.LBB1759:
 2685              	.LBI1759:
 2686              		.loc 5 76 5 view .LVU665
 2687              		.loc 5 76 5 is_stmt 0 view .LVU666
 2688              	.LBE1759:
 2689              	.LBB1760:
 2690              	.LBI1760:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 2691              		.loc 1 607 28 is_stmt 1 view .LVU667
 2692              	.LBB1761:
 2693              	.LBB1762:
ARM GAS  /tmp/ccx1vdif.s 			page 134


 2694              	.LBB1763:
 2695              	.LBI1763:
 2696              		.loc 5 76 5 view .LVU668
 2697              		.loc 5 76 5 is_stmt 0 view .LVU669
 2698              	.LBE1763:
 2699              	.LBB1764:
 2700              	.LBI1764:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2701              		.loc 1 300 42 is_stmt 1 view .LVU670
 2702              	.LBB1765:
 2703              	.LBB1766:
 2704              	.LBB1767:
 2705              	.LBI1767:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2706              		.loc 1 115 2 view .LVU671
 2707              	.LBB1768:
 2708              	.LBB1769:
 2709              	.LBB1770:
 2710              	.LBI1770:
 2711              		.loc 5 76 5 view .LVU672
 2712              		.loc 5 76 5 is_stmt 0 view .LVU673
 2713              	.LBE1770:
 2714              	.LBB1771:
 2715              	.LBI1771:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2716              		.loc 1 203 6 is_stmt 1 view .LVU674
 2717              	.LBB1772:
 2718              	.LBB1773:
 2719              	.LBB1774:
 2720              	.LBI1774:
 2721              		.loc 5 76 5 view .LVU675
 2722              		.loc 5 76 5 is_stmt 0 view .LVU676
 2723              	.LBE1774:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2724              		.loc 1 204 47 view .LVU677
 2725 0010 0B68     		ldr	r3, [r1]	@ float
 2726 0012 0360     		str	r3, [r0]	@ float
 2727              	.LVL235:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2728              		.loc 1 204 47 view .LVU678
 2729              	.LBE1773:
 2730              	.LBE1772:
 2731              	.LBE1771:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2732              		.loc 1 117 19 view .LVU679
 2733 0014 0123     		movs	r3, #1
 2734 0016 0371     		strb	r3, [r0, #4]
 2735              	.LVL236:
 2736              	.L93:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2737              		.loc 1 117 19 view .LVU680
 2738              	.LBE1769:
 2739              	.LBE1768:
 2740              	.LBE1767:
 2741              	.LBE1766:
 2742              	.LBE1765:
 2743              	.LBE1764:
ARM GAS  /tmp/ccx1vdif.s 			page 135


 2744              	.LBE1762:
 2745              	.LBE1761:
 2746              	.LBE1760:
 2747              	.LBE1758:
 2748              	.LBE1757:
 2749              	.LBE1756:
 2750              	.LBE1744:
 2751              	.LBE1741:
 2752              		.loc 11 147 5 view .LVU681
 2753 0018 08BD     		pop	{r3, pc}
 2754              	.L105:
 2755              	.LVL237:
 2756              	.LBB1873:
 2757              	.LBB1819:
 2758              	.LBB1820:
 2759              	.LBI1820:
1661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2760              		.loc 2 1661 5 is_stmt 1 view .LVU682
 2761              	.LBB1821:
 2762              	.LBB1822:
 2763              	.LBI1822:
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 2764              		.loc 2 1571 24 view .LVU683
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 2765              		.loc 2 1571 24 is_stmt 0 view .LVU684
 2766              	.LBE1822:
1665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 2767              		.loc 2 1665 7 view .LVU685
 2768 001a 06D1     		bne	.L108
 2769              	.LVL238:
 2770              	.LBB1823:
 2771              	.LBI1823:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2772              		.loc 2 276 5 is_stmt 1 view .LVU686
 2773              	.LBB1824:
 2774              	.LBB1825:
 2775              	.LBI1825:
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2776              		.loc 2 267 5 view .LVU687
 2777              	.LBB1826:
 2778              	.LBB1827:
 2779              	.LBI1827:
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2780              		.loc 2 267 5 view .LVU688
 2781              	.LBB1828:
 2782              	.LBB1829:
 2783              	.LBI1829:
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 2784              		.loc 2 262 5 view .LVU689
 2785              	.LBB1830:
 2786              	.LBI1830:
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 2787              		.loc 2 222 24 view .LVU690
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 2788              		.loc 2 222 24 is_stmt 0 view .LVU691
 2789              	.LBE1830:
 2790              	.LBE1829:
ARM GAS  /tmp/ccx1vdif.s 			page 136


 2791              	.LBE1828:
 2792              	.LBE1827:
 2793              	.LBE1826:
 2794              	.LBE1825:
 2795              	.LBE1824:
 2796              	.LBE1823:
 2797              	.LBE1821:
 2798              	.LBE1820:
 139:MotorControl/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 2799              		.loc 11 139 28 view .LVU692
 2800 001c 0B68     		ldr	r3, [r1]
 2801              	.LVL239:
 140:MotorControl/component.hpp ****         } else if (content_.index() == 1) {
 2802              		.loc 11 140 48 view .LVU693
 2803 001e 63B1     		cbz	r3, .L96
 2804              	.LVL240:
 2805              	.LBB1834:
 2806              	.LBI1834:
  73:MotorControl/component.hpp ****         if (age_ == 0) {
 2807              		.loc 11 73 22 is_stmt 1 view .LVU694
 2808              	.LBB1835:
  74:MotorControl/component.hpp ****             return content_;
 2809              		.loc 11 74 13 is_stmt 0 view .LVU695
 2810 0020 1A68     		ldr	r2, [r3]
  74:MotorControl/component.hpp ****             return content_;
 2811              		.loc 11 74 9 view .LVU696
 2812 0022 2AB1     		cbz	r2, .L109
 2813              	.LVL241:
 2814              	.LBB1836:
 2815              	.LBI1836:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2816              		.loc 1 692 17 is_stmt 1 view .LVU697
 2817              	.LBB1837:
 2818              	.LBB1838:
 2819              	.LBI1838:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2820              		.loc 1 602 17 view .LVU698
 2821              	.LBB1839:
 2822              	.LBI1839:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 2823              		.loc 1 302 7 view .LVU699
 2824              	.LBB1840:
 2825              	.LBI1840:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2826              		.loc 1 110 7 view .LVU700
 2827              	.LBB1841:
 2828              	.LBB1842:
 2829              	.LBI1842:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2830              		.loc 1 199 14 view .LVU701
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2831              		.loc 1 199 14 is_stmt 0 view .LVU702
 2832              	.LBE1842:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2833              		.loc 1 110 7 view .LVU703
 2834 0024 0023     		movs	r3, #0
 2835              	.LVL242:
ARM GAS  /tmp/ccx1vdif.s 			page 137


 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2836              		.loc 1 110 7 view .LVU704
 2837 0026 0371     		strb	r3, [r0, #4]
 2838              	.LVL243:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2839              		.loc 1 110 7 view .LVU705
 2840              	.LBE1841:
 2841              	.LBE1840:
 2842              	.LBE1839:
 2843              	.LBE1838:
 2844              	.LBE1837:
 2845              	.LBE1836:
  77:MotorControl/component.hpp ****         }
 2846              		.loc 11 77 25 view .LVU706
 2847 0028 F6E7     		b	.L93
 2848              	.LVL244:
 2849              	.L108:
  77:MotorControl/component.hpp ****         }
 2850              		.loc 11 77 25 view .LVU707
 2851              	.LBE1835:
 2852              	.LBE1834:
 2853              	.LBB1863:
 2854              	.LBB1833:
 2855              	.LBB1831:
 2856              	.LBI1831:
1287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 2857              		.loc 2 1287 3 is_stmt 1 view .LVU708
 2858              	.LBB1832:
1289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
 2859              		.loc 2 1289 5 view .LVU709
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 2860              		.loc 2 1292 7 view .LVU710
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 2861              		.loc 2 1292 33 is_stmt 0 view .LVU711
 2862 002a 0F48     		ldr	r0, .L111
 2863              	.LVL245:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 2864              		.loc 2 1292 33 view .LVU712
 2865 002c FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
 2866              	.LVL246:
 2867              	.L109:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 2868              		.loc 2 1292 33 view .LVU713
 2869              	.LBE1832:
 2870              	.LBE1831:
 2871              	.LBE1833:
 2872              	.LBE1863:
 2873              	.LBB1864:
 2874              	.LBB1862:
 2875              	.LBB1843:
 2876              	.LBI1843:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 2877              		.loc 1 700 2 is_stmt 1 view .LVU714
 2878              	.LBB1844:
 2879              	.LBB1845:
 2880              	.LBB1846:
 2881              	.LBI1846:
ARM GAS  /tmp/ccx1vdif.s 			page 138


 2882              		.loc 5 76 5 view .LVU715
 2883              		.loc 5 76 5 is_stmt 0 view .LVU716
 2884              	.LBE1846:
 2885              	.LBB1847:
 2886              	.LBI1847:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 2887              		.loc 1 607 28 is_stmt 1 view .LVU717
 2888              	.LBB1848:
 2889              	.LBB1849:
 2890              	.LBB1850:
 2891              	.LBI1850:
 2892              		.loc 5 76 5 view .LVU718
 2893              		.loc 5 76 5 is_stmt 0 view .LVU719
 2894              	.LBE1850:
 2895              	.LBB1851:
 2896              	.LBI1851:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2897              		.loc 1 300 42 is_stmt 1 view .LVU720
 2898              	.LBB1852:
 2899              	.LBB1853:
 2900              	.LBB1854:
 2901              	.LBI1854:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 2902              		.loc 1 115 2 view .LVU721
 2903              	.LBB1855:
 2904              	.LBB1856:
 2905              	.LBB1857:
 2906              	.LBI1857:
 2907              		.loc 5 76 5 view .LVU722
 2908              		.loc 5 76 5 is_stmt 0 view .LVU723
 2909              	.LBE1857:
 2910              	.LBB1858:
 2911              	.LBI1858:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 2912              		.loc 1 203 6 is_stmt 1 view .LVU724
 2913              	.LBB1859:
 2914              	.LBB1860:
 2915              	.LBB1861:
 2916              	.LBI1861:
 2917              		.loc 5 76 5 view .LVU725
 2918              		.loc 5 76 5 is_stmt 0 view .LVU726
 2919              	.LBE1861:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2920              		.loc 1 204 47 view .LVU727
 2921 0030 5B68     		ldr	r3, [r3, #4]	@ float
 2922              	.LVL247:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2923              		.loc 1 204 47 view .LVU728
 2924 0032 0360     		str	r3, [r0]	@ float
 2925              	.LVL248:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 2926              		.loc 1 204 47 view .LVU729
 2927              	.LBE1860:
 2928              	.LBE1859:
 2929              	.LBE1858:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2930              		.loc 1 117 19 view .LVU730
ARM GAS  /tmp/ccx1vdif.s 			page 139


 2931 0034 0123     		movs	r3, #1
 2932 0036 0371     		strb	r3, [r0, #4]
 2933              	.LVL249:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 2934              		.loc 1 117 19 view .LVU731
 2935              	.LBE1856:
 2936              	.LBE1855:
 2937              	.LBE1854:
 2938              	.LBE1853:
 2939              	.LBE1852:
 2940              	.LBE1851:
 2941              	.LBE1849:
 2942              	.LBE1848:
 2943              	.LBE1847:
 2944              	.LBE1845:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2945              		.loc 1 701 51 view .LVU732
 2946 0038 EEE7     		b	.L93
 2947              	.LVL250:
 2948              	.L96:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2949              		.loc 1 701 51 view .LVU733
 2950              	.LBE1844:
 2951              	.LBE1843:
 2952              	.LBE1862:
 2953              	.LBE1864:
 2954              	.LBB1865:
 2955              	.LBI1865:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2956              		.loc 1 692 17 is_stmt 1 discriminator 2 view .LVU734
 2957              	.LBB1866:
 2958              	.LBB1867:
 2959              	.LBI1867:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2960              		.loc 1 602 17 discriminator 2 view .LVU735
 2961              	.LBB1868:
 2962              	.LBI1868:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 2963              		.loc 1 302 7 discriminator 2 view .LVU736
 2964              	.LBB1869:
 2965              	.LBI1869:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2966              		.loc 1 110 7 discriminator 2 view .LVU737
 2967              	.LBB1870:
 2968              	.LBB1871:
 2969              	.LBI1871:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2970              		.loc 1 199 14 discriminator 2 view .LVU738
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2971              		.loc 1 199 14 is_stmt 0 discriminator 2 view .LVU739
 2972              	.LBE1871:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2973              		.loc 1 110 7 discriminator 2 view .LVU740
 2974 003a 0023     		movs	r3, #0
 2975              	.LVL251:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2976              		.loc 1 110 7 discriminator 2 view .LVU741
ARM GAS  /tmp/ccx1vdif.s 			page 140


 2977 003c 0371     		strb	r3, [r0, #4]
 2978              	.LVL252:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2979              		.loc 1 110 7 discriminator 2 view .LVU742
 2980 003e EBE7     		b	.L93
 2981              	.L106:
 2982              	.LVL253:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2983              		.loc 1 110 7 discriminator 2 view .LVU743
 2984              	.LBE1870:
 2985              	.LBE1869:
 2986              	.LBE1868:
 2987              	.LBE1867:
 2988              	.LBE1866:
 2989              	.LBE1865:
 2990              	.LBE1819:
 2991              	.LBB1872:
 2992              	.LBB1775:
 2993              	.LBB1776:
 2994              	.LBI1776:
1661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 2995              		.loc 2 1661 5 is_stmt 1 view .LVU744
 2996              	.LBB1777:
 2997              	.LBB1778:
 2998              	.LBI1778:
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 2999              		.loc 2 1571 24 view .LVU745
 3000              	.LBB1779:
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 3001              		.loc 2 1575 17 is_stmt 0 view .LVU746
 3002 0040 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 3003              	.LVL254:
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 3004              		.loc 2 1575 17 view .LVU747
 3005              	.LBE1779:
 3006              	.LBE1778:
1665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__throw_bad_variant_access(__v.valueless_by_exception());
 3007              		.loc 2 1665 7 view .LVU748
 3008 0042 012B     		cmp	r3, #1
 3009 0044 06D1     		bne	.L110
 3010              	.LVL255:
 3011              	.LBB1780:
 3012              	.LBI1780:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 3013              		.loc 2 276 5 is_stmt 1 view .LVU749
 3014              	.LBB1781:
 3015              	.LBB1782:
 3016              	.LBI1782:
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 3017              		.loc 2 267 5 view .LVU750
 3018              	.LBB1783:
 3019              	.LBB1784:
 3020              	.LBI1784:
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 3021              		.loc 2 262 5 view .LVU751
 3022              	.LBB1785:
 3023              	.LBI1785:
ARM GAS  /tmp/ccx1vdif.s 			page 141


 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 3024              		.loc 2 222 24 view .LVU752
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 3025              		.loc 2 222 24 is_stmt 0 view .LVU753
 3026              	.LBE1785:
 3027              	.LBE1784:
 3028              	.LBE1783:
 3029              	.LBE1782:
 3030              	.LBE1781:
 3031              	.LBE1780:
 3032              	.LBE1777:
 3033              	.LBE1776:
 142:MotorControl/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 3034              		.loc 11 142 16 view .LVU754
 3035 0046 0B68     		ldr	r3, [r1]
 3036              	.LVL256:
 143:MotorControl/component.hpp ****         } else {
 3037              		.loc 11 143 58 view .LVU755
 3038 0048 3BB1     		cbz	r3, .L102
 3039              	.LVL257:
 3040              	.LBB1789:
 3041              	.LBI1789:
 3042              		.loc 1 1242 5 is_stmt 1 view .LVU756
 3043              	.LBB1790:
 3044              	.LBB1791:
 3045              	.LBI1791:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 3046              		.loc 1 700 2 view .LVU757
 3047              	.LBB1792:
 3048              	.LBB1793:
 3049              	.LBB1794:
 3050              	.LBI1794:
 3051              		.loc 5 76 5 view .LVU758
 3052              		.loc 5 76 5 is_stmt 0 view .LVU759
 3053              	.LBE1794:
 3054              	.LBB1795:
 3055              	.LBI1795:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 3056              		.loc 1 607 28 is_stmt 1 view .LVU760
 3057              	.LBB1796:
 3058              	.LBB1797:
 3059              	.LBB1798:
 3060              	.LBI1798:
 3061              		.loc 5 76 5 view .LVU761
 3062              		.loc 5 76 5 is_stmt 0 view .LVU762
 3063              	.LBE1798:
 3064              	.LBB1799:
 3065              	.LBI1799:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3066              		.loc 1 300 42 is_stmt 1 view .LVU763
 3067              	.LBB1800:
 3068              	.LBB1801:
 3069              	.LBB1802:
 3070              	.LBI1802:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 3071              		.loc 1 115 2 view .LVU764
 3072              	.LBB1803:
ARM GAS  /tmp/ccx1vdif.s 			page 142


 3073              	.LBB1804:
 3074              	.LBB1805:
 3075              	.LBI1805:
 3076              		.loc 5 76 5 view .LVU765
 3077              		.loc 5 76 5 is_stmt 0 view .LVU766
 3078              	.LBE1805:
 3079              	.LBB1806:
 3080              	.LBI1806:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 3081              		.loc 1 203 6 is_stmt 1 view .LVU767
 3082              	.LBB1807:
 3083              	.LBB1808:
 3084              	.LBB1809:
 3085              	.LBI1809:
 3086              		.loc 5 76 5 view .LVU768
 3087              		.loc 5 76 5 is_stmt 0 view .LVU769
 3088              	.LBE1809:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 3089              		.loc 1 204 47 view .LVU770
 3090 004a 1B68     		ldr	r3, [r3]	@ float
 3091              	.LVL258:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 3092              		.loc 1 204 47 view .LVU771
 3093 004c 0360     		str	r3, [r0]	@ float
 3094              	.LVL259:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 3095              		.loc 1 204 47 view .LVU772
 3096              	.LBE1808:
 3097              	.LBE1807:
 3098              	.LBE1806:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 3099              		.loc 1 117 19 view .LVU773
 3100 004e 0123     		movs	r3, #1
 3101 0050 0371     		strb	r3, [r0, #4]
 3102              	.LVL260:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 3103              		.loc 1 117 19 view .LVU774
 3104              	.LBE1804:
 3105              	.LBE1803:
 3106              	.LBE1802:
 3107              	.LBE1801:
 3108              	.LBE1800:
 3109              	.LBE1799:
 3110              	.LBE1797:
 3111              	.LBE1796:
 3112              	.LBE1795:
 3113              	.LBE1793:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3114              		.loc 1 701 51 view .LVU775
 3115 0052 E1E7     		b	.L93
 3116              	.LVL261:
 3117              	.L110:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3118              		.loc 1 701 51 view .LVU776
 3119              	.LBE1792:
 3120              	.LBE1791:
 3121              	.LBE1790:
ARM GAS  /tmp/ccx1vdif.s 			page 143


 3122              	.LBE1789:
 3123              	.LBB1810:
 3124              	.LBB1788:
 3125              	.LBB1786:
 3126              	.LBI1786:
1287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 3127              		.loc 2 1287 3 is_stmt 1 view .LVU777
 3128              	.LBB1787:
1289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
 3129              		.loc 2 1289 5 view .LVU778
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 3130              		.loc 2 1292 7 view .LVU779
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 3131              		.loc 2 1292 33 is_stmt 0 view .LVU780
 3132 0054 0448     		ldr	r0, .L111
 3133              	.LVL262:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 3134              		.loc 2 1292 33 view .LVU781
 3135 0056 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
 3136              	.LVL263:
 3137              	.L102:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 3138              		.loc 2 1292 33 view .LVU782
 3139              	.LBE1787:
 3140              	.LBE1786:
 3141              	.LBE1788:
 3142              	.LBE1810:
 3143              	.LBB1811:
 3144              	.LBI1811:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3145              		.loc 1 692 17 is_stmt 1 discriminator 2 view .LVU783
 3146              	.LBB1812:
 3147              	.LBB1813:
 3148              	.LBI1813:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3149              		.loc 1 602 17 discriminator 2 view .LVU784
 3150              	.LBB1814:
 3151              	.LBI1814:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 3152              		.loc 1 302 7 discriminator 2 view .LVU785
 3153              	.LBB1815:
 3154              	.LBI1815:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3155              		.loc 1 110 7 discriminator 2 view .LVU786
 3156              	.LBB1816:
 3157              	.LBB1817:
 3158              	.LBI1817:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3159              		.loc 1 199 14 discriminator 2 view .LVU787
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3160              		.loc 1 199 14 is_stmt 0 discriminator 2 view .LVU788
 3161              	.LBE1817:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3162              		.loc 1 110 7 discriminator 2 view .LVU789
 3163 005a 0023     		movs	r3, #0
 3164              	.LVL264:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
ARM GAS  /tmp/ccx1vdif.s 			page 144


 3165              		.loc 1 110 7 discriminator 2 view .LVU790
 3166 005c 0371     		strb	r3, [r0, #4]
 3167              	.LVL265:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3168              		.loc 1 110 7 discriminator 2 view .LVU791
 3169 005e DBE7     		b	.L93
 3170              	.LVL266:
 3171              	.L107:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3172              		.loc 1 110 7 discriminator 2 view .LVU792
 3173              	.LBE1816:
 3174              	.LBE1815:
 3175              	.LBE1814:
 3176              	.LBE1813:
 3177              	.LBE1812:
 3178              	.LBE1811:
 3179              	.LBE1775:
 3180              	.LBB1818:
 3181              	.LBB1755:
 3182              	.LBB1753:
 3183              	.LBI1753:
1287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 3184              		.loc 2 1287 3 is_stmt 1 view .LVU793
 3185              	.LBB1754:
1289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
 3186              		.loc 2 1289 5 view .LVU794
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 3187              		.loc 2 1292 7 view .LVU795
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 3188              		.loc 2 1292 33 is_stmt 0 view .LVU796
 3189 0060 0148     		ldr	r0, .L111
 3190              	.LVL267:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 3191              		.loc 2 1292 33 view .LVU797
 3192 0062 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
 3193              	.LVL268:
 3194              	.L112:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 3195              		.loc 2 1292 33 view .LVU798
 3196 0066 00BF     		.align	2
 3197              	.L111:
 3198 0068 20000000 		.word	.LC2
 3199              	.LBE1754:
 3200              	.LBE1753:
 3201              	.LBE1755:
 3202              	.LBE1818:
 3203              	.LBE1872:
 3204              	.LBE1873:
 3205              		.cfi_endproc
 3206              	.LFE4530:
 3207              		.fnend
 3209              		.section	.text._ZN23FieldOrientedController6updateEm,"ax",%progbits
 3210              		.align	1
 3211              		.global	_ZN23FieldOrientedController6updateEm
 3212              		.syntax unified
 3213              		.thumb
 3214              		.thumb_func
ARM GAS  /tmp/ccx1vdif.s 			page 145


 3216              	_ZN23FieldOrientedController6updateEm:
 3217              		.fnstart
 3218              	.LVL269:
 3219              	.LFB4350:
 183:MotorControl/foc.cpp **** 
 184:MotorControl/foc.cpp **** void FieldOrientedController::update(uint32_t timestamp) {
 3220              		.loc 3 184 58 is_stmt 1 view -0
 3221              		.cfi_startproc
 3222              		@ args = 0, pretend = 0, frame = 40
 3223              		@ frame_needed = 0, uses_anonymous_args = 0
 3224              		.loc 3 184 58 is_stmt 0 view .LVU800
 3225 0000 30B5     		push	{r4, r5, lr}
 3226              		.save {r4, r5, lr}
 3227              	.LCFI29:
 3228              		.cfi_def_cfa_offset 12
 3229              		.cfi_offset 4, -12
 3230              		.cfi_offset 5, -8
 3231              		.cfi_offset 14, -4
 3232              		.pad #44
 3233 0002 8BB0     		sub	sp, sp, #44
 3234              	.LCFI30:
 3235              		.cfi_def_cfa_offset 56
 3236 0004 0446     		mov	r4, r0
 185:MotorControl/foc.cpp ****     CRITICAL_SECTION() {
 3237              		.loc 3 185 5 is_stmt 1 view .LVU801
 3238              	.LVL270:
 3239              	.LBB1922:
 3240              	.LBB1923:
 3241              	.LBI1923:
 3242              		.file 12 "./Drivers/STM32/stm32_system.h"
   1:./Drivers/STM32/stm32_system.h **** #ifndef __STM32_SYSTEM_H
   2:./Drivers/STM32/stm32_system.h **** #define __STM32_SYSTEM_H
   3:./Drivers/STM32/stm32_system.h **** 
   4:./Drivers/STM32/stm32_system.h **** #if defined(STM32F405xx)
   5:./Drivers/STM32/stm32_system.h **** #include <stm32f405xx.h>
   6:./Drivers/STM32/stm32_system.h **** #elif defined(STM32F722xx)
   7:./Drivers/STM32/stm32_system.h **** #include <stm32f722xx.h>
   8:./Drivers/STM32/stm32_system.h **** #else
   9:./Drivers/STM32/stm32_system.h **** #error "unknown STM32 microcontroller"
  10:./Drivers/STM32/stm32_system.h **** #endif
  11:./Drivers/STM32/stm32_system.h **** 
  12:./Drivers/STM32/stm32_system.h **** // C/C++ definitions
  13:./Drivers/STM32/stm32_system.h **** 
  14:./Drivers/STM32/stm32_system.h **** #ifdef __cplusplus
  15:./Drivers/STM32/stm32_system.h **** extern "C" {
  16:./Drivers/STM32/stm32_system.h **** #endif
  17:./Drivers/STM32/stm32_system.h **** 
  18:./Drivers/STM32/stm32_system.h **** // Uncomment the following line to sacrifice 1kB of RAM for the ability to
  19:./Drivers/STM32/stm32_system.h **** // monitor the number of times each interrupt fires.
  20:./Drivers/STM32/stm32_system.h **** //#define ENABLE_IRQ_COUNTER
  21:./Drivers/STM32/stm32_system.h **** 
  22:./Drivers/STM32/stm32_system.h **** #ifdef ENABLE_IRQ_COUNTER
  23:./Drivers/STM32/stm32_system.h **** extern uint32_t irq_counters[];
  24:./Drivers/STM32/stm32_system.h **** #define COUNT_IRQ(irqn) (++irq_counters[irqn + 14])
  25:./Drivers/STM32/stm32_system.h **** #define GET_IRQ_COUNTER(irqn) irq_counters[irqn + 14]
  26:./Drivers/STM32/stm32_system.h **** #else
  27:./Drivers/STM32/stm32_system.h **** #define COUNT_IRQ(irqn) ((void)0)
ARM GAS  /tmp/ccx1vdif.s 			page 146


  28:./Drivers/STM32/stm32_system.h **** #define GET_IRQ_COUNTER(irqn) 0
  29:./Drivers/STM32/stm32_system.h **** #endif
  30:./Drivers/STM32/stm32_system.h **** 
  31:./Drivers/STM32/stm32_system.h **** static inline uint32_t cpu_enter_critical() {
  32:./Drivers/STM32/stm32_system.h ****     uint32_t primask = __get_PRIMASK();
  33:./Drivers/STM32/stm32_system.h ****     __disable_irq();
  34:./Drivers/STM32/stm32_system.h ****     return primask;
  35:./Drivers/STM32/stm32_system.h **** }
  36:./Drivers/STM32/stm32_system.h **** 
  37:./Drivers/STM32/stm32_system.h **** static inline void cpu_exit_critical(uint32_t priority_mask) {
  38:./Drivers/STM32/stm32_system.h ****     __set_PRIMASK(priority_mask);
  39:./Drivers/STM32/stm32_system.h **** }
  40:./Drivers/STM32/stm32_system.h **** 
  41:./Drivers/STM32/stm32_system.h **** #ifdef __cplusplus
  42:./Drivers/STM32/stm32_system.h **** }
  43:./Drivers/STM32/stm32_system.h **** #endif
  44:./Drivers/STM32/stm32_system.h **** 
  45:./Drivers/STM32/stm32_system.h **** 
  46:./Drivers/STM32/stm32_system.h **** // C++ only definitions
  47:./Drivers/STM32/stm32_system.h **** 
  48:./Drivers/STM32/stm32_system.h **** #ifdef __cplusplus
  49:./Drivers/STM32/stm32_system.h **** 
  50:./Drivers/STM32/stm32_system.h **** struct CriticalSectionContext {
  51:./Drivers/STM32/stm32_system.h ****     CriticalSectionContext(const CriticalSectionContext&) = delete;
  52:./Drivers/STM32/stm32_system.h ****     CriticalSectionContext(const CriticalSectionContext&&) = delete;
  53:./Drivers/STM32/stm32_system.h ****     void operator=(const CriticalSectionContext&) = delete;
  54:./Drivers/STM32/stm32_system.h ****     void operator=(const CriticalSectionContext&&) = delete;
  55:./Drivers/STM32/stm32_system.h ****     operator bool() { return true; };
  56:./Drivers/STM32/stm32_system.h ****     CriticalSectionContext() : mask_(cpu_enter_critical()) {}
 3243              		.loc 12 56 5 view .LVU802
 3244              	.LBB1924:
 3245              	.LBB1925:
 3246              	.LBB1926:
 3247              	.LBI1926:
  31:./Drivers/STM32/stm32_system.h ****     uint32_t primask = __get_PRIMASK();
 3248              		.loc 12 31 24 view .LVU803
 3249              	.LBB1927:
  32:./Drivers/STM32/stm32_system.h ****     __disable_irq();
 3250              		.loc 12 32 5 view .LVU804
 3251              	.LBB1928:
 3252              	.LBI1928:
 3253              		.file 13 "ThirdParty/CMSIS/Include/cmsis_gcc.h"
   1:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /*
   8:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  *
  10:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  *
  12:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccx1vdif.s 			page 147


  16:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  *
  18:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
  24:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
  25:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
  28:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
  34:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  38:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
  39:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  43:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  46:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  49:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  55:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  58:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  61:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  64:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  67:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  70:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccx1vdif.s 			page 148


  73:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  78:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  86:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  94:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 102:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 110:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 113:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 116:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 117:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 118:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:ThirdParty/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   @{
 122:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 123:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 124:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 125:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:ThirdParty/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 129:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
ARM GAS  /tmp/ccx1vdif.s 			page 149


 130:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 131:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 133:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 134:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 135:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 136:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:ThirdParty/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 140:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 142:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 144:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 145:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 146:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 147:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 151:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 153:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 155:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 158:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 159:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 160:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 162:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 166:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 168:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 170:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 173:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 174:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 175:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 176:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 177:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 181:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 183:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 185:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 186:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccx1vdif.s 			page 150


 187:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 189:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 193:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 195:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 197:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 198:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 199:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 200:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 201:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 205:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 207:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 209:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 212:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 213:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 214:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 215:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 219:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 221:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 223:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 226:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 227:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 228:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 229:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 233:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 235:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 237:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 240:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 241:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 242:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 243:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
ARM GAS  /tmp/ccx1vdif.s 			page 151


 244:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 247:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 249:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 251:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 254:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 255:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 256:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 258:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 262:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 264:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 266:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 269:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 270:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 271:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 272:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 273:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 277:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 279:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 281:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 282:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 283:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 285:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 289:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 291:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 293:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 294:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 295:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 296:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 297:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccx1vdif.s 			page 152


 301:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 303:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 305:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 308:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 309:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 310:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 312:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 316:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 318:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 320:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 323:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 324:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 325:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 326:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 327:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 331:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 333:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 335:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 336:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 337:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 339:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 343:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 345:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 347:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 348:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 349:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 350:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 352:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 356:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccx1vdif.s 			page 153


 358:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 360:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 363:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 364:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 365:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 366:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 370:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 372:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 374:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 375:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 376:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 377:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 378:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 382:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 3254              		.loc 13 382 31 view .LVU805
 3255              	.LBB1929:
 383:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 384:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 3256              		.loc 13 384 3 view .LVU806
 385:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 386:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 3257              		.loc 13 386 3 view .LVU807
 3258              		.syntax unified
 3259              	@ 386 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 3260 0006 EFF31085 		MRS r5, primask
 3261              	@ 0 "" 2
 3262              	.LVL271:
 387:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 3263              		.loc 13 387 3 view .LVU808
 3264              		.loc 13 387 3 is_stmt 0 view .LVU809
 3265              		.thumb
 3266              		.syntax unified
 3267              	.LBE1929:
 3268              	.LBE1928:
  33:./Drivers/STM32/stm32_system.h ****     return primask;
 3269              		.loc 12 33 5 is_stmt 1 view .LVU810
 3270              	.LBB1930:
 3271              	.LBI1930:
 140:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 3272              		.loc 13 140 27 view .LVU811
 3273              	.LBB1931:
 142:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 3274              		.loc 13 142 3 view .LVU812
 3275              		.syntax unified
 3276              	@ 142 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 3277 000a 72B6     		cpsid i
ARM GAS  /tmp/ccx1vdif.s 			page 154


 3278              	@ 0 "" 2
 3279              		.thumb
 3280              		.syntax unified
 3281              	.LBE1931:
 3282              	.LBE1930:
  34:./Drivers/STM32/stm32_system.h **** }
 3283              		.loc 12 34 5 view .LVU813
 3284              	.LBE1927:
 3285              	.LBE1926:
 3286              		.loc 12 56 58 is_stmt 0 view .LVU814
 3287 000c 0295     		str	r5, [sp, #8]
 3288 000e 0023     		movs	r3, #0
 3289 0010 8DF80C30 		strb	r3, [sp, #12]
 3290              	.LVL272:
 3291              		.loc 12 56 58 view .LVU815
 3292              	.LBE1925:
 3293              	.LBE1924:
 3294              	.LBE1923:
 3295              	.LBE1922:
  55:./Drivers/STM32/stm32_system.h ****     CriticalSectionContext() : mask_(cpu_enter_critical()) {}
 3296              		.loc 12 55 23 is_stmt 1 view .LVU816
 3297              	.LBB2002:
 186:MotorControl/foc.cpp ****         ctrl_timestamp_ = timestamp;
 3298              		.loc 3 186 9 view .LVU817
 3299              		.loc 3 186 25 is_stmt 0 view .LVU818
 3300 0014 4164     		str	r1, [r0, #68]
 187:MotorControl/foc.cpp ****         enable_current_control_ = enable_current_control_src_;
 3301              		.loc 3 187 9 is_stmt 1 view .LVU819
 3302              		.loc 3 187 35 is_stmt 0 view .LVU820
 3303 0016 037E     		ldrb	r3, [r0, #24]	@ zero_extendqisi2
 3304              		.loc 3 187 33 view .LVU821
 3305 0018 80F84830 		strb	r3, [r0, #72]
 188:MotorControl/foc.cpp ****         Idq_setpoint_ = Idq_setpoint_src_.present();
 3306              		.loc 3 188 9 is_stmt 1 view .LVU822
 3307              		.loc 3 188 51 is_stmt 0 view .LVU823
 3308 001c 00F11C01 		add	r1, r0, #28
 3309              	.LVL273:
 3310              		.loc 3 188 51 view .LVU824
 3311 0020 04A8     		add	r0, sp, #16
 3312              	.LVL274:
 3313              	.LEHB0:
 3314              		.loc 3 188 51 view .LVU825
 3315 0022 FFF7FEFF 		bl	_ZN9InputPortISt4pairIffEE7presentEv
 3316              	.LVL275:
 3317              	.LBB1932:
 3318              	.LBI1932:
 658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : private _Optional_base<_Tp>,
 3319              		.loc 1 658 11 is_stmt 1 discriminator 1 view .LVU826
 3320              	.LBB1933:
 3321              	.LBI1933:
 628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3322              		.loc 1 628 23 discriminator 1 view .LVU827
 3323              	.LBB1934:
 3324              	.LBI1934:
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 3325              		.loc 1 377 7 discriminator 1 view .LVU828
 3326              	.LBB1935:
ARM GAS  /tmp/ccx1vdif.s 			page 155


 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 3327              		.loc 1 381 22 is_stmt 0 discriminator 1 view .LVU829
 3328 0026 04F14C03 		add	r3, r4, #76
 3329              	.LVL276:
 3330              	.LBB1936:
 3331              	.LBI1936:
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 3332              		.loc 1 179 7 is_stmt 1 discriminator 1 view .LVU830
 3333              	.LBB1937:
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 3334              		.loc 1 183 12 is_stmt 0 discriminator 1 view .LVU831
 3335 002a 94F85420 		ldrb	r2, [r4, #84]	@ zero_extendqisi2
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 3336              		.loc 1 183 2 discriminator 1 view .LVU832
 3337 002e 3AB1     		cbz	r2, .L114
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 3338              		.loc 1 183 34 view .LVU833
 3339 0030 9DF81810 		ldrb	r1, [sp, #24]	@ zero_extendqisi2
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 3340              		.loc 1 183 23 view .LVU834
 3341 0034 21B1     		cbz	r1, .L114
 3342              	.LVL277:
 3343              	.LBB1938:
 3344              	.LBI1938:
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 3345              		.loc 4 401 7 is_stmt 1 view .LVU835
 3346              	.LBB1939:
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 3347              		.loc 4 408 8 is_stmt 0 view .LVU836
 3348 0036 049A     		ldr	r2, [sp, #16]	@ float
 3349 0038 E264     		str	r2, [r4, #76]	@ float
 3350              		.loc 4 409 9 view .LVU837
 3351 003a 059A     		ldr	r2, [sp, #20]	@ float
 3352 003c 5A60     		str	r2, [r3, #4]	@ float
 410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return *this;
 3353              		.loc 4 410 10 view .LVU838
 3354 003e 09E0     		b	.L115
 3355              	.LVL278:
 3356              	.L114:
 3357              		.loc 4 410 10 view .LVU839
 3358              	.LBE1939:
 3359              	.LBE1938:
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 3360              		.loc 1 187 18 view .LVU840
 3361 0040 9DF81810 		ldrb	r1, [sp, #24]	@ zero_extendqisi2
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 3362              		.loc 1 187 6 view .LVU841
 3363 0044 61B1     		cbz	r1, .L116
 3364              	.LVL279:
 3365              	.LBB1940:
 3366              	.LBI1940:
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 3367              		.loc 1 247 9 is_stmt 1 view .LVU842
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 3368              		.loc 1 247 9 is_stmt 0 view .LVU843
 3369              	.LBE1940:
 3370              	.LBE1937:
ARM GAS  /tmp/ccx1vdif.s 			page 156


 3371              	.LBE1936:
 3372              	.LBE1935:
 3373              	.LBE1934:
 3374              	.LBE1933:
 3375              	.LBE1932:
 3376              	.LBE2002:
 3377              		.loc 6 175 3 is_stmt 1 view .LVU844
 3378              	.LBB2003:
 3379              	.LBB1957:
 3380              	.LBB1955:
 3381              	.LBB1953:
 3382              	.LBB1951:
 3383              	.LBB1949:
 3384              	.LBB1947:
 3385              	.LBB1942:
 3386              	.LBB1941:
 3387              		.loc 6 175 3 is_stmt 0 view .LVU845
 3388 0046 04AA     		add	r2, sp, #16
 3389              	.LVL280:
 3390              		.loc 6 175 3 view .LVU846
 3391 0048 92E80300 		ldm	r2, {r0, r1}
 3392 004c 83E80300 		stm	r3, {r0, r1}
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         }
 3393              		.loc 1 252 28 view .LVU847
 3394 0050 0122     		movs	r2, #1
 3395              	.LVL281:
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         }
 3396              		.loc 1 252 28 view .LVU848
 3397 0052 1A72     		strb	r2, [r3, #8]
 3398              	.LVL282:
 3399              	.L115:
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         }
 3400              		.loc 1 252 28 view .LVU849
 3401              	.LBE1941:
 3402              	.LBE1942:
 3403              	.LBE1947:
 3404              	.LBE1949:
 3405              	.LBE1951:
 3406              	.LBE1953:
 3407              	.LBE1955:
 3408              	.LBE1957:
 189:MotorControl/foc.cpp ****         Vdq_setpoint_ = Vdq_setpoint_src_.present();
 3409              		.loc 3 189 9 is_stmt 1 view .LVU850
 3410              		.loc 3 189 51 is_stmt 0 view .LVU851
 3411 0054 04F12801 		add	r1, r4, #40
 3412 0058 07A8     		add	r0, sp, #28
 3413 005a FFF7FEFF 		bl	_ZN9InputPortISt4pairIffEE7presentEv
 3414              	.LVL283:
 3415 005e 04E0     		b	.L124
 3416              	.LVL284:
 3417              	.L116:
 3418              	.LBB1958:
 3419              	.LBB1956:
 3420              	.LBB1954:
 3421              	.LBB1952:
 3422              	.LBB1950:
 3423              	.LBB1948:
ARM GAS  /tmp/ccx1vdif.s 			page 157


 3424              	.LBB1943:
 3425              	.LBI1943:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 3426              		.loc 1 276 7 is_stmt 1 view .LVU852
 3427              	.LBB1944:
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 3428              		.loc 1 278 2 is_stmt 0 view .LVU853
 3429 0060 002A     		cmp	r2, #0
 3430 0062 F7D0     		beq	.L115
 3431              	.LVL285:
 3432              	.LBB1945:
 3433              	.LBI1945:
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 3434              		.loc 1 256 7 is_stmt 1 view .LVU854
 3435              	.LBB1946:
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 3436              		.loc 1 258 13 is_stmt 0 view .LVU855
 3437 0064 0022     		movs	r2, #0
 3438 0066 1A72     		strb	r2, [r3, #8]
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3439              		.loc 1 260 7 view .LVU856
 3440 0068 F4E7     		b	.L115
 3441              	.LVL286:
 3442              	.L124:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3443              		.loc 1 260 7 view .LVU857
 3444              	.LBE1946:
 3445              	.LBE1945:
 3446              	.LBE1944:
 3447              	.LBE1943:
 3448              	.LBE1948:
 3449              	.LBE1950:
 3450              	.LBE1952:
 3451              	.LBE1954:
 3452              	.LBE1956:
 3453              	.LBE1958:
 3454              	.LBB1959:
 3455              	.LBI1959:
 658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : private _Optional_base<_Tp>,
 3456              		.loc 1 658 11 is_stmt 1 discriminator 1 view .LVU858
 3457              	.LBB1960:
 3458              	.LBI1960:
 628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3459              		.loc 1 628 23 discriminator 1 view .LVU859
 3460              	.LBB1961:
 3461              	.LBI1961:
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 3462              		.loc 1 377 7 discriminator 1 view .LVU860
 3463              	.LBB1962:
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 3464              		.loc 1 381 22 is_stmt 0 discriminator 1 view .LVU861
 3465 006a 04F15803 		add	r3, r4, #88
 3466              	.LVL287:
 3467              	.LBB1963:
 3468              	.LBI1963:
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 3469              		.loc 1 179 7 is_stmt 1 discriminator 1 view .LVU862
ARM GAS  /tmp/ccx1vdif.s 			page 158


 3470              	.LBB1964:
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 3471              		.loc 1 183 12 is_stmt 0 discriminator 1 view .LVU863
 3472 006e 94F86020 		ldrb	r2, [r4, #96]	@ zero_extendqisi2
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 3473              		.loc 1 183 2 discriminator 1 view .LVU864
 3474 0072 3AB1     		cbz	r2, .L117
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 3475              		.loc 1 183 34 view .LVU865
 3476 0074 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 3477              		.loc 1 183 23 view .LVU866
 3478 0078 21B1     		cbz	r1, .L117
 3479              	.LVL288:
 3480              	.LBB1965:
 3481              	.LBI1965:
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 3482              		.loc 4 401 7 is_stmt 1 view .LVU867
 3483              	.LBB1966:
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 3484              		.loc 4 408 8 is_stmt 0 view .LVU868
 3485 007a 079A     		ldr	r2, [sp, #28]	@ float
 3486 007c A265     		str	r2, [r4, #88]	@ float
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return *this;
 3487              		.loc 4 409 9 view .LVU869
 3488 007e 089A     		ldr	r2, [sp, #32]	@ float
 3489 0080 5A60     		str	r2, [r3, #4]	@ float
 3490              		.loc 4 410 10 view .LVU870
 3491 0082 09E0     		b	.L118
 3492              	.LVL289:
 3493              	.L117:
 3494              		.loc 4 410 10 view .LVU871
 3495              	.LBE1966:
 3496              	.LBE1965:
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 3497              		.loc 1 187 18 view .LVU872
 3498 0084 9DF82410 		ldrb	r1, [sp, #36]	@ zero_extendqisi2
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 3499              		.loc 1 187 6 view .LVU873
 3500 0088 61B1     		cbz	r1, .L119
 3501              	.LVL290:
 3502              	.LBB1967:
 3503              	.LBI1967:
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 3504              		.loc 1 247 9 is_stmt 1 view .LVU874
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 3505              		.loc 1 247 9 is_stmt 0 view .LVU875
 3506              	.LBE1967:
 3507              	.LBE1964:
 3508              	.LBE1963:
 3509              	.LBE1962:
 3510              	.LBE1961:
 3511              	.LBE1960:
 3512              	.LBE1959:
 3513              	.LBE2003:
 3514              		.loc 6 175 3 is_stmt 1 view .LVU876
 3515              	.LBB2004:
ARM GAS  /tmp/ccx1vdif.s 			page 159


 3516              	.LBB1984:
 3517              	.LBB1982:
 3518              	.LBB1980:
 3519              	.LBB1978:
 3520              	.LBB1976:
 3521              	.LBB1974:
 3522              	.LBB1969:
 3523              	.LBB1968:
 3524              		.loc 6 175 3 is_stmt 0 view .LVU877
 3525 008a 07AA     		add	r2, sp, #28
 3526              	.LVL291:
 3527              		.loc 6 175 3 view .LVU878
 3528 008c 92E80300 		ldm	r2, {r0, r1}
 3529 0090 83E80300 		stm	r3, {r0, r1}
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         }
 3530              		.loc 1 252 28 view .LVU879
 3531 0094 0122     		movs	r2, #1
 3532              	.LVL292:
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         }
 3533              		.loc 1 252 28 view .LVU880
 3534 0096 1A72     		strb	r2, [r3, #8]
 3535              	.LVL293:
 3536              	.L118:
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         }
 3537              		.loc 1 252 28 view .LVU881
 3538              	.LBE1968:
 3539              	.LBE1969:
 3540              	.LBE1974:
 3541              	.LBE1976:
 3542              	.LBE1978:
 3543              	.LBE1980:
 3544              	.LBE1982:
 3545              	.LBE1984:
 190:MotorControl/foc.cpp ****         phase_ = phase_src_.present();
 3546              		.loc 3 190 9 is_stmt 1 view .LVU882
 3547              		.loc 3 190 37 is_stmt 0 view .LVU883
 3548 0098 04F13401 		add	r1, r4, #52
 3549 009c 6846     		mov	r0, sp
 3550 009e FFF7FEFF 		bl	_ZN9InputPortIfE7presentEv
 3551              	.LVL294:
 3552 00a2 04E0     		b	.L125
 3553              	.LVL295:
 3554              	.L119:
 3555              	.LBB1985:
 3556              	.LBB1983:
 3557              	.LBB1981:
 3558              	.LBB1979:
 3559              	.LBB1977:
 3560              	.LBB1975:
 3561              	.LBB1970:
 3562              	.LBI1970:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 3563              		.loc 1 276 7 is_stmt 1 view .LVU884
 3564              	.LBB1971:
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 3565              		.loc 1 278 2 is_stmt 0 view .LVU885
 3566 00a4 002A     		cmp	r2, #0
ARM GAS  /tmp/ccx1vdif.s 			page 160


 3567 00a6 F7D0     		beq	.L118
 3568              	.LVL296:
 3569              	.LBB1972:
 3570              	.LBI1972:
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 3571              		.loc 1 256 7 is_stmt 1 view .LVU886
 3572              	.LBB1973:
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 3573              		.loc 1 258 13 is_stmt 0 view .LVU887
 3574 00a8 0022     		movs	r2, #0
 3575 00aa 1A72     		strb	r2, [r3, #8]
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3576              		.loc 1 260 7 view .LVU888
 3577 00ac F4E7     		b	.L118
 3578              	.LVL297:
 3579              	.L125:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3580              		.loc 1 260 7 view .LVU889
 3581              	.LBE1973:
 3582              	.LBE1972:
 3583              	.LBE1971:
 3584              	.LBE1970:
 3585              	.LBE1975:
 3586              	.LBE1977:
 3587              	.LBE1979:
 3588              	.LBE1981:
 3589              	.LBE1983:
 3590              	.LBE1985:
 3591              		.loc 3 190 37 view .LVU890
 3592 00ae 04F16403 		add	r3, r4, #100
 3593 00b2 6A46     		mov	r2, sp
 3594 00b4 92E80300 		ldm	r2, {r0, r1}
 3595 00b8 83E80300 		stm	r3, {r0, r1}
 191:MotorControl/foc.cpp ****         phase_vel_ = phase_vel_src_.present();
 3596              		.loc 3 191 9 is_stmt 1 view .LVU891
 3597              		.loc 3 191 45 is_stmt 0 view .LVU892
 3598 00bc 04F13C01 		add	r1, r4, #60
 3599 00c0 1046     		mov	r0, r2
 3600 00c2 FFF7FEFF 		bl	_ZN9InputPortIfE7presentEv
 3601              	.LVL298:
 3602              	.LEHE0:
 3603 00c6 6C34     		adds	r4, r4, #108
 3604              	.LVL299:
 3605              		.loc 3 191 45 view .LVU893
 3606 00c8 6B46     		mov	r3, sp
 3607 00ca 93E80300 		ldm	r3, {r0, r1}
 3608 00ce 84E80300 		stm	r4, {r0, r1}
 3609              	.LVL300:
 3610              	.LBB1986:
 3611              	.LBI1986:
  57:./Drivers/STM32/stm32_system.h ****     ~CriticalSectionContext() { cpu_exit_critical(mask_); }
 3612              		.loc 12 57 5 is_stmt 1 view .LVU894
 3613              	.LBB1987:
 3614              		.loc 12 57 33 view .LVU895
 3615              	.LBB1988:
 3616              	.LBI1988:
  37:./Drivers/STM32/stm32_system.h ****     __set_PRIMASK(priority_mask);
ARM GAS  /tmp/ccx1vdif.s 			page 161


 3617              		.loc 12 37 20 view .LVU896
 3618              	.LBE1988:
 3619              	.LBE1987:
 3620              	.LBE1986:
 3621              	.LBE2004:
  38:./Drivers/STM32/stm32_system.h **** }
 3622              		.loc 12 38 5 view .LVU897
 3623              	.LBB2005:
 3624              	.LBB1993:
 3625              	.LBB1992:
 3626              	.LBB1991:
 3627              	.LBB1989:
 3628              	.LBI1989:
 388:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 389:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 390:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 391:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 393:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 397:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 399:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 401:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 404:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 405:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 406:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 407:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 408:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 412:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 3629              		.loc 13 412 27 view .LVU898
 3630              	.LBB1990:
 413:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 414:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 3631              		.loc 13 414 3 view .LVU899
 3632              		.syntax unified
 3633              	@ 414 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 3634 00d2 85F31088 		MSR primask, r5
 3635              	@ 0 "" 2
 3636              	.LVL301:
 3637              		.loc 13 414 3 is_stmt 0 view .LVU900
 3638              		.thumb
 3639              		.syntax unified
 3640              	.LBE1990:
 3641              	.LBE1989:
 3642              	.LBE1991:
 3643              	.LBE1992:
 3644              	.LBE1993:
 3645              	.LBE2005:
ARM GAS  /tmp/ccx1vdif.s 			page 162


 192:MotorControl/foc.cpp ****     }
 193:MotorControl/foc.cpp **** }
 3646              		.loc 3 193 1 view .LVU901
 3647 00d6 0BB0     		add	sp, sp, #44
 3648              	.LCFI31:
 3649              		.cfi_remember_state
 3650              		.cfi_def_cfa_offset 12
 3651              		@ sp needed
 3652 00d8 30BD     		pop	{r4, r5, pc}
 3653              	.LVL302:
 3654              	.L121:
 3655              	.LCFI32:
 3656              		.cfi_restore_state
 3657              	.LBB2006:
 3658              	.LBB1994:
 3659              	.LBI1994:
 3660              		.loc 12 57 5 is_stmt 1 view .LVU902
 3661              	.LBB1995:
 3662              		.loc 12 57 33 view .LVU903
 3663              	.LBB1996:
 3664              	.LBI1996:
  37:./Drivers/STM32/stm32_system.h ****     __set_PRIMASK(priority_mask);
 3665              		.loc 12 37 20 view .LVU904
 3666              	.LBE1996:
 3667              	.LBE1995:
 3668              	.LBE1994:
 3669              	.LBE2006:
  38:./Drivers/STM32/stm32_system.h **** }
 3670              		.loc 12 38 5 view .LVU905
 3671              	.LBB2007:
 3672              	.LBB2001:
 3673              	.LBB2000:
 3674              	.LBB1999:
 3675              	.LBB1997:
 3676              	.LBI1997:
 412:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 3677              		.loc 13 412 27 view .LVU906
 3678              	.LBB1998:
 3679              		.loc 13 414 3 view .LVU907
 3680              		.syntax unified
 3681              	@ 414 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 3682 00da 85F31088 		MSR primask, r5
 3683              	@ 0 "" 2
 3684              	.LVL303:
 3685              	.LEHB1:
 3686              		.loc 13 414 3 is_stmt 0 view .LVU908
 3687              		.thumb
 3688              		.syntax unified
 3689 00de FFF7FEFF 		bl	__cxa_end_cleanup
 3690              	.LVL304:
 3691              	.LEHE1:
 3692              	.LBE1998:
 3693              	.LBE1997:
 3694              	.LBE1999:
 3695              	.LBE2000:
 3696              	.LBE2001:
 3697              	.LBE2007:
ARM GAS  /tmp/ccx1vdif.s 			page 163


 3698              		.cfi_endproc
 3699              	.LFE4350:
 3700              		.global	__gxx_personality_v0
 3701              		.personality	__gxx_personality_v0
 3702              		.handlerdata
 3703              	.LLSDA4350:
 3704 0008 FF       		.byte	0xff
 3705 0009 FF       		.byte	0xff
 3706 000a 01       		.byte	0x1
 3707 000b 0B       		.uleb128 .LLSDACSE4350-.LLSDACSB4350
 3708              	.LLSDACSB4350:
 3709 000c 22       		.uleb128 .LEHB0-.LFB4350
 3710 000d A401     		.uleb128 .LEHE0-.LEHB0
 3711 000f DA01     		.uleb128 .L121-.LFB4350
 3712 0011 00       		.uleb128 0
 3713 0012 DE01     		.uleb128 .LEHB1-.LFB4350
 3714 0014 04       		.uleb128 .LEHE1-.LEHB1
 3715 0015 00       		.uleb128 0
 3716 0016 00       		.uleb128 0
 3717              	.LLSDACSE4350:
 3718              		.section	.text._ZN23FieldOrientedController6updateEm
 3719              		.fnend
 3721              		.thumb_set .LTHUNK2,_ZN23FieldOrientedController6updateEm
 3722              		.section	.text._ZThn4_N23FieldOrientedController6updateEm,"ax",%progbits
 3723              		.align	1
 3724              		.global	_ZThn4_N23FieldOrientedController6updateEm
 3725              		.syntax unified
 3726              		.thumb
 3727              		.thumb_func
 3729              	_ZThn4_N23FieldOrientedController6updateEm:
 3730              		.fnstart
 3731              	.LFB4975:
 3732              		.file 14 "MotorControl/foc.hpp"
   1:MotorControl/foc.hpp **** #ifndef __FOC_HPP
   2:MotorControl/foc.hpp **** #define __FOC_HPP
   3:MotorControl/foc.hpp **** 
   4:MotorControl/foc.hpp **** #include "phase_control_law.hpp"
   5:MotorControl/foc.hpp **** #include "component.hpp"
   6:MotorControl/foc.hpp **** 
   7:MotorControl/foc.hpp **** /**
   8:MotorControl/foc.hpp ****  * @brief Field oriented controller.
   9:MotorControl/foc.hpp ****  * 
  10:MotorControl/foc.hpp ****  * This controller can run in either current control mode or voltage control
  11:MotorControl/foc.hpp ****  * mode.
  12:MotorControl/foc.hpp ****  */
  13:MotorControl/foc.hpp **** class FieldOrientedController : public AlphaBetaFrameController, public ComponentBase {
  14:MotorControl/foc.hpp **** public:
  15:MotorControl/foc.hpp ****     void update(uint32_t timestamp) final;
 3733              		.loc 14 15 10 is_stmt 1 view -0
 3734              		.cfi_startproc
 3735              		@ args = 0, pretend = 0, frame = 0
 3736              		@ frame_needed = 0, uses_anonymous_args = 0
 3737 0000 A0F10400 		sub	r0, r0, #4
 3738 0004 FFF7FEBF 		b	.LTHUNK2
 3739              		.cfi_endproc
 3740              	.LFE4975:
 3741              		.fnend
ARM GAS  /tmp/ccx1vdif.s 			page 164


 3743              		.weak	_ZTSSt19bad_optional_access
 3744              		.section	.rodata._ZTSSt19bad_optional_access,"aG",%progbits,_ZTSSt19bad_optional_access,comdat
 3745              		.align	2
 3748              	_ZTSSt19bad_optional_access:
 3749 0000 53743139 		.ascii	"St19bad_optional_access\000"
 3749      6261645F 
 3749      6F707469 
 3749      6F6E616C 
 3749      5F616363 
 3750              		.weak	_ZTISt19bad_optional_access
 3751              		.section	.rodata._ZTISt19bad_optional_access,"aG",%progbits,_ZTISt19bad_optional_access,comdat
 3752              		.align	2
 3755              	_ZTISt19bad_optional_access:
 3756 0000 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 3757 0004 00000000 		.word	_ZTSSt19bad_optional_access
 3758 0008 00000000 		.word	_ZTISt9exception
 3759              		.weak	_ZTSSt18bad_variant_access
 3760              		.section	.rodata._ZTSSt18bad_variant_access,"aG",%progbits,_ZTSSt18bad_variant_access,comdat
 3761              		.align	2
 3764              	_ZTSSt18bad_variant_access:
 3765 0000 53743138 		.ascii	"St18bad_variant_access\000"
 3765      6261645F 
 3765      76617269 
 3765      616E745F 
 3765      61636365 
 3766              		.weak	_ZTISt18bad_variant_access
 3767              		.section	.rodata._ZTISt18bad_variant_access,"aG",%progbits,_ZTISt18bad_variant_access,comdat
 3768              		.align	2
 3771              	_ZTISt18bad_variant_access:
 3772 0000 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 3773 0004 00000000 		.word	_ZTSSt18bad_variant_access
 3774 0008 00000000 		.word	_ZTISt9exception
 3775              		.weak	_ZTS15PhaseControlLawILj3EE
 3776              		.section	.rodata._ZTS15PhaseControlLawILj3EE,"aG",%progbits,_ZTS15PhaseControlLawILj3EE,comdat
 3777              		.align	2
 3780              	_ZTS15PhaseControlLawILj3EE:
 3781 0000 31355068 		.ascii	"15PhaseControlLawILj3EE\000"
 3781      61736543 
 3781      6F6E7472 
 3781      6F6C4C61 
 3781      77494C6A 
 3782              		.weak	_ZTI15PhaseControlLawILj3EE
 3783              		.section	.rodata._ZTI15PhaseControlLawILj3EE,"aG",%progbits,_ZTI15PhaseControlLawILj3EE,comdat
 3784              		.align	2
 3787              	_ZTI15PhaseControlLawILj3EE:
 3788 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 3789 0004 00000000 		.word	_ZTS15PhaseControlLawILj3EE
 3790              		.global	_ZTS24AlphaBetaFrameController
 3791              		.global	_ZTI24AlphaBetaFrameController
 3792              		.weak	_ZTS13ComponentBase
 3793              		.section	.rodata._ZTS13ComponentBase,"aG",%progbits,_ZTS13ComponentBase,comdat
 3794              		.align	2
 3797              	_ZTS13ComponentBase:
 3798 0000 3133436F 		.ascii	"13ComponentBase\000"
 3798      6D706F6E 
 3798      656E7442 
 3798      61736500 
ARM GAS  /tmp/ccx1vdif.s 			page 165


 3799              		.weak	_ZTI13ComponentBase
 3800              		.section	.rodata._ZTI13ComponentBase,"aG",%progbits,_ZTI13ComponentBase,comdat
 3801              		.align	2
 3804              	_ZTI13ComponentBase:
 3805 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 3806 0004 00000000 		.word	_ZTS13ComponentBase
 3807              		.global	_ZTS23FieldOrientedController
 3808              		.global	_ZTI23FieldOrientedController
 3809              		.weak	_ZTVSt19bad_optional_access
 3810              		.section	.rodata._ZTVSt19bad_optional_access,"aG",%progbits,_ZTVSt19bad_optional_access,comdat
 3811              		.align	2
 3814              	_ZTVSt19bad_optional_access:
 3815 0000 00000000 		.word	0
 3816 0004 00000000 		.word	_ZTISt19bad_optional_access
 3817 0008 00000000 		.word	_ZNSt19bad_optional_accessD1Ev
 3818 000c 00000000 		.word	_ZNSt19bad_optional_accessD0Ev
 3819 0010 00000000 		.word	_ZNKSt19bad_optional_access4whatEv
 3820              		.weak	_ZTVSt18bad_variant_access
 3821              		.section	.rodata._ZTVSt18bad_variant_access,"aG",%progbits,_ZTVSt18bad_variant_access,comdat
 3822              		.align	2
 3825              	_ZTVSt18bad_variant_access:
 3826 0000 00000000 		.word	0
 3827 0004 00000000 		.word	_ZTISt18bad_variant_access
 3828 0008 00000000 		.word	_ZNSt18bad_variant_accessD1Ev
 3829 000c 00000000 		.word	_ZNSt18bad_variant_accessD0Ev
 3830 0010 00000000 		.word	_ZNKSt18bad_variant_access4whatEv
 3831              		.global	_ZTV24AlphaBetaFrameController
 3832              		.global	_ZTV23FieldOrientedController
 3833              		.section	.rodata._ZTI23FieldOrientedController,"a"
 3834              		.align	2
 3837              	_ZTI23FieldOrientedController:
 3838 0000 08000000 		.word	_ZTVN10__cxxabiv121__vmi_class_type_infoE+8
 3839 0004 00000000 		.word	_ZTS23FieldOrientedController
 3840 0008 00000000 		.word	0
 3841 000c 02000000 		.word	2
 3842 0010 00000000 		.word	_ZTI24AlphaBetaFrameController
 3843 0014 02000000 		.word	2
 3844 0018 00000000 		.word	_ZTI13ComponentBase
 3845 001c 02040000 		.word	1026
 3846              		.section	.rodata._ZTI24AlphaBetaFrameController,"a"
 3847              		.align	2
 3850              	_ZTI24AlphaBetaFrameController:
 3851 0000 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 3852 0004 00000000 		.word	_ZTS24AlphaBetaFrameController
 3853 0008 00000000 		.word	_ZTI15PhaseControlLawILj3EE
 3854              		.section	.rodata._ZTS23FieldOrientedController,"a"
 3855              		.align	2
 3858              	_ZTS23FieldOrientedController:
 3859 0000 32334669 		.ascii	"23FieldOrientedController\000"
 3859      656C644F 
 3859      7269656E 
 3859      74656443 
 3859      6F6E7472 
 3860              		.section	.rodata._ZTS24AlphaBetaFrameController,"a"
 3861              		.align	2
 3864              	_ZTS24AlphaBetaFrameController:
 3865 0000 3234416C 		.ascii	"24AlphaBetaFrameController\000"
ARM GAS  /tmp/ccx1vdif.s 			page 166


 3865      70686142 
 3865      65746146 
 3865      72616D65 
 3865      436F6E74 
 3866              		.section	.rodata._ZTV23FieldOrientedController,"a"
 3867              		.align	2
 3870              	_ZTV23FieldOrientedController:
 3871 0000 00000000 		.word	0
 3872 0004 00000000 		.word	_ZTI23FieldOrientedController
 3873 0008 00000000 		.word	_ZN23FieldOrientedController5resetEv
 3874 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 3875 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 3876 0014 00000000 		.word	_ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 3877 0018 00000000 		.word	_ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
 3878 001c 00000000 		.word	_ZN23FieldOrientedController6updateEm
 3879 0020 FCFFFFFF 		.word	-4
 3880 0024 00000000 		.word	_ZTI23FieldOrientedController
 3881 0028 00000000 		.word	_ZThn4_N23FieldOrientedController6updateEm
 3882              		.section	.rodata._ZTV24AlphaBetaFrameController,"a"
 3883              		.align	2
 3886              	_ZTV24AlphaBetaFrameController:
 3887 0000 00000000 		.word	0
 3888 0004 00000000 		.word	_ZTI24AlphaBetaFrameController
 3889 0008 00000000 		.word	__cxa_pure_virtual
 3890 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 3891 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 3892 0014 00000000 		.word	__cxa_pure_virtual
 3893 0018 00000000 		.word	__cxa_pure_virtual
 3894              		.text
 3895              	.Letext0:
 3896              		.file 15 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/type_traits"
 3897              		.file 16 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v7e-m+fp/har
 3898              		.file 17 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility"
 3899              		.file 18 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 3900              		.file 19 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/uses_allocator.h"
 3901              		.file 20 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 3902              		.file 21 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 3903              		.file 22 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/enable_special_members.h"
 3904              		.file 23 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdlib"
 3905              		.file 24 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 3906              		.file 25 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/functional"
 3907              		.file 26 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstring"
 3908              		.file 27 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/parse_numbers.h"
 3909              		.file 28 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array"
 3910              		.file 29 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/tuple"
 3911              		.file 30 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h"
 3912              		.file 31 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 3913              		.file 32 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 3914              		.file 33 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdlib.h"
 3915              		.file 34 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/math.h"
 3916              		.file 35 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 3917              		.file 36 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/string.h"
 3918              		.file 37 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 3919              		.file 38 "fibre-cpp/include/fibre/cpp_utils.hpp"
 3920              		.file 39 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/math.h"
 3921              		.file 40 "MotorControl/phase_control_law.hpp"
 3922              		.file 41 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/pstl/execution_defs.h"
ARM GAS  /tmp/ccx1vdif.s 			page 167


 3923              		.file 42 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_function.h"
 3924              		.file 43 "Board/v3/Inc/board.h"
 3925              		.file 44 "<built-in>"
 3926              		.file 45 "./autogen/interfaces.hpp"
ARM GAS  /tmp/ccx1vdif.s 			page 168


DEFINED SYMBOLS
                            *ABS*:0000000000000000 foc.cpp
     /tmp/ccx1vdif.s:20     .rodata._ZNKSt19bad_optional_access4whatEv.str1.4:0000000000000000 $d
     /tmp/ccx1vdif.s:24     .text._ZNKSt19bad_optional_access4whatEv:0000000000000000 $t
     /tmp/ccx1vdif.s:30     .text._ZNKSt19bad_optional_access4whatEv:0000000000000000 _ZNKSt19bad_optional_access4whatEv
     /tmp/ccx1vdif.s:49     .text._ZNKSt19bad_optional_access4whatEv:0000000000000004 $d
.ARM.exidx.text._ZNKSt19bad_optional_access4whatEv:0000000000000000 $d
     /tmp/ccx1vdif.s:56     .text._ZNKSt18bad_variant_access4whatEv:0000000000000000 $t
     /tmp/ccx1vdif.s:62     .text._ZNKSt18bad_variant_access4whatEv:0000000000000000 _ZNKSt18bad_variant_access4whatEv
.ARM.exidx.text._ZNKSt18bad_variant_access4whatEv:0000000000000000 $d
     /tmp/ccx1vdif.s:84     .text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:0000000000000000 $t
     /tmp/ccx1vdif.s:90     .text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:0000000000000000 _ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
     /tmp/ccx1vdif.s:242    .text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:0000000000000074 $d
.ARM.exidx.text._ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm:0000000000000000 $d
     /tmp/ccx1vdif.s:248    .text._ZN23FieldOrientedController5resetEv:0000000000000000 $t
     /tmp/ccx1vdif.s:254    .text._ZN23FieldOrientedController5resetEv:0000000000000000 _ZN23FieldOrientedController5resetEv
.ARM.exidx.text._ZN23FieldOrientedController5resetEv:0000000000000000 $d
     /tmp/ccx1vdif.s:347    .text._ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $t
     /tmp/ccx1vdif.s:353    .text._ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 _ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm
.ARM.exidx.text._ZN23FieldOrientedController14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $d
     /tmp/ccx1vdif.s:530    .text._ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE:0000000000000000 $t
     /tmp/ccx1vdif.s:536    .text._ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE:0000000000000000 _ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
.ARM.exidx.text._ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE:0000000000000000 $d
     /tmp/ccx1vdif.s:686    .text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $t
     /tmp/ccx1vdif.s:692    .text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 _ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
     /tmp/ccx1vdif.s:1663   .text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000364 $d
     /tmp/ccx1vdif.s:3814   .rodata._ZTVSt19bad_optional_access:0000000000000000 _ZTVSt19bad_optional_access
     /tmp/ccx1vdif.s:1683   .text._ZNSt19bad_optional_accessD2Ev:0000000000000000 _ZNSt19bad_optional_accessD1Ev
     /tmp/ccx1vdif.s:3755   .rodata._ZTISt19bad_optional_access:0000000000000000 _ZTISt19bad_optional_access
.ARM.extab.text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $d
.ARM.exidx.text._ZN23FieldOrientedController21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $d
     /tmp/ccx1vdif.s:1677   .text._ZNSt19bad_optional_accessD2Ev:0000000000000000 $t
     /tmp/ccx1vdif.s:1683   .text._ZNSt19bad_optional_accessD2Ev:0000000000000000 _ZNSt19bad_optional_accessD2Ev
     /tmp/ccx1vdif.s:1713   .text._ZNSt19bad_optional_accessD2Ev:0000000000000010 $d
.ARM.exidx.text._ZNSt19bad_optional_accessD2Ev:0000000000000000 $d
     /tmp/ccx1vdif.s:1722   .text._ZNSt18bad_variant_accessD2Ev:0000000000000000 $t
     /tmp/ccx1vdif.s:1728   .text._ZNSt18bad_variant_accessD2Ev:0000000000000000 _ZNSt18bad_variant_accessD2Ev
     /tmp/ccx1vdif.s:1758   .text._ZNSt18bad_variant_accessD2Ev:0000000000000010 $d
     /tmp/ccx1vdif.s:3825   .rodata._ZTVSt18bad_variant_access:0000000000000000 _ZTVSt18bad_variant_access
.ARM.exidx.text._ZNSt18bad_variant_accessD2Ev:0000000000000000 $d
     /tmp/ccx1vdif.s:1728   .text._ZNSt18bad_variant_accessD2Ev:0000000000000000 _ZNSt18bad_variant_accessD1Ev
     /tmp/ccx1vdif.s:1767   .text._ZNSt19bad_optional_accessD0Ev:0000000000000000 $t
     /tmp/ccx1vdif.s:1773   .text._ZNSt19bad_optional_accessD0Ev:0000000000000000 _ZNSt19bad_optional_accessD0Ev
     /tmp/ccx1vdif.s:1811   .text._ZNSt19bad_optional_accessD0Ev:0000000000000018 $d
.ARM.exidx.text._ZNSt19bad_optional_accessD0Ev:0000000000000000 $d
     /tmp/ccx1vdif.s:1818   .text._ZNSt18bad_variant_accessD0Ev:0000000000000000 $t
     /tmp/ccx1vdif.s:1824   .text._ZNSt18bad_variant_accessD0Ev:0000000000000000 _ZNSt18bad_variant_accessD0Ev
     /tmp/ccx1vdif.s:1862   .text._ZNSt18bad_variant_accessD0Ev:0000000000000018 $d
.ARM.exidx.text._ZNSt18bad_variant_accessD0Ev:0000000000000000 $d
     /tmp/ccx1vdif.s:1869   .text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 $t
     /tmp/ccx1vdif.s:1875   .text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 _ZSt26__throw_bad_variant_accessPKc
     /tmp/ccx1vdif.s:1928   .text._ZSt26__throw_bad_variant_accessPKc:000000000000001c $d
     /tmp/ccx1vdif.s:3771   .rodata._ZTISt18bad_variant_access:0000000000000000 _ZTISt18bad_variant_access
.ARM.exidx.text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 $d
     /tmp/ccx1vdif.s:1937   .rodata._ZSt26__throw_bad_variant_accessb.str1.4:0000000000000000 $d
     /tmp/ccx1vdif.s:1944   .text._ZSt26__throw_bad_variant_accessb:0000000000000000 $t
     /tmp/ccx1vdif.s:1950   .text._ZSt26__throw_bad_variant_accessb:0000000000000000 _ZSt26__throw_bad_variant_accessb
ARM GAS  /tmp/ccx1vdif.s 			page 169


     /tmp/ccx1vdif.s:1985   .text._ZSt26__throw_bad_variant_accessb:0000000000000010 $d
.ARM.extab.text._ZSt26__throw_bad_variant_accessb:0000000000000000 $d
.ARM.exidx.text._ZSt26__throw_bad_variant_accessb:0000000000000000 $d
     /tmp/ccx1vdif.s:1992   .text._ZN9InputPortISt4pairIffEE7presentEv:0000000000000000 $t
     /tmp/ccx1vdif.s:1998   .text._ZN9InputPortISt4pairIffEE7presentEv:0000000000000000 _ZN9InputPortISt4pairIffEE7presentEv
.ARM.extab.text._ZN9InputPortISt4pairIffEE7presentEv:0000000000000000 $d
.ARM.exidx.text._ZN9InputPortISt4pairIffEE7presentEv:0000000000000000 $d
     /tmp/ccx1vdif.s:2604   .text._ZN9InputPortIfE7presentEv:0000000000000000 $t
     /tmp/ccx1vdif.s:2610   .text._ZN9InputPortIfE7presentEv:0000000000000000 _ZN9InputPortIfE7presentEv
     /tmp/ccx1vdif.s:3198   .text._ZN9InputPortIfE7presentEv:0000000000000068 $d
.ARM.extab.text._ZN9InputPortIfE7presentEv:0000000000000000 $d
.ARM.exidx.text._ZN9InputPortIfE7presentEv:0000000000000000 $d
     /tmp/ccx1vdif.s:3210   .text._ZN23FieldOrientedController6updateEm:0000000000000000 $t
     /tmp/ccx1vdif.s:3216   .text._ZN23FieldOrientedController6updateEm:0000000000000000 _ZN23FieldOrientedController6updateEm
.ARM.extab.text._ZN23FieldOrientedController6updateEm:0000000000000000 $d
.ARM.exidx.text._ZN23FieldOrientedController6updateEm:0000000000000000 $d
     /tmp/ccx1vdif.s:3216   .text._ZN23FieldOrientedController6updateEm:0000000000000000 .LTHUNK2
     /tmp/ccx1vdif.s:3723   .text._ZThn4_N23FieldOrientedController6updateEm:0000000000000000 $t
     /tmp/ccx1vdif.s:3729   .text._ZThn4_N23FieldOrientedController6updateEm:0000000000000000 _ZThn4_N23FieldOrientedController6updateEm
.ARM.exidx.text._ZThn4_N23FieldOrientedController6updateEm:0000000000000000 $d
     /tmp/ccx1vdif.s:3748   .rodata._ZTSSt19bad_optional_access:0000000000000000 _ZTSSt19bad_optional_access
     /tmp/ccx1vdif.s:3745   .rodata._ZTSSt19bad_optional_access:0000000000000000 $d
     /tmp/ccx1vdif.s:3752   .rodata._ZTISt19bad_optional_access:0000000000000000 $d
     /tmp/ccx1vdif.s:3764   .rodata._ZTSSt18bad_variant_access:0000000000000000 _ZTSSt18bad_variant_access
     /tmp/ccx1vdif.s:3761   .rodata._ZTSSt18bad_variant_access:0000000000000000 $d
     /tmp/ccx1vdif.s:3768   .rodata._ZTISt18bad_variant_access:0000000000000000 $d
     /tmp/ccx1vdif.s:3780   .rodata._ZTS15PhaseControlLawILj3EE:0000000000000000 _ZTS15PhaseControlLawILj3EE
     /tmp/ccx1vdif.s:3777   .rodata._ZTS15PhaseControlLawILj3EE:0000000000000000 $d
     /tmp/ccx1vdif.s:3787   .rodata._ZTI15PhaseControlLawILj3EE:0000000000000000 _ZTI15PhaseControlLawILj3EE
     /tmp/ccx1vdif.s:3784   .rodata._ZTI15PhaseControlLawILj3EE:0000000000000000 $d
     /tmp/ccx1vdif.s:3864   .rodata._ZTS24AlphaBetaFrameController:0000000000000000 _ZTS24AlphaBetaFrameController
     /tmp/ccx1vdif.s:3850   .rodata._ZTI24AlphaBetaFrameController:0000000000000000 _ZTI24AlphaBetaFrameController
     /tmp/ccx1vdif.s:3797   .rodata._ZTS13ComponentBase:0000000000000000 _ZTS13ComponentBase
     /tmp/ccx1vdif.s:3794   .rodata._ZTS13ComponentBase:0000000000000000 $d
     /tmp/ccx1vdif.s:3804   .rodata._ZTI13ComponentBase:0000000000000000 _ZTI13ComponentBase
     /tmp/ccx1vdif.s:3801   .rodata._ZTI13ComponentBase:0000000000000000 $d
     /tmp/ccx1vdif.s:3858   .rodata._ZTS23FieldOrientedController:0000000000000000 _ZTS23FieldOrientedController
     /tmp/ccx1vdif.s:3837   .rodata._ZTI23FieldOrientedController:0000000000000000 _ZTI23FieldOrientedController
     /tmp/ccx1vdif.s:3811   .rodata._ZTVSt19bad_optional_access:0000000000000000 $d
     /tmp/ccx1vdif.s:3822   .rodata._ZTVSt18bad_variant_access:0000000000000000 $d
     /tmp/ccx1vdif.s:3886   .rodata._ZTV24AlphaBetaFrameController:0000000000000000 _ZTV24AlphaBetaFrameController
     /tmp/ccx1vdif.s:3870   .rodata._ZTV23FieldOrientedController:0000000000000000 _ZTV23FieldOrientedController
     /tmp/ccx1vdif.s:3834   .rodata._ZTI23FieldOrientedController:0000000000000000 $d
     /tmp/ccx1vdif.s:3847   .rodata._ZTI24AlphaBetaFrameController:0000000000000000 $d
     /tmp/ccx1vdif.s:3855   .rodata._ZTS23FieldOrientedController:0000000000000000 $d
     /tmp/ccx1vdif.s:3861   .rodata._ZTS24AlphaBetaFrameController:0000000000000000 $d
     /tmp/ccx1vdif.s:3867   .rodata._ZTV23FieldOrientedController:0000000000000000 $d
     /tmp/ccx1vdif.s:3883   .rodata._ZTV24AlphaBetaFrameController:0000000000000000 $d
                           .group:0000000000000000 _ZNSt19bad_optional_accessD5Ev
                           .group:0000000000000000 _ZNSt18bad_variant_accessD5Ev

UNDEFINED SYMBOLS
__aeabi_unwind_cpp_pr0
_Z3SVMff
our_arm_cos_f32
our_arm_sin_f32
sqrtf
ARM GAS  /tmp/ccx1vdif.s 			page 170


__cxa_allocate_exception
__cxa_throw
_ZTVSt9exception
__aeabi_unwind_cpp_pr1
_ZNSt9exceptionD2Ev
_ZdlPvj
__cxa_end_cleanup
__gxx_personality_v0
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTISt9exception
_ZTVN10__cxxabiv117__class_type_infoE
_ZTVN10__cxxabiv121__vmi_class_type_infoE
__cxa_pure_virtual
