ARM GAS  /tmp/cc4Zpja9.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	prvTaskIsTaskSuspended:
  26              	.LVL0:
  27              	.LFB15:
  28              		.file 1 "ThirdParty/FreeRTOS/Source/tasks.c"
   1:ThirdParty/FreeRTOS/Source/tasks.c **** /*
   2:ThirdParty/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:ThirdParty/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/Source/tasks.c ****  *
   5:ThirdParty/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:ThirdParty/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:ThirdParty/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:ThirdParty/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:ThirdParty/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:ThirdParty/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:ThirdParty/FreeRTOS/Source/tasks.c ****  *
  12:ThirdParty/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:ThirdParty/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:ThirdParty/FreeRTOS/Source/tasks.c ****  *
  15:ThirdParty/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:ThirdParty/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:ThirdParty/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:ThirdParty/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:ThirdParty/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:ThirdParty/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:ThirdParty/FreeRTOS/Source/tasks.c ****  *
  22:ThirdParty/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:ThirdParty/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:ThirdParty/FreeRTOS/Source/tasks.c ****  *
  25:ThirdParty/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:ThirdParty/FreeRTOS/Source/tasks.c ****  */
  27:ThirdParty/FreeRTOS/Source/tasks.c **** 
  28:ThirdParty/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:ThirdParty/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:ThirdParty/FreeRTOS/Source/tasks.c **** #include <string.h>
ARM GAS  /tmp/cc4Zpja9.s 			page 2


  31:ThirdParty/FreeRTOS/Source/tasks.c **** 
  32:ThirdParty/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:ThirdParty/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:ThirdParty/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:ThirdParty/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:ThirdParty/FreeRTOS/Source/tasks.c **** 
  37:ThirdParty/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:ThirdParty/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:ThirdParty/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:ThirdParty/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:ThirdParty/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:ThirdParty/FreeRTOS/Source/tasks.c **** 
  43:ThirdParty/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:ThirdParty/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:ThirdParty/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:ThirdParty/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:ThirdParty/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:ThirdParty/FreeRTOS/Source/tasks.c **** 
  49:ThirdParty/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:ThirdParty/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:ThirdParty/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:ThirdParty/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:ThirdParty/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:ThirdParty/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:ThirdParty/FreeRTOS/Source/tasks.c **** 
  59:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:ThirdParty/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:ThirdParty/FreeRTOS/Source/tasks.c **** #else
  64:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
  66:ThirdParty/FreeRTOS/Source/tasks.c **** 
  67:ThirdParty/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:ThirdParty/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:ThirdParty/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:ThirdParty/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:ThirdParty/FreeRTOS/Source/tasks.c **** 
  72:ThirdParty/FreeRTOS/Source/tasks.c **** /*
  73:ThirdParty/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:ThirdParty/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:ThirdParty/FreeRTOS/Source/tasks.c ****  */
  76:ThirdParty/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:ThirdParty/FreeRTOS/Source/tasks.c **** 
  78:ThirdParty/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:ThirdParty/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:ThirdParty/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:ThirdParty/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:ThirdParty/FreeRTOS/Source/tasks.c **** 
  83:ThirdParty/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:ThirdParty/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:ThirdParty/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:ThirdParty/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
ARM GAS  /tmp/cc4Zpja9.s 			page 3


  88:ThirdParty/FreeRTOS/Source/tasks.c **** #else
  89:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
  91:ThirdParty/FreeRTOS/Source/tasks.c **** 
  92:ThirdParty/FreeRTOS/Source/tasks.c **** /*
  93:ThirdParty/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:ThirdParty/FreeRTOS/Source/tasks.c ****  */
  95:ThirdParty/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:ThirdParty/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:ThirdParty/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:ThirdParty/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:ThirdParty/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:ThirdParty/FreeRTOS/Source/tasks.c **** 
 101:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 102:ThirdParty/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:ThirdParty/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 105:ThirdParty/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define static
 107:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 108:ThirdParty/FreeRTOS/Source/tasks.c **** 
 109:ThirdParty/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:ThirdParty/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:ThirdParty/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 114:ThirdParty/FreeRTOS/Source/tasks.c **** 
 115:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:ThirdParty/FreeRTOS/Source/tasks.c **** 
 117:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:ThirdParty/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:ThirdParty/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:ThirdParty/FreeRTOS/Source/tasks.c **** 
 121:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:ThirdParty/FreeRTOS/Source/tasks.c **** 	state task. */
 123:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:ThirdParty/FreeRTOS/Source/tasks.c **** 	{																									\
 125:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:ThirdParty/FreeRTOS/Source/tasks.c **** 		{																								\
 127:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:ThirdParty/FreeRTOS/Source/tasks.c **** 		}																								\
 129:ThirdParty/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:ThirdParty/FreeRTOS/Source/tasks.c **** 
 131:ThirdParty/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:ThirdParty/FreeRTOS/Source/tasks.c **** 
 133:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:ThirdParty/FreeRTOS/Source/tasks.c **** 	{																									\
 135:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:ThirdParty/FreeRTOS/Source/tasks.c **** 																										\
 137:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:ThirdParty/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:ThirdParty/FreeRTOS/Source/tasks.c **** 		{																								\
 140:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:ThirdParty/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:ThirdParty/FreeRTOS/Source/tasks.c **** 		}																								\
 143:ThirdParty/FreeRTOS/Source/tasks.c **** 																										\
 144:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
ARM GAS  /tmp/cc4Zpja9.s 			page 4


 145:ThirdParty/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:ThirdParty/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:ThirdParty/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:ThirdParty/FreeRTOS/Source/tasks.c **** 
 150:ThirdParty/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:ThirdParty/FreeRTOS/Source/tasks.c **** 
 152:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:ThirdParty/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:ThirdParty/FreeRTOS/Source/tasks.c **** 	being used. */
 155:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:ThirdParty/FreeRTOS/Source/tasks.c **** 
 158:ThirdParty/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:ThirdParty/FreeRTOS/Source/tasks.c **** 
 160:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:ThirdParty/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:ThirdParty/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:ThirdParty/FreeRTOS/Source/tasks.c **** 
 164:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:ThirdParty/FreeRTOS/Source/tasks.c **** 
 167:ThirdParty/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:ThirdParty/FreeRTOS/Source/tasks.c **** 
 169:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:ThirdParty/FreeRTOS/Source/tasks.c **** 	{																								\
 171:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:ThirdParty/FreeRTOS/Source/tasks.c **** 																									\
 173:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:ThirdParty/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:ThirdParty/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:ThirdParty/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:ThirdParty/FreeRTOS/Source/tasks.c **** 
 179:ThirdParty/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:ThirdParty/FreeRTOS/Source/tasks.c **** 
 181:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:ThirdParty/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:ThirdParty/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:ThirdParty/FreeRTOS/Source/tasks.c **** 	{																									\
 186:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:ThirdParty/FreeRTOS/Source/tasks.c **** 		{																								\
 188:ThirdParty/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:ThirdParty/FreeRTOS/Source/tasks.c **** 		}																								\
 190:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 191:ThirdParty/FreeRTOS/Source/tasks.c **** 
 192:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:ThirdParty/FreeRTOS/Source/tasks.c **** 
 194:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:ThirdParty/FreeRTOS/Source/tasks.c **** 
 196:ThirdParty/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:ThirdParty/FreeRTOS/Source/tasks.c **** count overflows. */
 198:ThirdParty/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:ThirdParty/FreeRTOS/Source/tasks.c **** {																									\
 200:ThirdParty/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:ThirdParty/FreeRTOS/Source/tasks.c **** 																									\
ARM GAS  /tmp/cc4Zpja9.s 			page 5


 202:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:ThirdParty/FreeRTOS/Source/tasks.c **** 																									\
 205:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:ThirdParty/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:ThirdParty/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:ThirdParty/FreeRTOS/Source/tasks.c **** }
 211:ThirdParty/FreeRTOS/Source/tasks.c **** 
 212:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:ThirdParty/FreeRTOS/Source/tasks.c **** 
 214:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 215:ThirdParty/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:ThirdParty/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 218:ThirdParty/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:ThirdParty/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:ThirdParty/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:ThirdParty/FreeRTOS/Source/tasks.c **** 
 225:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 226:ThirdParty/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:ThirdParty/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:ThirdParty/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:ThirdParty/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 231:ThirdParty/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:ThirdParty/FreeRTOS/Source/tasks.c **** 
 233:ThirdParty/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:ThirdParty/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:ThirdParty/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:ThirdParty/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:ThirdParty/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:ThirdParty/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:ThirdParty/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:ThirdParty/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:ThirdParty/FreeRTOS/Source/tasks.c **** #else
 244:ThirdParty/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 246:ThirdParty/FreeRTOS/Source/tasks.c **** 
 247:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 248:ThirdParty/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:ThirdParty/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:ThirdParty/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 252:ThirdParty/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:ThirdParty/FreeRTOS/Source/tasks.c **** {
 254:ThirdParty/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:ThirdParty/FreeRTOS/Source/tasks.c **** 
 256:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:ThirdParty/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  /tmp/cc4Zpja9.s 			page 6


 259:ThirdParty/FreeRTOS/Source/tasks.c **** 
 260:ThirdParty/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:ThirdParty/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:ThirdParty/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:ThirdParty/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:ThirdParty/FreeRTOS/Source/tasks.c **** 
 266:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:ThirdParty/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 269:ThirdParty/FreeRTOS/Source/tasks.c **** 
 270:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:ThirdParty/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 273:ThirdParty/FreeRTOS/Source/tasks.c **** 
 274:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:ThirdParty/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:ThirdParty/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 278:ThirdParty/FreeRTOS/Source/tasks.c **** 
 279:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:ThirdParty/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:ThirdParty/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 283:ThirdParty/FreeRTOS/Source/tasks.c **** 
 284:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:ThirdParty/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 287:ThirdParty/FreeRTOS/Source/tasks.c **** 
 288:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:ThirdParty/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 291:ThirdParty/FreeRTOS/Source/tasks.c **** 
 292:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:ThirdParty/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 295:ThirdParty/FreeRTOS/Source/tasks.c **** 
 296:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:ThirdParty/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:ThirdParty/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:ThirdParty/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:ThirdParty/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:ThirdParty/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:ThirdParty/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:ThirdParty/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 306:ThirdParty/FreeRTOS/Source/tasks.c **** 
 307:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:ThirdParty/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:ThirdParty/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 311:ThirdParty/FreeRTOS/Source/tasks.c **** 
 312:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:ThirdParty/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:ThirdParty/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
ARM GAS  /tmp/cc4Zpja9.s 			page 7


 316:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 317:ThirdParty/FreeRTOS/Source/tasks.c **** 
 318:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:ThirdParty/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 321:ThirdParty/FreeRTOS/Source/tasks.c **** 
 322:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:ThirdParty/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 324:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 325:ThirdParty/FreeRTOS/Source/tasks.c **** 
 326:ThirdParty/FreeRTOS/Source/tasks.c **** } tskTCB;
 327:ThirdParty/FreeRTOS/Source/tasks.c **** 
 328:ThirdParty/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:ThirdParty/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:ThirdParty/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 331:ThirdParty/FreeRTOS/Source/tasks.c **** 
 332:ThirdParty/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:ThirdParty/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 334:ThirdParty/FreeRTOS/Source/tasks.c **** __attribute__((used)) PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:ThirdParty/FreeRTOS/Source/tasks.c **** 
 336:ThirdParty/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:ThirdParty/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:ThirdParty/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:ThirdParty/FreeRTOS/Source/tasks.c **** the static qualifier. */
 340:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = { 0 };/*< Prioritised rea
 341:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = { 0 };						/*< Delayed tasks. */
 342:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = { 0 };						/*< Delayed tasks (two lists are used
 343:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;				/*< Points to the delayed tas
 344:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;		/*< Points to the delay
 345:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = { 0 };						/*< Tasks that have been readied whil
 346:ThirdParty/FreeRTOS/Source/tasks.c **** 
 347:ThirdParty/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:ThirdParty/FreeRTOS/Source/tasks.c **** 
 349:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xTasksWaitingTermination = { 0 };				/*< Tasks that have been deleted
 350:ThirdParty/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:ThirdParty/FreeRTOS/Source/tasks.c **** 
 352:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 353:ThirdParty/FreeRTOS/Source/tasks.c **** 
 354:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:ThirdParty/FreeRTOS/Source/tasks.c **** 
 356:ThirdParty/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = { 0 };					/*< Tasks that are currently suspend
 357:ThirdParty/FreeRTOS/Source/tasks.c **** 
 358:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 359:ThirdParty/FreeRTOS/Source/tasks.c **** 
 360:ThirdParty/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:ThirdParty/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 362:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:ThirdParty/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 365:ThirdParty/FreeRTOS/Source/tasks.c **** 
 366:ThirdParty/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
ARM GAS  /tmp/cc4Zpja9.s 			page 8


 373:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:ThirdParty/FreeRTOS/Source/tasks.c **** 
 378:ThirdParty/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:ThirdParty/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:ThirdParty/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:ThirdParty/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:ThirdParty/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:ThirdParty/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:ThirdParty/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:ThirdParty/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 386:ThirdParty/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:ThirdParty/FreeRTOS/Source/tasks.c **** 
 388:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:ThirdParty/FreeRTOS/Source/tasks.c **** 
 390:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:ThirdParty/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:ThirdParty/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:ThirdParty/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:ThirdParty/FreeRTOS/Source/tasks.c **** 
 395:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 396:ThirdParty/FreeRTOS/Source/tasks.c **** 
 397:ThirdParty/FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:ThirdParty/FreeRTOS/Source/tasks.c **** 
 399:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:ThirdParty/FreeRTOS/Source/tasks.c **** 
 401:ThirdParty/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:ThirdParty/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:ThirdParty/FreeRTOS/Source/tasks.c **** 
 404:ThirdParty/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:ThirdParty/FreeRTOS/Source/tasks.c **** 
 406:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 407:ThirdParty/FreeRTOS/Source/tasks.c **** 
 408:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:ThirdParty/FreeRTOS/Source/tasks.c **** 
 410:ThirdParty/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:ThirdParty/FreeRTOS/Source/tasks.c **** 
 412:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 413:ThirdParty/FreeRTOS/Source/tasks.c **** 
 414:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:ThirdParty/FreeRTOS/Source/tasks.c **** 
 416:ThirdParty/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:ThirdParty/FreeRTOS/Source/tasks.c **** 
 418:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 419:ThirdParty/FreeRTOS/Source/tasks.c **** 
 420:ThirdParty/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 421:ThirdParty/FreeRTOS/Source/tasks.c **** 
 422:ThirdParty/FreeRTOS/Source/tasks.c **** /**
 423:ThirdParty/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:ThirdParty/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:ThirdParty/FreeRTOS/Source/tasks.c ****  * is in any other state.
 426:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 427:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:ThirdParty/FreeRTOS/Source/tasks.c **** 
 429:ThirdParty/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
ARM GAS  /tmp/cc4Zpja9.s 			page 9


 430:ThirdParty/FreeRTOS/Source/tasks.c **** 
 431:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:ThirdParty/FreeRTOS/Source/tasks.c **** 
 433:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 434:ThirdParty/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:ThirdParty/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 436:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 437:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:ThirdParty/FreeRTOS/Source/tasks.c **** 
 439:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 440:ThirdParty/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:ThirdParty/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:ThirdParty/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 443:ThirdParty/FreeRTOS/Source/tasks.c ****  *
 444:ThirdParty/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:ThirdParty/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:ThirdParty/FreeRTOS/Source/tasks.c ****  *
 447:ThirdParty/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:ThirdParty/FreeRTOS/Source/tasks.c ****  *
 449:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 450:ThirdParty/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:ThirdParty/FreeRTOS/Source/tasks.c **** 
 452:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 453:ThirdParty/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:ThirdParty/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:ThirdParty/FreeRTOS/Source/tasks.c ****  *
 456:ThirdParty/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:ThirdParty/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 459:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:ThirdParty/FreeRTOS/Source/tasks.c **** 
 461:ThirdParty/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:ThirdParty/FreeRTOS/Source/tasks.c **** 
 463:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 464:ThirdParty/FreeRTOS/Source/tasks.c **** 
 465:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 466:ThirdParty/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:ThirdParty/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:ThirdParty/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 469:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 470:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:ThirdParty/FreeRTOS/Source/tasks.c **** 
 472:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 473:ThirdParty/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:ThirdParty/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 476:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:ThirdParty/FreeRTOS/Source/tasks.c **** 
 478:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 479:ThirdParty/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:ThirdParty/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:ThirdParty/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 482:ThirdParty/FreeRTOS/Source/tasks.c ****  *
 483:ThirdParty/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:ThirdParty/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 486:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  /tmp/cc4Zpja9.s 			page 10


 487:ThirdParty/FreeRTOS/Source/tasks.c **** 
 488:ThirdParty/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:ThirdParty/FreeRTOS/Source/tasks.c **** 
 490:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 491:ThirdParty/FreeRTOS/Source/tasks.c **** 
 492:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 493:ThirdParty/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:ThirdParty/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 496:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:ThirdParty/FreeRTOS/Source/tasks.c **** 
 498:ThirdParty/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:ThirdParty/FreeRTOS/Source/tasks.c **** 
 500:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 501:ThirdParty/FreeRTOS/Source/tasks.c **** 
 502:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 503:ThirdParty/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:ThirdParty/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:ThirdParty/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 507:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:ThirdParty/FreeRTOS/Source/tasks.c **** 
 509:ThirdParty/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:ThirdParty/FreeRTOS/Source/tasks.c **** 
 511:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 512:ThirdParty/FreeRTOS/Source/tasks.c **** 
 513:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 514:ThirdParty/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:ThirdParty/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:ThirdParty/FreeRTOS/Source/tasks.c ****  *
 517:ThirdParty/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:ThirdParty/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:ThirdParty/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:ThirdParty/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 521:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 522:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:ThirdParty/FreeRTOS/Source/tasks.c **** 
 524:ThirdParty/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:ThirdParty/FreeRTOS/Source/tasks.c **** 
 526:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 527:ThirdParty/FreeRTOS/Source/tasks.c **** 
 528:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 529:ThirdParty/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:ThirdParty/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 531:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 532:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:ThirdParty/FreeRTOS/Source/tasks.c **** 
 534:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:ThirdParty/FreeRTOS/Source/tasks.c **** 
 536:ThirdParty/FreeRTOS/Source/tasks.c **** 	/*
 537:ThirdParty/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:ThirdParty/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 539:ThirdParty/FreeRTOS/Source/tasks.c **** 	 */
 540:ThirdParty/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:ThirdParty/FreeRTOS/Source/tasks.c **** 
 542:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 543:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 11


 544:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 545:ThirdParty/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:ThirdParty/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 548:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:ThirdParty/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:ThirdParty/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 551:ThirdParty/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 552:ThirdParty/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 553:ThirdParty/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:ThirdParty/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:ThirdParty/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:ThirdParty/FreeRTOS/Source/tasks.c **** 
 557:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 558:ThirdParty/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:ThirdParty/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 560:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 561:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:ThirdParty/FreeRTOS/Source/tasks.c **** 
 563:ThirdParty/FreeRTOS/Source/tasks.c **** /*
 564:ThirdParty/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:ThirdParty/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:ThirdParty/FreeRTOS/Source/tasks.c ****  * called by the function.
 567:ThirdParty/FreeRTOS/Source/tasks.c ****  */
 568:ThirdParty/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:ThirdParty/FreeRTOS/Source/tasks.c **** 
 570:ThirdParty/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:ThirdParty/FreeRTOS/Source/tasks.c **** 
 572:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
 573:ThirdParty/FreeRTOS/Source/tasks.c **** 
 574:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 575:ThirdParty/FreeRTOS/Source/tasks.c **** 
 576:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:ThirdParty/FreeRTOS/Source/tasks.c **** 
 578:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:ThirdParty/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:ThirdParty/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:ThirdParty/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 582:ThirdParty/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:ThirdParty/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:ThirdParty/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 586:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 587:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 588:ThirdParty/FreeRTOS/Source/tasks.c **** 
 589:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 590:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 591:ThirdParty/FreeRTOS/Source/tasks.c **** 
 592:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 594:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:ThirdParty/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:ThirdParty/FreeRTOS/Source/tasks.c **** 			structure. */
 597:ThirdParty/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 598:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 599:ThirdParty/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 600:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc4Zpja9.s 			page 12


 601:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:ThirdParty/FreeRTOS/Source/tasks.c **** 
 603:ThirdParty/FreeRTOS/Source/tasks.c **** 
 604:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 605:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 606:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:ThirdParty/FreeRTOS/Source/tasks.c **** 			function - use them. */
 608:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 609:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 610:ThirdParty/FreeRTOS/Source/tasks.c **** 
 611:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 613:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:ThirdParty/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 616:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 617:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:ThirdParty/FreeRTOS/Source/tasks.c **** 
 619:ThirdParty/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 620:ThirdParty/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 621:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 622:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
 623:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 624:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 625:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 626:ThirdParty/FreeRTOS/Source/tasks.c **** 
 627:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
 628:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 629:ThirdParty/FreeRTOS/Source/tasks.c **** 
 630:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:ThirdParty/FreeRTOS/Source/tasks.c **** 
 633:ThirdParty/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:ThirdParty/FreeRTOS/Source/tasks.c **** 
 635:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 637:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:ThirdParty/FreeRTOS/Source/tasks.c **** 
 640:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:ThirdParty/FreeRTOS/Source/tasks.c **** 
 643:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 645:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:ThirdParty/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:ThirdParty/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 648:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:ThirdParty/FreeRTOS/Source/tasks.c **** 
 650:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:ThirdParty/FreeRTOS/Source/tasks.c **** 
 653:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 655:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:ThirdParty/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
ARM GAS  /tmp/cc4Zpja9.s 			page 13


 658:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 659:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:ThirdParty/FreeRTOS/Source/tasks.c **** 
 661:ThirdParty/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:ThirdParty/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:ThirdParty/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:ThirdParty/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:ThirdParty/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:ThirdParty/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:ThirdParty/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:ThirdParty/FreeRTOS/Source/tasks.c **** 
 669:ThirdParty/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 671:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 672:ThirdParty/FreeRTOS/Source/tasks.c **** 
 673:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
 674:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 675:ThirdParty/FreeRTOS/Source/tasks.c **** 
 676:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 678:ThirdParty/FreeRTOS/Source/tasks.c **** 
 679:ThirdParty/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:ThirdParty/FreeRTOS/Source/tasks.c **** 
 681:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 683:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:ThirdParty/FreeRTOS/Source/tasks.c **** 
 686:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:ThirdParty/FreeRTOS/Source/tasks.c **** 
 688:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 690:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:ThirdParty/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:ThirdParty/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 693:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:ThirdParty/FreeRTOS/Source/tasks.c **** 
 695:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 697:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 698:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:ThirdParty/FreeRTOS/Source/tasks.c **** 
 700:ThirdParty/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 702:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:ThirdParty/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:ThirdParty/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 707:ThirdParty/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:ThirdParty/FreeRTOS/Source/tasks.c **** 
 709:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:ThirdParty/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:ThirdParty/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:ThirdParty/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:ThirdParty/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:ThirdParty/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
ARM GAS  /tmp/cc4Zpja9.s 			page 14


 715:ThirdParty/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 716:ThirdParty/FreeRTOS/Source/tasks.c **** 
 717:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 719:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 720:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 721:ThirdParty/FreeRTOS/Source/tasks.c **** 
 722:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
 723:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 724:ThirdParty/FreeRTOS/Source/tasks.c **** 
 725:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 727:ThirdParty/FreeRTOS/Source/tasks.c **** 
 728:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:ThirdParty/FreeRTOS/Source/tasks.c **** 
 730:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:ThirdParty/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:ThirdParty/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:ThirdParty/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 734:ThirdParty/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 735:ThirdParty/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 737:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 739:ThirdParty/FreeRTOS/Source/tasks.c **** 
 740:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:ThirdParty/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:ThirdParty/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 743:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 745:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:ThirdParty/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:ThirdParty/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 748:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:ThirdParty/FreeRTOS/Source/tasks.c **** 
 750:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 752:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:ThirdParty/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:ThirdParty/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 755:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:ThirdParty/FreeRTOS/Source/tasks.c **** 
 757:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 759:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:ThirdParty/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 762:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 763:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 764:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 765:ThirdParty/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 767:ThirdParty/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 768:ThirdParty/FreeRTOS/Source/tasks.c **** 
 769:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 771:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 15


 772:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 773:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 774:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 776:ThirdParty/FreeRTOS/Source/tasks.c **** 
 777:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 778:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 779:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 781:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 782:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
 783:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 784:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:ThirdParty/FreeRTOS/Source/tasks.c **** 					it again. */
 786:ThirdParty/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 787:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 788:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 789:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
 790:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 791:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 792:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 793:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 794:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:ThirdParty/FreeRTOS/Source/tasks.c **** 
 796:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 797:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 798:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 800:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:ThirdParty/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 803:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 804:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:ThirdParty/FreeRTOS/Source/tasks.c **** 
 806:ThirdParty/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 807:ThirdParty/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 808:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 809:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 810:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
 811:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 812:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 813:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 814:ThirdParty/FreeRTOS/Source/tasks.c **** 
 815:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
 816:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 817:ThirdParty/FreeRTOS/Source/tasks.c **** 
 818:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 820:ThirdParty/FreeRTOS/Source/tasks.c **** 
 821:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:ThirdParty/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:ThirdParty/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:ThirdParty/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 825:ThirdParty/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 826:ThirdParty/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:ThirdParty/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:ThirdParty/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
ARM GAS  /tmp/cc4Zpja9.s 			page 16


 829:ThirdParty/FreeRTOS/Source/tasks.c **** {
 830:ThirdParty/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 831:ThirdParty/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 832:ThirdParty/FreeRTOS/Source/tasks.c **** 
 833:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:ThirdParty/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 838:ThirdParty/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 840:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
 841:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 842:ThirdParty/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 844:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:ThirdParty/FreeRTOS/Source/tasks.c **** 
 847:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 850:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:ThirdParty/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 852:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 853:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:ThirdParty/FreeRTOS/Source/tasks.c **** 
 855:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:ThirdParty/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:ThirdParty/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:ThirdParty/FreeRTOS/Source/tasks.c **** 	by the port. */
 859:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 861:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 862:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 863:ThirdParty/FreeRTOS/Source/tasks.c **** 
 864:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 866:ThirdParty/FreeRTOS/Source/tasks.c **** 
 867:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 869:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:ThirdParty/FreeRTOS/Source/tasks.c **** 			debugging. */
 871:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 873:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 875:ThirdParty/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 877:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:ThirdParty/FreeRTOS/Source/tasks.c **** 
 879:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:ThirdParty/FreeRTOS/Source/tasks.c **** 
 882:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:ThirdParty/FreeRTOS/Source/tasks.c **** 		performed. */
 884:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cc4Zpja9.s 			page 17


 886:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:ThirdParty/FreeRTOS/Source/tasks.c **** 
 888:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 890:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 891:ThirdParty/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 893:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:ThirdParty/FreeRTOS/Source/tasks.c **** 
 895:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:ThirdParty/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:ThirdParty/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 899:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 900:ThirdParty/FreeRTOS/Source/tasks.c **** 				break;
 901:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 902:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
 903:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 904:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 906:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 907:ThirdParty/FreeRTOS/Source/tasks.c **** 
 908:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:ThirdParty/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 912:ThirdParty/FreeRTOS/Source/tasks.c **** 	else
 913:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 914:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:ThirdParty/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 916:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 917:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 918:ThirdParty/FreeRTOS/Source/tasks.c **** 
 919:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:ThirdParty/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 922:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 923:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 924:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 925:ThirdParty/FreeRTOS/Source/tasks.c **** 	else
 926:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 927:ThirdParty/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 929:ThirdParty/FreeRTOS/Source/tasks.c **** 
 930:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 931:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 933:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 934:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 935:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 936:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:ThirdParty/FreeRTOS/Source/tasks.c **** 
 938:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 939:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 940:ThirdParty/FreeRTOS/Source/tasks.c **** 
 941:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:ThirdParty/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
ARM GAS  /tmp/cc4Zpja9.s 			page 18


 943:ThirdParty/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 944:ThirdParty/FreeRTOS/Source/tasks.c **** 
 945:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:ThirdParty/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 947:ThirdParty/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 948:ThirdParty/FreeRTOS/Source/tasks.c **** 
 949:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 951:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 953:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:ThirdParty/FreeRTOS/Source/tasks.c **** 
 955:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 957:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 959:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:ThirdParty/FreeRTOS/Source/tasks.c **** 
 961:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 963:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 965:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:ThirdParty/FreeRTOS/Source/tasks.c **** 
 967:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 969:ThirdParty/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 971:ThirdParty/FreeRTOS/Source/tasks.c **** 	#else
 972:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 973:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:ThirdParty/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 975:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 976:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 977:ThirdParty/FreeRTOS/Source/tasks.c **** 
 978:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 980:ThirdParty/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 982:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 984:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 985:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 986:ThirdParty/FreeRTOS/Source/tasks.c **** 
 987:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 989:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 990:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 991:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 992:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
 993:ThirdParty/FreeRTOS/Source/tasks.c **** 
 994:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 996:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:ThirdParty/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 999:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  /tmp/cc4Zpja9.s 			page 19


1000:ThirdParty/FreeRTOS/Source/tasks.c **** 
1001:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1003:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1005:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
1006:ThirdParty/FreeRTOS/Source/tasks.c **** 
1007:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:ThirdParty/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:ThirdParty/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:ThirdParty/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1011:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1013:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:ThirdParty/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:ThirdParty/FreeRTOS/Source/tasks.c **** 		function as well. */
1016:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1018:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1020:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1022:ThirdParty/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1024:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1026:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1028:ThirdParty/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1030:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1032:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1034:ThirdParty/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1036:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:ThirdParty/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:ThirdParty/FreeRTOS/Source/tasks.c **** 		function as well. */
1039:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1041:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1043:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1045:ThirdParty/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1047:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1049:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1051:ThirdParty/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1053:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1054:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1055:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cc4Zpja9.s 			page 20


1057:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:ThirdParty/FreeRTOS/Source/tasks.c **** 
1059:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1060:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1061:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:ThirdParty/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:ThirdParty/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1064:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1065:ThirdParty/FreeRTOS/Source/tasks.c **** 	else
1066:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1067:ThirdParty/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1069:ThirdParty/FreeRTOS/Source/tasks.c **** }
1070:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1071:ThirdParty/FreeRTOS/Source/tasks.c **** 
1072:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:ThirdParty/FreeRTOS/Source/tasks.c **** {
1074:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:ThirdParty/FreeRTOS/Source/tasks.c **** 	updated. */
1076:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1077:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1078:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1079:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1080:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1081:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:ThirdParty/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1083:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1084:ThirdParty/FreeRTOS/Source/tasks.c **** 
1085:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1086:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1087:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:ThirdParty/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:ThirdParty/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1090:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1091:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1092:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1093:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1094:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1096:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1097:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1098:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1099:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:ThirdParty/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:ThirdParty/FreeRTOS/Source/tasks.c **** 			so far. */
1102:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1103:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1104:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1105:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1106:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1107:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1108:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
1109:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1110:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1112:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1113:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/cc4Zpja9.s 			page 21


1114:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1115:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1117:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1118:ThirdParty/FreeRTOS/Source/tasks.c **** 
1119:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1120:ThirdParty/FreeRTOS/Source/tasks.c **** 
1121:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1123:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1126:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:ThirdParty/FreeRTOS/Source/tasks.c **** 
1129:ThirdParty/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1130:ThirdParty/FreeRTOS/Source/tasks.c **** 
1131:ThirdParty/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1133:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1134:ThirdParty/FreeRTOS/Source/tasks.c **** 
1135:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1136:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1137:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:ThirdParty/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1139:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1140:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1141:ThirdParty/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1142:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1143:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1144:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1145:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1147:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1148:ThirdParty/FreeRTOS/Source/tasks.c **** 	else
1149:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1150:ThirdParty/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1152:ThirdParty/FreeRTOS/Source/tasks.c **** }
1153:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1154:ThirdParty/FreeRTOS/Source/tasks.c **** 
1155:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:ThirdParty/FreeRTOS/Source/tasks.c **** 
1157:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1159:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1160:ThirdParty/FreeRTOS/Source/tasks.c **** 
1161:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1162:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1163:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:ThirdParty/FreeRTOS/Source/tasks.c **** 			being deleted. */
1165:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1166:ThirdParty/FreeRTOS/Source/tasks.c **** 
1167:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1168:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1169:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1170:ThirdParty/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
ARM GAS  /tmp/cc4Zpja9.s 			page 22


1171:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1172:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1173:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1174:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1176:ThirdParty/FreeRTOS/Source/tasks.c **** 
1177:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1179:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1180:ThirdParty/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1181:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1182:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1183:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1184:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1186:ThirdParty/FreeRTOS/Source/tasks.c **** 
1187:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:ThirdParty/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:ThirdParty/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:ThirdParty/FreeRTOS/Source/tasks.c **** 			not return. */
1191:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1192:ThirdParty/FreeRTOS/Source/tasks.c **** 
1193:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1194:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1195:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:ThirdParty/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:ThirdParty/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:ThirdParty/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:ThirdParty/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:ThirdParty/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1201:ThirdParty/FreeRTOS/Source/tasks.c **** 
1202:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:ThirdParty/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:ThirdParty/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:ThirdParty/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1206:ThirdParty/FreeRTOS/Source/tasks.c **** 
1207:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:ThirdParty/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:ThirdParty/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:ThirdParty/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:ThirdParty/FreeRTOS/Source/tasks.c **** 				required. */
1212:ThirdParty/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1214:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1215:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1216:ThirdParty/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1217:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1218:ThirdParty/FreeRTOS/Source/tasks.c **** 
1219:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:ThirdParty/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1221:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1222:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1223:ThirdParty/FreeRTOS/Source/tasks.c **** 
1224:ThirdParty/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1226:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1227:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 23


1228:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:ThirdParty/FreeRTOS/Source/tasks.c **** 		been deleted. */
1230:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1231:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1232:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1233:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1234:ThirdParty/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1235:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1236:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1237:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1238:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1239:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1241:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1242:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1243:ThirdParty/FreeRTOS/Source/tasks.c **** 
1244:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1246:ThirdParty/FreeRTOS/Source/tasks.c **** 
1247:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:ThirdParty/FreeRTOS/Source/tasks.c **** 
1249:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1251:ThirdParty/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1252:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1253:ThirdParty/FreeRTOS/Source/tasks.c **** 
1254:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1255:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1256:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1257:ThirdParty/FreeRTOS/Source/tasks.c **** 
1258:ThirdParty/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1259:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1260:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:ThirdParty/FreeRTOS/Source/tasks.c **** 			block. */
1262:ThirdParty/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1263:ThirdParty/FreeRTOS/Source/tasks.c **** 
1264:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:ThirdParty/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1266:ThirdParty/FreeRTOS/Source/tasks.c **** 
1267:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1268:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1269:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:ThirdParty/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:ThirdParty/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:ThirdParty/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:ThirdParty/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1275:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1276:ThirdParty/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1277:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1278:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
1279:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1280:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1282:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1283:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1284:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc4Zpja9.s 			page 24


1285:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:ThirdParty/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:ThirdParty/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1288:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1289:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1290:ThirdParty/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1291:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1292:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
1293:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1294:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1296:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1297:ThirdParty/FreeRTOS/Source/tasks.c **** 
1298:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:ThirdParty/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1300:ThirdParty/FreeRTOS/Source/tasks.c **** 
1301:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1302:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1303:ThirdParty/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:ThirdParty/FreeRTOS/Source/tasks.c **** 
1305:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:ThirdParty/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1308:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1309:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1310:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1311:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1313:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1314:ThirdParty/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1315:ThirdParty/FreeRTOS/Source/tasks.c **** 
1316:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:ThirdParty/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1320:ThirdParty/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1321:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1322:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1323:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1324:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1326:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1327:ThirdParty/FreeRTOS/Source/tasks.c **** 
1328:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:ThirdParty/FreeRTOS/Source/tasks.c **** 
1331:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:ThirdParty/FreeRTOS/Source/tasks.c **** 
1333:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1335:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1336:ThirdParty/FreeRTOS/Source/tasks.c **** 
1337:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1339:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1340:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1341:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
ARM GAS  /tmp/cc4Zpja9.s 			page 25


1342:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1343:ThirdParty/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1344:ThirdParty/FreeRTOS/Source/tasks.c **** 
1345:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:ThirdParty/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:ThirdParty/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:ThirdParty/FreeRTOS/Source/tasks.c **** 				is resumed.
1349:ThirdParty/FreeRTOS/Source/tasks.c **** 
1350:ThirdParty/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:ThirdParty/FreeRTOS/Source/tasks.c **** 				executing task. */
1352:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1353:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1354:ThirdParty/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1355:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1356:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1357:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1358:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1360:ThirdParty/FreeRTOS/Source/tasks.c **** 
1361:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:ThirdParty/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1363:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1364:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1365:ThirdParty/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1366:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1367:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1368:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1369:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1371:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1372:ThirdParty/FreeRTOS/Source/tasks.c **** 
1373:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1375:ThirdParty/FreeRTOS/Source/tasks.c **** 
1376:ThirdParty/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:ThirdParty/FreeRTOS/Source/tasks.c **** 
1378:ThirdParty/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1380:ThirdParty/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1381:ThirdParty/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:ThirdParty/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1383:ThirdParty/FreeRTOS/Source/tasks.c **** 
1384:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1385:ThirdParty/FreeRTOS/Source/tasks.c **** 
1386:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1387:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1388:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:ThirdParty/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1390:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1391:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1392:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1393:ThirdParty/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1394:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1395:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1396:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1397:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1398:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc4Zpja9.s 			page 26


1399:ThirdParty/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1400:ThirdParty/FreeRTOS/Source/tasks.c **** 
1401:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1402:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1403:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:ThirdParty/FreeRTOS/Source/tasks.c **** 				lists. */
1405:ThirdParty/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1406:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1407:ThirdParty/FreeRTOS/Source/tasks.c **** 
1408:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:ThirdParty/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1410:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1411:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:ThirdParty/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:ThirdParty/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1414:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1415:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1416:ThirdParty/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
1418:ThirdParty/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:ThirdParty/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:ThirdParty/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:ThirdParty/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1422:ThirdParty/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1423:ThirdParty/FreeRTOS/Source/tasks.c **** 							{
1424:ThirdParty/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1425:ThirdParty/FreeRTOS/Source/tasks.c **** 							}
1426:ThirdParty/FreeRTOS/Source/tasks.c **** 							else
1427:ThirdParty/FreeRTOS/Source/tasks.c **** 							{
1428:ThirdParty/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1429:ThirdParty/FreeRTOS/Source/tasks.c **** 							}
1430:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
1431:ThirdParty/FreeRTOS/Source/tasks.c **** 						#else
1432:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
1433:ThirdParty/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1434:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
1435:ThirdParty/FreeRTOS/Source/tasks.c **** 						#endif
1436:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1437:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
1438:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1439:ThirdParty/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1440:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1441:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1442:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif
1443:ThirdParty/FreeRTOS/Source/tasks.c **** 
1444:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:ThirdParty/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1446:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1447:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:ThirdParty/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:ThirdParty/FreeRTOS/Source/tasks.c **** 					all. */
1450:ThirdParty/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1451:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1452:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif
1453:ThirdParty/FreeRTOS/Source/tasks.c **** 
1454:ThirdParty/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc4Zpja9.s 			page 27


1456:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:ThirdParty/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1458:ThirdParty/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1459:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1460:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1461:ThirdParty/FreeRTOS/Source/tasks.c **** 
1462:ThirdParty/FreeRTOS/Source/tasks.c **** 		return eReturn;
1463:ThirdParty/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1464:ThirdParty/FreeRTOS/Source/tasks.c **** 
1465:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1467:ThirdParty/FreeRTOS/Source/tasks.c **** 
1468:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:ThirdParty/FreeRTOS/Source/tasks.c **** 
1470:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1472:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1473:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1474:ThirdParty/FreeRTOS/Source/tasks.c **** 
1475:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1476:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1477:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:ThirdParty/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1480:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1481:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1482:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1483:ThirdParty/FreeRTOS/Source/tasks.c **** 
1484:ThirdParty/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1485:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1486:ThirdParty/FreeRTOS/Source/tasks.c **** 
1487:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1489:ThirdParty/FreeRTOS/Source/tasks.c **** 
1490:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:ThirdParty/FreeRTOS/Source/tasks.c **** 
1492:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1494:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1495:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:ThirdParty/FreeRTOS/Source/tasks.c **** 
1497:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:ThirdParty/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:ThirdParty/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:ThirdParty/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:ThirdParty/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:ThirdParty/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:ThirdParty/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:ThirdParty/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:ThirdParty/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:ThirdParty/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:ThirdParty/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:ThirdParty/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:ThirdParty/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:ThirdParty/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:ThirdParty/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1512:ThirdParty/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
ARM GAS  /tmp/cc4Zpja9.s 			page 28


1513:ThirdParty/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1514:ThirdParty/FreeRTOS/Source/tasks.c **** 
1515:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1516:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1517:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:ThirdParty/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1519:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1520:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1521:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1522:ThirdParty/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:ThirdParty/FreeRTOS/Source/tasks.c **** 
1524:ThirdParty/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1525:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1526:ThirdParty/FreeRTOS/Source/tasks.c **** 
1527:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1529:ThirdParty/FreeRTOS/Source/tasks.c **** 
1530:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:ThirdParty/FreeRTOS/Source/tasks.c **** 
1532:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1534:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1535:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1537:ThirdParty/FreeRTOS/Source/tasks.c **** 
1538:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1539:ThirdParty/FreeRTOS/Source/tasks.c **** 
1540:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1542:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1543:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1544:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1545:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1546:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1547:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1549:ThirdParty/FreeRTOS/Source/tasks.c **** 
1550:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1551:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1552:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:ThirdParty/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1554:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1555:ThirdParty/FreeRTOS/Source/tasks.c **** 
1556:ThirdParty/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:ThirdParty/FreeRTOS/Source/tasks.c **** 
1558:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1560:ThirdParty/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1561:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1562:ThirdParty/FreeRTOS/Source/tasks.c **** 			#else
1563:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1564:ThirdParty/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1566:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif
1567:ThirdParty/FreeRTOS/Source/tasks.c **** 
1568:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1569:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc4Zpja9.s 			page 29


1570:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1571:ThirdParty/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1572:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1573:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1574:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1575:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1576:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1577:ThirdParty/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:ThirdParty/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1579:ThirdParty/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1580:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
1581:ThirdParty/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1582:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
1583:ThirdParty/FreeRTOS/Source/tasks.c **** 						else
1584:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
1585:ThirdParty/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
1587:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1588:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
1589:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1590:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:ThirdParty/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1592:ThirdParty/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1594:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1595:ThirdParty/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1596:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1597:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:ThirdParty/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1599:ThirdParty/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1600:ThirdParty/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1601:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1602:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
1603:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1604:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:ThirdParty/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1606:ThirdParty/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1607:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1608:ThirdParty/FreeRTOS/Source/tasks.c **** 
1609:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:ThirdParty/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1611:ThirdParty/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:ThirdParty/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1613:ThirdParty/FreeRTOS/Source/tasks.c **** 
1614:ThirdParty/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1616:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:ThirdParty/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1618:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1619:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1620:ThirdParty/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1621:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1622:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
1623:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1624:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1626:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 30


1627:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1628:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1629:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1630:ThirdParty/FreeRTOS/Source/tasks.c **** 				#else
1631:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1632:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1634:ThirdParty/FreeRTOS/Source/tasks.c **** 				#endif
1635:ThirdParty/FreeRTOS/Source/tasks.c **** 
1636:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:ThirdParty/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1638:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1639:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1640:ThirdParty/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1641:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1642:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
1643:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1644:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1646:ThirdParty/FreeRTOS/Source/tasks.c **** 
1647:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:ThirdParty/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:ThirdParty/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:ThirdParty/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1652:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1653:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:ThirdParty/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:ThirdParty/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1657:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1658:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:ThirdParty/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1660:ThirdParty/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1661:ThirdParty/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1663:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
1664:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1665:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1667:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1668:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1669:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
1670:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1671:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1673:ThirdParty/FreeRTOS/Source/tasks.c **** 
1674:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1675:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1676:ThirdParty/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1677:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1678:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
1679:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1680:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1682:ThirdParty/FreeRTOS/Source/tasks.c **** 
1683:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
ARM GAS  /tmp/cc4Zpja9.s 			page 31


1684:ThirdParty/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1685:ThirdParty/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1688:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1689:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1690:ThirdParty/FreeRTOS/Source/tasks.c **** 
1691:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1693:ThirdParty/FreeRTOS/Source/tasks.c **** 
1694:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:ThirdParty/FreeRTOS/Source/tasks.c **** 
1696:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1698:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1699:ThirdParty/FreeRTOS/Source/tasks.c **** 
1700:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1701:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1702:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:ThirdParty/FreeRTOS/Source/tasks.c **** 			being suspended. */
1704:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1705:ThirdParty/FreeRTOS/Source/tasks.c **** 
1706:ThirdParty/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:ThirdParty/FreeRTOS/Source/tasks.c **** 
1708:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:ThirdParty/FreeRTOS/Source/tasks.c **** 			suspended list. */
1710:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1711:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1712:ThirdParty/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1714:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1715:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1716:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1718:ThirdParty/FreeRTOS/Source/tasks.c **** 
1719:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1721:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1722:ThirdParty/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1723:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1724:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1725:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1726:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1728:ThirdParty/FreeRTOS/Source/tasks.c **** 
1729:ThirdParty/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1730:ThirdParty/FreeRTOS/Source/tasks.c **** 
1731:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1733:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1734:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1735:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:ThirdParty/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1737:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1738:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1739:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1740:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif
ARM GAS  /tmp/cc4Zpja9.s 			page 32


1741:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1742:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1743:ThirdParty/FreeRTOS/Source/tasks.c **** 
1744:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1745:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1746:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:ThirdParty/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1748:ThirdParty/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1749:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1750:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1751:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1752:ThirdParty/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1753:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1754:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1755:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1756:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1758:ThirdParty/FreeRTOS/Source/tasks.c **** 
1759:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1760:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1761:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1762:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1763:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1764:ThirdParty/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1765:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1766:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1767:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1768:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1769:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:ThirdParty/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:ThirdParty/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1774:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:ThirdParty/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:ThirdParty/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:ThirdParty/FreeRTOS/Source/tasks.c **** 					is. */
1778:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1780:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
1781:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1782:ThirdParty/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1783:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1784:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1785:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1786:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1787:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1788:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1790:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1791:ThirdParty/FreeRTOS/Source/tasks.c **** 
1792:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1794:ThirdParty/FreeRTOS/Source/tasks.c **** 
1795:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:ThirdParty/FreeRTOS/Source/tasks.c **** 
1797:ThirdParty/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
ARM GAS  /tmp/cc4Zpja9.s 			page 33


1798:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
  29              		.loc 1 1798 2 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
1799:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  34              		.loc 1 1799 2 view .LVU1
1800:ThirdParty/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  35              		.loc 1 1800 2 view .LVU2
1801:ThirdParty/FreeRTOS/Source/tasks.c **** 
1802:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:ThirdParty/FreeRTOS/Source/tasks.c **** 		section. */
1804:ThirdParty/FreeRTOS/Source/tasks.c **** 
1805:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  36              		.loc 1 1806 3 view .LVU3
  37 0000 28B1     		cbz	r0, .L8
  38              		.loc 1 1806 24 discriminator 2 view .LVU4
1807:ThirdParty/FreeRTOS/Source/tasks.c **** 
1808:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  39              		.loc 1 1809 3 discriminator 2 view .LVU5
  40              		.loc 1 1809 7 is_stmt 0 discriminator 2 view .LVU6
  41 0002 4169     		ldr	r1, [r0, #20]
  42              		.loc 1 1809 5 discriminator 2 view .LVU7
  43 0004 0C4A     		ldr	r2, .L10
  44 0006 9142     		cmp	r1, r2
  45 0008 0AD0     		beq	.L9
1799:ThirdParty/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  46              		.loc 1 1799 13 view .LVU8
  47 000a 0020     		movs	r0, #0
  48              	.LVL1:
1799:ThirdParty/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  49              		.loc 1 1799 13 view .LVU9
  50 000c 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
1806:ThirdParty/FreeRTOS/Source/tasks.c **** 
  53              		.loc 1 1806 3 is_stmt 1 view .LVU10
  54              	.LBB105:
  55              	.LBI105:
  56              		.file 2 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  /tmp/cc4Zpja9.s 			page 34


  15:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 35


  72:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 36


 129:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portDONT_DISCARD
 170:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portDONT_DISCARD __attribute__(( used ))
 171:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 172:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 173:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 174:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 175:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 176:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 177:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 178:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 179:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 180:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 181:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 182:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 184:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
ARM GAS  /tmp/cc4Zpja9.s 			page 37


 186:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 187:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 188:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 189:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 190:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 191:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 192:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 194:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  57              		.loc 2 195 30 view .LVU11
  58              	.LBB106:
 196:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
  59              		.loc 2 197 1 view .LVU12
 198:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  60              		.loc 2 199 2 view .LVU13
  61              		.syntax unified
  62              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  63 000e 4FF05003 			mov r3, #80												
  64 0012 83F31188 		msr basepri, r3											
  65 0016 BFF36F8F 		isb														
  66 001a BFF34F8F 		dsb														
  67              	
  68              	@ 0 "" 2
  69              	.LVL3:
  70              		.thumb
  71              		.syntax unified
  72              	.L3:
  73              		.loc 2 199 2 is_stmt 0 view .LVU14
  74              	.LBE106:
  75              	.LBE105:
1806:ThirdParty/FreeRTOS/Source/tasks.c **** 
  76              		.loc 1 1806 3 is_stmt 1 discriminator 1 view .LVU15
1806:ThirdParty/FreeRTOS/Source/tasks.c **** 
  77              		.loc 1 1806 3 discriminator 1 view .LVU16
1806:ThirdParty/FreeRTOS/Source/tasks.c **** 
  78              		.loc 1 1806 3 discriminator 1 view .LVU17
  79 001e FEE7     		b	.L3
  80              	.L9:
1810:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1811:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  81              		.loc 1 1812 4 view .LVU18
  82              		.loc 1 1812 8 is_stmt 0 view .LVU19
  83 0020 836A     		ldr	r3, [r0, #40]
  84              		.loc 1 1812 6 view .LVU20
  85 0022 064A     		ldr	r2, .L10+4
  86 0024 9342     		cmp	r3, r2
  87 0026 02D0     		beq	.L6
1813:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1814:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:ThirdParty/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  88              		.loc 1 1816 5 is_stmt 1 view .LVU21
  89              		.loc 1 1816 7 is_stmt 0 view .LVU22
ARM GAS  /tmp/cc4Zpja9.s 			page 38


  90 0028 1BB1     		cbz	r3, .L7
1799:ThirdParty/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  91              		.loc 1 1799 13 view .LVU23
  92 002a 0020     		movs	r0, #0
  93              	.LVL4:
1799:ThirdParty/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  94              		.loc 1 1799 13 view .LVU24
  95 002c 7047     		bx	lr
  96              	.LVL5:
  97              	.L6:
1799:ThirdParty/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  98              		.loc 1 1799 13 view .LVU25
  99 002e 0020     		movs	r0, #0
 100              	.LVL6:
1799:ThirdParty/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 101              		.loc 1 1799 13 view .LVU26
 102 0030 7047     		bx	lr
 103              	.LVL7:
 104              	.L7:
1817:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1818:ThirdParty/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 105              		.loc 1 1818 14 view .LVU27
 106 0032 0120     		movs	r0, #1
 107              	.LVL8:
1819:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1820:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
1821:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1822:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1824:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1825:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1826:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1827:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1829:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1830:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1831:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1832:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 108              		.loc 1 1832 28 is_stmt 1 view .LVU28
1833:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1834:ThirdParty/FreeRTOS/Source/tasks.c **** 
1835:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
 109              		.loc 1 1835 3 view .LVU29
1836:ThirdParty/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 110              		.loc 1 1836 2 is_stmt 0 view .LVU30
 111 0034 7047     		bx	lr
 112              	.L11:
 113 0036 00BF     		.align	2
 114              	.L10:
 115 0038 00000000 		.word	.LANCHOR0
 116 003c 00000000 		.word	.LANCHOR1
 117              		.cfi_endproc
 118              	.LFE15:
 120              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 121              		.align	1
 122              		.syntax unified
 123              		.thumb
ARM GAS  /tmp/cc4Zpja9.s 			page 39


 124              		.thumb_func
 126              	prvTaskCheckFreeStackSpace:
 127              	.LVL9:
 128              	.LFB39:
1837:ThirdParty/FreeRTOS/Source/tasks.c **** 
1838:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1840:ThirdParty/FreeRTOS/Source/tasks.c **** 
1841:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:ThirdParty/FreeRTOS/Source/tasks.c **** 
1843:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1845:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1846:ThirdParty/FreeRTOS/Source/tasks.c **** 
1847:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1849:ThirdParty/FreeRTOS/Source/tasks.c **** 
1850:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:ThirdParty/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1852:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1853:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1854:ThirdParty/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1855:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1856:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1857:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1858:ThirdParty/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:ThirdParty/FreeRTOS/Source/tasks.c **** 
1860:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:ThirdParty/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1863:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1864:ThirdParty/FreeRTOS/Source/tasks.c **** 
1865:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1867:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1868:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:ThirdParty/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:ThirdParty/FreeRTOS/Source/tasks.c **** 						next yield. */
1871:ThirdParty/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1872:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1873:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
1874:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1875:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1877:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1878:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
1879:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1880:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1882:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1883:ThirdParty/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1884:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1885:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1886:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1887:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1889:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/cc4Zpja9.s 			page 40


1890:ThirdParty/FreeRTOS/Source/tasks.c **** 
1891:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:ThirdParty/FreeRTOS/Source/tasks.c **** 
1893:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:ThirdParty/FreeRTOS/Source/tasks.c **** 
1895:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:ThirdParty/FreeRTOS/Source/tasks.c **** 
1897:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1899:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1900:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1901:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:ThirdParty/FreeRTOS/Source/tasks.c **** 
1903:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1904:ThirdParty/FreeRTOS/Source/tasks.c **** 
1905:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:ThirdParty/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:ThirdParty/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:ThirdParty/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:ThirdParty/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:ThirdParty/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:ThirdParty/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:ThirdParty/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:ThirdParty/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:ThirdParty/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:ThirdParty/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:ThirdParty/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:ThirdParty/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:ThirdParty/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:ThirdParty/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1920:ThirdParty/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:ThirdParty/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1922:ThirdParty/FreeRTOS/Source/tasks.c **** 
1923:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1924:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1925:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1926:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1927:ThirdParty/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:ThirdParty/FreeRTOS/Source/tasks.c **** 
1929:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1931:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1932:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:ThirdParty/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1934:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1935:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1936:ThirdParty/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1937:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1938:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
1939:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
1940:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
1942:ThirdParty/FreeRTOS/Source/tasks.c **** 
1943:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1944:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1945:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1946:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/cc4Zpja9.s 			page 41


1947:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
1948:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:ThirdParty/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:ThirdParty/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1951:ThirdParty/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1952:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
1953:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1954:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
1955:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
1956:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
1958:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1959:ThirdParty/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:ThirdParty/FreeRTOS/Source/tasks.c **** 
1961:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1962:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1963:ThirdParty/FreeRTOS/Source/tasks.c **** 
1964:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1966:ThirdParty/FreeRTOS/Source/tasks.c **** 
1967:ThirdParty/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1968:ThirdParty/FreeRTOS/Source/tasks.c **** {
1969:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1970:ThirdParty/FreeRTOS/Source/tasks.c **** 
1971:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
1974:ThirdParty/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1975:ThirdParty/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1976:ThirdParty/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:ThirdParty/FreeRTOS/Source/tasks.c **** 
1978:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:ThirdParty/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1980:ThirdParty/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1981:ThirdParty/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1982:ThirdParty/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:ThirdParty/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1984:ThirdParty/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:ThirdParty/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:ThirdParty/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:ThirdParty/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:ThirdParty/FreeRTOS/Source/tasks.c **** 
1989:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1990:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1991:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1992:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1993:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
1994:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
1995:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1996:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
1997:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
1998:ThirdParty/FreeRTOS/Source/tasks.c **** 	#else
1999:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2000:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:ThirdParty/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:ThirdParty/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:ThirdParty/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
ARM GAS  /tmp/cc4Zpja9.s 			page 42


2004:ThirdParty/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2005:ThirdParty/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:ThirdParty/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2008:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:ThirdParty/FreeRTOS/Source/tasks.c **** 
2010:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2012:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2013:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2014:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2015:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2016:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
2017:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2018:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2020:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2021:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:ThirdParty/FreeRTOS/Source/tasks.c **** 
2023:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2024:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2025:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:ThirdParty/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:ThirdParty/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2028:ThirdParty/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2030:ThirdParty/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2031:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2032:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
2033:ThirdParty/FreeRTOS/Source/tasks.c **** 
2034:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:ThirdParty/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:ThirdParty/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:ThirdParty/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:ThirdParty/FreeRTOS/Source/tasks.c **** 		starts to run. */
2039:ThirdParty/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:ThirdParty/FreeRTOS/Source/tasks.c **** 
2041:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2043:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:ThirdParty/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2045:ThirdParty/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2047:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:ThirdParty/FreeRTOS/Source/tasks.c **** 
2049:ThirdParty/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2050:ThirdParty/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2051:ThirdParty/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2052:ThirdParty/FreeRTOS/Source/tasks.c **** 
2053:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:ThirdParty/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:ThirdParty/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:ThirdParty/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:ThirdParty/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:ThirdParty/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:ThirdParty/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 43


2061:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:ThirdParty/FreeRTOS/Source/tasks.c **** 
2063:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:ThirdParty/FreeRTOS/Source/tasks.c **** 		portable interface. */
2065:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2066:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2067:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:ThirdParty/FreeRTOS/Source/tasks.c **** 			function will not return. */
2069:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2070:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
2071:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2072:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2074:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2075:ThirdParty/FreeRTOS/Source/tasks.c **** 	else
2076:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2077:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:ThirdParty/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:ThirdParty/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2080:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2082:ThirdParty/FreeRTOS/Source/tasks.c **** 
2083:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:ThirdParty/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2086:ThirdParty/FreeRTOS/Source/tasks.c **** }
2087:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2088:ThirdParty/FreeRTOS/Source/tasks.c **** 
2089:ThirdParty/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2090:ThirdParty/FreeRTOS/Source/tasks.c **** {
2091:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:ThirdParty/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:ThirdParty/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:ThirdParty/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:ThirdParty/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2096:ThirdParty/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2097:ThirdParty/FreeRTOS/Source/tasks.c **** }
2098:ThirdParty/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2099:ThirdParty/FreeRTOS/Source/tasks.c **** 
2100:ThirdParty/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2101:ThirdParty/FreeRTOS/Source/tasks.c **** {
2102:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:ThirdParty/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:ThirdParty/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:ThirdParty/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2107:ThirdParty/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2108:ThirdParty/FreeRTOS/Source/tasks.c **** }
2109:ThirdParty/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:ThirdParty/FreeRTOS/Source/tasks.c **** 
2111:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:ThirdParty/FreeRTOS/Source/tasks.c **** 
2113:ThirdParty/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2115:ThirdParty/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2116:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 44


2118:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:ThirdParty/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:ThirdParty/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:ThirdParty/FreeRTOS/Source/tasks.c **** 		running. */
2122:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2124:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2126:ThirdParty/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2128:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2129:ThirdParty/FreeRTOS/Source/tasks.c **** 		#else
2130:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2131:ThirdParty/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:ThirdParty/FreeRTOS/Source/tasks.c **** 
2133:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:ThirdParty/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:ThirdParty/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:ThirdParty/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:ThirdParty/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2140:ThirdParty/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2142:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2143:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
2144:ThirdParty/FreeRTOS/Source/tasks.c **** 
2145:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2147:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2148:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2149:ThirdParty/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2151:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:ThirdParty/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:ThirdParty/FreeRTOS/Source/tasks.c **** 			processed. */
2154:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2155:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2156:ThirdParty/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2158:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:ThirdParty/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2160:ThirdParty/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2162:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2163:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
2164:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2165:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2167:ThirdParty/FreeRTOS/Source/tasks.c **** 
2168:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
2169:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2170:ThirdParty/FreeRTOS/Source/tasks.c **** 
2171:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:ThirdParty/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:ThirdParty/FreeRTOS/Source/tasks.c **** 
2174:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
ARM GAS  /tmp/cc4Zpja9.s 			page 45


2175:ThirdParty/FreeRTOS/Source/tasks.c **** {
2176:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2177:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2178:ThirdParty/FreeRTOS/Source/tasks.c **** 
2179:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:ThirdParty/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2182:ThirdParty/FreeRTOS/Source/tasks.c **** 
2183:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:ThirdParty/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:ThirdParty/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:ThirdParty/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:ThirdParty/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2189:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2190:ThirdParty/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2191:ThirdParty/FreeRTOS/Source/tasks.c **** 
2192:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2193:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2194:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2195:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2196:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:ThirdParty/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2198:ThirdParty/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2199:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2200:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2201:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2202:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2203:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2204:ThirdParty/FreeRTOS/Source/tasks.c **** 
2205:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:ThirdParty/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2207:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2208:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2209:ThirdParty/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2210:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2211:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
2212:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2213:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2215:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2216:ThirdParty/FreeRTOS/Source/tasks.c **** 
2217:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2218:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2219:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:ThirdParty/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2221:ThirdParty/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:ThirdParty/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2223:ThirdParty/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:ThirdParty/FreeRTOS/Source/tasks.c **** 					state. */
2225:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2226:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2227:ThirdParty/FreeRTOS/Source/tasks.c **** 
2228:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:ThirdParty/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:ThirdParty/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:ThirdParty/FreeRTOS/Source/tasks.c **** 				time. */
ARM GAS  /tmp/cc4Zpja9.s 			page 46


2232:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2233:ThirdParty/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2234:ThirdParty/FreeRTOS/Source/tasks.c **** 
2235:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2236:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2237:ThirdParty/FreeRTOS/Source/tasks.c **** 						do
2238:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
2239:ThirdParty/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2240:ThirdParty/FreeRTOS/Source/tasks.c **** 							{
2241:ThirdParty/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2242:ThirdParty/FreeRTOS/Source/tasks.c **** 							}
2243:ThirdParty/FreeRTOS/Source/tasks.c **** 							else
2244:ThirdParty/FreeRTOS/Source/tasks.c **** 							{
2245:ThirdParty/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:ThirdParty/FreeRTOS/Source/tasks.c **** 							}
2247:ThirdParty/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2248:ThirdParty/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2249:ThirdParty/FreeRTOS/Source/tasks.c **** 
2250:ThirdParty/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2251:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2252:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
2253:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2254:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2256:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2257:ThirdParty/FreeRTOS/Source/tasks.c **** 
2258:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2259:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2260:ThirdParty/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2262:ThirdParty/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2263:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2264:ThirdParty/FreeRTOS/Source/tasks.c **** 					#endif
2265:ThirdParty/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2266:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2267:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
2268:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2269:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2271:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2272:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2273:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
2274:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2275:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2277:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2278:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2279:ThirdParty/FreeRTOS/Source/tasks.c **** 
2280:ThirdParty/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2281:ThirdParty/FreeRTOS/Source/tasks.c **** }
2282:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2283:ThirdParty/FreeRTOS/Source/tasks.c **** 
2284:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:ThirdParty/FreeRTOS/Source/tasks.c **** {
2286:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2287:ThirdParty/FreeRTOS/Source/tasks.c **** 
2288:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
ARM GAS  /tmp/cc4Zpja9.s 			page 47


2289:ThirdParty/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2291:ThirdParty/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2292:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2293:ThirdParty/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:ThirdParty/FreeRTOS/Source/tasks.c **** 
2295:ThirdParty/FreeRTOS/Source/tasks.c **** 	return xTicks;
2296:ThirdParty/FreeRTOS/Source/tasks.c **** }
2297:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2298:ThirdParty/FreeRTOS/Source/tasks.c **** 
2299:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:ThirdParty/FreeRTOS/Source/tasks.c **** {
2301:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2302:ThirdParty/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:ThirdParty/FreeRTOS/Source/tasks.c **** 
2304:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:ThirdParty/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:ThirdParty/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:ThirdParty/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:ThirdParty/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:ThirdParty/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:ThirdParty/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:ThirdParty/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:ThirdParty/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:ThirdParty/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:ThirdParty/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:ThirdParty/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:ThirdParty/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:ThirdParty/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:ThirdParty/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2319:ThirdParty/FreeRTOS/Source/tasks.c **** 
2320:ThirdParty/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2321:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2322:ThirdParty/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2323:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2324:ThirdParty/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:ThirdParty/FreeRTOS/Source/tasks.c **** 
2326:ThirdParty/FreeRTOS/Source/tasks.c **** 	return xReturn;
2327:ThirdParty/FreeRTOS/Source/tasks.c **** }
2328:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2329:ThirdParty/FreeRTOS/Source/tasks.c **** 
2330:ThirdParty/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:ThirdParty/FreeRTOS/Source/tasks.c **** {
2332:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2334:ThirdParty/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2335:ThirdParty/FreeRTOS/Source/tasks.c **** }
2336:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2337:ThirdParty/FreeRTOS/Source/tasks.c **** 
2338:ThirdParty/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:ThirdParty/FreeRTOS/Source/tasks.c **** {
2340:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2341:ThirdParty/FreeRTOS/Source/tasks.c **** 
2342:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:ThirdParty/FreeRTOS/Source/tasks.c **** 	queried. */
2344:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2345:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
ARM GAS  /tmp/cc4Zpja9.s 			page 48


2346:ThirdParty/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2347:ThirdParty/FreeRTOS/Source/tasks.c **** }
2348:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:ThirdParty/FreeRTOS/Source/tasks.c **** 
2350:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:ThirdParty/FreeRTOS/Source/tasks.c **** 
2352:ThirdParty/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2354:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2355:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2356:ThirdParty/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2357:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2358:ThirdParty/FreeRTOS/Source/tasks.c **** 
2359:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:ThirdParty/FreeRTOS/Source/tasks.c **** 
2361:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2362:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2363:ThirdParty/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2364:ThirdParty/FreeRTOS/Source/tasks.c **** 
2365:ThirdParty/FreeRTOS/Source/tasks.c **** 			do
2366:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2367:ThirdParty/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2368:ThirdParty/FreeRTOS/Source/tasks.c **** 
2369:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2370:ThirdParty/FreeRTOS/Source/tasks.c **** 				mismatch. */
2371:ThirdParty/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2372:ThirdParty/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2373:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2374:ThirdParty/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2375:ThirdParty/FreeRTOS/Source/tasks.c **** 
2376:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2377:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2378:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2379:ThirdParty/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2380:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2381:ThirdParty/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2382:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2383:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2384:ThirdParty/FreeRTOS/Source/tasks.c **** 						found. */
2385:ThirdParty/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2386:ThirdParty/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2387:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2388:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
2389:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2390:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2392:ThirdParty/FreeRTOS/Source/tasks.c **** 
2393:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2394:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2395:ThirdParty/FreeRTOS/Source/tasks.c **** 						break;
2396:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2397:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2398:ThirdParty/FreeRTOS/Source/tasks.c **** 
2399:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2400:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2401:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2402:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /tmp/cc4Zpja9.s 			page 49


2403:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2404:ThirdParty/FreeRTOS/Source/tasks.c **** 
2405:ThirdParty/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2406:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2407:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
2408:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2409:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2411:ThirdParty/FreeRTOS/Source/tasks.c **** 
2412:ThirdParty/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2413:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2414:ThirdParty/FreeRTOS/Source/tasks.c **** 
2415:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2417:ThirdParty/FreeRTOS/Source/tasks.c **** 
2418:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:ThirdParty/FreeRTOS/Source/tasks.c **** 
2420:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2422:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2423:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2424:ThirdParty/FreeRTOS/Source/tasks.c **** 
2425:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2427:ThirdParty/FreeRTOS/Source/tasks.c **** 
2428:ThirdParty/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2429:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2430:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2431:ThirdParty/FreeRTOS/Source/tasks.c **** 			do
2432:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2433:ThirdParty/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2434:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2435:ThirdParty/FreeRTOS/Source/tasks.c **** 
2436:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2437:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2438:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2439:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
2440:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2441:ThirdParty/FreeRTOS/Source/tasks.c **** 
2442:ThirdParty/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2443:ThirdParty/FreeRTOS/Source/tasks.c **** 
2444:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2445:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2446:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2447:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2448:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2449:ThirdParty/FreeRTOS/Source/tasks.c **** 
2450:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2451:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2452:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2453:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2454:ThirdParty/FreeRTOS/Source/tasks.c **** 
2455:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2457:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2458:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2459:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
ARM GAS  /tmp/cc4Zpja9.s 			page 50


2460:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2461:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2462:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2463:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif
2464:ThirdParty/FreeRTOS/Source/tasks.c **** 
2465:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2467:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2468:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2469:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2470:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2471:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2472:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2473:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif
2474:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2475:ThirdParty/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2476:ThirdParty/FreeRTOS/Source/tasks.c **** 
2477:ThirdParty/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2478:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2479:ThirdParty/FreeRTOS/Source/tasks.c **** 
2480:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2482:ThirdParty/FreeRTOS/Source/tasks.c **** 
2483:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:ThirdParty/FreeRTOS/Source/tasks.c **** 
2485:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2487:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2488:ThirdParty/FreeRTOS/Source/tasks.c **** 
2489:ThirdParty/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2490:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2491:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2493:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2494:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:ThirdParty/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2496:ThirdParty/FreeRTOS/Source/tasks.c **** 				do
2497:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2498:ThirdParty/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2499:ThirdParty/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2500:ThirdParty/FreeRTOS/Source/tasks.c **** 
2501:ThirdParty/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2502:ThirdParty/FreeRTOS/Source/tasks.c **** 
2503:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:ThirdParty/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2505:ThirdParty/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2506:ThirdParty/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2507:ThirdParty/FreeRTOS/Source/tasks.c **** 
2508:ThirdParty/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2510:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:ThirdParty/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:ThirdParty/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2513:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2514:ThirdParty/FreeRTOS/Source/tasks.c **** 				#endif
2515:ThirdParty/FreeRTOS/Source/tasks.c **** 
2516:ThirdParty/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  /tmp/cc4Zpja9.s 			page 51


2517:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2518:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:ThirdParty/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2520:ThirdParty/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2521:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2522:ThirdParty/FreeRTOS/Source/tasks.c **** 				#endif
2523:ThirdParty/FreeRTOS/Source/tasks.c **** 
2524:ThirdParty/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2526:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2528:ThirdParty/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:ThirdParty/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:ThirdParty/FreeRTOS/Source/tasks.c **** 						#else
2531:ThirdParty/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:ThirdParty/FreeRTOS/Source/tasks.c **** 						#endif
2533:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2534:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2535:ThirdParty/FreeRTOS/Source/tasks.c **** 				#else
2536:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2537:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2538:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2539:ThirdParty/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2540:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2541:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2542:ThirdParty/FreeRTOS/Source/tasks.c **** 				#endif
2543:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2544:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
2545:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2546:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2548:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2549:ThirdParty/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2550:ThirdParty/FreeRTOS/Source/tasks.c **** 
2551:ThirdParty/FreeRTOS/Source/tasks.c **** 		return uxTask;
2552:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2553:ThirdParty/FreeRTOS/Source/tasks.c **** 
2554:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:ThirdParty/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2556:ThirdParty/FreeRTOS/Source/tasks.c **** 
2557:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:ThirdParty/FreeRTOS/Source/tasks.c **** 
2559:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2561:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:ThirdParty/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2565:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2566:ThirdParty/FreeRTOS/Source/tasks.c **** 
2567:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:ThirdParty/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2569:ThirdParty/FreeRTOS/Source/tasks.c **** 
2570:ThirdParty/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:ThirdParty/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:ThirdParty/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:ThirdParty/FreeRTOS/Source/tasks.c **** 1. */
ARM GAS  /tmp/cc4Zpja9.s 			page 52


2574:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:ThirdParty/FreeRTOS/Source/tasks.c **** 
2576:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2578:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:ThirdParty/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:ThirdParty/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2581:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:ThirdParty/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2583:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2585:ThirdParty/FreeRTOS/Source/tasks.c **** 
2586:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:ThirdParty/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:ThirdParty/FreeRTOS/Source/tasks.c **** 
2589:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:ThirdParty/FreeRTOS/Source/tasks.c **** 
2591:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2593:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2595:ThirdParty/FreeRTOS/Source/tasks.c **** 
2596:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2597:ThirdParty/FreeRTOS/Source/tasks.c **** 
2598:ThirdParty/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2599:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2600:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:ThirdParty/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2602:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2604:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2605:ThirdParty/FreeRTOS/Source/tasks.c **** 
2606:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:ThirdParty/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:ThirdParty/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2609:ThirdParty/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:ThirdParty/FreeRTOS/Source/tasks.c **** 
2611:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:ThirdParty/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:ThirdParty/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:ThirdParty/FreeRTOS/Source/tasks.c **** 				is used. */
2615:ThirdParty/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2616:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2617:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2619:ThirdParty/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:ThirdParty/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2622:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
2623:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2624:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2626:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2627:ThirdParty/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2628:ThirdParty/FreeRTOS/Source/tasks.c **** 
2629:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/cc4Zpja9.s 			page 53


2631:ThirdParty/FreeRTOS/Source/tasks.c **** 
2632:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:ThirdParty/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2634:ThirdParty/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2636:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:ThirdParty/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2638:ThirdParty/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2639:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2641:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:ThirdParty/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2643:ThirdParty/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2644:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2645:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
2646:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2647:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2649:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2650:ThirdParty/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2652:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
2653:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2654:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2655:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2656:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2657:ThirdParty/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2658:ThirdParty/FreeRTOS/Source/tasks.c **** 
2659:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
2660:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2661:ThirdParty/FreeRTOS/Source/tasks.c **** 
2662:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:ThirdParty/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2664:ThirdParty/FreeRTOS/Source/tasks.c **** 
2665:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:ThirdParty/FreeRTOS/Source/tasks.c **** {
2667:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2668:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2669:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2670:ThirdParty/FreeRTOS/Source/tasks.c **** 
2671:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:ThirdParty/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:ThirdParty/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2674:ThirdParty/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2676:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2677:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:ThirdParty/FreeRTOS/Source/tasks.c **** 		block. */
2679:ThirdParty/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2680:ThirdParty/FreeRTOS/Source/tasks.c **** 
2681:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:ThirdParty/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2683:ThirdParty/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2684:ThirdParty/FreeRTOS/Source/tasks.c **** 
2685:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2686:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
ARM GAS  /tmp/cc4Zpja9.s 			page 54


2688:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2689:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
2690:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2691:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2693:ThirdParty/FreeRTOS/Source/tasks.c **** 
2694:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:ThirdParty/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:ThirdParty/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:ThirdParty/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2698:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2699:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2700:ThirdParty/FreeRTOS/Source/tasks.c **** 			for( ;; )
2701:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2702:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2703:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2704:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:ThirdParty/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2706:ThirdParty/FreeRTOS/Source/tasks.c **** 					unlikely that the
2707:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:ThirdParty/FreeRTOS/Source/tasks.c **** 					next time through. */
2709:ThirdParty/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2710:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
2711:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2712:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
2713:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
2714:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:ThirdParty/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:ThirdParty/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2717:ThirdParty/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2718:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2719:ThirdParty/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2720:ThirdParty/FreeRTOS/Source/tasks.c **** 
2721:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2722:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2723:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:ThirdParty/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2725:ThirdParty/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:ThirdParty/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2727:ThirdParty/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2728:ThirdParty/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2729:ThirdParty/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2730:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2731:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
2732:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2733:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2735:ThirdParty/FreeRTOS/Source/tasks.c **** 
2736:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2738:ThirdParty/FreeRTOS/Source/tasks.c **** 
2739:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:ThirdParty/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2741:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2742:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2743:ThirdParty/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2744:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cc4Zpja9.s 			page 55


2745:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
2746:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2747:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2749:ThirdParty/FreeRTOS/Source/tasks.c **** 
2750:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:ThirdParty/FreeRTOS/Source/tasks.c **** 					list. */
2752:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2753:ThirdParty/FreeRTOS/Source/tasks.c **** 
2754:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:ThirdParty/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2756:ThirdParty/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
2758:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2759:ThirdParty/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2760:ThirdParty/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2761:ThirdParty/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2762:ThirdParty/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2763:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
2764:ThirdParty/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2765:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
2766:ThirdParty/FreeRTOS/Source/tasks.c **** 						else
2767:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
2768:ThirdParty/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
2770:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
2771:ThirdParty/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
2773:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2774:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2775:ThirdParty/FreeRTOS/Source/tasks.c **** 
2776:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:ThirdParty/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:ThirdParty/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2781:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2782:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2783:ThirdParty/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2784:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2785:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
2786:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2787:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2789:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2790:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:ThirdParty/FreeRTOS/Source/tasks.c **** 
2792:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2794:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:ThirdParty/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2798:ThirdParty/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2799:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2800:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
2801:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc4Zpja9.s 			page 56


2802:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2804:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2805:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2807:ThirdParty/FreeRTOS/Source/tasks.c **** 	else
2808:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2809:ThirdParty/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2810:ThirdParty/FreeRTOS/Source/tasks.c **** 
2811:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:ThirdParty/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2813:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2815:ThirdParty/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2816:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2817:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
2818:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2819:ThirdParty/FreeRTOS/Source/tasks.c **** 
2820:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2822:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2823:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2824:ThirdParty/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2825:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2826:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
2827:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2828:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2830:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2831:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:ThirdParty/FreeRTOS/Source/tasks.c **** 
2833:ThirdParty/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2834:ThirdParty/FreeRTOS/Source/tasks.c **** }
2835:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:ThirdParty/FreeRTOS/Source/tasks.c **** 
2837:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:ThirdParty/FreeRTOS/Source/tasks.c **** 
2839:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2841:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2842:ThirdParty/FreeRTOS/Source/tasks.c **** 
2843:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:ThirdParty/FreeRTOS/Source/tasks.c **** 		getting set. */
2845:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2846:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2847:ThirdParty/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2849:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
2850:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2851:ThirdParty/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2852:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2853:ThirdParty/FreeRTOS/Source/tasks.c **** 
2854:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:ThirdParty/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2856:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2857:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2858:ThirdParty/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
ARM GAS  /tmp/cc4Zpja9.s 			page 57


2859:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2860:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2861:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2862:ThirdParty/FreeRTOS/Source/tasks.c **** 
2863:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2865:ThirdParty/FreeRTOS/Source/tasks.c **** 
2866:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:ThirdParty/FreeRTOS/Source/tasks.c **** 
2868:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2870:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2871:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2872:ThirdParty/FreeRTOS/Source/tasks.c **** 
2873:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:ThirdParty/FreeRTOS/Source/tasks.c **** 
2876:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:ThirdParty/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2878:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2879:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2880:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2881:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2882:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2883:ThirdParty/FreeRTOS/Source/tasks.c **** 
2884:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
2885:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2886:ThirdParty/FreeRTOS/Source/tasks.c **** 
2887:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2889:ThirdParty/FreeRTOS/Source/tasks.c **** 
2890:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:ThirdParty/FreeRTOS/Source/tasks.c **** 
2892:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2894:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2895:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2896:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:ThirdParty/FreeRTOS/Source/tasks.c **** 
2898:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:ThirdParty/FreeRTOS/Source/tasks.c **** 
2901:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:ThirdParty/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2903:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2905:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2907:ThirdParty/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:ThirdParty/FreeRTOS/Source/tasks.c **** 
2909:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
2910:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2911:ThirdParty/FreeRTOS/Source/tasks.c **** 
2912:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2914:ThirdParty/FreeRTOS/Source/tasks.c **** 
2915:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  /tmp/cc4Zpja9.s 			page 58


2916:ThirdParty/FreeRTOS/Source/tasks.c **** 
2917:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2919:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2920:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2921:ThirdParty/FreeRTOS/Source/tasks.c **** 
2922:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2924:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2925:ThirdParty/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2926:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2927:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
2928:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2929:ThirdParty/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2930:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2931:ThirdParty/FreeRTOS/Source/tasks.c **** 
2932:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2934:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2936:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
2937:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2938:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2939:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2940:ThirdParty/FreeRTOS/Source/tasks.c **** 
2941:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
2942:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2943:ThirdParty/FreeRTOS/Source/tasks.c **** 
2944:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2946:ThirdParty/FreeRTOS/Source/tasks.c **** 
2947:ThirdParty/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2948:ThirdParty/FreeRTOS/Source/tasks.c **** {
2949:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2950:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2951:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:ThirdParty/FreeRTOS/Source/tasks.c **** 		switch. */
2953:ThirdParty/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2954:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
2955:ThirdParty/FreeRTOS/Source/tasks.c **** 	else
2956:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
2957:ThirdParty/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2958:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:ThirdParty/FreeRTOS/Source/tasks.c **** 
2960:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2962:ThirdParty/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:ThirdParty/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:ThirdParty/FreeRTOS/Source/tasks.c **** 			#else
2965:ThirdParty/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif
2967:ThirdParty/FreeRTOS/Source/tasks.c **** 
2968:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:ThirdParty/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:ThirdParty/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:ThirdParty/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
2972:ThirdParty/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
ARM GAS  /tmp/cc4Zpja9.s 			page 59


2973:ThirdParty/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
2974:ThirdParty/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
2975:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2977:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2979:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
2980:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
2981:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
2983:ThirdParty/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2985:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:ThirdParty/FreeRTOS/Source/tasks.c **** 
2987:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:ThirdParty/FreeRTOS/Source/tasks.c **** 
2990:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
2993:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
2995:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
2996:ThirdParty/FreeRTOS/Source/tasks.c **** 
2997:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:ThirdParty/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:ThirdParty/FreeRTOS/Source/tasks.c **** 
3002:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3005:ThirdParty/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3007:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
3008:ThirdParty/FreeRTOS/Source/tasks.c **** 
3009:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3011:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:ThirdParty/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
3013:ThirdParty/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3015:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3017:ThirdParty/FreeRTOS/Source/tasks.c **** }
3018:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3019:ThirdParty/FreeRTOS/Source/tasks.c **** 
3020:ThirdParty/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:ThirdParty/FreeRTOS/Source/tasks.c **** {
3022:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3023:ThirdParty/FreeRTOS/Source/tasks.c **** 
3024:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:ThirdParty/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:ThirdParty/FreeRTOS/Source/tasks.c **** 
3027:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:ThirdParty/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:ThirdParty/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
ARM GAS  /tmp/cc4Zpja9.s 			page 60


3030:ThirdParty/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3032:ThirdParty/FreeRTOS/Source/tasks.c **** 
3033:ThirdParty/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3034:ThirdParty/FreeRTOS/Source/tasks.c **** }
3035:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:ThirdParty/FreeRTOS/Source/tasks.c **** 
3037:ThirdParty/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:ThirdParty/FreeRTOS/Source/tasks.c **** {
3039:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3040:ThirdParty/FreeRTOS/Source/tasks.c **** 
3041:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:ThirdParty/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3043:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3044:ThirdParty/FreeRTOS/Source/tasks.c **** 
3045:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:ThirdParty/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:ThirdParty/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3048:ThirdParty/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3049:ThirdParty/FreeRTOS/Source/tasks.c **** 
3050:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:ThirdParty/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:ThirdParty/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:ThirdParty/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:ThirdParty/FreeRTOS/Source/tasks.c **** 	the task level). */
3055:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3056:ThirdParty/FreeRTOS/Source/tasks.c **** 
3057:ThirdParty/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3058:ThirdParty/FreeRTOS/Source/tasks.c **** }
3059:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3060:ThirdParty/FreeRTOS/Source/tasks.c **** 
3061:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:ThirdParty/FreeRTOS/Source/tasks.c **** 
3063:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3065:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3066:ThirdParty/FreeRTOS/Source/tasks.c **** 
3067:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3068:ThirdParty/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:ThirdParty/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:ThirdParty/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3071:ThirdParty/FreeRTOS/Source/tasks.c **** 
3072:ThirdParty/FreeRTOS/Source/tasks.c **** 
3073:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:ThirdParty/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:ThirdParty/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:ThirdParty/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3077:ThirdParty/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3078:ThirdParty/FreeRTOS/Source/tasks.c **** 
3079:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:ThirdParty/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:ThirdParty/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3083:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3084:ThirdParty/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3085:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3086:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 61


3087:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:ThirdParty/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3089:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3090:ThirdParty/FreeRTOS/Source/tasks.c **** 
3091:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3092:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:ThirdParty/FreeRTOS/Source/tasks.c **** 
3094:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:ThirdParty/FreeRTOS/Source/tasks.c **** {
3096:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3097:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3098:ThirdParty/FreeRTOS/Source/tasks.c **** 
3099:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:ThirdParty/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3101:ThirdParty/FreeRTOS/Source/tasks.c **** 
3102:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:ThirdParty/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:ThirdParty/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3105:ThirdParty/FreeRTOS/Source/tasks.c **** 
3106:ThirdParty/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:ThirdParty/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:ThirdParty/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:ThirdParty/FreeRTOS/Source/tasks.c **** 
3110:ThirdParty/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3112:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3113:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3114:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3115:ThirdParty/FreeRTOS/Source/tasks.c **** 
3116:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3117:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3118:ThirdParty/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3119:ThirdParty/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3120:ThirdParty/FreeRTOS/Source/tasks.c **** 
3121:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3123:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:ThirdParty/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:ThirdParty/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:ThirdParty/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:ThirdParty/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:ThirdParty/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:ThirdParty/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:ThirdParty/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:ThirdParty/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3133:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
3134:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3135:ThirdParty/FreeRTOS/Source/tasks.c **** 	else
3136:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3137:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:ThirdParty/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3139:ThirdParty/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3140:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3141:ThirdParty/FreeRTOS/Source/tasks.c **** 
3142:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3143:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cc4Zpja9.s 			page 62


3144:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:ThirdParty/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:ThirdParty/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3147:ThirdParty/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3148:ThirdParty/FreeRTOS/Source/tasks.c **** 
3149:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:ThirdParty/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:ThirdParty/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3152:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3153:ThirdParty/FreeRTOS/Source/tasks.c **** 	else
3154:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3155:ThirdParty/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3156:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3157:ThirdParty/FreeRTOS/Source/tasks.c **** 
3158:ThirdParty/FreeRTOS/Source/tasks.c **** 	return xReturn;
3159:ThirdParty/FreeRTOS/Source/tasks.c **** }
3160:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3161:ThirdParty/FreeRTOS/Source/tasks.c **** 
3162:ThirdParty/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:ThirdParty/FreeRTOS/Source/tasks.c **** {
3164:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3165:ThirdParty/FreeRTOS/Source/tasks.c **** 
3166:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:ThirdParty/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3168:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3169:ThirdParty/FreeRTOS/Source/tasks.c **** 
3170:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3171:ThirdParty/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3172:ThirdParty/FreeRTOS/Source/tasks.c **** 
3173:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:ThirdParty/FreeRTOS/Source/tasks.c **** 	event flags. */
3175:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3176:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3177:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3178:ThirdParty/FreeRTOS/Source/tasks.c **** 
3179:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:ThirdParty/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:ThirdParty/FreeRTOS/Source/tasks.c **** 	lists. */
3182:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3183:ThirdParty/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3184:ThirdParty/FreeRTOS/Source/tasks.c **** 
3185:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3186:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3187:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:ThirdParty/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3189:ThirdParty/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:ThirdParty/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:ThirdParty/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3192:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3193:ThirdParty/FreeRTOS/Source/tasks.c **** }
3194:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3195:ThirdParty/FreeRTOS/Source/tasks.c **** 
3196:ThirdParty/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:ThirdParty/FreeRTOS/Source/tasks.c **** {
3198:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3199:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3200:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/cc4Zpja9.s 			page 63


3201:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3202:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3203:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3204:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3205:ThirdParty/FreeRTOS/Source/tasks.c **** }
3206:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3207:ThirdParty/FreeRTOS/Source/tasks.c **** 
3208:ThirdParty/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:ThirdParty/FreeRTOS/Source/tasks.c **** {
3210:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3212:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3213:ThirdParty/FreeRTOS/Source/tasks.c **** }
3214:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3215:ThirdParty/FreeRTOS/Source/tasks.c **** 
3216:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:ThirdParty/FreeRTOS/Source/tasks.c **** {
3218:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3219:ThirdParty/FreeRTOS/Source/tasks.c **** 
3220:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3221:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3222:ThirdParty/FreeRTOS/Source/tasks.c **** 
3223:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3224:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3225:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:ThirdParty/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3227:ThirdParty/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3228:ThirdParty/FreeRTOS/Source/tasks.c **** 
3229:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3232:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:ThirdParty/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3234:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3236:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3237:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
3238:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
3239:ThirdParty/FreeRTOS/Source/tasks.c **** 
3240:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3242:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3243:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:ThirdParty/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3245:ThirdParty/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3246:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3247:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3248:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
3249:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
3250:ThirdParty/FreeRTOS/Source/tasks.c **** 
3251:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3252:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3253:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3254:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:ThirdParty/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:ThirdParty/FreeRTOS/Source/tasks.c **** 			was called. */
ARM GAS  /tmp/cc4Zpja9.s 			page 64


3258:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3259:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3260:ThirdParty/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3261:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3262:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:ThirdParty/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3264:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3265:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3266:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3267:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
3268:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3269:ThirdParty/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3270:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3271:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3272:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3273:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3274:ThirdParty/FreeRTOS/Source/tasks.c **** 
3275:ThirdParty/FreeRTOS/Source/tasks.c **** 	return xReturn;
3276:ThirdParty/FreeRTOS/Source/tasks.c **** }
3277:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:ThirdParty/FreeRTOS/Source/tasks.c **** 
3279:ThirdParty/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3280:ThirdParty/FreeRTOS/Source/tasks.c **** {
3281:ThirdParty/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3282:ThirdParty/FreeRTOS/Source/tasks.c **** }
3283:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3284:ThirdParty/FreeRTOS/Source/tasks.c **** 
3285:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:ThirdParty/FreeRTOS/Source/tasks.c **** 
3287:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3289:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3290:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3291:ThirdParty/FreeRTOS/Source/tasks.c **** 
3292:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3293:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3294:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3295:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3296:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3297:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
3298:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3299:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3300:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3301:ThirdParty/FreeRTOS/Source/tasks.c **** 
3302:ThirdParty/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3303:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3304:ThirdParty/FreeRTOS/Source/tasks.c **** 
3305:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3307:ThirdParty/FreeRTOS/Source/tasks.c **** 
3308:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:ThirdParty/FreeRTOS/Source/tasks.c **** 
3310:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3312:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3313:ThirdParty/FreeRTOS/Source/tasks.c **** 
3314:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
ARM GAS  /tmp/cc4Zpja9.s 			page 65


3315:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3316:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3317:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3318:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3319:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3320:ThirdParty/FreeRTOS/Source/tasks.c **** 
3321:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:ThirdParty/FreeRTOS/Source/tasks.c **** 
3323:ThirdParty/FreeRTOS/Source/tasks.c **** /*
3324:ThirdParty/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3325:ThirdParty/FreeRTOS/Source/tasks.c ****  * The Idle task.
3326:ThirdParty/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3327:ThirdParty/FreeRTOS/Source/tasks.c ****  *
3328:ThirdParty/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:ThirdParty/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:ThirdParty/FreeRTOS/Source/tasks.c ****  *
3331:ThirdParty/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:ThirdParty/FreeRTOS/Source/tasks.c ****  *
3333:ThirdParty/FreeRTOS/Source/tasks.c ****  */
3334:ThirdParty/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:ThirdParty/FreeRTOS/Source/tasks.c **** {
3336:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3337:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3338:ThirdParty/FreeRTOS/Source/tasks.c **** 
3339:ThirdParty/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:ThirdParty/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:ThirdParty/FreeRTOS/Source/tasks.c **** 
3342:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:ThirdParty/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:ThirdParty/FreeRTOS/Source/tasks.c **** 	any. */
3345:ThirdParty/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:ThirdParty/FreeRTOS/Source/tasks.c **** 
3347:ThirdParty/FreeRTOS/Source/tasks.c **** 	for( ;; )
3348:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3349:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:ThirdParty/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:ThirdParty/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3352:ThirdParty/FreeRTOS/Source/tasks.c **** 
3353:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3355:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:ThirdParty/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3357:ThirdParty/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:ThirdParty/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3359:ThirdParty/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3360:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3361:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:ThirdParty/FreeRTOS/Source/tasks.c **** 
3363:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3365:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:ThirdParty/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:ThirdParty/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3368:ThirdParty/FreeRTOS/Source/tasks.c **** 			timeslice.
3369:ThirdParty/FreeRTOS/Source/tasks.c **** 
3370:ThirdParty/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3371:ThirdParty/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
ARM GAS  /tmp/cc4Zpja9.s 			page 66


3372:ThirdParty/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:ThirdParty/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3375:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3376:ThirdParty/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3377:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3378:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
3379:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3380:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3382:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3383:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:ThirdParty/FreeRTOS/Source/tasks.c **** 
3385:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3387:ThirdParty/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:ThirdParty/FreeRTOS/Source/tasks.c **** 
3389:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:ThirdParty/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3391:ThirdParty/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3392:ThirdParty/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:ThirdParty/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:ThirdParty/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3395:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3396:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:ThirdParty/FreeRTOS/Source/tasks.c **** 
3398:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:ThirdParty/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:ThirdParty/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3401:ThirdParty/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3404:ThirdParty/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:ThirdParty/FreeRTOS/Source/tasks.c **** 
3406:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:ThirdParty/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:ThirdParty/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3409:ThirdParty/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:ThirdParty/FreeRTOS/Source/tasks.c **** 			valid. */
3411:ThirdParty/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:ThirdParty/FreeRTOS/Source/tasks.c **** 
3413:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3415:ThirdParty/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3416:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
3417:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:ThirdParty/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3419:ThirdParty/FreeRTOS/Source/tasks.c **** 					be used. */
3420:ThirdParty/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:ThirdParty/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:ThirdParty/FreeRTOS/Source/tasks.c **** 
3423:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:ThirdParty/FreeRTOS/Source/tasks.c **** 					if the application does not want
3425:ThirdParty/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:ThirdParty/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:ThirdParty/FreeRTOS/Source/tasks.c **** 
3428:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
ARM GAS  /tmp/cc4Zpja9.s 			page 67


3429:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
3430:ThirdParty/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:ThirdParty/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:ThirdParty/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
3434:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
3435:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
3436:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
3438:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
3439:ThirdParty/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3440:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3441:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
3442:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3443:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3445:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3446:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3448:ThirdParty/FreeRTOS/Source/tasks.c **** }
3449:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3450:ThirdParty/FreeRTOS/Source/tasks.c **** 
3451:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:ThirdParty/FreeRTOS/Source/tasks.c **** 
3453:ThirdParty/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3455:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:ThirdParty/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:ThirdParty/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:ThirdParty/FreeRTOS/Source/tasks.c **** 
3459:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3461:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:ThirdParty/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3463:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3464:ThirdParty/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3466:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:ThirdParty/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3468:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3469:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
3470:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3471:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:ThirdParty/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:ThirdParty/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:ThirdParty/FreeRTOS/Source/tasks.c **** 			interrupts. */
3475:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3477:ThirdParty/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3479:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
3480:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3481:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3483:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3484:ThirdParty/FreeRTOS/Source/tasks.c **** 
3485:ThirdParty/FreeRTOS/Source/tasks.c **** 		return eReturn;
ARM GAS  /tmp/cc4Zpja9.s 			page 68


3486:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3487:ThirdParty/FreeRTOS/Source/tasks.c **** 
3488:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:ThirdParty/FreeRTOS/Source/tasks.c **** 
3491:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:ThirdParty/FreeRTOS/Source/tasks.c **** 
3493:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3495:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:ThirdParty/FreeRTOS/Source/tasks.c **** 
3497:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3499:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3502:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3503:ThirdParty/FreeRTOS/Source/tasks.c **** 
3504:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3506:ThirdParty/FreeRTOS/Source/tasks.c **** 
3507:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:ThirdParty/FreeRTOS/Source/tasks.c **** 
3509:ThirdParty/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3511:ThirdParty/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3512:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3513:ThirdParty/FreeRTOS/Source/tasks.c **** 
3514:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3516:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:ThirdParty/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3519:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
3520:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3521:ThirdParty/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3522:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3523:ThirdParty/FreeRTOS/Source/tasks.c **** 
3524:ThirdParty/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3525:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3526:ThirdParty/FreeRTOS/Source/tasks.c **** 
3527:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3529:ThirdParty/FreeRTOS/Source/tasks.c **** 
3530:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:ThirdParty/FreeRTOS/Source/tasks.c **** 
3532:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3534:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3535:ThirdParty/FreeRTOS/Source/tasks.c **** 
3536:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:ThirdParty/FreeRTOS/Source/tasks.c **** 		the calling task. */
3538:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:ThirdParty/FreeRTOS/Source/tasks.c **** 
3540:ThirdParty/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3542:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 69


3543:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3545:ThirdParty/FreeRTOS/Source/tasks.c **** 
3546:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3547:ThirdParty/FreeRTOS/Source/tasks.c **** {
3548:ThirdParty/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3549:ThirdParty/FreeRTOS/Source/tasks.c **** 
3550:ThirdParty/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3551:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3552:ThirdParty/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3553:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3554:ThirdParty/FreeRTOS/Source/tasks.c **** 
3555:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3556:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3557:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3558:ThirdParty/FreeRTOS/Source/tasks.c **** 
3559:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3561:ThirdParty/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3562:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3563:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:ThirdParty/FreeRTOS/Source/tasks.c **** 
3565:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3567:ThirdParty/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3568:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3569:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:ThirdParty/FreeRTOS/Source/tasks.c **** 
3571:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:ThirdParty/FreeRTOS/Source/tasks.c **** 	using list2. */
3573:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3574:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3575:ThirdParty/FreeRTOS/Source/tasks.c **** }
3576:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3577:ThirdParty/FreeRTOS/Source/tasks.c **** 
3578:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:ThirdParty/FreeRTOS/Source/tasks.c **** {
3580:ThirdParty/FreeRTOS/Source/tasks.c **** 
3581:ThirdParty/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:ThirdParty/FreeRTOS/Source/tasks.c **** 
3583:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3585:ThirdParty/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3586:ThirdParty/FreeRTOS/Source/tasks.c **** 
3587:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:ThirdParty/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3589:ThirdParty/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3590:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3591:ThirdParty/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3592:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3593:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3594:ThirdParty/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3595:ThirdParty/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3596:ThirdParty/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3597:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3598:ThirdParty/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3599:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 70


3600:ThirdParty/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3601:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3602:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3603:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:ThirdParty/FreeRTOS/Source/tasks.c **** }
3605:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:ThirdParty/FreeRTOS/Source/tasks.c **** 
3607:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:ThirdParty/FreeRTOS/Source/tasks.c **** 
3609:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3611:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3612:ThirdParty/FreeRTOS/Source/tasks.c **** 
3613:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3615:ThirdParty/FreeRTOS/Source/tasks.c **** 
3616:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3617:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3618:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3619:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3620:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3621:ThirdParty/FreeRTOS/Source/tasks.c **** 
3622:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3624:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3625:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3626:ThirdParty/FreeRTOS/Source/tasks.c **** 		#else
3627:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3628:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3630:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
3631:ThirdParty/FreeRTOS/Source/tasks.c **** 
3632:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3634:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3636:ThirdParty/FreeRTOS/Source/tasks.c **** 		#else
3637:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3638:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3639:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3640:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
3641:ThirdParty/FreeRTOS/Source/tasks.c **** 
3642:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:ThirdParty/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:ThirdParty/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3645:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3646:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3647:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3648:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3649:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3650:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3651:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
3652:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3653:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3654:ThirdParty/FreeRTOS/Source/tasks.c **** 
3655:ThirdParty/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc4Zpja9.s 			page 71


3657:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:ThirdParty/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:ThirdParty/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3661:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
3662:ThirdParty/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3663:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
3664:ThirdParty/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3665:ThirdParty/FreeRTOS/Source/tasks.c **** 							{
3666:ThirdParty/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3667:ThirdParty/FreeRTOS/Source/tasks.c **** 							}
3668:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
3669:ThirdParty/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3670:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
3671:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
3672:ThirdParty/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3674:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3675:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
3676:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3677:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3678:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3679:ThirdParty/FreeRTOS/Source/tasks.c **** 
3680:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:ThirdParty/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3683:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3684:ThirdParty/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3686:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3688:ThirdParty/FreeRTOS/Source/tasks.c **** 			#else
3689:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3690:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3691:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3692:ThirdParty/FreeRTOS/Source/tasks.c **** 			#endif
3693:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3694:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
3695:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3696:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3698:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3699:ThirdParty/FreeRTOS/Source/tasks.c **** 
3700:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3702:ThirdParty/FreeRTOS/Source/tasks.c **** 
3703:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:ThirdParty/FreeRTOS/Source/tasks.c **** 
3705:ThirdParty/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3707:ThirdParty/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3709:ThirdParty/FreeRTOS/Source/tasks.c **** 
3710:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3711:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3712:ThirdParty/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3713:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 72


3714:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:ThirdParty/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:ThirdParty/FreeRTOS/Source/tasks.c **** 			do
3719:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3720:ThirdParty/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3721:ThirdParty/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3722:ThirdParty/FreeRTOS/Source/tasks.c **** 				uxTask++;
3723:ThirdParty/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3724:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3725:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
3726:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3727:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3729:ThirdParty/FreeRTOS/Source/tasks.c **** 
3730:ThirdParty/FreeRTOS/Source/tasks.c **** 		return uxTask;
3731:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3732:ThirdParty/FreeRTOS/Source/tasks.c **** 
3733:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3735:ThirdParty/FreeRTOS/Source/tasks.c **** 
3736:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:ThirdParty/FreeRTOS/Source/tasks.c **** 
3738:ThirdParty/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 129              		.loc 1 3739 2 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
3740:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 134              		.loc 1 3740 2 view .LVU32
3741:ThirdParty/FreeRTOS/Source/tasks.c **** 
3742:ThirdParty/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 135              		.loc 1 3742 3 view .LVU33
3740:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 136              		.loc 1 3740 11 is_stmt 0 view .LVU34
 137 0000 0023     		movs	r3, #0
 138              		.loc 1 3742 8 view .LVU35
 139 0002 01E0     		b	.L13
 140              	.LVL10:
 141              	.L14:
3743:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3744:ThirdParty/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 142              		.loc 1 3744 4 is_stmt 1 view .LVU36
 143              		.loc 1 3744 17 is_stmt 0 view .LVU37
 144 0004 0130     		adds	r0, r0, #1
 145              	.LVL11:
3745:ThirdParty/FreeRTOS/Source/tasks.c **** 			ulCount++;
 146              		.loc 1 3745 4 is_stmt 1 view .LVU38
 147              		.loc 1 3745 11 is_stmt 0 view .LVU39
 148 0006 0133     		adds	r3, r3, #1
 149              	.LVL12:
 150              	.L13:
3742:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 151              		.loc 1 3742 8 is_stmt 1 view .LVU40
ARM GAS  /tmp/cc4Zpja9.s 			page 73


3742:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 152              		.loc 1 3742 10 is_stmt 0 view .LVU41
 153 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
3742:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 154              		.loc 1 3742 8 view .LVU42
 155 000a A52A     		cmp	r2, #165
 156 000c FAD0     		beq	.L14
3746:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3747:ThirdParty/FreeRTOS/Source/tasks.c **** 
3748:ThirdParty/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 157              		.loc 1 3748 3 is_stmt 1 view .LVU43
 158              	.LVL13:
3749:ThirdParty/FreeRTOS/Source/tasks.c **** 
3750:ThirdParty/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 159              		.loc 1 3750 3 view .LVU44
3751:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 160              		.loc 1 3751 2 is_stmt 0 view .LVU45
 161 000e C3F38F00 		ubfx	r0, r3, #2, #16
 162              	.LVL14:
 163              		.loc 1 3751 2 view .LVU46
 164 0012 7047     		bx	lr
 165              		.cfi_endproc
 166              	.LFE39:
 168              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 169              		.align	1
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 174              	prvResetNextTaskUnblockTime:
 175              	.LFB42:
3752:ThirdParty/FreeRTOS/Source/tasks.c **** 
3753:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3755:ThirdParty/FreeRTOS/Source/tasks.c **** 
3756:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:ThirdParty/FreeRTOS/Source/tasks.c **** 
3758:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:ThirdParty/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:ThirdParty/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:ThirdParty/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:ThirdParty/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3763:ThirdParty/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3765:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3766:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3767:ThirdParty/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:ThirdParty/FreeRTOS/Source/tasks.c **** 
3769:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:ThirdParty/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:ThirdParty/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:ThirdParty/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:ThirdParty/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:ThirdParty/FreeRTOS/Source/tasks.c **** 		type. */
3775:ThirdParty/FreeRTOS/Source/tasks.c **** 
3776:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:ThirdParty/FreeRTOS/Source/tasks.c **** 
3778:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
ARM GAS  /tmp/cc4Zpja9.s 			page 74


3779:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3780:ThirdParty/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3782:ThirdParty/FreeRTOS/Source/tasks.c **** 		#else
3783:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3784:ThirdParty/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3786:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
3787:ThirdParty/FreeRTOS/Source/tasks.c **** 
3788:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:ThirdParty/FreeRTOS/Source/tasks.c **** 
3790:ThirdParty/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3791:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3792:ThirdParty/FreeRTOS/Source/tasks.c **** 
3793:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:ThirdParty/FreeRTOS/Source/tasks.c **** 
3796:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:ThirdParty/FreeRTOS/Source/tasks.c **** 
3798:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3800:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3801:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3802:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3803:ThirdParty/FreeRTOS/Source/tasks.c **** 
3804:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3805:ThirdParty/FreeRTOS/Source/tasks.c **** 
3806:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3808:ThirdParty/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3809:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3810:ThirdParty/FreeRTOS/Source/tasks.c **** 		#else
3811:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3812:ThirdParty/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3814:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
3815:ThirdParty/FreeRTOS/Source/tasks.c **** 
3816:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3817:ThirdParty/FreeRTOS/Source/tasks.c **** 
3818:ThirdParty/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3819:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3820:ThirdParty/FreeRTOS/Source/tasks.c **** 
3821:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3823:ThirdParty/FreeRTOS/Source/tasks.c **** 
3824:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:ThirdParty/FreeRTOS/Source/tasks.c **** 
3826:ThirdParty/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3828:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:ThirdParty/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:ThirdParty/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3831:ThirdParty/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:ThirdParty/FreeRTOS/Source/tasks.c **** 
3833:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:ThirdParty/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  /tmp/cc4Zpja9.s 			page 75


3836:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3837:ThirdParty/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3839:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:ThirdParty/FreeRTOS/Source/tasks.c **** 
3841:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3843:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:ThirdParty/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3845:ThirdParty/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:ThirdParty/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3847:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3848:ThirdParty/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3850:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:ThirdParty/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3852:ThirdParty/FreeRTOS/Source/tasks.c **** 			memory. */
3853:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3854:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3855:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:ThirdParty/FreeRTOS/Source/tasks.c **** 				must be freed. */
3857:ThirdParty/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3858:ThirdParty/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3859:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3860:ThirdParty/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3862:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:ThirdParty/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3864:ThirdParty/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3865:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3866:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
3867:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3868:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:ThirdParty/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3870:ThirdParty/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3873:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3874:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3876:ThirdParty/FreeRTOS/Source/tasks.c **** 
3877:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:ThirdParty/FreeRTOS/Source/tasks.c **** 
3880:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:ThirdParty/FreeRTOS/Source/tasks.c **** {
 176              		.loc 1 3881 1 is_stmt 1 view -0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 0, uses_anonymous_args = 0
 180              		@ link register save eliminated.
3882:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 181              		.loc 1 3882 1 view .LVU48
3883:ThirdParty/FreeRTOS/Source/tasks.c **** 
3884:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 182              		.loc 1 3884 2 view .LVU49
 183              		.loc 1 3884 6 is_stmt 0 view .LVU50
ARM GAS  /tmp/cc4Zpja9.s 			page 76


 184 0000 084B     		ldr	r3, .L18
 185 0002 1B68     		ldr	r3, [r3]
 186 0004 1B68     		ldr	r3, [r3]
 187              		.loc 1 3884 4 view .LVU51
 188 0006 23B9     		cbnz	r3, .L16
3885:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3886:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:ThirdParty/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:ThirdParty/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3890:ThirdParty/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 189              		.loc 1 3890 3 is_stmt 1 view .LVU52
 190              		.loc 1 3890 24 is_stmt 0 view .LVU53
 191 0008 074B     		ldr	r3, .L18+4
 192 000a 4FF0FF32 		mov	r2, #-1
 193 000e 1A60     		str	r2, [r3]
 194 0010 7047     		bx	lr
 195              	.L16:
3891:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3892:ThirdParty/FreeRTOS/Source/tasks.c **** 	else
3893:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3894:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:ThirdParty/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:ThirdParty/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:ThirdParty/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3898:ThirdParty/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 196              		.loc 1 3898 3 is_stmt 1 view .LVU54
 197              		.loc 1 3898 15 is_stmt 0 view .LVU55
 198 0012 044B     		ldr	r3, .L18
 199 0014 1B68     		ldr	r3, [r3]
 200 0016 DB68     		ldr	r3, [r3, #12]
 201              		.loc 1 3898 13 view .LVU56
 202 0018 DB68     		ldr	r3, [r3, #12]
 203              	.LVL15:
3899:ThirdParty/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 204              		.loc 1 3899 3 is_stmt 1 view .LVU57
 205              		.loc 1 3899 26 is_stmt 0 view .LVU58
 206 001a 5A68     		ldr	r2, [r3, #4]
 207              		.loc 1 3899 24 view .LVU59
 208 001c 024B     		ldr	r3, .L18+4
 209              	.LVL16:
 210              		.loc 1 3899 24 view .LVU60
 211 001e 1A60     		str	r2, [r3]
3900:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3901:ThirdParty/FreeRTOS/Source/tasks.c **** }
 212              		.loc 1 3901 1 view .LVU61
 213 0020 7047     		bx	lr
 214              	.L19:
 215 0022 00BF     		.align	2
 216              	.L18:
 217 0024 00000000 		.word	.LANCHOR2
 218 0028 00000000 		.word	.LANCHOR3
 219              		.cfi_endproc
 220              	.LFE42:
 222              		.section	.text.prvDeleteTCB,"ax",%progbits
 223              		.align	1
 224              		.syntax unified
ARM GAS  /tmp/cc4Zpja9.s 			page 77


 225              		.thumb
 226              		.thumb_func
 228              	prvDeleteTCB:
 229              	.LVL17:
 230              	.LFB41:
3827:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 231              		.loc 1 3827 2 is_stmt 1 view -0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 0
 234              		@ frame_needed = 0, uses_anonymous_args = 0
3827:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 235              		.loc 1 3827 2 is_stmt 0 view .LVU63
 236 0000 10B5     		push	{r4, lr}
 237              	.LCFI0:
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 4, -8
 240              		.cfi_offset 14, -4
 241 0002 0446     		mov	r4, r0
3831:ThirdParty/FreeRTOS/Source/tasks.c **** 
 242              		.loc 1 3831 3 is_stmt 1 view .LVU64
3845:ThirdParty/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 243              		.loc 1 3845 4 view .LVU65
 244 0004 006B     		ldr	r0, [r0, #48]
 245              	.LVL18:
3845:ThirdParty/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 246              		.loc 1 3845 4 is_stmt 0 view .LVU66
 247 0006 FFF7FEFF 		bl	vPortFree
 248              	.LVL19:
3846:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 249              		.loc 1 3846 4 is_stmt 1 view .LVU67
 250 000a 2046     		mov	r0, r4
 251 000c FFF7FEFF 		bl	vPortFree
 252              	.LVL20:
3875:ThirdParty/FreeRTOS/Source/tasks.c **** 
 253              		.loc 1 3875 2 is_stmt 0 view .LVU68
 254 0010 10BD     		pop	{r4, pc}
3875:ThirdParty/FreeRTOS/Source/tasks.c **** 
 255              		.loc 1 3875 2 view .LVU69
 256              		.cfi_endproc
 257              	.LFE41:
 259              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 260              		.align	1
 261              		.syntax unified
 262              		.thumb
 263              		.thumb_func
 265              	prvInitialiseNewTask:
 266              	.LVL21:
 267              	.LFB6:
 829:ThirdParty/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 268              		.loc 1 829 1 is_stmt 1 view -0
 269              		.cfi_startproc
 270              		@ args = 16, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 829:ThirdParty/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 272              		.loc 1 829 1 is_stmt 0 view .LVU71
 273 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 274              	.LCFI1:
ARM GAS  /tmp/cc4Zpja9.s 			page 78


 275              		.cfi_def_cfa_offset 32
 276              		.cfi_offset 4, -32
 277              		.cfi_offset 5, -28
 278              		.cfi_offset 6, -24
 279              		.cfi_offset 7, -20
 280              		.cfi_offset 8, -16
 281              		.cfi_offset 9, -12
 282              		.cfi_offset 10, -8
 283              		.cfi_offset 14, -4
 284 0004 8046     		mov	r8, r0
 285 0006 0D46     		mov	r5, r1
 286 0008 1746     		mov	r7, r2
 287 000a 9946     		mov	r9, r3
 288 000c 089E     		ldr	r6, [sp, #32]
 289 000e DDF824A0 		ldr	r10, [sp, #36]
 290 0012 0A9C     		ldr	r4, [sp, #40]
 830:ThirdParty/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 291              		.loc 1 830 1 is_stmt 1 view .LVU72
 831:ThirdParty/FreeRTOS/Source/tasks.c **** 
 292              		.loc 1 831 1 view .LVU73
 851:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 293              		.loc 1 851 3 view .LVU74
 851:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 294              		.loc 1 851 12 is_stmt 0 view .LVU75
 295 0014 9200     		lsls	r2, r2, #2
 296              	.LVL22:
 851:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 297              		.loc 1 851 12 view .LVU76
 298 0016 A521     		movs	r1, #165
 299              	.LVL23:
 851:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 300              		.loc 1 851 12 view .LVU77
 301 0018 206B     		ldr	r0, [r4, #48]
 302              	.LVL24:
 851:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 303              		.loc 1 851 12 view .LVU78
 304 001a FFF7FEFF 		bl	memset
 305              	.LVL25:
 861:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 306              		.loc 1 861 3 is_stmt 1 view .LVU79
 861:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 307              		.loc 1 861 29 is_stmt 0 view .LVU80
 308 001e 236B     		ldr	r3, [r4, #48]
 861:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 309              		.loc 1 861 38 view .LVU81
 310 0020 07F18042 		add	r2, r7, #1073741824
 311 0024 013A     		subs	r2, r2, #1
 861:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 312              		.loc 1 861 16 view .LVU82
 313 0026 03EB8207 		add	r7, r3, r2, lsl #2
 314              	.LVL26:
 862:ThirdParty/FreeRTOS/Source/tasks.c **** 
 315              		.loc 1 862 3 is_stmt 1 view .LVU83
 862:ThirdParty/FreeRTOS/Source/tasks.c **** 
 316              		.loc 1 862 81 is_stmt 0 view .LVU84
 317 002a 27F00707 		bic	r7, r7, #7
 318              	.LVL27:
ARM GAS  /tmp/cc4Zpja9.s 			page 79


 865:ThirdParty/FreeRTOS/Source/tasks.c **** 
 319              		.loc 1 865 3 is_stmt 1 view .LVU85
 865:ThirdParty/FreeRTOS/Source/tasks.c **** 
 320              		.loc 1 865 124 view .LVU86
 889:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 321              		.loc 1 889 2 view .LVU87
 889:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 322              		.loc 1 889 4 is_stmt 0 view .LVU88
 323 002e B5B3     		cbz	r5, .L34
 891:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 324              		.loc 1 891 10 view .LVU89
 325 0030 4FF0000C 		mov	ip, #0
 326              	.LVL28:
 327              	.L23:
 891:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 328              		.loc 1 891 31 is_stmt 1 discriminator 1 view .LVU90
 891:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 329              		.loc 1 891 3 is_stmt 0 discriminator 1 view .LVU91
 330 0034 BCF10F0F 		cmp	ip, #15
 331 0038 0BD8     		bhi	.L25
 893:ThirdParty/FreeRTOS/Source/tasks.c **** 
 332              		.loc 1 893 4 is_stmt 1 view .LVU92
 893:ThirdParty/FreeRTOS/Source/tasks.c **** 
 333              		.loc 1 893 38 is_stmt 0 view .LVU93
 334 003a 15F80C20 		ldrb	r2, [r5, ip]	@ zero_extendqisi2
 893:ThirdParty/FreeRTOS/Source/tasks.c **** 
 335              		.loc 1 893 30 view .LVU94
 336 003e 04EB0C03 		add	r3, r4, ip
 337 0042 83F83420 		strb	r2, [r3, #52]
 898:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 338              		.loc 1 898 4 is_stmt 1 view .LVU95
 898:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 339              		.loc 1 898 14 is_stmt 0 view .LVU96
 340 0046 15F80C30 		ldrb	r3, [r5, ip]	@ zero_extendqisi2
 898:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 341              		.loc 1 898 6 view .LVU97
 342 004a 13B1     		cbz	r3, .L25
 904:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 343              		.loc 1 904 29 is_stmt 1 discriminator 2 view .LVU98
 891:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 344              		.loc 1 891 76 discriminator 2 view .LVU99
 891:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 345              		.loc 1 891 77 is_stmt 0 discriminator 2 view .LVU100
 346 004c 0CF1010C 		add	ip, ip, #1
 347              	.LVL29:
 891:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 348              		.loc 1 891 77 discriminator 2 view .LVU101
 349 0050 F0E7     		b	.L23
 350              	.L25:
 910:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 351              		.loc 1 910 3 is_stmt 1 view .LVU102
 910:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 352              		.loc 1 910 55 is_stmt 0 view .LVU103
 353 0052 0023     		movs	r3, #0
 354 0054 84F84330 		strb	r3, [r4, #67]
 355              	.LVL30:
 356              	.L27:
ARM GAS  /tmp/cc4Zpja9.s 			page 80


 921:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 357              		.loc 1 921 2 is_stmt 1 view .LVU104
 921:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 358              		.loc 1 921 4 is_stmt 0 view .LVU105
 359 0058 062E     		cmp	r6, #6
 360 005a 00D9     		bls	.L28
 923:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 361              		.loc 1 923 14 view .LVU106
 362 005c 0626     		movs	r6, #6
 363              	.L28:
 364              	.LVL31:
 927:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 365              		.loc 1 927 27 is_stmt 1 view .LVU107
 930:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 366              		.loc 1 930 2 view .LVU108
 930:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 367              		.loc 1 930 23 is_stmt 0 view .LVU109
 368 005e E662     		str	r6, [r4, #44]
 933:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 369              		.loc 1 933 3 is_stmt 1 view .LVU110
 933:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 370              		.loc 1 933 28 is_stmt 0 view .LVU111
 371 0060 6664     		str	r6, [r4, #68]
 934:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 372              		.loc 1 934 3 is_stmt 1 view .LVU112
 934:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 373              		.loc 1 934 27 is_stmt 0 view .LVU113
 374 0062 0025     		movs	r5, #0
 375              	.LVL32:
 934:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 376              		.loc 1 934 27 view .LVU114
 377 0064 A564     		str	r5, [r4, #72]
 938:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 378              		.loc 1 938 2 is_stmt 1 view .LVU115
 379 0066 201D     		adds	r0, r4, #4
 380 0068 FFF7FEFF 		bl	vListInitialiseItem
 381              	.LVL33:
 939:ThirdParty/FreeRTOS/Source/tasks.c **** 
 382              		.loc 1 939 2 view .LVU116
 383 006c 04F11800 		add	r0, r4, #24
 384 0070 FFF7FEFF 		bl	vListInitialiseItem
 385              	.LVL34:
 943:ThirdParty/FreeRTOS/Source/tasks.c **** 
 386              		.loc 1 943 2 view .LVU117
 387 0074 2461     		str	r4, [r4, #16]
 946:ThirdParty/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 388              		.loc 1 946 2 view .LVU118
 389 0076 C6F10706 		rsb	r6, r6, #7
 390              	.LVL35:
 946:ThirdParty/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 391              		.loc 1 946 2 is_stmt 0 view .LVU119
 392 007a A661     		str	r6, [r4, #24]
 947:ThirdParty/FreeRTOS/Source/tasks.c **** 
 393              		.loc 1 947 2 is_stmt 1 view .LVU120
 394 007c 6462     		str	r4, [r4, #36]
 974:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 395              		.loc 1 974 3 view .LVU121
ARM GAS  /tmp/cc4Zpja9.s 			page 81


 989:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 396              		.loc 1 989 3 view .LVU122
 989:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 397              		.loc 1 989 29 is_stmt 0 view .LVU123
 398 007e E564     		str	r5, [r4, #76]
 990:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 399              		.loc 1 990 3 is_stmt 1 view .LVU124
 990:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 400              		.loc 1 990 27 is_stmt 0 view .LVU125
 401 0080 84F85050 		strb	r5, [r4, #80]
1053:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 402              		.loc 1 1053 4 is_stmt 1 view .LVU126
1053:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 403              		.loc 1 1053 29 is_stmt 0 view .LVU127
 404 0084 4A46     		mov	r2, r9
 405 0086 4146     		mov	r1, r8
 406 0088 3846     		mov	r0, r7
 407 008a FFF7FEFF 		bl	pxPortInitialiseStack
 408              	.LVL36:
1053:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 409              		.loc 1 1053 27 view .LVU128
 410 008e 2060     		str	r0, [r4]
1059:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 411              		.loc 1 1059 2 is_stmt 1 view .LVU129
1059:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 412              		.loc 1 1059 4 is_stmt 0 view .LVU130
 413 0090 BAF1000F 		cmp	r10, #0
 414 0094 01D0     		beq	.L22
1063:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 415              		.loc 1 1063 3 is_stmt 1 view .LVU131
1063:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 416              		.loc 1 1063 18 is_stmt 0 view .LVU132
 417 0096 CAF80040 		str	r4, [r10]
1067:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 418              		.loc 1 1067 27 is_stmt 1 view .LVU133
 419              	.L22:
1069:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 420              		.loc 1 1069 1 is_stmt 0 view .LVU134
 421 009a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 422              	.LVL37:
 423              	.L34:
 916:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 424              		.loc 1 916 3 is_stmt 1 view .LVU135
 916:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 425              		.loc 1 916 29 is_stmt 0 view .LVU136
 426 009e 0023     		movs	r3, #0
 427 00a0 84F83430 		strb	r3, [r4, #52]
 428 00a4 D8E7     		b	.L27
 429              		.cfi_endproc
 430              	.LFE6:
 432              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 433              		.align	1
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 438              	prvInitialiseTaskLists:
 439              	.LFB37:
ARM GAS  /tmp/cc4Zpja9.s 			page 82


3547:ThirdParty/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 440              		.loc 1 3547 1 is_stmt 1 view -0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444 0000 38B5     		push	{r3, r4, r5, lr}
 445              	.LCFI2:
 446              		.cfi_def_cfa_offset 16
 447              		.cfi_offset 3, -16
 448              		.cfi_offset 4, -12
 449              		.cfi_offset 5, -8
 450              		.cfi_offset 14, -4
3548:ThirdParty/FreeRTOS/Source/tasks.c **** 
 451              		.loc 1 3548 1 view .LVU138
3550:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 452              		.loc 1 3550 2 view .LVU139
 453              	.LVL38:
3550:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 454              		.loc 1 3550 18 is_stmt 0 view .LVU140
 455 0002 0024     		movs	r4, #0
3550:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 456              		.loc 1 3550 2 view .LVU141
 457 0004 07E0     		b	.L36
 458              	.LVL39:
 459              	.L37:
3552:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 460              		.loc 1 3552 3 is_stmt 1 discriminator 3 view .LVU142
 461 0006 04EB8402 		add	r2, r4, r4, lsl #2
 462 000a 9300     		lsls	r3, r2, #2
 463 000c 0E48     		ldr	r0, .L39
 464 000e 1844     		add	r0, r0, r3
 465 0010 FFF7FEFF 		bl	vListInitialise
 466              	.LVL40:
3550:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 467              		.loc 1 3550 91 discriminator 3 view .LVU143
3550:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 468              		.loc 1 3550 101 is_stmt 0 discriminator 3 view .LVU144
 469 0014 0134     		adds	r4, r4, #1
 470              	.LVL41:
 471              	.L36:
3550:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 472              		.loc 1 3550 40 is_stmt 1 discriminator 1 view .LVU145
3550:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 473              		.loc 1 3550 2 is_stmt 0 discriminator 1 view .LVU146
 474 0016 062C     		cmp	r4, #6
 475 0018 F5D9     		bls	.L37
3555:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 476              		.loc 1 3555 2 is_stmt 1 view .LVU147
 477 001a 0C4D     		ldr	r5, .L39+4
 478 001c 2846     		mov	r0, r5
 479 001e FFF7FEFF 		bl	vListInitialise
 480              	.LVL42:
3556:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 481              		.loc 1 3556 2 view .LVU148
 482 0022 0B4C     		ldr	r4, .L39+8
 483              	.LVL43:
3556:ThirdParty/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
ARM GAS  /tmp/cc4Zpja9.s 			page 83


 484              		.loc 1 3556 2 is_stmt 0 view .LVU149
 485 0024 2046     		mov	r0, r4
 486 0026 FFF7FEFF 		bl	vListInitialise
 487              	.LVL44:
3557:ThirdParty/FreeRTOS/Source/tasks.c **** 
 488              		.loc 1 3557 2 is_stmt 1 view .LVU150
 489 002a 0A48     		ldr	r0, .L39+12
 490 002c FFF7FEFF 		bl	vListInitialise
 491              	.LVL45:
3561:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 492              		.loc 1 3561 3 view .LVU151
 493 0030 0948     		ldr	r0, .L39+16
 494 0032 FFF7FEFF 		bl	vListInitialise
 495              	.LVL46:
3567:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 496              		.loc 1 3567 3 view .LVU152
 497 0036 0948     		ldr	r0, .L39+20
 498 0038 FFF7FEFF 		bl	vListInitialise
 499              	.LVL47:
3573:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 500              		.loc 1 3573 2 view .LVU153
3573:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 501              		.loc 1 3573 20 is_stmt 0 view .LVU154
 502 003c 084B     		ldr	r3, .L39+24
 503 003e 1D60     		str	r5, [r3]
3574:ThirdParty/FreeRTOS/Source/tasks.c **** }
 504              		.loc 1 3574 2 is_stmt 1 view .LVU155
3574:ThirdParty/FreeRTOS/Source/tasks.c **** }
 505              		.loc 1 3574 28 is_stmt 0 view .LVU156
 506 0040 084B     		ldr	r3, .L39+28
 507 0042 1C60     		str	r4, [r3]
3575:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 508              		.loc 1 3575 1 view .LVU157
 509 0044 38BD     		pop	{r3, r4, r5, pc}
 510              	.L40:
 511 0046 00BF     		.align	2
 512              	.L39:
 513 0048 00000000 		.word	.LANCHOR4
 514 004c 00000000 		.word	.LANCHOR5
 515 0050 00000000 		.word	.LANCHOR6
 516 0054 00000000 		.word	.LANCHOR1
 517 0058 00000000 		.word	.LANCHOR7
 518 005c 00000000 		.word	.LANCHOR0
 519 0060 00000000 		.word	.LANCHOR2
 520 0064 00000000 		.word	.LANCHOR8
 521              		.cfi_endproc
 522              	.LFE37:
 524              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 525              		.align	1
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 530              	prvAddNewTaskToReadyList:
 531              	.LVL48:
 532              	.LFB7:
1073:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 533              		.loc 1 1073 1 is_stmt 1 view -0
ARM GAS  /tmp/cc4Zpja9.s 			page 84


 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
1073:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 537              		.loc 1 1073 1 is_stmt 0 view .LVU159
 538 0000 10B5     		push	{r4, lr}
 539              	.LCFI3:
 540              		.cfi_def_cfa_offset 8
 541              		.cfi_offset 4, -8
 542              		.cfi_offset 14, -4
 543 0002 0446     		mov	r4, r0
1076:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 544              		.loc 1 1076 2 is_stmt 1 view .LVU160
 545 0004 FFF7FEFF 		bl	vPortEnterCritical
 546              	.LVL49:
1078:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 547              		.loc 1 1078 3 view .LVU161
1078:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 548              		.loc 1 1078 25 is_stmt 0 view .LVU162
 549 0008 214A     		ldr	r2, .L48
 550 000a 1368     		ldr	r3, [r2]
 551 000c 0133     		adds	r3, r3, #1
 552 000e 1360     		str	r3, [r2]
1079:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 553              		.loc 1 1079 3 is_stmt 1 view .LVU163
1079:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 554              		.loc 1 1079 20 is_stmt 0 view .LVU164
 555 0010 204B     		ldr	r3, .L48+4
 556 0012 1B68     		ldr	r3, [r3]
1079:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 557              		.loc 1 1079 5 view .LVU165
 558 0014 5BB1     		cbz	r3, .L46
1102:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 559              		.loc 1 1102 4 is_stmt 1 view .LVU166
1102:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 560              		.loc 1 1102 26 is_stmt 0 view .LVU167
 561 0016 204B     		ldr	r3, .L48+8
 562 0018 1B68     		ldr	r3, [r3]
1102:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 563              		.loc 1 1102 6 view .LVU168
 564 001a 6BB9     		cbnz	r3, .L43
1104:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 565              		.loc 1 1104 5 is_stmt 1 view .LVU169
1104:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 566              		.loc 1 1104 21 is_stmt 0 view .LVU170
 567 001c 1D4B     		ldr	r3, .L48+4
 568 001e 1B68     		ldr	r3, [r3]
 569 0020 DA6A     		ldr	r2, [r3, #44]
1104:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 570              		.loc 1 1104 45 view .LVU171
 571 0022 E36A     		ldr	r3, [r4, #44]
1104:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 572              		.loc 1 1104 7 view .LVU172
 573 0024 9A42     		cmp	r2, r3
 574 0026 07D8     		bhi	.L43
1106:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 575              		.loc 1 1106 6 is_stmt 1 view .LVU173
ARM GAS  /tmp/cc4Zpja9.s 			page 85


1106:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 576              		.loc 1 1106 19 is_stmt 0 view .LVU174
 577 0028 1A4B     		ldr	r3, .L48+4
 578 002a 1C60     		str	r4, [r3]
 579 002c 04E0     		b	.L43
 580              	.L46:
1083:ThirdParty/FreeRTOS/Source/tasks.c **** 
 581              		.loc 1 1083 4 is_stmt 1 view .LVU175
1083:ThirdParty/FreeRTOS/Source/tasks.c **** 
 582              		.loc 1 1083 17 is_stmt 0 view .LVU176
 583 002e 194B     		ldr	r3, .L48+4
 584 0030 1C60     		str	r4, [r3]
1085:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 585              		.loc 1 1085 4 is_stmt 1 view .LVU177
1085:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 586              		.loc 1 1085 31 is_stmt 0 view .LVU178
 587 0032 1368     		ldr	r3, [r2]
1085:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 588              		.loc 1 1085 6 view .LVU179
 589 0034 012B     		cmp	r3, #1
 590 0036 28D0     		beq	.L47
 591              	.L43:
1115:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 592              		.loc 1 1115 29 is_stmt 1 view .LVU180
1119:ThirdParty/FreeRTOS/Source/tasks.c **** 
 593              		.loc 1 1119 3 view .LVU181
1119:ThirdParty/FreeRTOS/Source/tasks.c **** 
 594              		.loc 1 1119 15 is_stmt 0 view .LVU182
 595 0038 184A     		ldr	r2, .L48+12
 596 003a 1368     		ldr	r3, [r2]
 597 003c 0133     		adds	r3, r3, #1
 598 003e 1360     		str	r3, [r2]
1127:ThirdParty/FreeRTOS/Source/tasks.c **** 
 599              		.loc 1 1127 31 is_stmt 1 view .LVU183
1129:ThirdParty/FreeRTOS/Source/tasks.c **** 
 600              		.loc 1 1129 3 view .LVU184
1129:ThirdParty/FreeRTOS/Source/tasks.c **** 
 601              		.loc 1 1129 3 view .LVU185
 602 0040 E06A     		ldr	r0, [r4, #44]
 603 0042 0123     		movs	r3, #1
 604 0044 8340     		lsls	r3, r3, r0
 605 0046 164A     		ldr	r2, .L48+16
 606 0048 1168     		ldr	r1, [r2]
 607 004a 0B43     		orrs	r3, r3, r1
 608 004c 1360     		str	r3, [r2]
1129:ThirdParty/FreeRTOS/Source/tasks.c **** 
 609              		.loc 1 1129 3 view .LVU186
 610 004e 00EB8000 		add	r0, r0, r0, lsl #2
 611 0052 211D     		adds	r1, r4, #4
 612 0054 134B     		ldr	r3, .L48+20
 613 0056 03EB8000 		add	r0, r3, r0, lsl #2
 614 005a FFF7FEFF 		bl	vListInsertEnd
 615              	.LVL50:
1129:ThirdParty/FreeRTOS/Source/tasks.c **** 
 616              		.loc 1 1129 36 view .LVU187
1131:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 617              		.loc 1 1131 3 view .LVU188
ARM GAS  /tmp/cc4Zpja9.s 			page 86


1133:ThirdParty/FreeRTOS/Source/tasks.c **** 
 618              		.loc 1 1133 2 view .LVU189
 619 005e FFF7FEFF 		bl	vPortExitCritical
 620              	.LVL51:
1135:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 621              		.loc 1 1135 2 view .LVU190
1135:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 622              		.loc 1 1135 24 is_stmt 0 view .LVU191
 623 0062 0D4B     		ldr	r3, .L48+8
 624 0064 1B68     		ldr	r3, [r3]
1135:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 625              		.loc 1 1135 4 view .LVU192
 626 0066 7BB1     		cbz	r3, .L41
1139:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 627              		.loc 1 1139 3 is_stmt 1 view .LVU193
1139:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 628              		.loc 1 1139 19 is_stmt 0 view .LVU194
 629 0068 0A4B     		ldr	r3, .L48+4
 630 006a 1B68     		ldr	r3, [r3]
 631 006c DA6A     		ldr	r2, [r3, #44]
1139:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 632              		.loc 1 1139 42 view .LVU195
 633 006e E36A     		ldr	r3, [r4, #44]
1139:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 634              		.loc 1 1139 5 view .LVU196
 635 0070 9A42     		cmp	r2, r3
 636 0072 09D2     		bcs	.L41
1141:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 637              		.loc 1 1141 4 is_stmt 1 view .LVU197
 638 0074 4FF0E023 		mov	r3, #-536813568
 639 0078 4FF08052 		mov	r2, #268435456
 640 007c C3F8042D 		str	r2, [r3, #3332]
1141:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 641              		.loc 1 1141 4 view .LVU198
 642              		.syntax unified
 643              	@ 1141 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 644 0080 BFF34F8F 		dsb
 645              	@ 0 "" 2
1141:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 646              		.loc 1 1141 4 view .LVU199
 647              	@ 1141 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 648 0084 BFF36F8F 		isb
 649              	@ 0 "" 2
1141:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 650              		.loc 1 1141 35 view .LVU200
1150:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 651              		.loc 1 1150 27 view .LVU201
 652              		.thumb
 653              		.syntax unified
 654              	.L41:
1152:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 655              		.loc 1 1152 1 is_stmt 0 view .LVU202
 656 0088 10BD     		pop	{r4, pc}
 657              	.LVL52:
 658              	.L47:
1090:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 659              		.loc 1 1090 5 is_stmt 1 view .LVU203
ARM GAS  /tmp/cc4Zpja9.s 			page 87


 660 008a FFF7FEFF 		bl	prvInitialiseTaskLists
 661              	.LVL53:
 662 008e D3E7     		b	.L43
 663              	.L49:
 664              		.align	2
 665              	.L48:
 666 0090 00000000 		.word	.LANCHOR9
 667 0094 00000000 		.word	.LANCHOR10
 668 0098 00000000 		.word	.LANCHOR11
 669 009c 00000000 		.word	.LANCHOR12
 670 00a0 00000000 		.word	.LANCHOR13
 671 00a4 00000000 		.word	.LANCHOR4
 672              		.cfi_endproc
 673              	.LFE7:
 675              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 676              		.align	1
 677              		.syntax unified
 678              		.thumb
 679              		.thumb_func
 681              	prvCheckTasksWaitingTermination:
 682              	.LFB38:
3579:ThirdParty/FreeRTOS/Source/tasks.c **** 
 683              		.loc 1 3579 1 view -0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              	.LBB107:
3585:ThirdParty/FreeRTOS/Source/tasks.c **** 
 688              		.loc 1 3585 3 view .LVU205
3589:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 689              		.loc 1 3589 3 view .LVU206
3589:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 690              		.loc 1 3589 8 view .LVU207
3589:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 691              		.loc 1 3589 39 is_stmt 0 view .LVU208
 692 0000 0F4B     		ldr	r3, .L57
 693 0002 1B68     		ldr	r3, [r3]
3589:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 694              		.loc 1 3589 8 view .LVU209
 695 0004 D3B1     		cbz	r3, .L56
 696              	.LBE107:
3579:ThirdParty/FreeRTOS/Source/tasks.c **** 
 697              		.loc 1 3579 1 view .LVU210
 698 0006 10B5     		push	{r4, lr}
 699              	.LCFI4:
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 4, -8
 702              		.cfi_offset 14, -4
 703              	.L52:
 704              	.LBB108:
3591:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 705              		.loc 1 3591 4 is_stmt 1 view .LVU211
 706 0008 FFF7FEFF 		bl	vPortEnterCritical
 707              	.LVL54:
3593:ThirdParty/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 708              		.loc 1 3593 5 view .LVU212
3593:ThirdParty/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/cc4Zpja9.s 			page 88


 709              		.loc 1 3593 13 is_stmt 0 view .LVU213
 710 000c 0D4B     		ldr	r3, .L57+4
 711 000e DB68     		ldr	r3, [r3, #12]
3593:ThirdParty/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 712              		.loc 1 3593 11 view .LVU214
 713 0010 DC68     		ldr	r4, [r3, #12]
 714              	.LVL55:
3594:ThirdParty/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 715              		.loc 1 3594 5 is_stmt 1 view .LVU215
3594:ThirdParty/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 716              		.loc 1 3594 14 is_stmt 0 view .LVU216
 717 0012 201D     		adds	r0, r4, #4
 718 0014 FFF7FEFF 		bl	uxListRemove
 719              	.LVL56:
3595:ThirdParty/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 720              		.loc 1 3595 5 is_stmt 1 view .LVU217
 721 0018 0B4A     		ldr	r2, .L57+8
 722 001a 1368     		ldr	r3, [r2]
 723 001c 013B     		subs	r3, r3, #1
 724 001e 1360     		str	r3, [r2]
3596:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 725              		.loc 1 3596 5 view .LVU218
 726 0020 074A     		ldr	r2, .L57
 727 0022 1368     		ldr	r3, [r2]
 728 0024 013B     		subs	r3, r3, #1
 729 0026 1360     		str	r3, [r2]
3598:ThirdParty/FreeRTOS/Source/tasks.c **** 
 730              		.loc 1 3598 4 view .LVU219
 731 0028 FFF7FEFF 		bl	vPortExitCritical
 732              	.LVL57:
3600:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 733              		.loc 1 3600 4 view .LVU220
 734 002c 2046     		mov	r0, r4
 735 002e FFF7FEFF 		bl	prvDeleteTCB
 736              	.LVL58:
3589:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 737              		.loc 1 3589 8 view .LVU221
3589:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 738              		.loc 1 3589 39 is_stmt 0 view .LVU222
 739 0032 034B     		ldr	r3, .L57
 740 0034 1B68     		ldr	r3, [r3]
3589:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 741              		.loc 1 3589 8 view .LVU223
 742 0036 002B     		cmp	r3, #0
 743 0038 E6D1     		bne	.L52
 744              	.LBE108:
3604:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 745              		.loc 1 3604 1 view .LVU224
 746 003a 10BD     		pop	{r4, pc}
 747              	.LVL59:
 748              	.L56:
 749              	.LCFI5:
 750              		.cfi_def_cfa_offset 0
 751              		.cfi_restore 4
 752              		.cfi_restore 14
3604:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 753              		.loc 1 3604 1 view .LVU225
ARM GAS  /tmp/cc4Zpja9.s 			page 89


 754 003c 7047     		bx	lr
 755              	.L58:
 756 003e 00BF     		.align	2
 757              	.L57:
 758 0040 00000000 		.word	.LANCHOR14
 759 0044 00000000 		.word	.LANCHOR7
 760 0048 00000000 		.word	.LANCHOR9
 761              		.cfi_endproc
 762              	.LFE38:
 764              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 765              		.align	1
 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
 770              	prvAddCurrentTaskToDelayedList:
 771              	.LVL60:
 772              	.LFB56:
3902:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3903:ThirdParty/FreeRTOS/Source/tasks.c **** 
3904:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:ThirdParty/FreeRTOS/Source/tasks.c **** 
3906:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3908:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3909:ThirdParty/FreeRTOS/Source/tasks.c **** 
3910:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3911:ThirdParty/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:ThirdParty/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3913:ThirdParty/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3914:ThirdParty/FreeRTOS/Source/tasks.c **** 
3915:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
3916:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3917:ThirdParty/FreeRTOS/Source/tasks.c **** 
3918:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3920:ThirdParty/FreeRTOS/Source/tasks.c **** 
3921:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:ThirdParty/FreeRTOS/Source/tasks.c **** 
3923:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3925:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3926:ThirdParty/FreeRTOS/Source/tasks.c **** 
3927:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3928:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3929:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3930:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
3931:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
3932:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3933:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3934:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3935:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3936:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3937:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
3938:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3939:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3940:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
3941:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc4Zpja9.s 			page 90


3942:ThirdParty/FreeRTOS/Source/tasks.c **** 
3943:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
3944:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
3945:ThirdParty/FreeRTOS/Source/tasks.c **** 
3946:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3948:ThirdParty/FreeRTOS/Source/tasks.c **** 
3949:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:ThirdParty/FreeRTOS/Source/tasks.c **** 
3951:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
3953:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3954:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3955:ThirdParty/FreeRTOS/Source/tasks.c **** 
3956:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:ThirdParty/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:ThirdParty/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3960:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
3961:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:ThirdParty/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3963:ThirdParty/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3965:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
3966:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:ThirdParty/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:ThirdParty/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3969:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3970:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
3971:ThirdParty/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3972:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
3973:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
3974:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
3975:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
3977:ThirdParty/FreeRTOS/Source/tasks.c **** 
3978:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:ThirdParty/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3980:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3981:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
3982:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3983:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
3984:ThirdParty/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3985:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
3986:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
3987:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
3988:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
3990:ThirdParty/FreeRTOS/Source/tasks.c **** 
3991:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3993:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3994:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
3995:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
3996:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
3997:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3998:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
ARM GAS  /tmp/cc4Zpja9.s 			page 91


3999:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4000:ThirdParty/FreeRTOS/Source/tasks.c **** 
4001:ThirdParty/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:ThirdParty/FreeRTOS/Source/tasks.c **** 
4003:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4004:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4005:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4006:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
4007:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4008:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4009:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4010:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:ThirdParty/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:ThirdParty/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:ThirdParty/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4014:ThirdParty/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:ThirdParty/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:ThirdParty/FreeRTOS/Source/tasks.c **** 					not been the case. */
4017:ThirdParty/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4018:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4019:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
4020:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4021:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4023:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4024:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4025:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
4026:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4027:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4029:ThirdParty/FreeRTOS/Source/tasks.c **** 
4030:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
4031:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4032:ThirdParty/FreeRTOS/Source/tasks.c **** 
4033:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4034:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4035:ThirdParty/FreeRTOS/Source/tasks.c **** 
4036:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:ThirdParty/FreeRTOS/Source/tasks.c **** 
4038:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4040:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4041:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4042:ThirdParty/FreeRTOS/Source/tasks.c **** 
4043:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4044:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4045:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:ThirdParty/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:ThirdParty/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:ThirdParty/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4049:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4050:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4051:ThirdParty/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4052:ThirdParty/FreeRTOS/Source/tasks.c **** 
4053:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:ThirdParty/FreeRTOS/Source/tasks.c **** 			task? */
4055:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
ARM GAS  /tmp/cc4Zpja9.s 			page 92


4056:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4057:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4059:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4060:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:ThirdParty/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:ThirdParty/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:ThirdParty/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:ThirdParty/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
4065:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4066:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4067:ThirdParty/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4068:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4069:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
4070:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4071:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4073:ThirdParty/FreeRTOS/Source/tasks.c **** 
4074:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:ThirdParty/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4076:ThirdParty/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4078:ThirdParty/FreeRTOS/Source/tasks.c **** 
4079:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:ThirdParty/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4081:ThirdParty/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4082:ThirdParty/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4083:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4084:ThirdParty/FreeRTOS/Source/tasks.c **** 
4085:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:ThirdParty/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4087:ThirdParty/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:ThirdParty/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4089:ThirdParty/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:ThirdParty/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:ThirdParty/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:ThirdParty/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4093:ThirdParty/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4094:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4095:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
4096:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4097:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4099:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4100:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
4101:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4102:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4104:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4105:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
4106:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4107:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4109:ThirdParty/FreeRTOS/Source/tasks.c **** 
4110:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
4111:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4112:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 93


4113:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4114:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4115:ThirdParty/FreeRTOS/Source/tasks.c **** 
4116:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:ThirdParty/FreeRTOS/Source/tasks.c **** 
4118:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4120:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4121:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:ThirdParty/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4123:ThirdParty/FreeRTOS/Source/tasks.c **** 
4124:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4125:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4126:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:ThirdParty/FreeRTOS/Source/tasks.c **** 			one mutex. */
4128:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4129:ThirdParty/FreeRTOS/Source/tasks.c **** 
4130:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:ThirdParty/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:ThirdParty/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4133:ThirdParty/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4135:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4136:ThirdParty/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4137:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4138:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
4139:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4140:ThirdParty/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4141:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4142:ThirdParty/FreeRTOS/Source/tasks.c **** 
4143:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4144:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4145:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4146:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:ThirdParty/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:ThirdParty/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:ThirdParty/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4151:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4152:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4153:ThirdParty/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:ThirdParty/FreeRTOS/Source/tasks.c **** 					its own priority. */
4155:ThirdParty/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4156:ThirdParty/FreeRTOS/Source/tasks.c **** 
4157:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:ThirdParty/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4159:ThirdParty/FreeRTOS/Source/tasks.c **** 					state. */
4160:ThirdParty/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:ThirdParty/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4162:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4163:ThirdParty/FreeRTOS/Source/tasks.c **** 
4164:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:ThirdParty/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4166:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4167:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4168:ThirdParty/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4169:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cc4Zpja9.s 			page 94


4170:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
4171:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4172:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4174:ThirdParty/FreeRTOS/Source/tasks.c **** 
4175:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:ThirdParty/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4177:ThirdParty/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:ThirdParty/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4179:ThirdParty/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4180:ThirdParty/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4181:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4182:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4183:ThirdParty/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4184:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
4185:ThirdParty/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4186:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
4187:ThirdParty/FreeRTOS/Source/tasks.c **** 						else
4188:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
4189:ThirdParty/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
4191:ThirdParty/FreeRTOS/Source/tasks.c **** 
4192:ThirdParty/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4193:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4194:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
4195:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4196:ThirdParty/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4198:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4199:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
4200:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4201:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4203:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4204:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
4205:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4206:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4208:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4209:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
4210:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4211:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4213:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4214:ThirdParty/FreeRTOS/Source/tasks.c **** 
4215:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4216:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4217:ThirdParty/FreeRTOS/Source/tasks.c **** 
4218:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:ThirdParty/FreeRTOS/Source/tasks.c **** 
4220:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4221:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4222:ThirdParty/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:ThirdParty/FreeRTOS/Source/tasks.c **** 
4224:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4226:ThirdParty/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
ARM GAS  /tmp/cc4Zpja9.s 			page 95


4227:ThirdParty/FreeRTOS/Source/tasks.c **** 
4228:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:ThirdParty/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:ThirdParty/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:ThirdParty/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:ThirdParty/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:ThirdParty/FreeRTOS/Source/tasks.c **** 			critical section. */
4234:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4236:ThirdParty/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4238:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4239:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
4240:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4241:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4243:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4244:ThirdParty/FreeRTOS/Source/tasks.c **** 
4245:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4247:ThirdParty/FreeRTOS/Source/tasks.c **** 
4248:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:ThirdParty/FreeRTOS/Source/tasks.c **** 
4250:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4251:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4252:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4254:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4256:ThirdParty/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:ThirdParty/FreeRTOS/Source/tasks.c **** 
4258:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4260:ThirdParty/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4261:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4262:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
4263:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4264:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4266:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4267:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
4268:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4269:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4271:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4272:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
4273:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4274:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4276:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4277:ThirdParty/FreeRTOS/Source/tasks.c **** 
4278:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4280:ThirdParty/FreeRTOS/Source/tasks.c **** 
4281:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:ThirdParty/FreeRTOS/Source/tasks.c **** 
4283:ThirdParty/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
ARM GAS  /tmp/cc4Zpja9.s 			page 96


4284:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4285:ThirdParty/FreeRTOS/Source/tasks.c **** 	size_t x;
4286:ThirdParty/FreeRTOS/Source/tasks.c **** 
4287:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4288:ThirdParty/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4289:ThirdParty/FreeRTOS/Source/tasks.c **** 
4290:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:ThirdParty/FreeRTOS/Source/tasks.c **** 		printed out. */
4292:ThirdParty/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4293:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4294:ThirdParty/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4295:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4296:ThirdParty/FreeRTOS/Source/tasks.c **** 
4297:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4298:ThirdParty/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4299:ThirdParty/FreeRTOS/Source/tasks.c **** 
4300:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4301:ThirdParty/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4302:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4303:ThirdParty/FreeRTOS/Source/tasks.c **** 
4304:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4306:ThirdParty/FreeRTOS/Source/tasks.c **** 
4307:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:ThirdParty/FreeRTOS/Source/tasks.c **** 
4309:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4311:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:ThirdParty/FreeRTOS/Source/tasks.c **** 	char cStatus;
4314:ThirdParty/FreeRTOS/Source/tasks.c **** 
4315:ThirdParty/FreeRTOS/Source/tasks.c **** 		/*
4316:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4317:ThirdParty/FreeRTOS/Source/tasks.c **** 		 *
4318:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4321:ThirdParty/FreeRTOS/Source/tasks.c **** 		 *
4322:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4325:ThirdParty/FreeRTOS/Source/tasks.c **** 		 *
4326:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4333:ThirdParty/FreeRTOS/Source/tasks.c **** 		 *
4334:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4337:ThirdParty/FreeRTOS/Source/tasks.c **** 		 */
4338:ThirdParty/FreeRTOS/Source/tasks.c **** 
4339:ThirdParty/FreeRTOS/Source/tasks.c **** 
4340:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
ARM GAS  /tmp/cc4Zpja9.s 			page 97


4341:ThirdParty/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4342:ThirdParty/FreeRTOS/Source/tasks.c **** 
4343:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:ThirdParty/FreeRTOS/Source/tasks.c **** 		function is executing. */
4345:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4346:ThirdParty/FreeRTOS/Source/tasks.c **** 
4347:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:ThirdParty/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:ThirdParty/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4350:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4351:ThirdParty/FreeRTOS/Source/tasks.c **** 
4352:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4353:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4354:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4355:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4356:ThirdParty/FreeRTOS/Source/tasks.c **** 
4357:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:ThirdParty/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4359:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4360:ThirdParty/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4361:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4362:ThirdParty/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4363:ThirdParty/FreeRTOS/Source/tasks.c **** 										break;
4364:ThirdParty/FreeRTOS/Source/tasks.c **** 
4365:ThirdParty/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4366:ThirdParty/FreeRTOS/Source/tasks.c **** 										break;
4367:ThirdParty/FreeRTOS/Source/tasks.c **** 
4368:ThirdParty/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4369:ThirdParty/FreeRTOS/Source/tasks.c **** 										break;
4370:ThirdParty/FreeRTOS/Source/tasks.c **** 
4371:ThirdParty/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4372:ThirdParty/FreeRTOS/Source/tasks.c **** 										break;
4373:ThirdParty/FreeRTOS/Source/tasks.c **** 
4374:ThirdParty/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4375:ThirdParty/FreeRTOS/Source/tasks.c **** 										break;
4376:ThirdParty/FreeRTOS/Source/tasks.c **** 
4377:ThirdParty/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:ThirdParty/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4379:ThirdParty/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4380:ThirdParty/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4381:ThirdParty/FreeRTOS/Source/tasks.c **** 										break;
4382:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4383:ThirdParty/FreeRTOS/Source/tasks.c **** 
4384:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:ThirdParty/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4386:ThirdParty/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4387:ThirdParty/FreeRTOS/Source/tasks.c **** 
4388:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4389:ThirdParty/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4390:ThirdParty/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4391:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4392:ThirdParty/FreeRTOS/Source/tasks.c **** 
4393:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:ThirdParty/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:ThirdParty/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4396:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4397:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/cc4Zpja9.s 			page 98


4398:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4399:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4401:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4402:ThirdParty/FreeRTOS/Source/tasks.c **** 
4403:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:ThirdParty/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4405:ThirdParty/FreeRTOS/Source/tasks.c **** 
4406:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:ThirdParty/FreeRTOS/Source/tasks.c **** 
4408:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4410:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:ThirdParty/FreeRTOS/Source/tasks.c **** 
4414:ThirdParty/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4416:ThirdParty/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4418:ThirdParty/FreeRTOS/Source/tasks.c **** 		#endif
4419:ThirdParty/FreeRTOS/Source/tasks.c **** 
4420:ThirdParty/FreeRTOS/Source/tasks.c **** 		/*
4421:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4422:ThirdParty/FreeRTOS/Source/tasks.c **** 		 *
4423:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4426:ThirdParty/FreeRTOS/Source/tasks.c **** 		 *
4427:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4431:ThirdParty/FreeRTOS/Source/tasks.c **** 		 *
4432:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4439:ThirdParty/FreeRTOS/Source/tasks.c **** 		 *
4440:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:ThirdParty/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:ThirdParty/FreeRTOS/Source/tasks.c **** 		 */
4444:ThirdParty/FreeRTOS/Source/tasks.c **** 
4445:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:ThirdParty/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:ThirdParty/FreeRTOS/Source/tasks.c **** 
4448:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:ThirdParty/FreeRTOS/Source/tasks.c **** 		function is executing. */
4450:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:ThirdParty/FreeRTOS/Source/tasks.c **** 
4452:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:ThirdParty/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:ThirdParty/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
ARM GAS  /tmp/cc4Zpja9.s 			page 99


4455:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:ThirdParty/FreeRTOS/Source/tasks.c **** 
4457:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4459:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4460:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:ThirdParty/FreeRTOS/Source/tasks.c **** 
4462:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4463:ThirdParty/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4464:ThirdParty/FreeRTOS/Source/tasks.c **** 
4465:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4466:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4467:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4468:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:ThirdParty/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4471:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:ThirdParty/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:ThirdParty/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:ThirdParty/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:ThirdParty/FreeRTOS/Source/tasks.c **** 
4476:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4477:ThirdParty/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4478:ThirdParty/FreeRTOS/Source/tasks.c **** 					easily. */
4479:ThirdParty/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:ThirdParty/FreeRTOS/Source/tasks.c **** 
4481:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4483:ThirdParty/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
4485:ThirdParty/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
4487:ThirdParty/FreeRTOS/Source/tasks.c **** 						#else
4488:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
4489:ThirdParty/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:ThirdParty/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4491:ThirdParty/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
4493:ThirdParty/FreeRTOS/Source/tasks.c **** 						#endif
4494:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4495:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
4496:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4497:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4498:ThirdParty/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4499:ThirdParty/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
4501:ThirdParty/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
4503:ThirdParty/FreeRTOS/Source/tasks.c **** 						#else
4504:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
4505:ThirdParty/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:ThirdParty/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4507:ThirdParty/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
4509:ThirdParty/FreeRTOS/Source/tasks.c **** 						#endif
4510:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4511:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 100


4512:ThirdParty/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4514:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4515:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
4516:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4517:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4519:ThirdParty/FreeRTOS/Source/tasks.c **** 
4520:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:ThirdParty/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:ThirdParty/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4524:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
4525:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4526:ThirdParty/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4528:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4529:ThirdParty/FreeRTOS/Source/tasks.c **** 
4530:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4532:ThirdParty/FreeRTOS/Source/tasks.c **** 
4533:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:ThirdParty/FreeRTOS/Source/tasks.c **** {
4535:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4536:ThirdParty/FreeRTOS/Source/tasks.c **** 
4537:ThirdParty/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4538:ThirdParty/FreeRTOS/Source/tasks.c **** 
4539:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:ThirdParty/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4541:ThirdParty/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4542:ThirdParty/FreeRTOS/Source/tasks.c **** 
4543:ThirdParty/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4544:ThirdParty/FreeRTOS/Source/tasks.c **** }
4545:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4546:ThirdParty/FreeRTOS/Source/tasks.c **** 
4547:ThirdParty/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:ThirdParty/FreeRTOS/Source/tasks.c **** 
4549:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4551:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:ThirdParty/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4554:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4555:ThirdParty/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4556:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4557:ThirdParty/FreeRTOS/Source/tasks.c **** 
4558:ThirdParty/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4559:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4560:ThirdParty/FreeRTOS/Source/tasks.c **** 
4561:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4562:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4563:ThirdParty/FreeRTOS/Source/tasks.c **** 
4564:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:ThirdParty/FreeRTOS/Source/tasks.c **** 
4566:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4568:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
ARM GAS  /tmp/cc4Zpja9.s 			page 101


4569:ThirdParty/FreeRTOS/Source/tasks.c **** 
4570:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4571:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4572:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4574:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4575:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4577:ThirdParty/FreeRTOS/Source/tasks.c **** 
4578:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4579:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4580:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4581:ThirdParty/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:ThirdParty/FreeRTOS/Source/tasks.c **** 
4583:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:ThirdParty/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4585:ThirdParty/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4586:ThirdParty/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4587:ThirdParty/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4588:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4589:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
4590:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4591:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4593:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4594:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
4595:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4596:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4598:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4599:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4600:ThirdParty/FreeRTOS/Source/tasks.c **** 
4601:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4602:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4603:ThirdParty/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:ThirdParty/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4605:ThirdParty/FreeRTOS/Source/tasks.c **** 
4606:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4607:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4608:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4609:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4610:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4611:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4612:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
4613:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4614:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4615:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4616:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4617:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
4618:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4619:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4621:ThirdParty/FreeRTOS/Source/tasks.c **** 
4622:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4623:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4624:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4625:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 102


4626:ThirdParty/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4627:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4628:ThirdParty/FreeRTOS/Source/tasks.c **** 
4629:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4631:ThirdParty/FreeRTOS/Source/tasks.c **** 
4632:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:ThirdParty/FreeRTOS/Source/tasks.c **** 
4634:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4636:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4637:ThirdParty/FreeRTOS/Source/tasks.c **** 
4638:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4639:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4640:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4642:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4643:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:ThirdParty/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:ThirdParty/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4646:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4647:ThirdParty/FreeRTOS/Source/tasks.c **** 
4648:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4650:ThirdParty/FreeRTOS/Source/tasks.c **** 
4651:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4652:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4653:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4654:ThirdParty/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:ThirdParty/FreeRTOS/Source/tasks.c **** 
4656:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:ThirdParty/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4658:ThirdParty/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4659:ThirdParty/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4660:ThirdParty/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4661:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4662:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
4663:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4664:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4666:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4667:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
4668:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4669:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4671:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4672:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4673:ThirdParty/FreeRTOS/Source/tasks.c **** 
4674:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4675:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4676:ThirdParty/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:ThirdParty/FreeRTOS/Source/tasks.c **** 
4678:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4679:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4680:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4681:ThirdParty/FreeRTOS/Source/tasks.c **** 				have changed. */
4682:ThirdParty/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
ARM GAS  /tmp/cc4Zpja9.s 			page 103


4683:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4684:ThirdParty/FreeRTOS/Source/tasks.c **** 
4685:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:ThirdParty/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:ThirdParty/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:ThirdParty/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4689:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4690:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4691:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4692:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4693:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4694:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
4695:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4696:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4697:ThirdParty/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4698:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4699:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4700:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4701:ThirdParty/FreeRTOS/Source/tasks.c **** 
4702:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4703:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4704:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4705:ThirdParty/FreeRTOS/Source/tasks.c **** 
4706:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
4707:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4708:ThirdParty/FreeRTOS/Source/tasks.c **** 
4709:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4711:ThirdParty/FreeRTOS/Source/tasks.c **** 
4712:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:ThirdParty/FreeRTOS/Source/tasks.c **** 
4714:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4716:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4717:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4718:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:ThirdParty/FreeRTOS/Source/tasks.c **** 
4720:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4721:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4722:ThirdParty/FreeRTOS/Source/tasks.c **** 
4723:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4724:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4725:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4726:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4727:ThirdParty/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4728:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4729:ThirdParty/FreeRTOS/Source/tasks.c **** 
4730:ThirdParty/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4731:ThirdParty/FreeRTOS/Source/tasks.c **** 
4732:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4733:ThirdParty/FreeRTOS/Source/tasks.c **** 
4734:ThirdParty/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4735:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4736:ThirdParty/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4737:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4738:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4739:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 104


4740:ThirdParty/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4741:ThirdParty/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4742:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4743:ThirdParty/FreeRTOS/Source/tasks.c **** 
4744:ThirdParty/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4745:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4746:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4747:ThirdParty/FreeRTOS/Source/tasks.c **** 
4748:ThirdParty/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4750:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4751:ThirdParty/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4752:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4753:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
4754:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4755:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4756:ThirdParty/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4757:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4758:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4759:ThirdParty/FreeRTOS/Source/tasks.c **** 
4760:ThirdParty/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4761:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4762:ThirdParty/FreeRTOS/Source/tasks.c **** 					updated. */
4763:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4764:ThirdParty/FreeRTOS/Source/tasks.c **** 
4765:ThirdParty/FreeRTOS/Source/tasks.c **** 				default:
4766:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4767:ThirdParty/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4768:ThirdParty/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4769:ThirdParty/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4770:ThirdParty/FreeRTOS/Source/tasks.c **** 
4771:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4772:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4773:ThirdParty/FreeRTOS/Source/tasks.c **** 
4774:ThirdParty/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4775:ThirdParty/FreeRTOS/Source/tasks.c **** 
4776:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:ThirdParty/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4778:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4779:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4780:ThirdParty/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4781:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4782:ThirdParty/FreeRTOS/Source/tasks.c **** 
4783:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4784:ThirdParty/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4785:ThirdParty/FreeRTOS/Source/tasks.c **** 
4786:ThirdParty/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4788:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:ThirdParty/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:ThirdParty/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:ThirdParty/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:ThirdParty/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4793:ThirdParty/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:ThirdParty/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4795:ThirdParty/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:ThirdParty/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
ARM GAS  /tmp/cc4Zpja9.s 			page 105


4797:ThirdParty/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4798:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4800:ThirdParty/FreeRTOS/Source/tasks.c **** 				#endif
4801:ThirdParty/FreeRTOS/Source/tasks.c **** 
4802:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4803:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4804:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4805:ThirdParty/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4806:ThirdParty/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4807:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4808:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
4809:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4810:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4812:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4813:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
4814:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4815:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4817:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4818:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4819:ThirdParty/FreeRTOS/Source/tasks.c **** 
4820:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
4821:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4822:ThirdParty/FreeRTOS/Source/tasks.c **** 
4823:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4825:ThirdParty/FreeRTOS/Source/tasks.c **** 
4826:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:ThirdParty/FreeRTOS/Source/tasks.c **** 
4828:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4830:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4831:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4833:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:ThirdParty/FreeRTOS/Source/tasks.c **** 
4835:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4836:ThirdParty/FreeRTOS/Source/tasks.c **** 
4837:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:ThirdParty/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:ThirdParty/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:ThirdParty/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:ThirdParty/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:ThirdParty/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:ThirdParty/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:ThirdParty/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:ThirdParty/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:ThirdParty/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:ThirdParty/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:ThirdParty/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:ThirdParty/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:ThirdParty/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:ThirdParty/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4852:ThirdParty/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:ThirdParty/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  /tmp/cc4Zpja9.s 			page 106


4854:ThirdParty/FreeRTOS/Source/tasks.c **** 
4855:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4856:ThirdParty/FreeRTOS/Source/tasks.c **** 
4857:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4858:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4859:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4860:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4861:ThirdParty/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4862:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4863:ThirdParty/FreeRTOS/Source/tasks.c **** 
4864:ThirdParty/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4865:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4866:ThirdParty/FreeRTOS/Source/tasks.c **** 
4867:ThirdParty/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4868:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4869:ThirdParty/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4870:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4871:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4872:ThirdParty/FreeRTOS/Source/tasks.c **** 
4873:ThirdParty/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4874:ThirdParty/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4875:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4876:ThirdParty/FreeRTOS/Source/tasks.c **** 
4877:ThirdParty/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4878:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4879:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4880:ThirdParty/FreeRTOS/Source/tasks.c **** 
4881:ThirdParty/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4883:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4884:ThirdParty/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4885:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4886:ThirdParty/FreeRTOS/Source/tasks.c **** 					else
4887:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4888:ThirdParty/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4889:ThirdParty/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4890:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4891:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4892:ThirdParty/FreeRTOS/Source/tasks.c **** 
4893:ThirdParty/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4894:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4895:ThirdParty/FreeRTOS/Source/tasks.c **** 					updated. */
4896:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4897:ThirdParty/FreeRTOS/Source/tasks.c **** 
4898:ThirdParty/FreeRTOS/Source/tasks.c **** 				default:
4899:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4900:ThirdParty/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4901:ThirdParty/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4902:ThirdParty/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4903:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
4904:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4905:ThirdParty/FreeRTOS/Source/tasks.c **** 
4906:ThirdParty/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:ThirdParty/FreeRTOS/Source/tasks.c **** 
4908:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:ThirdParty/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4910:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
ARM GAS  /tmp/cc4Zpja9.s 			page 107


4911:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
4912:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4913:ThirdParty/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4914:ThirdParty/FreeRTOS/Source/tasks.c **** 
4915:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4916:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4917:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4918:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4919:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4920:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
4921:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4922:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:ThirdParty/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:ThirdParty/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4925:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4926:ThirdParty/FreeRTOS/Source/tasks.c **** 
4927:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4928:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4929:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4930:ThirdParty/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4931:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4932:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
4933:ThirdParty/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4934:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
4935:ThirdParty/FreeRTOS/Source/tasks.c **** 
4936:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:ThirdParty/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:ThirdParty/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4939:ThirdParty/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
4940:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4941:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
4942:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
4943:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
4945:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
4946:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
4947:ThirdParty/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:ThirdParty/FreeRTOS/Source/tasks.c **** 
4949:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
4950:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
4951:ThirdParty/FreeRTOS/Source/tasks.c **** 
4952:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4954:ThirdParty/FreeRTOS/Source/tasks.c **** 
4955:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:ThirdParty/FreeRTOS/Source/tasks.c **** 
4957:ThirdParty/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
4959:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4960:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:ThirdParty/FreeRTOS/Source/tasks.c **** 
4963:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4964:ThirdParty/FreeRTOS/Source/tasks.c **** 
4965:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:ThirdParty/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:ThirdParty/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
ARM GAS  /tmp/cc4Zpja9.s 			page 108


4968:ThirdParty/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:ThirdParty/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:ThirdParty/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:ThirdParty/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:ThirdParty/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:ThirdParty/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:ThirdParty/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:ThirdParty/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:ThirdParty/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:ThirdParty/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:ThirdParty/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:ThirdParty/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4980:ThirdParty/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:ThirdParty/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4982:ThirdParty/FreeRTOS/Source/tasks.c **** 
4983:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4984:ThirdParty/FreeRTOS/Source/tasks.c **** 
4985:ThirdParty/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4986:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
4987:ThirdParty/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4988:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4989:ThirdParty/FreeRTOS/Source/tasks.c **** 
4990:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:ThirdParty/FreeRTOS/Source/tasks.c **** 			semaphore. */
4992:ThirdParty/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4993:ThirdParty/FreeRTOS/Source/tasks.c **** 
4994:ThirdParty/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:ThirdParty/FreeRTOS/Source/tasks.c **** 
4996:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:ThirdParty/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4998:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4999:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
5000:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5001:ThirdParty/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5002:ThirdParty/FreeRTOS/Source/tasks.c **** 
5003:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5004:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
5005:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5006:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5007:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
5008:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
5009:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
5010:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:ThirdParty/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:ThirdParty/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5013:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
5014:ThirdParty/FreeRTOS/Source/tasks.c **** 
5015:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5016:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
5017:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5018:ThirdParty/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5019:ThirdParty/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5020:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
5021:ThirdParty/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5022:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
5023:ThirdParty/FreeRTOS/Source/tasks.c **** 
5024:ThirdParty/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
ARM GAS  /tmp/cc4Zpja9.s 			page 109


5025:ThirdParty/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:ThirdParty/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5027:ThirdParty/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5028:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
5029:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
5030:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
5031:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
5033:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
5034:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
5035:ThirdParty/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
5037:ThirdParty/FreeRTOS/Source/tasks.c **** 
5038:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:ThirdParty/FreeRTOS/Source/tasks.c **** 
5040:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5041:ThirdParty/FreeRTOS/Source/tasks.c **** 
5042:ThirdParty/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:ThirdParty/FreeRTOS/Source/tasks.c **** 
5044:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
5046:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5047:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5048:ThirdParty/FreeRTOS/Source/tasks.c **** 
5049:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:ThirdParty/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5051:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5052:ThirdParty/FreeRTOS/Source/tasks.c **** 
5053:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5054:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
5055:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5056:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
5057:ThirdParty/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5058:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5059:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
5060:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
5061:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
5062:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
5063:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
5064:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
5065:ThirdParty/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5066:ThirdParty/FreeRTOS/Source/tasks.c **** 
5067:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xReturn;
5068:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
5069:ThirdParty/FreeRTOS/Source/tasks.c **** 
5070:ThirdParty/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5072:ThirdParty/FreeRTOS/Source/tasks.c **** 
5073:ThirdParty/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:ThirdParty/FreeRTOS/Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
5076:ThirdParty/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
5078:ThirdParty/FreeRTOS/Source/tasks.c **** #endif
5079:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5080:ThirdParty/FreeRTOS/Source/tasks.c **** 
5081:ThirdParty/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
ARM GAS  /tmp/cc4Zpja9.s 			page 110


5082:ThirdParty/FreeRTOS/Source/tasks.c **** {
 773              		.loc 1 5082 1 is_stmt 1 view -0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              		.loc 1 5082 1 is_stmt 0 view .LVU227
 778 0000 70B5     		push	{r4, r5, r6, lr}
 779              	.LCFI6:
 780              		.cfi_def_cfa_offset 16
 781              		.cfi_offset 4, -16
 782              		.cfi_offset 5, -12
 783              		.cfi_offset 6, -8
 784              		.cfi_offset 14, -4
 785 0002 0446     		mov	r4, r0
 786 0004 0D46     		mov	r5, r1
5083:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
 787              		.loc 1 5083 1 is_stmt 1 view .LVU228
5084:ThirdParty/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 788              		.loc 1 5084 1 view .LVU229
 789              		.loc 1 5084 18 is_stmt 0 view .LVU230
 790 0006 1D4B     		ldr	r3, .L66
 791 0008 1E68     		ldr	r6, [r3]
 792              	.LVL61:
5085:ThirdParty/FreeRTOS/Source/tasks.c **** 
5086:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
5088:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:ThirdParty/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:ThirdParty/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5091:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
5093:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif
5094:ThirdParty/FreeRTOS/Source/tasks.c **** 
5095:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:ThirdParty/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5097:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 793              		.loc 1 5097 2 is_stmt 1 view .LVU231
 794              		.loc 1 5097 35 is_stmt 0 view .LVU232
 795 000a 1D4B     		ldr	r3, .L66+4
 796 000c 1868     		ldr	r0, [r3]
 797              	.LVL62:
 798              		.loc 1 5097 6 view .LVU233
 799 000e 0430     		adds	r0, r0, #4
 800 0010 FFF7FEFF 		bl	uxListRemove
 801              	.LVL63:
 802              		.loc 1 5097 4 view .LVU234
 803 0014 50B9     		cbnz	r0, .L60
5098:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
5099:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:ThirdParty/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:ThirdParty/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 804              		.loc 1 5101 3 is_stmt 1 view .LVU235
 805 0016 1A4B     		ldr	r3, .L66+4
 806 0018 1B68     		ldr	r3, [r3]
 807 001a DA6A     		ldr	r2, [r3, #44]
 808 001c 0123     		movs	r3, #1
 809 001e 03FA02F2 		lsl	r2, r3, r2
ARM GAS  /tmp/cc4Zpja9.s 			page 111


 810 0022 1849     		ldr	r1, .L66+8
 811 0024 0B68     		ldr	r3, [r1]
 812 0026 23EA0203 		bic	r3, r3, r2
 813 002a 0B60     		str	r3, [r1]
 814              	.L60:
5102:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
5103:ThirdParty/FreeRTOS/Source/tasks.c **** 	else
5104:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
5105:ThirdParty/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 815              		.loc 1 5105 27 view .LVU236
5106:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
5107:ThirdParty/FreeRTOS/Source/tasks.c **** 
5108:ThirdParty/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
5110:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 816              		.loc 1 5110 3 view .LVU237
 817              		.loc 1 5110 5 is_stmt 0 view .LVU238
 818 002c B4F1FF3F 		cmp	r4, #-1
 819 0030 0DD0     		beq	.L65
 820              	.L61:
5111:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
5112:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:ThirdParty/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:ThirdParty/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5115:ThirdParty/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5116:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
5117:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
5118:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
5119:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:ThirdParty/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:ThirdParty/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5122:ThirdParty/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 821              		.loc 1 5122 4 is_stmt 1 view .LVU239
 822              		.loc 1 5122 16 is_stmt 0 view .LVU240
 823 0032 3444     		add	r4, r4, r6
 824              	.LVL64:
5123:ThirdParty/FreeRTOS/Source/tasks.c **** 
5124:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:ThirdParty/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 825              		.loc 1 5125 4 is_stmt 1 view .LVU241
 826 0034 124B     		ldr	r3, .L66+4
 827 0036 1B68     		ldr	r3, [r3]
 828 0038 5C60     		str	r4, [r3, #4]
5126:ThirdParty/FreeRTOS/Source/tasks.c **** 
5127:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 829              		.loc 1 5127 4 view .LVU242
 830              		.loc 1 5127 6 is_stmt 0 view .LVU243
 831 003a A642     		cmp	r6, r4
 832 003c 10D9     		bls	.L63
5128:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
5129:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:ThirdParty/FreeRTOS/Source/tasks.c **** 				list. */
5131:ThirdParty/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 833              		.loc 1 5131 5 is_stmt 1 view .LVU244
 834 003e 124B     		ldr	r3, .L66+12
 835 0040 1868     		ldr	r0, [r3]
 836              		.loc 1 5131 60 is_stmt 0 view .LVU245
ARM GAS  /tmp/cc4Zpja9.s 			page 112


 837 0042 0F4B     		ldr	r3, .L66+4
 838 0044 1968     		ldr	r1, [r3]
 839              		.loc 1 5131 5 view .LVU246
 840 0046 0431     		adds	r1, r1, #4
 841 0048 FFF7FEFF 		bl	vListInsert
 842              	.LVL65:
 843              	.L59:
5132:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
5133:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
5134:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
5135:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:ThirdParty/FreeRTOS/Source/tasks.c **** 				is used. */
5137:ThirdParty/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5138:ThirdParty/FreeRTOS/Source/tasks.c **** 
5139:ThirdParty/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:ThirdParty/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:ThirdParty/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5142:ThirdParty/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5143:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
5144:ThirdParty/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5145:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
5146:ThirdParty/FreeRTOS/Source/tasks.c **** 				else
5147:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
5148:ThirdParty/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5149:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
5150:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
5151:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
5152:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
5153:ThirdParty/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5154:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
5155:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5156:ThirdParty/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5157:ThirdParty/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5158:ThirdParty/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5159:ThirdParty/FreeRTOS/Source/tasks.c **** 
5160:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5161:ThirdParty/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5162:ThirdParty/FreeRTOS/Source/tasks.c **** 
5163:ThirdParty/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5164:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
5165:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5166:ThirdParty/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5167:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
5168:ThirdParty/FreeRTOS/Source/tasks.c **** 		else
5169:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
5170:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5171:ThirdParty/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5172:ThirdParty/FreeRTOS/Source/tasks.c **** 
5173:ThirdParty/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5174:ThirdParty/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5175:ThirdParty/FreeRTOS/Source/tasks.c **** 			too. */
5176:ThirdParty/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5177:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
5178:ThirdParty/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5179:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
5180:ThirdParty/FreeRTOS/Source/tasks.c **** 			else
5181:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc4Zpja9.s 			page 113


5182:ThirdParty/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5183:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
5184:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
5185:ThirdParty/FreeRTOS/Source/tasks.c **** 
5186:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5187:ThirdParty/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5188:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
5189:ThirdParty/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5190:ThirdParty/FreeRTOS/Source/tasks.c **** }
 844              		.loc 1 5190 1 view .LVU247
 845 004c 70BD     		pop	{r4, r5, r6, pc}
 846              	.LVL66:
 847              	.L65:
5110:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 848              		.loc 1 5110 41 discriminator 1 view .LVU248
 849 004e 002D     		cmp	r5, #0
 850 0050 EFD0     		beq	.L61
5115:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 851              		.loc 1 5115 4 is_stmt 1 view .LVU249
5115:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 852              		.loc 1 5115 56 is_stmt 0 view .LVU250
 853 0052 0B4B     		ldr	r3, .L66+4
 854 0054 1968     		ldr	r1, [r3]
5115:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 855              		.loc 1 5115 4 view .LVU251
 856 0056 0431     		adds	r1, r1, #4
 857 0058 0C48     		ldr	r0, .L66+16
 858 005a FFF7FEFF 		bl	vListInsertEnd
 859              	.LVL67:
 860 005e F5E7     		b	.L59
 861              	.LVL68:
 862              	.L63:
5137:ThirdParty/FreeRTOS/Source/tasks.c **** 
 863              		.loc 1 5137 5 is_stmt 1 view .LVU252
 864 0060 0B4B     		ldr	r3, .L66+20
 865 0062 1868     		ldr	r0, [r3]
5137:ThirdParty/FreeRTOS/Source/tasks.c **** 
 866              		.loc 1 5137 52 is_stmt 0 view .LVU253
 867 0064 064B     		ldr	r3, .L66+4
 868 0066 1968     		ldr	r1, [r3]
5137:ThirdParty/FreeRTOS/Source/tasks.c **** 
 869              		.loc 1 5137 5 view .LVU254
 870 0068 0431     		adds	r1, r1, #4
 871 006a FFF7FEFF 		bl	vListInsert
 872              	.LVL69:
5142:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 873              		.loc 1 5142 5 is_stmt 1 view .LVU255
5142:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 874              		.loc 1 5142 21 is_stmt 0 view .LVU256
 875 006e 094B     		ldr	r3, .L66+24
 876 0070 1B68     		ldr	r3, [r3]
5142:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 877              		.loc 1 5142 7 view .LVU257
 878 0072 A342     		cmp	r3, r4
 879 0074 EAD9     		bls	.L59
5144:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 880              		.loc 1 5144 6 is_stmt 1 view .LVU258
ARM GAS  /tmp/cc4Zpja9.s 			page 114


5144:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 881              		.loc 1 5144 27 is_stmt 0 view .LVU259
 882 0076 074B     		ldr	r3, .L66+24
 883 0078 1C60     		str	r4, [r3]
5148:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 884              		.loc 1 5148 30 is_stmt 1 view .LVU260
 885              		.loc 1 5190 1 is_stmt 0 view .LVU261
 886 007a E7E7     		b	.L59
 887              	.L67:
 888              		.align	2
 889              	.L66:
 890 007c 00000000 		.word	.LANCHOR15
 891 0080 00000000 		.word	.LANCHOR10
 892 0084 00000000 		.word	.LANCHOR13
 893 0088 00000000 		.word	.LANCHOR8
 894 008c 00000000 		.word	.LANCHOR0
 895 0090 00000000 		.word	.LANCHOR2
 896 0094 00000000 		.word	.LANCHOR3
 897              		.cfi_endproc
 898              	.LFE56:
 900              		.section	.text.prvIdleTask,"ax",%progbits
 901              		.align	1
 902              		.syntax unified
 903              		.thumb
 904              		.thumb_func
 906              	prvIdleTask:
 907              	.LFB36:
3335:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 908              		.loc 1 3335 1 is_stmt 1 view -0
 909              		.cfi_startproc
 910              		@ Volatile: function does not return.
 911              		@ args = 0, pretend = 0, frame = 0
 912              		@ frame_needed = 0, uses_anonymous_args = 0
 913              	.LVL70:
3335:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 914              		.loc 1 3335 1 is_stmt 0 view .LVU263
 915 0000 08B5     		push	{r3, lr}
 916              	.LCFI7:
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 3, -8
 919              		.cfi_offset 14, -4
 920 0002 0BE0     		b	.L70
 921              	.LVL71:
 922              	.L72:
3376:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 923              		.loc 1 3376 5 is_stmt 1 view .LVU264
 924 0004 4FF0E023 		mov	r3, #-536813568
 925 0008 4FF08052 		mov	r2, #268435456
 926 000c C3F8042D 		str	r2, [r3, #3332]
3376:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 927              		.loc 1 3376 5 view .LVU265
 928              		.syntax unified
 929              	@ 3376 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 930 0010 BFF34F8F 		dsb
 931              	@ 0 "" 2
3376:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 932              		.loc 1 3376 5 view .LVU266
ARM GAS  /tmp/cc4Zpja9.s 			page 115


 933              	@ 3376 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 934 0014 BFF36F8F 		isb
 935              	@ 0 "" 2
3376:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 936              		.loc 1 3376 16 view .LVU267
 937              		.thumb
 938              		.syntax unified
 939              	.L69:
3380:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 940              		.loc 1 3380 29 view .LVU268
 941              	.LBB109:
3387:ThirdParty/FreeRTOS/Source/tasks.c **** 
 942              		.loc 1 3387 4 view .LVU269
3394:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 943              		.loc 1 3394 4 view .LVU270
 944 0018 FFF7FEFF 		bl	vApplicationIdleHook
 945              	.LVL72:
 946              	.LBE109:
3347:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 947              		.loc 1 3347 8 view .LVU271
 948              	.L70:
3337:ThirdParty/FreeRTOS/Source/tasks.c **** 
 949              		.loc 1 3337 2 view .LVU272
3345:ThirdParty/FreeRTOS/Source/tasks.c **** 
 950              		.loc 1 3345 64 view .LVU273
3347:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 951              		.loc 1 3347 2 view .LVU274
3351:ThirdParty/FreeRTOS/Source/tasks.c **** 
 952              		.loc 1 3351 3 view .LVU275
 953 001c FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 954              	.LVL73:
3374:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 955              		.loc 1 3374 4 view .LVU276
3374:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 956              		.loc 1 3374 8 is_stmt 0 view .LVU277
 957 0020 024B     		ldr	r3, .L73
 958 0022 1B68     		ldr	r3, [r3]
3374:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 959              		.loc 1 3374 6 view .LVU278
 960 0024 012B     		cmp	r3, #1
 961 0026 EDD8     		bhi	.L72
 962 0028 F6E7     		b	.L69
 963              	.L74:
 964 002a 00BF     		.align	2
 965              	.L73:
 966 002c 00000000 		.word	.LANCHOR4
 967              		.cfi_endproc
 968              	.LFE36:
 970              		.section	.text.xTaskCreate,"ax",%progbits
 971              		.align	1
 972              		.global	xTaskCreate
 973              		.syntax unified
 974              		.thumb
 975              		.thumb_func
 977              	xTaskCreate:
 978              	.LVL74:
 979              	.LFB5:
ARM GAS  /tmp/cc4Zpja9.s 			page 116


 736:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 980              		.loc 1 736 2 is_stmt 1 view -0
 981              		.cfi_startproc
 982              		@ args = 8, pretend = 0, frame = 0
 983              		@ frame_needed = 0, uses_anonymous_args = 0
 736:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 984              		.loc 1 736 2 is_stmt 0 view .LVU280
 985 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 986              	.LCFI8:
 987              		.cfi_def_cfa_offset 28
 988              		.cfi_offset 4, -28
 989              		.cfi_offset 5, -24
 990              		.cfi_offset 6, -20
 991              		.cfi_offset 7, -16
 992              		.cfi_offset 8, -12
 993              		.cfi_offset 9, -8
 994              		.cfi_offset 14, -4
 995 0004 85B0     		sub	sp, sp, #20
 996              	.LCFI9:
 997              		.cfi_def_cfa_offset 48
 998 0006 0746     		mov	r7, r0
 999 0008 8846     		mov	r8, r1
 1000 000a 1446     		mov	r4, r2
 1001 000c 1E46     		mov	r6, r3
 737:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 1002              		.loc 1 737 2 is_stmt 1 view .LVU281
 738:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1003              		.loc 1 738 2 view .LVU282
 1004              	.LBB110:
 767:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1005              		.loc 1 767 3 view .LVU283
 770:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1006              		.loc 1 770 4 view .LVU284
 770:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1007              		.loc 1 770 14 is_stmt 0 view .LVU285
 1008 000e 9000     		lsls	r0, r2, #2
 1009              	.LVL75:
 770:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1010              		.loc 1 770 14 view .LVU286
 1011 0010 FFF7FEFF 		bl	pvPortMalloc
 1012              	.LVL76:
 772:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1013              		.loc 1 772 4 is_stmt 1 view .LVU287
 772:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1014              		.loc 1 772 6 is_stmt 0 view .LVU288
 1015 0014 F0B1     		cbz	r0, .L79
 1016 0016 8146     		mov	r9, r0
 775:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1017              		.loc 1 775 5 is_stmt 1 view .LVU289
 775:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1018              		.loc 1 775 28 is_stmt 0 view .LVU290
 1019 0018 5420     		movs	r0, #84
 1020              	.LVL77:
 775:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1021              		.loc 1 775 28 view .LVU291
 1022 001a FFF7FEFF 		bl	pvPortMalloc
 1023              	.LVL78:
ARM GAS  /tmp/cc4Zpja9.s 			page 117


 777:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1024              		.loc 1 777 5 is_stmt 1 view .LVU292
 777:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1025              		.loc 1 777 7 is_stmt 0 view .LVU293
 1026 001e 0546     		mov	r5, r0
 1027 0020 A0B1     		cbz	r0, .L77
 780:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1028              		.loc 1 780 6 is_stmt 1 view .LVU294
 780:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1029              		.loc 1 780 24 is_stmt 0 view .LVU295
 1030 0022 C0F83090 		str	r9, [r0, #48]
 1031              	.LVL79:
 1032              	.L78:
 780:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1033              		.loc 1 780 24 view .LVU296
 1034              	.LBE110:
 796:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1035              		.loc 1 796 3 is_stmt 1 view .LVU297
 796:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1036              		.loc 1 796 5 is_stmt 0 view .LVU298
 1037 0026 D5B1     		cbz	r5, .L80
 806:ThirdParty/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1038              		.loc 1 806 4 is_stmt 1 view .LVU299
 1039 0028 0023     		movs	r3, #0
 1040 002a 0393     		str	r3, [sp, #12]
 1041 002c 0295     		str	r5, [sp, #8]
 1042 002e 0D9B     		ldr	r3, [sp, #52]
 1043 0030 0193     		str	r3, [sp, #4]
 1044 0032 0C9B     		ldr	r3, [sp, #48]
 1045 0034 0093     		str	r3, [sp]
 1046 0036 3346     		mov	r3, r6
 1047 0038 2246     		mov	r2, r4
 1048 003a 4146     		mov	r1, r8
 1049 003c 3846     		mov	r0, r7
 1050 003e FFF7FEFF 		bl	prvInitialiseNewTask
 1051              	.LVL80:
 807:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1052              		.loc 1 807 4 view .LVU300
 1053 0042 2846     		mov	r0, r5
 1054 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1055              	.LVL81:
 808:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1056              		.loc 1 808 4 view .LVU301
 808:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1057              		.loc 1 808 12 is_stmt 0 view .LVU302
 1058 0048 0120     		movs	r0, #1
 1059 004a 05E0     		b	.L75
 1060              	.LVL82:
 1061              	.L77:
 1062              	.LBB111:
 786:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1063              		.loc 1 786 6 is_stmt 1 view .LVU303
 1064 004c 4846     		mov	r0, r9
 1065              	.LVL83:
 786:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1066              		.loc 1 786 6 is_stmt 0 view .LVU304
 1067 004e FFF7FEFF 		bl	vPortFree
ARM GAS  /tmp/cc4Zpja9.s 			page 118


 1068              	.LVL84:
 1069 0052 E8E7     		b	.L78
 1070              	.LVL85:
 1071              	.L79:
 786:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1072              		.loc 1 786 6 view .LVU305
 1073              	.LBE111:
 812:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1074              		.loc 1 812 12 view .LVU306
 1075 0054 4FF0FF30 		mov	r0, #-1
 1076              	.LVL86:
 1077              	.L75:
 816:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1078              		.loc 1 816 2 view .LVU307
 1079 0058 05B0     		add	sp, sp, #20
 1080              	.LCFI10:
 1081              		.cfi_remember_state
 1082              		.cfi_def_cfa_offset 28
 1083              		@ sp needed
 1084 005a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1085              	.LVL87:
 1086              	.L80:
 1087              	.LCFI11:
 1088              		.cfi_restore_state
 812:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1089              		.loc 1 812 12 view .LVU308
 1090 005e 4FF0FF30 		mov	r0, #-1
 1091              	.LVL88:
 815:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 1092              		.loc 1 815 3 is_stmt 1 view .LVU309
 815:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 1093              		.loc 1 815 10 is_stmt 0 view .LVU310
 1094 0062 F9E7     		b	.L75
 1095              		.cfi_endproc
 1096              	.LFE5:
 1098              		.section	.text.vTaskDelete,"ax",%progbits
 1099              		.align	1
 1100              		.global	vTaskDelete
 1101              		.syntax unified
 1102              		.thumb
 1103              		.thumb_func
 1105              	vTaskDelete:
 1106              	.LVL89:
 1107              	.LFB8:
1158:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1108              		.loc 1 1158 2 is_stmt 1 view -0
 1109              		.cfi_startproc
 1110              		@ args = 0, pretend = 0, frame = 0
 1111              		@ frame_needed = 0, uses_anonymous_args = 0
1158:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1112              		.loc 1 1158 2 is_stmt 0 view .LVU312
 1113 0000 38B5     		push	{r3, r4, r5, lr}
 1114              	.LCFI12:
 1115              		.cfi_def_cfa_offset 16
 1116              		.cfi_offset 3, -16
 1117              		.cfi_offset 4, -12
 1118              		.cfi_offset 5, -8
ARM GAS  /tmp/cc4Zpja9.s 			page 119


 1119              		.cfi_offset 14, -4
 1120 0002 0446     		mov	r4, r0
1159:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1121              		.loc 1 1159 2 is_stmt 1 view .LVU313
1161:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1122              		.loc 1 1161 3 view .LVU314
 1123 0004 FFF7FEFF 		bl	vPortEnterCritical
 1124              	.LVL90:
1165:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1125              		.loc 1 1165 4 view .LVU315
1165:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1126              		.loc 1 1165 12 is_stmt 0 view .LVU316
 1127 0008 002C     		cmp	r4, #0
 1128 000a 33D0     		beq	.L92
 1129              	.LVL91:
 1130              	.L83:
1168:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1131              		.loc 1 1168 4 is_stmt 1 discriminator 4 view .LVU317
1168:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1132              		.loc 1 1168 8 is_stmt 0 discriminator 4 view .LVU318
 1133 000c 251D     		adds	r5, r4, #4
 1134 000e 2846     		mov	r0, r5
 1135 0010 FFF7FEFF 		bl	uxListRemove
 1136              	.LVL92:
1168:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1137              		.loc 1 1168 6 discriminator 4 view .LVU319
 1138 0014 68B9     		cbnz	r0, .L84
1170:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1139              		.loc 1 1170 5 is_stmt 1 view .LVU320
 1140 0016 E26A     		ldr	r2, [r4, #44]
 1141 0018 02EB8203 		add	r3, r2, r2, lsl #2
 1142 001c 9B00     		lsls	r3, r3, #2
 1143 001e 2749     		ldr	r1, .L95
 1144 0020 CB58     		ldr	r3, [r1, r3]
 1145 0022 33B9     		cbnz	r3, .L84
1170:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1146              		.loc 1 1170 5 discriminator 1 view .LVU321
 1147 0024 0123     		movs	r3, #1
 1148 0026 9340     		lsls	r3, r3, r2
 1149 0028 2549     		ldr	r1, .L95+4
 1150 002a 0A68     		ldr	r2, [r1]
 1151 002c 22EA0302 		bic	r2, r2, r3
 1152 0030 0A60     		str	r2, [r1]
 1153              	.L84:
1174:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1154              		.loc 1 1174 29 view .LVU322
1178:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1155              		.loc 1 1178 4 view .LVU323
1178:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1156              		.loc 1 1178 8 is_stmt 0 view .LVU324
 1157 0032 A36A     		ldr	r3, [r4, #40]
1178:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1158              		.loc 1 1178 6 view .LVU325
 1159 0034 1BB1     		cbz	r3, .L85
1180:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1160              		.loc 1 1180 5 is_stmt 1 view .LVU326
1180:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc4Zpja9.s 			page 120


 1161              		.loc 1 1180 14 is_stmt 0 view .LVU327
 1162 0036 04F11800 		add	r0, r4, #24
 1163 003a FFF7FEFF 		bl	uxListRemove
 1164              	.LVL93:
 1165              	.L85:
1184:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1166              		.loc 1 1184 29 is_stmt 1 view .LVU328
1191:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1167              		.loc 1 1191 4 view .LVU329
1191:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1168              		.loc 1 1191 16 is_stmt 0 view .LVU330
 1169 003e 214A     		ldr	r2, .L95+8
 1170 0040 1368     		ldr	r3, [r2]
 1171 0042 0133     		adds	r3, r3, #1
 1172 0044 1360     		str	r3, [r2]
1193:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1173              		.loc 1 1193 4 is_stmt 1 view .LVU331
1193:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1174              		.loc 1 1193 14 is_stmt 0 view .LVU332
 1175 0046 204B     		ldr	r3, .L95+12
 1176 0048 1B68     		ldr	r3, [r3]
1193:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1177              		.loc 1 1193 6 view .LVU333
 1178 004a A342     		cmp	r3, r4
 1179 004c 15D0     		beq	.L93
1216:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1180              		.loc 1 1216 5 is_stmt 1 view .LVU334
 1181 004e 1F4A     		ldr	r2, .L95+16
 1182 0050 1368     		ldr	r3, [r2]
 1183 0052 013B     		subs	r3, r3, #1
 1184 0054 1360     		str	r3, [r2]
1217:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1185              		.loc 1 1217 5 view .LVU335
 1186 0056 2046     		mov	r0, r4
 1187 0058 FFF7FEFF 		bl	prvDeleteTCB
 1188              	.LVL94:
1221:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1189              		.loc 1 1221 5 view .LVU336
 1190 005c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1191              	.LVL95:
 1192              	.L87:
1224:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1193              		.loc 1 1224 29 view .LVU337
1226:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1194              		.loc 1 1226 3 view .LVU338
 1195 0060 FFF7FEFF 		bl	vPortExitCritical
 1196              	.LVL96:
1230:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1197              		.loc 1 1230 3 view .LVU339
1230:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1198              		.loc 1 1230 25 is_stmt 0 view .LVU340
 1199 0064 1A4B     		ldr	r3, .L95+20
 1200 0066 1B68     		ldr	r3, [r3]
1230:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1201              		.loc 1 1230 5 view .LVU341
 1202 0068 1BB1     		cbz	r3, .L82
1232:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/cc4Zpja9.s 			page 121


 1203              		.loc 1 1232 4 is_stmt 1 view .LVU342
1232:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1204              		.loc 1 1232 14 is_stmt 0 view .LVU343
 1205 006a 174B     		ldr	r3, .L95+12
 1206 006c 1B68     		ldr	r3, [r3]
1232:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1207              		.loc 1 1232 6 view .LVU344
 1208 006e A342     		cmp	r3, r4
 1209 0070 0CD0     		beq	.L94
 1210              	.L82:
1242:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1211              		.loc 1 1242 2 view .LVU345
 1212 0072 38BD     		pop	{r3, r4, r5, pc}
 1213              	.LVL97:
 1214              	.L92:
1165:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1215              		.loc 1 1165 12 discriminator 1 view .LVU346
 1216 0074 144B     		ldr	r3, .L95+12
 1217 0076 1C68     		ldr	r4, [r3]
 1218              	.LVL98:
1165:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1219              		.loc 1 1165 12 discriminator 1 view .LVU347
 1220 0078 C8E7     		b	.L83
 1221              	.LVL99:
 1222              	.L93:
1200:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1223              		.loc 1 1200 5 is_stmt 1 view .LVU348
 1224 007a 2946     		mov	r1, r5
 1225 007c 1548     		ldr	r0, .L95+24
 1226 007e FFF7FEFF 		bl	vListInsertEnd
 1227              	.LVL100:
1205:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1228              		.loc 1 1205 5 view .LVU349
 1229 0082 154A     		ldr	r2, .L95+28
 1230 0084 1368     		ldr	r3, [r2]
 1231 0086 0133     		adds	r3, r3, #1
 1232 0088 1360     		str	r3, [r2]
1212:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1233              		.loc 1 1212 54 view .LVU350
 1234 008a E9E7     		b	.L87
 1235              	.L94:
1234:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1236              		.loc 1 1234 5 view .LVU351
 1237 008c 134B     		ldr	r3, .L95+32
 1238 008e 1B68     		ldr	r3, [r3]
 1239 0090 43B1     		cbz	r3, .L89
1234:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1240              		.loc 1 1234 5 view .LVU352
 1241              	.LBB112:
 1242              	.LBI112:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1243              		.loc 2 195 30 view .LVU353
 1244              	.LBB113:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1245              		.loc 2 197 1 view .LVU354
 1246              		.loc 2 199 2 view .LVU355
 1247              		.syntax unified
ARM GAS  /tmp/cc4Zpja9.s 			page 122


 1248              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1249 0092 4FF05003 			mov r3, #80												
 1250 0096 83F31188 		msr basepri, r3											
 1251 009a BFF36F8F 		isb														
 1252 009e BFF34F8F 		dsb														
 1253              	
 1254              	@ 0 "" 2
 1255              	.LVL101:
 1256              		.thumb
 1257              		.syntax unified
 1258              	.L90:
 1259              		.loc 2 199 2 is_stmt 0 view .LVU356
 1260              	.LBE113:
 1261              	.LBE112:
1234:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1262              		.loc 1 1234 5 is_stmt 1 discriminator 1 view .LVU357
1234:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1263              		.loc 1 1234 5 discriminator 1 view .LVU358
1234:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1264              		.loc 1 1234 5 discriminator 1 view .LVU359
 1265 00a2 FEE7     		b	.L90
 1266              	.L89:
1234:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1267              		.loc 1 1234 46 discriminator 2 view .LVU360
1235:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1268              		.loc 1 1235 5 discriminator 2 view .LVU361
 1269 00a4 4FF0E023 		mov	r3, #-536813568
 1270 00a8 4FF08052 		mov	r2, #268435456
 1271 00ac C3F8042D 		str	r2, [r3, #3332]
1235:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1272              		.loc 1 1235 5 discriminator 2 view .LVU362
 1273              		.syntax unified
 1274              	@ 1235 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 1275 00b0 BFF34F8F 		dsb
 1276              	@ 0 "" 2
1235:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1277              		.loc 1 1235 5 discriminator 2 view .LVU363
 1278              	@ 1235 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 1279 00b4 BFF36F8F 		isb
 1280              	@ 0 "" 2
1235:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1281              		.loc 1 1235 27 discriminator 2 view .LVU364
1239:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1282              		.loc 1 1239 29 discriminator 2 view .LVU365
1242:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1283              		.loc 1 1242 2 is_stmt 0 discriminator 2 view .LVU366
 1284              		.thumb
 1285              		.syntax unified
 1286 00b8 DBE7     		b	.L82
 1287              	.L96:
 1288 00ba 00BF     		.align	2
 1289              	.L95:
 1290 00bc 00000000 		.word	.LANCHOR4
 1291 00c0 00000000 		.word	.LANCHOR13
 1292 00c4 00000000 		.word	.LANCHOR12
 1293 00c8 00000000 		.word	.LANCHOR10
 1294 00cc 00000000 		.word	.LANCHOR9
ARM GAS  /tmp/cc4Zpja9.s 			page 123


 1295 00d0 00000000 		.word	.LANCHOR11
 1296 00d4 00000000 		.word	.LANCHOR7
 1297 00d8 00000000 		.word	.LANCHOR14
 1298 00dc 00000000 		.word	.LANCHOR16
 1299              		.cfi_endproc
 1300              	.LFE8:
 1302              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1303              		.align	1
 1304              		.global	uxTaskPriorityGet
 1305              		.syntax unified
 1306              		.thumb
 1307              		.thumb_func
 1309              	uxTaskPriorityGet:
 1310              	.LVL102:
 1311              	.LFB11:
1471:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1312              		.loc 1 1471 2 is_stmt 1 view -0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 0
 1315              		@ frame_needed = 0, uses_anonymous_args = 0
1471:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1316              		.loc 1 1471 2 is_stmt 0 view .LVU368
 1317 0000 10B5     		push	{r4, lr}
 1318              	.LCFI13:
 1319              		.cfi_def_cfa_offset 8
 1320              		.cfi_offset 4, -8
 1321              		.cfi_offset 14, -4
 1322 0002 0446     		mov	r4, r0
1472:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 1323              		.loc 1 1472 2 is_stmt 1 view .LVU369
1473:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1324              		.loc 1 1473 2 view .LVU370
1475:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1325              		.loc 1 1475 3 view .LVU371
 1326 0004 FFF7FEFF 		bl	vPortEnterCritical
 1327              	.LVL103:
1479:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1328              		.loc 1 1479 4 view .LVU372
1479:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1329              		.loc 1 1479 12 is_stmt 0 view .LVU373
 1330 0008 24B1     		cbz	r4, .L100
 1331              	.LVL104:
 1332              	.L98:
1480:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1333              		.loc 1 1480 4 is_stmt 1 discriminator 4 view .LVU374
1480:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1334              		.loc 1 1480 13 is_stmt 0 discriminator 4 view .LVU375
 1335 000a E46A     		ldr	r4, [r4, #44]
 1336              	.LVL105:
1482:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1337              		.loc 1 1482 3 is_stmt 1 discriminator 4 view .LVU376
 1338 000c FFF7FEFF 		bl	vPortExitCritical
 1339              	.LVL106:
1484:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 1340              		.loc 1 1484 3 discriminator 4 view .LVU377
1485:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1341              		.loc 1 1485 2 is_stmt 0 discriminator 4 view .LVU378
ARM GAS  /tmp/cc4Zpja9.s 			page 124


 1342 0010 2046     		mov	r0, r4
 1343 0012 10BD     		pop	{r4, pc}
 1344              	.LVL107:
 1345              	.L100:
1479:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1346              		.loc 1 1479 12 discriminator 1 view .LVU379
 1347 0014 014B     		ldr	r3, .L101
 1348 0016 1C68     		ldr	r4, [r3]
 1349              	.LVL108:
1479:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1350              		.loc 1 1479 12 discriminator 1 view .LVU380
 1351 0018 F7E7     		b	.L98
 1352              	.L102:
 1353 001a 00BF     		.align	2
 1354              	.L101:
 1355 001c 00000000 		.word	.LANCHOR10
 1356              		.cfi_endproc
 1357              	.LFE11:
 1359              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1360              		.align	1
 1361              		.global	uxTaskPriorityGetFromISR
 1362              		.syntax unified
 1363              		.thumb
 1364              		.thumb_func
 1366              	uxTaskPriorityGetFromISR:
 1367              	.LVL109:
 1368              	.LFB12:
1493:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1369              		.loc 1 1493 2 is_stmt 1 view -0
 1370              		.cfi_startproc
 1371              		@ args = 0, pretend = 0, frame = 0
 1372              		@ frame_needed = 0, uses_anonymous_args = 0
1493:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1373              		.loc 1 1493 2 is_stmt 0 view .LVU382
 1374 0000 10B5     		push	{r4, lr}
 1375              	.LCFI14:
 1376              		.cfi_def_cfa_offset 8
 1377              		.cfi_offset 4, -8
 1378              		.cfi_offset 14, -4
 1379 0002 0446     		mov	r4, r0
1494:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
 1380              		.loc 1 1494 2 is_stmt 1 view .LVU383
1495:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1381              		.loc 1 1495 2 view .LVU384
1513:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1382              		.loc 1 1513 3 view .LVU385
 1383 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1384              	.LVL110:
1515:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1385              		.loc 1 1515 3 view .LVU386
 1386              	.LBB114:
 1387              	.LBI114:
 200:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 201:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 202:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 203:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 204:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
ARM GAS  /tmp/cc4Zpja9.s 			page 125


 205:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 206:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 207:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 208:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 209:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 210:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1388              		.loc 2 211 34 view .LVU387
 1389              	.LBB115:
 212:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1390              		.loc 2 213 1 view .LVU388
 214:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 215:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1391              		.loc 2 215 2 view .LVU389
 1392              		.syntax unified
 1393              	@ 215 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1394 0008 EFF31183 			mrs r3, basepri											
 1395 000c 4FF05002 		mov r2, #80												
 1396 0010 82F31188 		msr basepri, r2											
 1397 0014 BFF36F8F 		isb														
 1398 0018 BFF34F8F 		dsb														
 1399              	
 1400              	@ 0 "" 2
 1401              	.LVL111:
 216:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 217:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 218:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 219:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 220:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 221:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 222:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 223:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 224:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 225:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 226:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 227:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1402              		.loc 2 227 2 view .LVU390
 1403              		.loc 2 227 2 is_stmt 0 view .LVU391
 1404              		.thumb
 1405              		.syntax unified
 1406              	.LBE115:
 1407              	.LBE114:
1519:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1408              		.loc 1 1519 4 is_stmt 1 view .LVU392
1519:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1409              		.loc 1 1519 12 is_stmt 0 view .LVU393
 1410 001c 1CB1     		cbz	r4, .L106
 1411              	.LVL112:
 1412              	.L104:
1520:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1413              		.loc 1 1520 4 is_stmt 1 discriminator 4 view .LVU394
1520:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1414              		.loc 1 1520 13 is_stmt 0 discriminator 4 view .LVU395
 1415 001e E06A     		ldr	r0, [r4, #44]
 1416              	.LVL113:
1522:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 126


 1417              		.loc 1 1522 3 is_stmt 1 discriminator 4 view .LVU396
 1418              	.LBB116:
 1419              	.LBI116:
 228:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 229:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 230:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1420              		.loc 2 231 30 discriminator 4 view .LVU397
 1421              	.LBB117:
 232:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 233:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1422              		.loc 2 233 2 discriminator 4 view .LVU398
 1423              		.syntax unified
 1424              	@ 233 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1425 0020 83F31188 			msr basepri, r3	
 1426              	@ 0 "" 2
 1427              	.LVL114:
 1428              		.loc 2 233 2 is_stmt 0 discriminator 4 view .LVU399
 1429              		.thumb
 1430              		.syntax unified
 1431              	.LBE117:
 1432              	.LBE116:
1524:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 1433              		.loc 1 1524 3 is_stmt 1 discriminator 4 view .LVU400
1525:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1434              		.loc 1 1525 2 is_stmt 0 discriminator 4 view .LVU401
 1435 0024 10BD     		pop	{r4, pc}
 1436              	.LVL115:
 1437              	.L106:
1519:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1438              		.loc 1 1519 12 discriminator 1 view .LVU402
 1439 0026 014A     		ldr	r2, .L107
 1440 0028 1468     		ldr	r4, [r2]
 1441              	.LVL116:
1519:ThirdParty/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1442              		.loc 1 1519 12 discriminator 1 view .LVU403
 1443 002a F8E7     		b	.L104
 1444              	.L108:
 1445              		.align	2
 1446              	.L107:
 1447 002c 00000000 		.word	.LANCHOR10
 1448              		.cfi_endproc
 1449              	.LFE12:
 1451              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1452              		.align	1
 1453              		.global	vTaskPrioritySet
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1458              	vTaskPrioritySet:
 1459              	.LVL117:
 1460              	.LFB13:
1533:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1461              		.loc 1 1533 2 is_stmt 1 view -0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 0
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc4Zpja9.s 			page 127


1533:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1465              		.loc 1 1533 2 is_stmt 0 view .LVU405
 1466 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1467              	.LCFI15:
 1468              		.cfi_def_cfa_offset 24
 1469              		.cfi_offset 3, -24
 1470              		.cfi_offset 4, -20
 1471              		.cfi_offset 5, -16
 1472              		.cfi_offset 6, -12
 1473              		.cfi_offset 7, -8
 1474              		.cfi_offset 14, -4
1534:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1475              		.loc 1 1534 2 is_stmt 1 view .LVU406
1535:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1476              		.loc 1 1535 2 view .LVU407
1536:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1477              		.loc 1 1536 2 view .LVU408
 1478              	.LVL118:
1538:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1479              		.loc 1 1538 3 view .LVU409
 1480 0002 0629     		cmp	r1, #6
 1481 0004 08D9     		bls	.L110
1538:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1482              		.loc 1 1538 3 view .LVU410
 1483              	.LBB118:
 1484              	.LBI118:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1485              		.loc 2 195 30 view .LVU411
 1486              	.LBB119:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1487              		.loc 2 197 1 view .LVU412
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1488              		.loc 2 199 2 view .LVU413
 1489              		.syntax unified
 1490              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1491 0006 4FF05003 			mov r3, #80												
 1492 000a 83F31188 		msr basepri, r3											
 1493 000e BFF36F8F 		isb														
 1494 0012 BFF34F8F 		dsb														
 1495              	
 1496              	@ 0 "" 2
 1497              	.LVL119:
 1498              		.thumb
 1499              		.syntax unified
 1500              	.L111:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1501              		.loc 2 199 2 is_stmt 0 view .LVU414
 1502              	.LBE119:
 1503              	.LBE118:
1538:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1504              		.loc 1 1538 3 is_stmt 1 discriminator 1 view .LVU415
1538:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1505              		.loc 1 1538 3 discriminator 1 view .LVU416
1538:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1506              		.loc 1 1538 3 discriminator 1 view .LVU417
 1507 0016 FEE7     		b	.L111
 1508              	.L110:
ARM GAS  /tmp/cc4Zpja9.s 			page 128


 1509 0018 0546     		mov	r5, r0
 1510 001a 0C46     		mov	r4, r1
1538:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1511              		.loc 1 1538 59 view .LVU418
1541:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1512              		.loc 1 1541 3 view .LVU419
 1513              	.LVL120:
1547:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1514              		.loc 1 1547 28 view .LVU420
1550:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1515              		.loc 1 1550 3 view .LVU421
 1516 001c FFF7FEFF 		bl	vPortEnterCritical
 1517              	.LVL121:
1554:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1518              		.loc 1 1554 4 view .LVU422
1554:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1519              		.loc 1 1554 12 is_stmt 0 view .LVU423
 1520 0020 75B1     		cbz	r5, .L124
 1521              	.LVL122:
 1522              	.L112:
1556:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1523              		.loc 1 1556 50 is_stmt 1 discriminator 4 view .LVU424
1560:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1524              		.loc 1 1560 5 discriminator 4 view .LVU425
1560:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1525              		.loc 1 1560 27 is_stmt 0 discriminator 4 view .LVU426
 1526 0022 6B6C     		ldr	r3, [r5, #68]
 1527              	.LVL123:
1568:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1528              		.loc 1 1568 4 is_stmt 1 discriminator 4 view .LVU427
1568:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1529              		.loc 1 1568 6 is_stmt 0 discriminator 4 view .LVU428
 1530 0024 9C42     		cmp	r4, r3
 1531 0026 30D0     		beq	.L113
1572:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1532              		.loc 1 1572 5 is_stmt 1 view .LVU429
1572:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1533              		.loc 1 1572 7 is_stmt 0 view .LVU430
 1534 0028 0DD9     		bls	.L114
1574:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1535              		.loc 1 1574 6 is_stmt 1 view .LVU431
1574:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1536              		.loc 1 1574 16 is_stmt 0 view .LVU432
 1537 002a 2C4A     		ldr	r2, .L127
 1538 002c 1268     		ldr	r2, [r2]
1574:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1539              		.loc 1 1574 8 view .LVU433
 1540 002e AA42     		cmp	r2, r5
 1541 0030 2ED0     		beq	.L120
1579:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 1542              		.loc 1 1579 7 is_stmt 1 view .LVU434
1579:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 1543              		.loc 1 1579 40 is_stmt 0 view .LVU435
 1544 0032 2A4A     		ldr	r2, .L127
 1545 0034 1268     		ldr	r2, [r2]
 1546 0036 D26A     		ldr	r2, [r2, #44]
1579:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  /tmp/cc4Zpja9.s 			page 129


 1547              		.loc 1 1579 9 view .LVU436
 1548 0038 A242     		cmp	r2, r4
 1549 003a 2BD9     		bls	.L121
1536:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1550              		.loc 1 1536 13 view .LVU437
 1551 003c 0027     		movs	r7, #0
 1552 003e 07E0     		b	.L115
 1553              	.LVL124:
 1554              	.L124:
1554:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1555              		.loc 1 1554 12 discriminator 1 view .LVU438
 1556 0040 264B     		ldr	r3, .L127
 1557 0042 1D68     		ldr	r5, [r3]
 1558              	.LVL125:
1554:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1559              		.loc 1 1554 12 discriminator 1 view .LVU439
 1560 0044 EDE7     		b	.L112
 1561              	.LVL126:
 1562              	.L114:
1595:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1563              		.loc 1 1595 10 is_stmt 1 view .LVU440
1595:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1564              		.loc 1 1595 20 is_stmt 0 view .LVU441
 1565 0046 254A     		ldr	r2, .L127
 1566 0048 1268     		ldr	r2, [r2]
1595:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1567              		.loc 1 1595 12 view .LVU442
 1568 004a AA42     		cmp	r2, r5
 1569 004c 24D0     		beq	.L122
1536:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1570              		.loc 1 1536 13 view .LVU443
 1571 004e 0027     		movs	r7, #0
 1572              	.L115:
 1573              	.LVL127:
1607:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1574              		.loc 1 1607 5 is_stmt 1 view .LVU444
1612:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1575              		.loc 1 1612 5 view .LVU445
1612:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1576              		.loc 1 1612 27 is_stmt 0 view .LVU446
 1577 0050 EE6A     		ldr	r6, [r5, #44]
 1578              	.LVL128:
1618:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1579              		.loc 1 1618 6 is_stmt 1 view .LVU447
1618:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1580              		.loc 1 1618 8 is_stmt 0 view .LVU448
 1581 0052 B342     		cmp	r3, r6
 1582 0054 22D0     		beq	.L125
 1583              	.L116:
1624:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 1584              		.loc 1 1624 31 is_stmt 1 view .LVU449
1628:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1585              		.loc 1 1628 6 view .LVU450
1628:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1586              		.loc 1 1628 28 is_stmt 0 view .LVU451
 1587 0056 6C64     		str	r4, [r5, #68]
1638:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc4Zpja9.s 			page 130


 1588              		.loc 1 1638 5 is_stmt 1 view .LVU452
1638:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1589              		.loc 1 1638 11 is_stmt 0 view .LVU453
 1590 0058 AB69     		ldr	r3, [r5, #24]
 1591              	.LVL129:
1638:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1592              		.loc 1 1638 7 view .LVU454
 1593 005a 002B     		cmp	r3, #0
 1594 005c 02DB     		blt	.L117
1640:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1595              		.loc 1 1640 6 is_stmt 1 view .LVU455
 1596 005e C4F10704 		rsb	r4, r4, #7
 1597              	.LVL130:
1640:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1598              		.loc 1 1640 6 is_stmt 0 view .LVU456
 1599 0062 AC61     		str	r4, [r5, #24]
 1600              	.L117:
1644:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1601              		.loc 1 1644 30 is_stmt 1 view .LVU457
1651:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1602              		.loc 1 1651 5 view .LVU458
1651:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1603              		.loc 1 1651 9 is_stmt 0 view .LVU459
 1604 0064 6969     		ldr	r1, [r5, #20]
 1605 0066 06EB8602 		add	r2, r6, r6, lsl #2
 1606 006a 1D4B     		ldr	r3, .L127+4
 1607 006c 03EB8203 		add	r3, r3, r2, lsl #2
1651:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1608              		.loc 1 1651 7 view .LVU460
 1609 0070 9942     		cmp	r1, r3
 1610 0072 15D0     		beq	.L126
 1611              	.LVL131:
 1612              	.L118:
1671:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1613              		.loc 1 1671 30 is_stmt 1 view .LVU461
1674:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1614              		.loc 1 1674 5 view .LVU462
1674:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1615              		.loc 1 1674 7 is_stmt 0 view .LVU463
 1616 0074 4FB1     		cbz	r7, .L113
1676:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1617              		.loc 1 1676 6 is_stmt 1 view .LVU464
 1618 0076 4FF0E023 		mov	r3, #-536813568
 1619 007a 4FF08052 		mov	r2, #268435456
 1620 007e C3F8042D 		str	r2, [r3, #3332]
1676:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1621              		.loc 1 1676 6 view .LVU465
 1622              		.syntax unified
 1623              	@ 1676 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 1624 0082 BFF34F8F 		dsb
 1625              	@ 0 "" 2
1676:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1626              		.loc 1 1676 6 view .LVU466
 1627              	@ 1676 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 1628 0086 BFF36F8F 		isb
 1629              	@ 0 "" 2
1676:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc4Zpja9.s 			page 131


 1630              		.loc 1 1676 37 view .LVU467
 1631              	.LVL132:
 1632              		.thumb
 1633              		.syntax unified
 1634              	.L113:
1680:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1635              		.loc 1 1680 30 view .LVU468
1685:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1636              		.loc 1 1685 5 view .LVU469
1688:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 1637              		.loc 1 1688 3 view .LVU470
 1638 008a FFF7FEFF 		bl	vPortExitCritical
 1639              	.LVL133:
1689:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1640              		.loc 1 1689 2 is_stmt 0 view .LVU471
 1641 008e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1642              	.LVL134:
 1643              	.L120:
1536:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1644              		.loc 1 1536 13 view .LVU472
 1645 0090 0027     		movs	r7, #0
 1646 0092 DDE7     		b	.L115
 1647              	.L121:
1581:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
 1648              		.loc 1 1581 23 view .LVU473
 1649 0094 0127     		movs	r7, #1
 1650 0096 DBE7     		b	.L115
 1651              	.L122:
1600:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1652              		.loc 1 1600 21 view .LVU474
 1653 0098 0127     		movs	r7, #1
 1654 009a D9E7     		b	.L115
 1655              	.LVL135:
 1656              	.L125:
1620:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 1657              		.loc 1 1620 7 is_stmt 1 view .LVU475
1620:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 1658              		.loc 1 1620 25 is_stmt 0 view .LVU476
 1659 009c EC62     		str	r4, [r5, #44]
 1660 009e DAE7     		b	.L116
 1661              	.LVL136:
 1662              	.L126:
1656:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1663              		.loc 1 1656 6 is_stmt 1 view .LVU477
1656:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1664              		.loc 1 1656 10 is_stmt 0 view .LVU478
 1665 00a0 2C1D     		adds	r4, r5, #4
 1666 00a2 2046     		mov	r0, r4
 1667 00a4 FFF7FEFF 		bl	uxListRemove
 1668              	.LVL137:
1656:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1669              		.loc 1 1656 8 view .LVU479
 1670 00a8 38B9     		cbnz	r0, .L119
1661:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 1671              		.loc 1 1661 7 is_stmt 1 view .LVU480
 1672 00aa 0123     		movs	r3, #1
 1673 00ac 03FA06F6 		lsl	r6, r3, r6
ARM GAS  /tmp/cc4Zpja9.s 			page 132


 1674              	.LVL138:
1661:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 1675              		.loc 1 1661 7 is_stmt 0 view .LVU481
 1676 00b0 0C4A     		ldr	r2, .L127+8
 1677 00b2 1368     		ldr	r3, [r2]
 1678 00b4 23EA0603 		bic	r3, r3, r6
 1679 00b8 1360     		str	r3, [r2]
 1680              	.L119:
1665:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 1681              		.loc 1 1665 31 is_stmt 1 view .LVU482
1667:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1682              		.loc 1 1667 6 view .LVU483
1667:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1683              		.loc 1 1667 6 view .LVU484
 1684 00ba E86A     		ldr	r0, [r5, #44]
 1685 00bc 0123     		movs	r3, #1
 1686 00be 8340     		lsls	r3, r3, r0
 1687 00c0 084A     		ldr	r2, .L127+8
 1688 00c2 1168     		ldr	r1, [r2]
 1689 00c4 0B43     		orrs	r3, r3, r1
 1690 00c6 1360     		str	r3, [r2]
1667:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1691              		.loc 1 1667 6 view .LVU485
 1692 00c8 00EB8000 		add	r0, r0, r0, lsl #2
 1693 00cc 2146     		mov	r1, r4
 1694 00ce 044B     		ldr	r3, .L127+4
 1695 00d0 03EB8000 		add	r0, r3, r0, lsl #2
 1696 00d4 FFF7FEFF 		bl	vListInsertEnd
 1697              	.LVL139:
1667:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1698              		.loc 1 1667 36 view .LVU486
 1699 00d8 CCE7     		b	.L118
 1700              	.L128:
 1701 00da 00BF     		.align	2
 1702              	.L127:
 1703 00dc 00000000 		.word	.LANCHOR10
 1704 00e0 00000000 		.word	.LANCHOR4
 1705 00e4 00000000 		.word	.LANCHOR13
 1706              		.cfi_endproc
 1707              	.LFE13:
 1709              		.section	.text.vTaskResume,"ax",%progbits
 1710              		.align	1
 1711              		.global	vTaskResume
 1712              		.syntax unified
 1713              		.thumb
 1714              		.thumb_func
 1716              	vTaskResume:
 1717              	.LVL140:
 1718              	.LFB16:
1844:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1719              		.loc 1 1844 2 view -0
 1720              		.cfi_startproc
 1721              		@ args = 0, pretend = 0, frame = 0
 1722              		@ frame_needed = 0, uses_anonymous_args = 0
1844:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1723              		.loc 1 1844 2 is_stmt 0 view .LVU488
 1724 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/cc4Zpja9.s 			page 133


 1725              	.LCFI16:
 1726              		.cfi_def_cfa_offset 16
 1727              		.cfi_offset 3, -16
 1728              		.cfi_offset 4, -12
 1729              		.cfi_offset 5, -8
 1730              		.cfi_offset 14, -4
1845:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1731              		.loc 1 1845 2 is_stmt 1 view .LVU489
 1732              	.LVL141:
1848:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1733              		.loc 1 1848 3 view .LVU490
 1734 0002 68B1     		cbz	r0, .L135
 1735 0004 0446     		mov	r4, r0
1848:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1736              		.loc 1 1848 32 discriminator 2 view .LVU491
1852:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1737              		.loc 1 1852 3 discriminator 2 view .LVU492
1852:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1738              		.loc 1 1852 15 is_stmt 0 discriminator 2 view .LVU493
 1739 0006 1D4B     		ldr	r3, .L137
 1740 0008 1B68     		ldr	r3, [r3]
1852:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1741              		.loc 1 1852 5 discriminator 2 view .LVU494
 1742 000a 8342     		cmp	r3, r0
 1743 000c 07D0     		beq	.L129
1854:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1744              		.loc 1 1854 4 is_stmt 1 view .LVU495
 1745 000e FFF7FEFF 		bl	vPortEnterCritical
 1746              	.LVL142:
1856:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1747              		.loc 1 1856 5 view .LVU496
1856:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1748              		.loc 1 1856 9 is_stmt 0 view .LVU497
 1749 0012 2046     		mov	r0, r4
 1750 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1751              	.LVL143:
1856:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1752              		.loc 1 1856 7 view .LVU498
 1753 0018 58B9     		cbnz	r0, .L136
 1754              	.L133:
1880:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1755              		.loc 1 1880 30 is_stmt 1 view .LVU499
1883:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1756              		.loc 1 1883 4 view .LVU500
 1757 001a FFF7FEFF 		bl	vPortExitCritical
 1758              	.LVL144:
1887:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 1759              		.loc 1 1887 28 view .LVU501
 1760              	.L129:
1889:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1761              		.loc 1 1889 2 is_stmt 0 view .LVU502
 1762 001e 38BD     		pop	{r3, r4, r5, pc}
 1763              	.LVL145:
 1764              	.L135:
1848:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1765              		.loc 1 1848 3 is_stmt 1 view .LVU503
 1766              	.LBB120:
ARM GAS  /tmp/cc4Zpja9.s 			page 134


 1767              	.LBI120:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1768              		.loc 2 195 30 view .LVU504
 1769              	.LBB121:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1770              		.loc 2 197 1 view .LVU505
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1771              		.loc 2 199 2 view .LVU506
 1772              		.syntax unified
 1773              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1774 0020 4FF05003 			mov r3, #80												
 1775 0024 83F31188 		msr basepri, r3											
 1776 0028 BFF36F8F 		isb														
 1777 002c BFF34F8F 		dsb														
 1778              	
 1779              	@ 0 "" 2
 1780              	.LVL146:
 1781              		.thumb
 1782              		.syntax unified
 1783              	.L131:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1784              		.loc 2 199 2 is_stmt 0 view .LVU507
 1785              	.LBE121:
 1786              	.LBE120:
1848:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1787              		.loc 1 1848 3 is_stmt 1 discriminator 1 view .LVU508
1848:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1788              		.loc 1 1848 3 discriminator 1 view .LVU509
1848:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1789              		.loc 1 1848 3 discriminator 1 view .LVU510
 1790 0030 FEE7     		b	.L131
 1791              	.LVL147:
 1792              	.L136:
1858:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1793              		.loc 1 1858 31 view .LVU511
1862:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1794              		.loc 1 1862 6 view .LVU512
1862:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1795              		.loc 1 1862 15 is_stmt 0 view .LVU513
 1796 0032 251D     		adds	r5, r4, #4
 1797 0034 2846     		mov	r0, r5
 1798 0036 FFF7FEFF 		bl	uxListRemove
 1799              	.LVL148:
1863:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1800              		.loc 1 1863 6 is_stmt 1 view .LVU514
1863:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1801              		.loc 1 1863 6 view .LVU515
 1802 003a E06A     		ldr	r0, [r4, #44]
 1803 003c 0123     		movs	r3, #1
 1804 003e 8340     		lsls	r3, r3, r0
 1805 0040 0F4A     		ldr	r2, .L137+4
 1806 0042 1168     		ldr	r1, [r2]
 1807 0044 0B43     		orrs	r3, r3, r1
 1808 0046 1360     		str	r3, [r2]
1863:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1809              		.loc 1 1863 6 view .LVU516
 1810 0048 00EB8000 		add	r0, r0, r0, lsl #2
ARM GAS  /tmp/cc4Zpja9.s 			page 135


 1811 004c 2946     		mov	r1, r5
 1812 004e 0D4B     		ldr	r3, .L137+8
 1813 0050 03EB8000 		add	r0, r3, r0, lsl #2
 1814 0054 FFF7FEFF 		bl	vListInsertEnd
 1815              	.LVL149:
1863:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1816              		.loc 1 1863 36 view .LVU517
1866:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1817              		.loc 1 1866 6 view .LVU518
1866:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1818              		.loc 1 1866 15 is_stmt 0 view .LVU519
 1819 0058 E26A     		ldr	r2, [r4, #44]
1866:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1820              		.loc 1 1866 43 view .LVU520
 1821 005a 084B     		ldr	r3, .L137
 1822 005c 1B68     		ldr	r3, [r3]
 1823 005e DB6A     		ldr	r3, [r3, #44]
1866:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1824              		.loc 1 1866 8 view .LVU521
 1825 0060 9A42     		cmp	r2, r3
 1826 0062 DAD3     		bcc	.L133
1871:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 1827              		.loc 1 1871 7 is_stmt 1 view .LVU522
 1828 0064 4FF0E023 		mov	r3, #-536813568
 1829 0068 4FF08052 		mov	r2, #268435456
 1830 006c C3F8042D 		str	r2, [r3, #3332]
1871:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 1831              		.loc 1 1871 7 view .LVU523
 1832              		.syntax unified
 1833              	@ 1871 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 1834 0070 BFF34F8F 		dsb
 1835              	@ 0 "" 2
1871:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 1836              		.loc 1 1871 7 view .LVU524
 1837              	@ 1871 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 1838 0074 BFF36F8F 		isb
 1839              	@ 0 "" 2
1871:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 1840              		.loc 1 1871 38 view .LVU525
 1841              		.thumb
 1842              		.syntax unified
 1843 0078 CFE7     		b	.L133
 1844              	.L138:
 1845 007a 00BF     		.align	2
 1846              	.L137:
 1847 007c 00000000 		.word	.LANCHOR10
 1848 0080 00000000 		.word	.LANCHOR13
 1849 0084 00000000 		.word	.LANCHOR4
 1850              		.cfi_endproc
 1851              	.LFE16:
 1853              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1854              		.align	1
 1855              		.global	xTaskResumeFromISR
 1856              		.syntax unified
 1857              		.thumb
 1858              		.thumb_func
 1860              	xTaskResumeFromISR:
ARM GAS  /tmp/cc4Zpja9.s 			page 136


 1861              	.LVL150:
 1862              	.LFB17:
1898:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1863              		.loc 1 1898 2 view -0
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 0
 1866              		@ frame_needed = 0, uses_anonymous_args = 0
1898:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1867              		.loc 1 1898 2 is_stmt 0 view .LVU527
 1868 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1869              	.LCFI17:
 1870              		.cfi_def_cfa_offset 24
 1871              		.cfi_offset 3, -24
 1872              		.cfi_offset 4, -20
 1873              		.cfi_offset 5, -16
 1874              		.cfi_offset 6, -12
 1875              		.cfi_offset 7, -8
 1876              		.cfi_offset 14, -4
1899:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1877              		.loc 1 1899 2 is_stmt 1 view .LVU528
 1878              	.LVL151:
1900:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 1879              		.loc 1 1900 2 view .LVU529
1901:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1880              		.loc 1 1901 2 view .LVU530
1903:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1881              		.loc 1 1903 3 view .LVU531
 1882 0002 90B3     		cbz	r0, .L147
 1883 0004 0446     		mov	r4, r0
1903:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1884              		.loc 1 1903 32 discriminator 2 view .LVU532
1921:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1885              		.loc 1 1921 3 discriminator 2 view .LVU533
 1886 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1887              	.LVL152:
1923:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 1888              		.loc 1 1923 3 discriminator 2 view .LVU534
 1889              	.LBB122:
 1890              	.LBI122:
 211:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1891              		.loc 2 211 34 discriminator 2 view .LVU535
 1892              	.LBB123:
 213:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1893              		.loc 2 213 1 discriminator 2 view .LVU536
 215:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1894              		.loc 2 215 2 discriminator 2 view .LVU537
 1895              		.syntax unified
 1896              	@ 215 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1897 000a EFF31186 			mrs r6, basepri											
 1898 000e 4FF05003 		mov r3, #80												
 1899 0012 83F31188 		msr basepri, r3											
 1900 0016 BFF36F8F 		isb														
 1901 001a BFF34F8F 		dsb														
 1902              	
 1903              	@ 0 "" 2
 1904              	.LVL153:
 227:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
ARM GAS  /tmp/cc4Zpja9.s 			page 137


 1905              		.loc 2 227 2 discriminator 2 view .LVU538
 227:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 1906              		.loc 2 227 2 is_stmt 0 discriminator 2 view .LVU539
 1907              		.thumb
 1908              		.syntax unified
 1909              	.LBE123:
 1910              	.LBE122:
1925:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1911              		.loc 1 1925 4 is_stmt 1 discriminator 2 view .LVU540
1925:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1912              		.loc 1 1925 8 is_stmt 0 discriminator 2 view .LVU541
 1913 001e 2046     		mov	r0, r4
 1914 0020 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1915              	.LVL154:
1925:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 1916              		.loc 1 1925 6 discriminator 2 view .LVU542
 1917 0024 0546     		mov	r5, r0
 1918 0026 E0B1     		cbz	r0, .L142
1927:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1919              		.loc 1 1927 39 is_stmt 1 view .LVU543
1930:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1920              		.loc 1 1930 5 view .LVU544
1930:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1921              		.loc 1 1930 30 is_stmt 0 view .LVU545
 1922 0028 194B     		ldr	r3, .L148
 1923 002a 1B68     		ldr	r3, [r3]
1930:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 1924              		.loc 1 1930 7 view .LVU546
 1925 002c 43BB     		cbnz	r3, .L143
1934:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1926              		.loc 1 1934 6 is_stmt 1 view .LVU547
1934:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1927              		.loc 1 1934 15 is_stmt 0 view .LVU548
 1928 002e E26A     		ldr	r2, [r4, #44]
1934:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1929              		.loc 1 1934 43 view .LVU549
 1930 0030 184B     		ldr	r3, .L148+4
 1931 0032 1B68     		ldr	r3, [r3]
 1932 0034 DB6A     		ldr	r3, [r3, #44]
1934:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 1933              		.loc 1 1934 8 view .LVU550
 1934 0036 9A42     		cmp	r2, r3
 1935 0038 20D2     		bcs	.L145
1899:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1936              		.loc 1 1899 13 view .LVU551
 1937 003a 0025     		movs	r5, #0
 1938              	.L144:
 1939              	.LVL155:
1940:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 1940              		.loc 1 1940 31 is_stmt 1 view .LVU552
1943:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1941              		.loc 1 1943 6 view .LVU553
1943:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1942              		.loc 1 1943 15 is_stmt 0 view .LVU554
 1943 003c 271D     		adds	r7, r4, #4
 1944 003e 3846     		mov	r0, r7
 1945 0040 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/cc4Zpja9.s 			page 138


 1946              	.LVL156:
1944:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1947              		.loc 1 1944 6 is_stmt 1 view .LVU555
1944:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1948              		.loc 1 1944 6 view .LVU556
 1949 0044 E06A     		ldr	r0, [r4, #44]
 1950 0046 0123     		movs	r3, #1
 1951 0048 8340     		lsls	r3, r3, r0
 1952 004a 134A     		ldr	r2, .L148+8
 1953 004c 1168     		ldr	r1, [r2]
 1954 004e 0B43     		orrs	r3, r3, r1
 1955 0050 1360     		str	r3, [r2]
1944:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1956              		.loc 1 1944 6 view .LVU557
 1957 0052 00EB8000 		add	r0, r0, r0, lsl #2
 1958 0056 3946     		mov	r1, r7
 1959 0058 104B     		ldr	r3, .L148+12
 1960 005a 03EB8000 		add	r0, r3, r0, lsl #2
 1961 005e FFF7FEFF 		bl	vListInsertEnd
 1962              	.LVL157:
1944:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 1963              		.loc 1 1944 36 view .LVU558
 1964              	.L142:
1956:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 1965              		.loc 1 1956 29 view .LVU559
1959:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1966              		.loc 1 1959 3 view .LVU560
 1967              	.LBB124:
 1968              	.LBI124:
 231:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1969              		.loc 2 231 30 view .LVU561
 1970              	.LBB125:
 1971              		.loc 2 233 2 view .LVU562
 1972              		.syntax unified
 1973              	@ 233 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1974 0062 86F31188 			msr basepri, r6	
 1975              	@ 0 "" 2
 1976              	.LVL158:
 1977              		.loc 2 233 2 is_stmt 0 view .LVU563
 1978              		.thumb
 1979              		.syntax unified
 1980              	.LBE125:
 1981              	.LBE124:
1961:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 1982              		.loc 1 1961 3 is_stmt 1 view .LVU564
1962:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1983              		.loc 1 1962 2 is_stmt 0 view .LVU565
 1984 0066 2846     		mov	r0, r5
 1985 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1986              	.LVL159:
 1987              	.L147:
1903:ThirdParty/FreeRTOS/Source/tasks.c **** 
 1988              		.loc 1 1903 3 is_stmt 1 view .LVU566
 1989              	.LBB126:
 1990              	.LBI126:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 1991              		.loc 2 195 30 view .LVU567
ARM GAS  /tmp/cc4Zpja9.s 			page 139


 1992              	.LBB127:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 1993              		.loc 2 197 1 view .LVU568
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1994              		.loc 2 199 2 view .LVU569
 1995              		.syntax unified
 1996              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1997 006a 4FF05003 			mov r3, #80												
 1998 006e 83F31188 		msr basepri, r3											
 1999 0072 BFF36F8F 		isb														
 2000 0076 BFF34F8F 		dsb														
 2001              	
 2002              	@ 0 "" 2
 2003              	.LVL160:
 2004              		.thumb
 2005              		.syntax unified
 2006              	.L141:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2007              		.loc 2 199 2 is_stmt 0 view .LVU570
 2008              	.LBE127:
 2009              	.LBE126:
1903:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2010              		.loc 1 1903 3 is_stmt 1 discriminator 1 view .LVU571
1903:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2011              		.loc 1 1903 3 discriminator 1 view .LVU572
1903:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2012              		.loc 1 1903 3 discriminator 1 view .LVU573
 2013 007a FEE7     		b	.L141
 2014              	.LVL161:
 2015              	.L145:
1936:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2016              		.loc 1 1936 22 is_stmt 0 view .LVU574
 2017 007c 0125     		movs	r5, #1
 2018 007e DDE7     		b	.L144
 2019              	.L143:
1951:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 2020              		.loc 1 1951 6 is_stmt 1 view .LVU575
 2021 0080 04F11801 		add	r1, r4, #24
 2022 0084 0648     		ldr	r0, .L148+16
 2023 0086 FFF7FEFF 		bl	vListInsertEnd
 2024              	.LVL162:
1899:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2025              		.loc 1 1899 13 is_stmt 0 view .LVU576
 2026 008a 0025     		movs	r5, #0
 2027 008c E9E7     		b	.L142
 2028              	.L149:
 2029 008e 00BF     		.align	2
 2030              	.L148:
 2031 0090 00000000 		.word	.LANCHOR16
 2032 0094 00000000 		.word	.LANCHOR10
 2033 0098 00000000 		.word	.LANCHOR13
 2034 009c 00000000 		.word	.LANCHOR4
 2035 00a0 00000000 		.word	.LANCHOR1
 2036              		.cfi_endproc
 2037              	.LFE17:
 2039              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 2040              		.align	2
ARM GAS  /tmp/cc4Zpja9.s 			page 140


 2041              	.LC0:
 2042 0000 49444C45 		.ascii	"IDLE\000"
 2042      00
 2043              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2044              		.align	1
 2045              		.global	vTaskStartScheduler
 2046              		.syntax unified
 2047              		.thumb
 2048              		.thumb_func
 2050              	vTaskStartScheduler:
 2051              	.LFB18:
1968:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 2052              		.loc 1 1968 1 is_stmt 1 view -0
 2053              		.cfi_startproc
 2054              		@ args = 0, pretend = 0, frame = 0
 2055              		@ frame_needed = 0, uses_anonymous_args = 0
 2056 0000 00B5     		push	{lr}
 2057              	.LCFI18:
 2058              		.cfi_def_cfa_offset 4
 2059              		.cfi_offset 14, -4
 2060 0002 83B0     		sub	sp, sp, #12
 2061              	.LCFI19:
 2062              		.cfi_def_cfa_offset 16
1969:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2063              		.loc 1 1969 1 view .LVU578
2001:ThirdParty/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
 2064              		.loc 1 2001 3 view .LVU579
2001:ThirdParty/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
 2065              		.loc 1 2001 13 is_stmt 0 view .LVU580
 2066 0004 174B     		ldr	r3, .L157
 2067 0006 0193     		str	r3, [sp, #4]
 2068 0008 0023     		movs	r3, #0
 2069 000a 0093     		str	r3, [sp]
 2070 000c 8022     		movs	r2, #128
 2071 000e 1649     		ldr	r1, .L157+4
 2072 0010 1648     		ldr	r0, .L157+8
 2073 0012 FFF7FEFF 		bl	xTaskCreate
 2074              	.LVL163:
2023:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 2075              		.loc 1 2023 2 is_stmt 1 view .LVU581
2023:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 2076              		.loc 1 2023 4 is_stmt 0 view .LVU582
 2077 0016 0128     		cmp	r0, #1
 2078 0018 05D0     		beq	.L155
2080:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 2079              		.loc 1 2080 3 is_stmt 1 view .LVU583
 2080 001a B0F1FF3F 		cmp	r0, #-1
 2081 001e 17D0     		beq	.L156
 2082              	.LVL164:
 2083              	.L150:
2086:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2084              		.loc 1 2086 1 is_stmt 0 view .LVU584
 2085 0020 03B0     		add	sp, sp, #12
 2086              	.LCFI20:
 2087              		.cfi_remember_state
 2088              		.cfi_def_cfa_offset 4
 2089              		@ sp needed
ARM GAS  /tmp/cc4Zpja9.s 			page 141


 2090 0022 5DF804FB 		ldr	pc, [sp], #4
 2091              	.LVL165:
 2092              	.L155:
 2093              	.LCFI21:
 2094              		.cfi_restore_state
2039:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2095              		.loc 1 2039 3 is_stmt 1 view .LVU585
 2096              	.LBB128:
 2097              	.LBI128:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2098              		.loc 2 195 30 view .LVU586
 2099              	.LBB129:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2100              		.loc 2 197 1 view .LVU587
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2101              		.loc 2 199 2 view .LVU588
 2102              		.syntax unified
 2103              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2104 0026 4FF05003 			mov r3, #80												
 2105 002a 83F31188 		msr basepri, r3											
 2106 002e BFF36F8F 		isb														
 2107 0032 BFF34F8F 		dsb														
 2108              	
 2109              	@ 0 "" 2
 2110              		.thumb
 2111              		.syntax unified
 2112              	.LBE129:
 2113              	.LBE128:
2049:ThirdParty/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2114              		.loc 1 2049 3 view .LVU589
2049:ThirdParty/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2115              		.loc 1 2049 24 is_stmt 0 view .LVU590
 2116 0036 0E4B     		ldr	r3, .L157+12
 2117 0038 4FF0FF32 		mov	r2, #-1
 2118 003c 1A60     		str	r2, [r3]
2050:ThirdParty/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2119              		.loc 1 2050 3 is_stmt 1 view .LVU591
2050:ThirdParty/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2120              		.loc 1 2050 21 is_stmt 0 view .LVU592
 2121 003e 0D4B     		ldr	r3, .L157+16
 2122 0040 0122     		movs	r2, #1
 2123 0042 1A60     		str	r2, [r3]
2051:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2124              		.loc 1 2051 3 is_stmt 1 view .LVU593
2051:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2125              		.loc 1 2051 14 is_stmt 0 view .LVU594
 2126 0044 0C4B     		ldr	r3, .L157+20
 2127 0046 0022     		movs	r2, #0
 2128 0048 1A60     		str	r2, [r3]
2059:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2129              		.loc 1 2059 43 is_stmt 1 view .LVU595
2061:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2130              		.loc 1 2061 26 view .LVU596
2065:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2131              		.loc 1 2065 3 view .LVU597
2065:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2132              		.loc 1 2065 7 is_stmt 0 view .LVU598
ARM GAS  /tmp/cc4Zpja9.s 			page 142


 2133 004a FFF7FEFF 		bl	xPortStartScheduler
 2134              	.LVL166:
2065:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2135              		.loc 1 2065 7 view .LVU599
 2136 004e E7E7     		b	.L150
 2137              	.LVL167:
 2138              	.L156:
2080:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 2139              		.loc 1 2080 3 is_stmt 1 view .LVU600
 2140              	.LBB130:
 2141              	.LBI130:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2142              		.loc 2 195 30 view .LVU601
 2143              	.LBB131:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2144              		.loc 2 197 1 view .LVU602
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2145              		.loc 2 199 2 view .LVU603
 2146              		.syntax unified
 2147              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2148 0050 4FF05003 			mov r3, #80												
 2149 0054 83F31188 		msr basepri, r3											
 2150 0058 BFF36F8F 		isb														
 2151 005c BFF34F8F 		dsb														
 2152              	
 2153              	@ 0 "" 2
 2154              	.LVL168:
 2155              		.thumb
 2156              		.syntax unified
 2157              	.L153:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2158              		.loc 2 199 2 is_stmt 0 view .LVU604
 2159              	.LBE131:
 2160              	.LBE130:
2080:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 2161              		.loc 1 2080 3 is_stmt 1 discriminator 2 view .LVU605
2080:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 2162              		.loc 1 2080 3 discriminator 2 view .LVU606
2080:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 2163              		.loc 1 2080 3 discriminator 2 view .LVU607
 2164 0060 FEE7     		b	.L153
 2165              	.L158:
 2166 0062 00BF     		.align	2
 2167              	.L157:
 2168 0064 00000000 		.word	.LANCHOR17
 2169 0068 00000000 		.word	.LC0
 2170 006c 00000000 		.word	prvIdleTask
 2171 0070 00000000 		.word	.LANCHOR3
 2172 0074 00000000 		.word	.LANCHOR11
 2173 0078 00000000 		.word	.LANCHOR15
 2174              		.cfi_endproc
 2175              	.LFE18:
 2177              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2178              		.align	1
 2179              		.global	vTaskEndScheduler
 2180              		.syntax unified
 2181              		.thumb
ARM GAS  /tmp/cc4Zpja9.s 			page 143


 2182              		.thumb_func
 2184              	vTaskEndScheduler:
 2185              	.LFB19:
2090:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2186              		.loc 1 2090 1 view -0
 2187              		.cfi_startproc
 2188              		@ args = 0, pretend = 0, frame = 0
 2189              		@ frame_needed = 0, uses_anonymous_args = 0
 2190 0000 08B5     		push	{r3, lr}
 2191              	.LCFI22:
 2192              		.cfi_def_cfa_offset 8
 2193              		.cfi_offset 3, -8
 2194              		.cfi_offset 14, -4
2094:ThirdParty/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2195              		.loc 1 2094 2 view .LVU609
 2196              	.LBB132:
 2197              	.LBI132:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2198              		.loc 2 195 30 view .LVU610
 2199              	.LBB133:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2200              		.loc 2 197 1 view .LVU611
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2201              		.loc 2 199 2 view .LVU612
 2202              		.syntax unified
 2203              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2204 0002 4FF05003 			mov r3, #80												
 2205 0006 83F31188 		msr basepri, r3											
 2206 000a BFF36F8F 		isb														
 2207 000e BFF34F8F 		dsb														
 2208              	
 2209              	@ 0 "" 2
 2210              		.thumb
 2211              		.syntax unified
 2212              	.LBE133:
 2213              	.LBE132:
2095:ThirdParty/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2214              		.loc 1 2095 2 view .LVU613
2095:ThirdParty/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2215              		.loc 1 2095 20 is_stmt 0 view .LVU614
 2216 0012 034B     		ldr	r3, .L161
 2217 0014 0022     		movs	r2, #0
 2218 0016 1A60     		str	r2, [r3]
2096:ThirdParty/FreeRTOS/Source/tasks.c **** }
 2219              		.loc 1 2096 2 is_stmt 1 view .LVU615
 2220 0018 FFF7FEFF 		bl	vPortEndScheduler
 2221              	.LVL169:
2097:ThirdParty/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2222              		.loc 1 2097 1 is_stmt 0 view .LVU616
 2223 001c 08BD     		pop	{r3, pc}
 2224              	.L162:
 2225 001e 00BF     		.align	2
 2226              	.L161:
 2227 0020 00000000 		.word	.LANCHOR11
 2228              		.cfi_endproc
 2229              	.LFE19:
 2231              		.section	.text.vTaskSuspendAll,"ax",%progbits
ARM GAS  /tmp/cc4Zpja9.s 			page 144


 2232              		.align	1
 2233              		.global	vTaskSuspendAll
 2234              		.syntax unified
 2235              		.thumb
 2236              		.thumb_func
 2238              	vTaskSuspendAll:
 2239              	.LFB20:
2101:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2240              		.loc 1 2101 1 is_stmt 1 view -0
 2241              		.cfi_startproc
 2242              		@ args = 0, pretend = 0, frame = 0
 2243              		@ frame_needed = 0, uses_anonymous_args = 0
 2244              		@ link register save eliminated.
2106:ThirdParty/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2245              		.loc 1 2106 2 view .LVU618
 2246 0000 024A     		ldr	r2, .L164
 2247 0002 1368     		ldr	r3, [r2]
 2248 0004 0133     		adds	r3, r3, #1
 2249 0006 1360     		str	r3, [r2]
2107:ThirdParty/FreeRTOS/Source/tasks.c **** }
 2250              		.loc 1 2107 2 view .LVU619
2108:ThirdParty/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2251              		.loc 1 2108 1 is_stmt 0 view .LVU620
 2252 0008 7047     		bx	lr
 2253              	.L165:
 2254 000a 00BF     		.align	2
 2255              	.L164:
 2256 000c 00000000 		.word	.LANCHOR16
 2257              		.cfi_endproc
 2258              	.LFE20:
 2260              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2261              		.align	1
 2262              		.global	xTaskGetTickCount
 2263              		.syntax unified
 2264              		.thumb
 2265              		.thumb_func
 2267              	xTaskGetTickCount:
 2268              	.LFB22:
2285:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2269              		.loc 1 2285 1 is_stmt 1 view -0
 2270              		.cfi_startproc
 2271              		@ args = 0, pretend = 0, frame = 0
 2272              		@ frame_needed = 0, uses_anonymous_args = 0
 2273              		@ link register save eliminated.
2286:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2274              		.loc 1 2286 1 view .LVU622
2289:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 2275              		.loc 1 2289 32 view .LVU623
2291:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 2276              		.loc 1 2291 3 view .LVU624
2291:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 2277              		.loc 1 2291 10 is_stmt 0 view .LVU625
 2278 0000 014B     		ldr	r3, .L167
 2279 0002 1868     		ldr	r0, [r3]
 2280              	.LVL170:
2293:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2281              		.loc 1 2293 31 is_stmt 1 view .LVU626
ARM GAS  /tmp/cc4Zpja9.s 			page 145


2295:ThirdParty/FreeRTOS/Source/tasks.c **** }
 2282              		.loc 1 2295 2 view .LVU627
2296:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2283              		.loc 1 2296 1 is_stmt 0 view .LVU628
 2284 0004 7047     		bx	lr
 2285              	.L168:
 2286 0006 00BF     		.align	2
 2287              	.L167:
 2288 0008 00000000 		.word	.LANCHOR15
 2289              		.cfi_endproc
 2290              	.LFE22:
 2292              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2293              		.align	1
 2294              		.global	xTaskGetTickCountFromISR
 2295              		.syntax unified
 2296              		.thumb
 2297              		.thumb_func
 2299              	xTaskGetTickCountFromISR:
 2300              	.LFB23:
2300:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2301              		.loc 1 2300 1 is_stmt 1 view -0
 2302              		.cfi_startproc
 2303              		@ args = 0, pretend = 0, frame = 0
 2304              		@ frame_needed = 0, uses_anonymous_args = 0
 2305 0000 08B5     		push	{r3, lr}
 2306              	.LCFI23:
 2307              		.cfi_def_cfa_offset 8
 2308              		.cfi_offset 3, -8
 2309              		.cfi_offset 14, -4
2301:ThirdParty/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
 2310              		.loc 1 2301 1 view .LVU630
2302:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2311              		.loc 1 2302 1 view .LVU631
2318:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2312              		.loc 1 2318 2 view .LVU632
 2313 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2314              	.LVL171:
2320:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 2315              		.loc 1 2320 2 view .LVU633
2322:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 2316              		.loc 1 2322 3 view .LVU634
2322:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 2317              		.loc 1 2322 11 is_stmt 0 view .LVU635
 2318 0006 014B     		ldr	r3, .L171
 2319 0008 1868     		ldr	r0, [r3]
 2320              	.LVL172:
2324:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2321              		.loc 1 2324 2 is_stmt 1 view .LVU636
2326:ThirdParty/FreeRTOS/Source/tasks.c **** }
 2322              		.loc 1 2326 2 view .LVU637
2327:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2323              		.loc 1 2327 1 is_stmt 0 view .LVU638
 2324 000a 08BD     		pop	{r3, pc}
 2325              	.L172:
 2326              		.align	2
 2327              	.L171:
 2328 000c 00000000 		.word	.LANCHOR15
ARM GAS  /tmp/cc4Zpja9.s 			page 146


 2329              		.cfi_endproc
 2330              	.LFE23:
 2332              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2333              		.align	1
 2334              		.global	uxTaskGetNumberOfTasks
 2335              		.syntax unified
 2336              		.thumb
 2337              		.thumb_func
 2339              	uxTaskGetNumberOfTasks:
 2340              	.LFB24:
2331:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2341              		.loc 1 2331 1 is_stmt 1 view -0
 2342              		.cfi_startproc
 2343              		@ args = 0, pretend = 0, frame = 0
 2344              		@ frame_needed = 0, uses_anonymous_args = 0
 2345              		@ link register save eliminated.
2334:ThirdParty/FreeRTOS/Source/tasks.c **** }
 2346              		.loc 1 2334 2 view .LVU640
2334:ThirdParty/FreeRTOS/Source/tasks.c **** }
 2347              		.loc 1 2334 9 is_stmt 0 view .LVU641
 2348 0000 014B     		ldr	r3, .L174
 2349 0002 1868     		ldr	r0, [r3]
2335:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2350              		.loc 1 2335 1 view .LVU642
 2351 0004 7047     		bx	lr
 2352              	.L175:
 2353 0006 00BF     		.align	2
 2354              	.L174:
 2355 0008 00000000 		.word	.LANCHOR9
 2356              		.cfi_endproc
 2357              	.LFE24:
 2359              		.section	.text.pcTaskGetName,"ax",%progbits
 2360              		.align	1
 2361              		.global	pcTaskGetName
 2362              		.syntax unified
 2363              		.thumb
 2364              		.thumb_func
 2366              	pcTaskGetName:
 2367              	.LVL173:
 2368              	.LFB25:
2339:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2369              		.loc 1 2339 1 is_stmt 1 view -0
 2370              		.cfi_startproc
 2371              		@ args = 0, pretend = 0, frame = 0
 2372              		@ frame_needed = 0, uses_anonymous_args = 0
 2373              		@ link register save eliminated.
2340:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2374              		.loc 1 2340 1 view .LVU644
2344:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2375              		.loc 1 2344 2 view .LVU645
2344:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2376              		.loc 1 2344 10 is_stmt 0 view .LVU646
 2377 0000 0346     		mov	r3, r0
 2378 0002 18B1     		cbz	r0, .L180
 2379              	.LVL174:
 2380              	.L177:
2345:ThirdParty/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
ARM GAS  /tmp/cc4Zpja9.s 			page 147


 2381              		.loc 1 2345 2 is_stmt 1 discriminator 4 view .LVU647
 2382 0004 2BB1     		cbz	r3, .L181
2345:ThirdParty/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2383              		.loc 1 2345 23 discriminator 2 view .LVU648
2346:ThirdParty/FreeRTOS/Source/tasks.c **** }
 2384              		.loc 1 2346 2 discriminator 2 view .LVU649
2347:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2385              		.loc 1 2347 1 is_stmt 0 discriminator 2 view .LVU650
 2386 0006 03F13400 		add	r0, r3, #52
 2387 000a 7047     		bx	lr
 2388              	.LVL175:
 2389              	.L180:
2344:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2390              		.loc 1 2344 10 discriminator 1 view .LVU651
 2391 000c 054B     		ldr	r3, .L182
 2392 000e 1B68     		ldr	r3, [r3]
 2393              	.LVL176:
2344:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2394              		.loc 1 2344 10 discriminator 1 view .LVU652
 2395 0010 F8E7     		b	.L177
 2396              	.LVL177:
 2397              	.L181:
2345:ThirdParty/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2398              		.loc 1 2345 2 is_stmt 1 view .LVU653
 2399              	.LBB134:
 2400              	.LBI134:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2401              		.loc 2 195 30 view .LVU654
 2402              	.LBB135:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2403              		.loc 2 197 1 view .LVU655
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2404              		.loc 2 199 2 view .LVU656
 2405              		.syntax unified
 2406              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2407 0012 4FF05003 			mov r3, #80												
 2408 0016 83F31188 		msr basepri, r3											
 2409 001a BFF36F8F 		isb														
 2410 001e BFF34F8F 		dsb														
 2411              	
 2412              	@ 0 "" 2
 2413              	.LVL178:
 2414              		.thumb
 2415              		.syntax unified
 2416              	.L179:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2417              		.loc 2 199 2 is_stmt 0 view .LVU657
 2418              	.LBE135:
 2419              	.LBE134:
2345:ThirdParty/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2420              		.loc 1 2345 2 is_stmt 1 discriminator 1 view .LVU658
2345:ThirdParty/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2421              		.loc 1 2345 2 discriminator 1 view .LVU659
2345:ThirdParty/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2422              		.loc 1 2345 2 discriminator 1 view .LVU660
 2423 0022 FEE7     		b	.L179
 2424              	.L183:
ARM GAS  /tmp/cc4Zpja9.s 			page 148


 2425              		.align	2
 2426              	.L182:
 2427 0024 00000000 		.word	.LANCHOR10
 2428              		.cfi_endproc
 2429              	.LFE25:
 2431              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2432              		.align	1
 2433              		.global	xTaskIncrementTick
 2434              		.syntax unified
 2435              		.thumb
 2436              		.thumb_func
 2438              	xTaskIncrementTick:
 2439              	.LFB26:
2666:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2440              		.loc 1 2666 1 view -0
 2441              		.cfi_startproc
 2442              		@ args = 0, pretend = 0, frame = 0
 2443              		@ frame_needed = 0, uses_anonymous_args = 0
 2444 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2445              	.LCFI24:
 2446              		.cfi_def_cfa_offset 24
 2447              		.cfi_offset 3, -24
 2448              		.cfi_offset 4, -20
 2449              		.cfi_offset 5, -16
 2450              		.cfi_offset 6, -12
 2451              		.cfi_offset 7, -8
 2452              		.cfi_offset 14, -4
2667:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
 2453              		.loc 1 2667 1 view .LVU662
2668:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2454              		.loc 1 2668 1 view .LVU663
2669:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2455              		.loc 1 2669 1 view .LVU664
 2456              	.LVL179:
2674:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2457              		.loc 1 2674 40 view .LVU665
2675:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 2458              		.loc 1 2675 2 view .LVU666
2675:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 2459              		.loc 1 2675 27 is_stmt 0 view .LVU667
 2460 0002 3A4B     		ldr	r3, .L205
 2461 0004 1B68     		ldr	r3, [r3]
2675:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 2462              		.loc 1 2675 4 view .LVU668
 2463 0006 002B     		cmp	r3, #0
 2464 0008 64D1     		bne	.L185
 2465              	.LBB136:
2679:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2466              		.loc 1 2679 3 is_stmt 1 view .LVU669
2679:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2467              		.loc 1 2679 49 is_stmt 0 view .LVU670
 2468 000a 394B     		ldr	r3, .L205+4
 2469 000c 1D68     		ldr	r5, [r3]
2679:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2470              		.loc 1 2679 20 view .LVU671
 2471 000e 0135     		adds	r5, r5, #1
 2472              	.LVL180:
ARM GAS  /tmp/cc4Zpja9.s 			page 149


2683:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2473              		.loc 1 2683 3 is_stmt 1 view .LVU672
2683:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2474              		.loc 1 2683 14 is_stmt 0 view .LVU673
 2475 0010 1D60     		str	r5, [r3]
2685:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2476              		.loc 1 2685 3 is_stmt 1 view .LVU674
2685:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2477              		.loc 1 2685 5 is_stmt 0 view .LVU675
 2478 0012 C5B9     		cbnz	r5, .L186
 2479              	.LBB137:
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2480              		.loc 1 2687 4 is_stmt 1 view .LVU676
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2481              		.loc 1 2687 4 view .LVU677
 2482 0014 374B     		ldr	r3, .L205+8
 2483 0016 1B68     		ldr	r3, [r3]
 2484 0018 1B68     		ldr	r3, [r3]
 2485 001a 43B1     		cbz	r3, .L187
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2486              		.loc 1 2687 4 view .LVU678
 2487              	.LBB138:
 2488              	.LBI138:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2489              		.loc 2 195 30 view .LVU679
 2490              	.LBB139:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2491              		.loc 2 197 1 view .LVU680
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2492              		.loc 2 199 2 view .LVU681
 2493              		.syntax unified
 2494              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2495 001c 4FF05003 			mov r3, #80												
 2496 0020 83F31188 		msr basepri, r3											
 2497 0024 BFF36F8F 		isb														
 2498 0028 BFF34F8F 		dsb														
 2499              	
 2500              	@ 0 "" 2
 2501              	.LVL181:
 2502              		.thumb
 2503              		.syntax unified
 2504              	.L188:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2505              		.loc 2 199 2 is_stmt 0 view .LVU682
 2506              	.LBE139:
 2507              	.LBE138:
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2508              		.loc 1 2687 4 is_stmt 1 discriminator 1 view .LVU683
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2509              		.loc 1 2687 4 discriminator 1 view .LVU684
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2510              		.loc 1 2687 4 discriminator 1 view .LVU685
 2511 002c FEE7     		b	.L188
 2512              	.L187:
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2513              		.loc 1 2687 4 discriminator 2 view .LVU686
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc4Zpja9.s 			page 150


 2514              		.loc 1 2687 4 discriminator 2 view .LVU687
 2515 002e 314A     		ldr	r2, .L205+8
 2516 0030 1168     		ldr	r1, [r2]
 2517              	.LVL182:
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2518              		.loc 1 2687 4 discriminator 2 view .LVU688
 2519 0032 314B     		ldr	r3, .L205+12
 2520 0034 1868     		ldr	r0, [r3]
 2521 0036 1060     		str	r0, [r2]
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2522              		.loc 1 2687 4 discriminator 2 view .LVU689
 2523 0038 1960     		str	r1, [r3]
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2524              		.loc 1 2687 4 discriminator 2 view .LVU690
 2525 003a 304A     		ldr	r2, .L205+16
 2526 003c 1368     		ldr	r3, [r2]
 2527 003e 0133     		adds	r3, r3, #1
 2528 0040 1360     		str	r3, [r2]
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2529              		.loc 1 2687 4 discriminator 2 view .LVU691
 2530 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2531              	.LVL183:
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2532              		.loc 1 2687 4 is_stmt 0 discriminator 2 view .LVU692
 2533              	.LBE137:
2687:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2534              		.loc 1 2687 30 is_stmt 1 discriminator 2 view .LVU693
 2535              	.L186:
2691:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2536              		.loc 1 2691 28 view .LVU694
2698:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2537              		.loc 1 2698 3 view .LVU695
2698:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2538              		.loc 1 2698 23 is_stmt 0 view .LVU696
 2539 0046 2E4B     		ldr	r3, .L205+20
 2540 0048 1B68     		ldr	r3, [r3]
2698:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2541              		.loc 1 2698 5 view .LVU697
 2542 004a AB42     		cmp	r3, r5
 2543 004c 38D9     		bls	.L198
 2544              	.LBE136:
2669:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2545              		.loc 1 2669 12 view .LVU698
 2546 004e 0027     		movs	r7, #0
 2547              	.LVL184:
 2548              	.L190:
 2549              	.LBB140:
2781:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 2550              		.loc 1 2781 4 is_stmt 1 view .LVU699
2781:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 2551              		.loc 1 2781 8 is_stmt 0 view .LVU700
 2552 0050 2C4B     		ldr	r3, .L205+24
 2553 0052 1B68     		ldr	r3, [r3]
 2554 0054 DB6A     		ldr	r3, [r3, #44]
 2555 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2556 005a 9A00     		lsls	r2, r3, #2
 2557 005c 2A4B     		ldr	r3, .L205+28
ARM GAS  /tmp/cc4Zpja9.s 			page 151


 2558 005e 9B58     		ldr	r3, [r3, r2]
2781:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 2559              		.loc 1 2781 6 view .LVU701
 2560 0060 012B     		cmp	r3, #1
 2561 0062 3CD9     		bls	.L196
2783:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 2562              		.loc 1 2783 21 view .LVU702
 2563 0064 0127     		movs	r7, #1
 2564              	.LVL185:
2783:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 2565              		.loc 1 2783 21 view .LVU703
 2566 0066 3AE0     		b	.L196
 2567              	.LVL186:
 2568              	.L199:
2764:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
 2569              		.loc 1 2764 24 view .LVU704
 2570 0068 0127     		movs	r7, #1
 2571              	.LVL187:
 2572              	.L189:
2700:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 2573              		.loc 1 2700 4 is_stmt 1 view .LVU705
2702:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 2574              		.loc 1 2702 5 view .LVU706
2702:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 2575              		.loc 1 2702 9 is_stmt 0 view .LVU707
 2576 006a 224B     		ldr	r3, .L205+8
 2577 006c 1B68     		ldr	r3, [r3]
 2578 006e 1B68     		ldr	r3, [r3]
2702:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 2579              		.loc 1 2702 7 view .LVU708
 2580 0070 43B3     		cbz	r3, .L203
2718:ThirdParty/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2581              		.loc 1 2718 6 is_stmt 1 view .LVU709
2718:ThirdParty/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2582              		.loc 1 2718 14 is_stmt 0 view .LVU710
 2583 0072 204B     		ldr	r3, .L205+8
 2584 0074 1B68     		ldr	r3, [r3]
 2585 0076 DB68     		ldr	r3, [r3, #12]
2718:ThirdParty/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2586              		.loc 1 2718 12 view .LVU711
 2587 0078 DC68     		ldr	r4, [r3, #12]
 2588              	.LVL188:
2719:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2589              		.loc 1 2719 6 is_stmt 1 view .LVU712
2719:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2590              		.loc 1 2719 17 is_stmt 0 view .LVU713
 2591 007a 6368     		ldr	r3, [r4, #4]
 2592              	.LVL189:
2721:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 2593              		.loc 1 2721 6 is_stmt 1 view .LVU714
2721:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 2594              		.loc 1 2721 8 is_stmt 0 view .LVU715
 2595 007c 9D42     		cmp	r5, r3
 2596 007e 26D3     		bcc	.L204
2733:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2597              		.loc 1 2733 31 is_stmt 1 view .LVU716
2737:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 152


 2598              		.loc 1 2737 6 view .LVU717
2737:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2599              		.loc 1 2737 15 is_stmt 0 view .LVU718
 2600 0080 261D     		adds	r6, r4, #4
 2601 0082 3046     		mov	r0, r6
 2602 0084 FFF7FEFF 		bl	uxListRemove
 2603              	.LVL190:
2741:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 2604              		.loc 1 2741 6 is_stmt 1 view .LVU719
2741:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 2605              		.loc 1 2741 10 is_stmt 0 view .LVU720
 2606 0088 A36A     		ldr	r3, [r4, #40]
2741:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 2607              		.loc 1 2741 8 view .LVU721
 2608 008a 1BB1     		cbz	r3, .L193
2743:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2609              		.loc 1 2743 7 is_stmt 1 view .LVU722
2743:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2610              		.loc 1 2743 16 is_stmt 0 view .LVU723
 2611 008c 04F11800 		add	r0, r4, #24
 2612 0090 FFF7FEFF 		bl	uxListRemove
 2613              	.LVL191:
 2614              	.L193:
2747:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2615              		.loc 1 2747 31 is_stmt 1 view .LVU724
2752:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2616              		.loc 1 2752 6 view .LVU725
2752:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2617              		.loc 1 2752 6 view .LVU726
 2618 0094 E36A     		ldr	r3, [r4, #44]
 2619 0096 0122     		movs	r2, #1
 2620 0098 9A40     		lsls	r2, r2, r3
 2621 009a 1C49     		ldr	r1, .L205+32
 2622 009c 0868     		ldr	r0, [r1]
 2623 009e 0243     		orrs	r2, r2, r0
 2624 00a0 0A60     		str	r2, [r1]
2752:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2625              		.loc 1 2752 6 view .LVU727
 2626 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 2627 00a6 9A00     		lsls	r2, r3, #2
 2628 00a8 3146     		mov	r1, r6
 2629 00aa 1748     		ldr	r0, .L205+28
 2630 00ac 1044     		add	r0, r0, r2
 2631 00ae FFF7FEFF 		bl	vListInsertEnd
 2632              	.LVL192:
2752:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2633              		.loc 1 2752 36 view .LVU728
2762:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 2634              		.loc 1 2762 7 view .LVU729
2762:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 2635              		.loc 1 2762 16 is_stmt 0 view .LVU730
 2636 00b2 E26A     		ldr	r2, [r4, #44]
2762:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 2637              		.loc 1 2762 44 view .LVU731
 2638 00b4 134B     		ldr	r3, .L205+24
 2639 00b6 1B68     		ldr	r3, [r3]
 2640 00b8 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/cc4Zpja9.s 			page 153


2762:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 2641              		.loc 1 2762 9 view .LVU732
 2642 00ba 9A42     		cmp	r2, r3
 2643 00bc D4D2     		bcs	.L199
 2644 00be D4E7     		b	.L189
 2645              	.LVL193:
 2646              	.L198:
2762:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 2647              		.loc 1 2762 9 view .LVU733
 2648              	.LBE140:
2669:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2649              		.loc 1 2669 12 view .LVU734
 2650 00c0 0027     		movs	r7, #0
 2651 00c2 D2E7     		b	.L189
 2652              	.LVL194:
 2653              	.L203:
 2654              	.LBB141:
2709:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 2655              		.loc 1 2709 6 is_stmt 1 view .LVU735
2709:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 2656              		.loc 1 2709 27 is_stmt 0 view .LVU736
 2657 00c4 0E4B     		ldr	r3, .L205+20
 2658 00c6 4FF0FF32 		mov	r2, #-1
 2659 00ca 1A60     		str	r2, [r3]
2710:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 2660              		.loc 1 2710 6 is_stmt 1 view .LVU737
 2661 00cc C0E7     		b	.L190
 2662              	.LVL195:
 2663              	.L204:
2728:ThirdParty/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2664              		.loc 1 2728 7 view .LVU738
2728:ThirdParty/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2665              		.loc 1 2728 28 is_stmt 0 view .LVU739
 2666 00ce 0C4A     		ldr	r2, .L205+20
 2667 00d0 1360     		str	r3, [r2]
2729:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2668              		.loc 1 2729 7 is_stmt 1 view .LVU740
 2669 00d2 BDE7     		b	.L190
 2670              	.LVL196:
 2671              	.L185:
2729:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2672              		.loc 1 2729 7 is_stmt 0 view .LVU741
 2673              	.LBE141:
2809:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2674              		.loc 1 2809 3 is_stmt 1 view .LVU742
 2675 00d4 0E4A     		ldr	r2, .L205+36
 2676 00d6 1368     		ldr	r3, [r2]
 2677 00d8 0133     		adds	r3, r3, #1
 2678 00da 1360     		str	r3, [r2]
2669:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2679              		.loc 1 2669 12 is_stmt 0 view .LVU743
 2680 00dc 0027     		movs	r7, #0
 2681              	.LVL197:
 2682              	.L196:
2822:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2683              		.loc 1 2822 3 is_stmt 1 view .LVU744
2822:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/cc4Zpja9.s 			page 154


 2684              		.loc 1 2822 21 is_stmt 0 view .LVU745
 2685 00de 0D4B     		ldr	r3, .L205+40
 2686 00e0 1B68     		ldr	r3, [r3]
2822:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2687              		.loc 1 2822 5 view .LVU746
 2688 00e2 03B1     		cbz	r3, .L184
2824:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2689              		.loc 1 2824 20 view .LVU747
 2690 00e4 0127     		movs	r7, #1
 2691              	.LVL198:
2828:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2692              		.loc 1 2828 28 is_stmt 1 view .LVU748
2833:ThirdParty/FreeRTOS/Source/tasks.c **** }
 2693              		.loc 1 2833 2 view .LVU749
 2694              	.L184:
2834:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2695              		.loc 1 2834 1 is_stmt 0 view .LVU750
 2696 00e6 3846     		mov	r0, r7
 2697 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2698              	.L206:
 2699 00ea 00BF     		.align	2
 2700              	.L205:
 2701 00ec 00000000 		.word	.LANCHOR16
 2702 00f0 00000000 		.word	.LANCHOR15
 2703 00f4 00000000 		.word	.LANCHOR2
 2704 00f8 00000000 		.word	.LANCHOR8
 2705 00fc 00000000 		.word	.LANCHOR18
 2706 0100 00000000 		.word	.LANCHOR3
 2707 0104 00000000 		.word	.LANCHOR10
 2708 0108 00000000 		.word	.LANCHOR4
 2709 010c 00000000 		.word	.LANCHOR13
 2710 0110 00000000 		.word	.LANCHOR19
 2711 0114 00000000 		.word	.LANCHOR20
 2712              		.cfi_endproc
 2713              	.LFE26:
 2715              		.section	.text.xTaskResumeAll,"ax",%progbits
 2716              		.align	1
 2717              		.global	xTaskResumeAll
 2718              		.syntax unified
 2719              		.thumb
 2720              		.thumb_func
 2722              	xTaskResumeAll:
 2723              	.LFB21:
2175:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2724              		.loc 1 2175 1 is_stmt 1 view -0
 2725              		.cfi_startproc
 2726              		@ args = 0, pretend = 0, frame = 0
 2727              		@ frame_needed = 0, uses_anonymous_args = 0
 2728 0000 38B5     		push	{r3, r4, r5, lr}
 2729              	.LCFI25:
 2730              		.cfi_def_cfa_offset 16
 2731              		.cfi_offset 3, -16
 2732              		.cfi_offset 4, -12
 2733              		.cfi_offset 5, -8
 2734              		.cfi_offset 14, -4
2176:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2735              		.loc 1 2176 1 view .LVU752
ARM GAS  /tmp/cc4Zpja9.s 			page 155


 2736              	.LVL199:
2177:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2737              		.loc 1 2177 1 view .LVU753
2181:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2738              		.loc 1 2181 2 view .LVU754
 2739 0002 354B     		ldr	r3, .L223
 2740 0004 1B68     		ldr	r3, [r3]
 2741 0006 43B9     		cbnz	r3, .L208
2181:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2742              		.loc 1 2181 2 view .LVU755
 2743              	.LBB142:
 2744              	.LBI142:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 2745              		.loc 2 195 30 view .LVU756
 2746              	.LBB143:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 2747              		.loc 2 197 1 view .LVU757
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2748              		.loc 2 199 2 view .LVU758
 2749              		.syntax unified
 2750              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2751 0008 4FF05003 			mov r3, #80												
 2752 000c 83F31188 		msr basepri, r3											
 2753 0010 BFF36F8F 		isb														
 2754 0014 BFF34F8F 		dsb														
 2755              	
 2756              	@ 0 "" 2
 2757              	.LVL200:
 2758              		.thumb
 2759              		.syntax unified
 2760              	.L209:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2761              		.loc 2 199 2 is_stmt 0 view .LVU759
 2762              	.LBE143:
 2763              	.LBE142:
2181:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2764              		.loc 1 2181 2 is_stmt 1 discriminator 1 view .LVU760
2181:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2765              		.loc 1 2181 2 discriminator 1 view .LVU761
2181:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2766              		.loc 1 2181 2 discriminator 1 view .LVU762
 2767 0018 FEE7     		b	.L209
 2768              	.L208:
2181:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2769              		.loc 1 2181 38 discriminator 2 view .LVU763
2188:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 2770              		.loc 1 2188 2 discriminator 2 view .LVU764
 2771 001a FFF7FEFF 		bl	vPortEnterCritical
 2772              	.LVL201:
2190:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2773              		.loc 1 2190 3 discriminator 2 view .LVU765
 2774 001e 2E4B     		ldr	r3, .L223
 2775 0020 1A68     		ldr	r2, [r3]
 2776 0022 013A     		subs	r2, r2, #1
 2777 0024 1A60     		str	r2, [r3]
2192:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2778              		.loc 1 2192 3 discriminator 2 view .LVU766
ARM GAS  /tmp/cc4Zpja9.s 			page 156


2192:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2779              		.loc 1 2192 28 is_stmt 0 discriminator 2 view .LVU767
 2780 0026 1B68     		ldr	r3, [r3]
2192:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 2781              		.loc 1 2192 5 discriminator 2 view .LVU768
 2782 0028 002B     		cmp	r3, #0
 2783 002a 4FD1     		bne	.L218
2194:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 2784              		.loc 1 2194 4 is_stmt 1 view .LVU769
2194:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 2785              		.loc 1 2194 31 is_stmt 0 view .LVU770
 2786 002c 2B4B     		ldr	r3, .L223+4
 2787 002e 1B68     		ldr	r3, [r3]
2194:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 2788              		.loc 1 2194 6 view .LVU771
 2789 0030 0BB9     		cbnz	r3, .L219
2177:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2790              		.loc 1 2177 12 view .LVU772
 2791 0032 0024     		movs	r4, #0
 2792 0034 4BE0     		b	.L210
 2793              	.L219:
2176:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2794              		.loc 1 2176 8 view .LVU773
 2795 0036 0024     		movs	r4, #0
 2796              	.LVL202:
 2797              	.L211:
2213:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2798              		.loc 1 2213 31 is_stmt 1 view .LVU774
2198:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 2799              		.loc 1 2198 10 view .LVU775
2198:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 2800              		.loc 1 2198 12 is_stmt 0 view .LVU776
 2801 0038 294B     		ldr	r3, .L223+8
 2802 003a 1B68     		ldr	r3, [r3]
2198:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 2803              		.loc 1 2198 10 view .LVU777
 2804 003c 1BB3     		cbz	r3, .L221
2200:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2805              		.loc 1 2200 6 is_stmt 1 view .LVU778
2200:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2806              		.loc 1 2200 14 is_stmt 0 view .LVU779
 2807 003e 284B     		ldr	r3, .L223+8
 2808 0040 DB68     		ldr	r3, [r3, #12]
2200:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2809              		.loc 1 2200 12 view .LVU780
 2810 0042 DC68     		ldr	r4, [r3, #12]
 2811              	.LVL203:
2201:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2812              		.loc 1 2201 6 is_stmt 1 view .LVU781
2201:ThirdParty/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2813              		.loc 1 2201 15 is_stmt 0 view .LVU782
 2814 0044 04F11800 		add	r0, r4, #24
 2815 0048 FFF7FEFF 		bl	uxListRemove
 2816              	.LVL204:
2202:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2817              		.loc 1 2202 6 is_stmt 1 view .LVU783
2202:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/cc4Zpja9.s 			page 157


 2818              		.loc 1 2202 15 is_stmt 0 view .LVU784
 2819 004c 251D     		adds	r5, r4, #4
 2820 004e 2846     		mov	r0, r5
 2821 0050 FFF7FEFF 		bl	uxListRemove
 2822              	.LVL205:
2203:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2823              		.loc 1 2203 6 is_stmt 1 view .LVU785
2203:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2824              		.loc 1 2203 6 view .LVU786
 2825 0054 E06A     		ldr	r0, [r4, #44]
 2826 0056 0123     		movs	r3, #1
 2827 0058 8340     		lsls	r3, r3, r0
 2828 005a 224A     		ldr	r2, .L223+12
 2829 005c 1168     		ldr	r1, [r2]
 2830 005e 0B43     		orrs	r3, r3, r1
 2831 0060 1360     		str	r3, [r2]
2203:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2832              		.loc 1 2203 6 view .LVU787
 2833 0062 00EB8000 		add	r0, r0, r0, lsl #2
 2834 0066 2946     		mov	r1, r5
 2835 0068 1F4B     		ldr	r3, .L223+16
 2836 006a 03EB8000 		add	r0, r3, r0, lsl #2
 2837 006e FFF7FEFF 		bl	vListInsertEnd
 2838              	.LVL206:
2203:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2839              		.loc 1 2203 36 view .LVU788
2207:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 2840              		.loc 1 2207 6 view .LVU789
2207:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 2841              		.loc 1 2207 15 is_stmt 0 view .LVU790
 2842 0072 E26A     		ldr	r2, [r4, #44]
2207:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 2843              		.loc 1 2207 43 view .LVU791
 2844 0074 1D4B     		ldr	r3, .L223+20
 2845 0076 1B68     		ldr	r3, [r3]
 2846 0078 DB6A     		ldr	r3, [r3, #44]
2207:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 2847              		.loc 1 2207 8 view .LVU792
 2848 007a 9A42     		cmp	r2, r3
 2849 007c DCD3     		bcc	.L211
2209:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2850              		.loc 1 2209 7 is_stmt 1 view .LVU793
2209:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2851              		.loc 1 2209 21 is_stmt 0 view .LVU794
 2852 007e 1C4B     		ldr	r3, .L223+24
 2853 0080 0122     		movs	r2, #1
 2854 0082 1A60     		str	r2, [r3]
 2855 0084 D8E7     		b	.L211
 2856              	.L221:
2217:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 2857              		.loc 1 2217 5 is_stmt 1 view .LVU795
2217:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 2858              		.loc 1 2217 7 is_stmt 0 view .LVU796
 2859 0086 0CB1     		cbz	r4, .L214
2225:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 2860              		.loc 1 2225 6 is_stmt 1 view .LVU797
 2861 0088 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
ARM GAS  /tmp/cc4Zpja9.s 			page 158


 2862              	.LVL207:
 2863              	.L214:
 2864              	.LBB144:
2233:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2865              		.loc 1 2233 6 view .LVU798
2233:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2866              		.loc 1 2233 18 is_stmt 0 view .LVU799
 2867 008c 194B     		ldr	r3, .L223+28
 2868 008e 1C68     		ldr	r4, [r3]
 2869              	.LVL208:
2235:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 2870              		.loc 1 2235 6 is_stmt 1 view .LVU800
2235:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 2871              		.loc 1 2235 8 is_stmt 0 view .LVU801
 2872 0090 84B9     		cbnz	r4, .L217
 2873              	.L215:
2254:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2874              		.loc 1 2254 31 is_stmt 1 view .LVU802
 2875              	.LBE144:
2258:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 2876              		.loc 1 2258 5 view .LVU803
2258:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 2877              		.loc 1 2258 23 is_stmt 0 view .LVU804
 2878 0092 174B     		ldr	r3, .L223+24
 2879 0094 1C68     		ldr	r4, [r3]
 2880              	.LVL209:
2258:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 2881              		.loc 1 2258 7 view .LVU805
 2882 0096 D4B1     		cbz	r4, .L210
2262:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2883              		.loc 1 2262 7 is_stmt 1 view .LVU806
 2884              	.LVL210:
2265:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 2885              		.loc 1 2265 6 view .LVU807
 2886 0098 4FF0E023 		mov	r3, #-536813568
 2887 009c 4FF08052 		mov	r2, #268435456
 2888 00a0 C3F8042D 		str	r2, [r3, #3332]
2265:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 2889              		.loc 1 2265 6 view .LVU808
 2890              		.syntax unified
 2891              	@ 2265 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 2892 00a4 BFF34F8F 		dsb
 2893              	@ 0 "" 2
2265:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 2894              		.loc 1 2265 6 view .LVU809
 2895              	@ 2265 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 2896 00a8 BFF36F8F 		isb
 2897              	@ 0 "" 2
2265:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 2898              		.loc 1 2265 37 view .LVU810
2262:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2899              		.loc 1 2262 23 is_stmt 0 view .LVU811
 2900              		.thumb
 2901              		.syntax unified
 2902 00ac 0124     		movs	r4, #1
 2903 00ae 0EE0     		b	.L210
 2904              	.LVL211:
ARM GAS  /tmp/cc4Zpja9.s 			page 159


 2905              	.L216:
 2906              	.LBB145:
2245:ThirdParty/FreeRTOS/Source/tasks.c **** 							}
 2907              		.loc 1 2245 33 is_stmt 1 view .LVU812
2247:ThirdParty/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2908              		.loc 1 2247 8 view .LVU813
2248:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2909              		.loc 1 2248 14 view .LVU814
2248:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2910              		.loc 1 2248 7 is_stmt 0 view .LVU815
 2911 00b0 013C     		subs	r4, r4, #1
 2912              	.LVL212:
2248:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2913              		.loc 1 2248 7 view .LVU816
 2914 00b2 07D0     		beq	.L222
 2915              	.L217:
2237:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 2916              		.loc 1 2237 7 is_stmt 1 view .LVU817
2239:ThirdParty/FreeRTOS/Source/tasks.c **** 							{
 2917              		.loc 1 2239 8 view .LVU818
2239:ThirdParty/FreeRTOS/Source/tasks.c **** 							{
 2918              		.loc 1 2239 12 is_stmt 0 view .LVU819
 2919 00b4 FFF7FEFF 		bl	xTaskIncrementTick
 2920              	.LVL213:
2239:ThirdParty/FreeRTOS/Source/tasks.c **** 							{
 2921              		.loc 1 2239 10 view .LVU820
 2922 00b8 0028     		cmp	r0, #0
 2923 00ba F9D0     		beq	.L216
2241:ThirdParty/FreeRTOS/Source/tasks.c **** 							}
 2924              		.loc 1 2241 9 is_stmt 1 view .LVU821
2241:ThirdParty/FreeRTOS/Source/tasks.c **** 							}
 2925              		.loc 1 2241 23 is_stmt 0 view .LVU822
 2926 00bc 0C4B     		ldr	r3, .L223+24
 2927 00be 0122     		movs	r2, #1
 2928 00c0 1A60     		str	r2, [r3]
 2929 00c2 F5E7     		b	.L216
 2930              	.L222:
2250:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2931              		.loc 1 2250 7 is_stmt 1 view .LVU823
2250:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2932              		.loc 1 2250 21 is_stmt 0 view .LVU824
 2933 00c4 0B4B     		ldr	r3, .L223+28
 2934 00c6 0022     		movs	r2, #0
 2935 00c8 1A60     		str	r2, [r3]
 2936 00ca E2E7     		b	.L215
 2937              	.LVL214:
 2938              	.L218:
2250:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 2939              		.loc 1 2250 21 view .LVU825
 2940              	.LBE145:
2177:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2941              		.loc 1 2177 12 view .LVU826
 2942 00cc 0024     		movs	r4, #0
 2943              	.LVL215:
 2944              	.L210:
2275:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 2945              		.loc 1 2275 28 is_stmt 1 view .LVU827
ARM GAS  /tmp/cc4Zpja9.s 			page 160


2278:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2946              		.loc 1 2278 2 view .LVU828
 2947 00ce FFF7FEFF 		bl	vPortExitCritical
 2948              	.LVL216:
2280:ThirdParty/FreeRTOS/Source/tasks.c **** }
 2949              		.loc 1 2280 2 view .LVU829
2281:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2950              		.loc 1 2281 1 is_stmt 0 view .LVU830
 2951 00d2 2046     		mov	r0, r4
 2952 00d4 38BD     		pop	{r3, r4, r5, pc}
 2953              	.LVL217:
 2954              	.L224:
2281:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2955              		.loc 1 2281 1 view .LVU831
 2956 00d6 00BF     		.align	2
 2957              	.L223:
 2958 00d8 00000000 		.word	.LANCHOR16
 2959 00dc 00000000 		.word	.LANCHOR9
 2960 00e0 00000000 		.word	.LANCHOR1
 2961 00e4 00000000 		.word	.LANCHOR13
 2962 00e8 00000000 		.word	.LANCHOR4
 2963 00ec 00000000 		.word	.LANCHOR10
 2964 00f0 00000000 		.word	.LANCHOR20
 2965 00f4 00000000 		.word	.LANCHOR19
 2966              		.cfi_endproc
 2967              	.LFE21:
 2969              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2970              		.align	1
 2971              		.global	vTaskDelayUntil
 2972              		.syntax unified
 2973              		.thumb
 2974              		.thumb_func
 2976              	vTaskDelayUntil:
 2977              	.LVL218:
 2978              	.LFB9:
1250:ThirdParty/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2979              		.loc 1 1250 2 is_stmt 1 view -0
 2980              		.cfi_startproc
 2981              		@ args = 0, pretend = 0, frame = 0
 2982              		@ frame_needed = 0, uses_anonymous_args = 0
1250:ThirdParty/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2983              		.loc 1 1250 2 is_stmt 0 view .LVU833
 2984 0000 38B5     		push	{r3, r4, r5, lr}
 2985              	.LCFI26:
 2986              		.cfi_def_cfa_offset 16
 2987              		.cfi_offset 3, -16
 2988              		.cfi_offset 4, -12
 2989              		.cfi_offset 5, -8
 2990              		.cfi_offset 14, -4
1251:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2991              		.loc 1 1251 2 is_stmt 1 view .LVU834
1252:ThirdParty/FreeRTOS/Source/tasks.c **** 
 2992              		.loc 1 1252 2 view .LVU835
 2993              	.LVL219:
1254:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2994              		.loc 1 1254 3 view .LVU836
 2995 0002 58B1     		cbz	r0, .L241
ARM GAS  /tmp/cc4Zpja9.s 			page 161


 2996 0004 0C46     		mov	r4, r1
 2997 0006 0546     		mov	r5, r0
1254:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2998              		.loc 1 1254 37 discriminator 2 view .LVU837
1255:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2999              		.loc 1 1255 3 discriminator 2 view .LVU838
 3000 0008 89B9     		cbnz	r1, .L228
1255:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3001              		.loc 1 1255 3 view .LVU839
 3002              	.LBB146:
 3003              	.LBI146:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3004              		.loc 2 195 30 view .LVU840
 3005              	.LBB147:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3006              		.loc 2 197 1 view .LVU841
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3007              		.loc 2 199 2 view .LVU842
 3008              		.syntax unified
 3009              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3010 000a 4FF05003 			mov r3, #80												
 3011 000e 83F31188 		msr basepri, r3											
 3012 0012 BFF36F8F 		isb														
 3013 0016 BFF34F8F 		dsb														
 3014              	
 3015              	@ 0 "" 2
 3016              	.LVL220:
 3017              		.thumb
 3018              		.syntax unified
 3019              	.L229:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3020              		.loc 2 199 2 is_stmt 0 view .LVU843
 3021              	.LBE147:
 3022              	.LBE146:
1255:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3023              		.loc 1 1255 3 is_stmt 1 discriminator 2 view .LVU844
1255:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3024              		.loc 1 1255 3 discriminator 2 view .LVU845
1255:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3025              		.loc 1 1255 3 discriminator 2 view .LVU846
 3026 001a FEE7     		b	.L229
 3027              	.L241:
1254:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3028              		.loc 1 1254 3 view .LVU847
 3029              	.LBB148:
 3030              	.LBI148:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3031              		.loc 2 195 30 view .LVU848
 3032              	.LBB149:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3033              		.loc 2 197 1 view .LVU849
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3034              		.loc 2 199 2 view .LVU850
 3035              		.syntax unified
 3036              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3037 001c 4FF05003 			mov r3, #80												
 3038 0020 83F31188 		msr basepri, r3											
ARM GAS  /tmp/cc4Zpja9.s 			page 162


 3039 0024 BFF36F8F 		isb														
 3040 0028 BFF34F8F 		dsb														
 3041              	
 3042              	@ 0 "" 2
 3043              	.LVL221:
 3044              		.thumb
 3045              		.syntax unified
 3046              	.L227:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3047              		.loc 2 199 2 is_stmt 0 view .LVU851
 3048              	.LBE149:
 3049              	.LBE148:
1254:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3050              		.loc 1 1254 3 is_stmt 1 discriminator 1 view .LVU852
1254:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3051              		.loc 1 1254 3 discriminator 1 view .LVU853
1254:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 3052              		.loc 1 1254 3 discriminator 1 view .LVU854
 3053 002c FEE7     		b	.L227
 3054              	.L228:
1255:ThirdParty/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 3055              		.loc 1 1255 42 discriminator 2 view .LVU855
1256:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3056              		.loc 1 1256 3 discriminator 2 view .LVU856
 3057 002e 1B4B     		ldr	r3, .L242
 3058 0030 1B68     		ldr	r3, [r3]
 3059 0032 43B1     		cbz	r3, .L230
1256:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3060              		.loc 1 1256 3 view .LVU857
 3061              	.LBB150:
 3062              	.LBI150:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3063              		.loc 2 195 30 view .LVU858
 3064              	.LBB151:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3065              		.loc 2 197 1 view .LVU859
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3066              		.loc 2 199 2 view .LVU860
 3067              		.syntax unified
 3068              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3069 0034 4FF05003 			mov r3, #80												
 3070 0038 83F31188 		msr basepri, r3											
 3071 003c BFF36F8F 		isb														
 3072 0040 BFF34F8F 		dsb														
 3073              	
 3074              	@ 0 "" 2
 3075              	.LVL222:
 3076              		.thumb
 3077              		.syntax unified
 3078              	.L231:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3079              		.loc 2 199 2 is_stmt 0 view .LVU861
 3080              	.LBE151:
 3081              	.LBE150:
1256:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3082              		.loc 1 1256 3 is_stmt 1 discriminator 3 view .LVU862
1256:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 163


 3083              		.loc 1 1256 3 discriminator 3 view .LVU863
1256:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3084              		.loc 1 1256 3 discriminator 3 view .LVU864
 3085 0044 FEE7     		b	.L231
 3086              	.L230:
1256:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3087              		.loc 1 1256 44 discriminator 2 view .LVU865
1258:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3088              		.loc 1 1258 3 discriminator 2 view .LVU866
 3089 0046 FFF7FEFF 		bl	vTaskSuspendAll
 3090              	.LVL223:
 3091              	.LBB152:
1262:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3092              		.loc 1 1262 4 discriminator 2 view .LVU867
1262:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3093              		.loc 1 1262 21 is_stmt 0 discriminator 2 view .LVU868
 3094 004a 154B     		ldr	r3, .L242+4
 3095 004c 1868     		ldr	r0, [r3]
 3096              	.LVL224:
1265:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3097              		.loc 1 1265 4 is_stmt 1 discriminator 2 view .LVU869
1265:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3098              		.loc 1 1265 18 is_stmt 0 discriminator 2 view .LVU870
 3099 004e 2B68     		ldr	r3, [r5]
1265:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3100              		.loc 1 1265 16 discriminator 2 view .LVU871
 3101 0050 1C44     		add	r4, r4, r3
 3102              	.LVL225:
1267:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3103              		.loc 1 1267 4 is_stmt 1 discriminator 2 view .LVU872
1267:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3104              		.loc 1 1267 6 is_stmt 0 discriminator 2 view .LVU873
 3105 0052 8342     		cmp	r3, r0
 3106 0054 09D9     		bls	.L232
1274:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3107              		.loc 1 1274 5 is_stmt 1 view .LVU874
1274:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3108              		.loc 1 1274 7 is_stmt 0 view .LVU875
 3109 0056 A342     		cmp	r3, r4
 3110 0058 01D8     		bhi	.L233
1299:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3111              		.loc 1 1299 4 is_stmt 1 view .LVU876
1299:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3112              		.loc 1 1299 24 is_stmt 0 view .LVU877
 3113 005a 2C60     		str	r4, [r5]
1301:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3114              		.loc 1 1301 4 is_stmt 1 view .LVU878
 3115 005c 0EE0     		b	.L234
 3116              	.L233:
1274:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3117              		.loc 1 1274 47 is_stmt 0 discriminator 1 view .LVU879
 3118 005e A042     		cmp	r0, r4
 3119 0060 01D3     		bcc	.L235
1299:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3120              		.loc 1 1299 4 is_stmt 1 view .LVU880
1299:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3121              		.loc 1 1299 24 is_stmt 0 view .LVU881
ARM GAS  /tmp/cc4Zpja9.s 			page 164


 3122 0062 2C60     		str	r4, [r5]
1301:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3123              		.loc 1 1301 4 is_stmt 1 view .LVU882
 3124 0064 0AE0     		b	.L234
 3125              	.L235:
1276:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 3126              		.loc 1 1276 6 view .LVU883
 3127              	.LVL226:
1299:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3128              		.loc 1 1299 4 view .LVU884
1299:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3129              		.loc 1 1299 24 is_stmt 0 view .LVU885
 3130 0066 2C60     		str	r4, [r5]
1301:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3131              		.loc 1 1301 4 is_stmt 1 view .LVU886
 3132 0068 04E0     		b	.L236
 3133              	.LVL227:
 3134              	.L232:
1288:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3135              		.loc 1 1288 5 view .LVU887
1288:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3136              		.loc 1 1288 7 is_stmt 0 view .LVU888
 3137 006a A342     		cmp	r3, r4
 3138 006c 01D8     		bhi	.L237
1288:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3139              		.loc 1 1288 47 discriminator 1 view .LVU889
 3140 006e A042     		cmp	r0, r4
 3141 0070 12D2     		bcs	.L238
 3142              	.L237:
1290:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 3143              		.loc 1 1290 6 is_stmt 1 view .LVU890
 3144              	.LVL228:
1299:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3145              		.loc 1 1299 4 view .LVU891
1299:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3146              		.loc 1 1299 24 is_stmt 0 view .LVU892
 3147 0072 2C60     		str	r4, [r5]
1301:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3148              		.loc 1 1301 4 is_stmt 1 view .LVU893
 3149              	.L236:
1303:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3150              		.loc 1 1303 41 view .LVU894
1307:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3151              		.loc 1 1307 5 view .LVU895
 3152 0074 0021     		movs	r1, #0
 3153 0076 201A     		subs	r0, r4, r0
 3154              	.LVL229:
1307:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3155              		.loc 1 1307 5 is_stmt 0 view .LVU896
 3156 0078 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3157              	.LVL230:
 3158              	.L234:
1311:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3159              		.loc 1 1311 29 is_stmt 1 view .LVU897
 3160              	.LBE152:
1314:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3161              		.loc 1 1314 3 view .LVU898
ARM GAS  /tmp/cc4Zpja9.s 			page 165


1314:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3162              		.loc 1 1314 21 is_stmt 0 view .LVU899
 3163 007c FFF7FEFF 		bl	xTaskResumeAll
 3164              	.LVL231:
1318:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3165              		.loc 1 1318 3 is_stmt 1 view .LVU900
1318:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3166              		.loc 1 1318 5 is_stmt 0 view .LVU901
 3167 0080 48B9     		cbnz	r0, .L225
1320:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3168              		.loc 1 1320 4 is_stmt 1 view .LVU902
 3169 0082 4FF0E023 		mov	r3, #-536813568
 3170 0086 4FF08052 		mov	r2, #268435456
 3171 008a C3F8042D 		str	r2, [r3, #3332]
1320:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3172              		.loc 1 1320 4 view .LVU903
 3173              		.syntax unified
 3174              	@ 1320 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 3175 008e BFF34F8F 		dsb
 3176              	@ 0 "" 2
1320:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3177              		.loc 1 1320 4 view .LVU904
 3178              	@ 1320 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 3179 0092 BFF36F8F 		isb
 3180              	@ 0 "" 2
1320:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3181              		.loc 1 1320 26 view .LVU905
1324:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3182              		.loc 1 1324 28 view .LVU906
 3183              		.thumb
 3184              		.syntax unified
 3185              	.L225:
1326:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3186              		.loc 1 1326 2 is_stmt 0 view .LVU907
 3187 0096 38BD     		pop	{r3, r4, r5, pc}
 3188              	.LVL232:
 3189              	.L238:
 3190              	.LBB153:
1299:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3191              		.loc 1 1299 4 is_stmt 1 view .LVU908
1299:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3192              		.loc 1 1299 24 is_stmt 0 view .LVU909
 3193 0098 2C60     		str	r4, [r5]
1301:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3194              		.loc 1 1301 4 is_stmt 1 view .LVU910
 3195 009a EFE7     		b	.L234
 3196              	.L243:
 3197              		.align	2
 3198              	.L242:
 3199 009c 00000000 		.word	.LANCHOR16
 3200 00a0 00000000 		.word	.LANCHOR15
 3201              	.LBE153:
 3202              		.cfi_endproc
 3203              	.LFE9:
 3205              		.section	.text.vTaskDelay,"ax",%progbits
 3206              		.align	1
 3207              		.global	vTaskDelay
ARM GAS  /tmp/cc4Zpja9.s 			page 166


 3208              		.syntax unified
 3209              		.thumb
 3210              		.thumb_func
 3212              	vTaskDelay:
 3213              	.LVL233:
 3214              	.LFB10:
1334:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 3215              		.loc 1 1334 2 view -0
 3216              		.cfi_startproc
 3217              		@ args = 0, pretend = 0, frame = 0
 3218              		@ frame_needed = 0, uses_anonymous_args = 0
1334:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 3219              		.loc 1 1334 2 is_stmt 0 view .LVU912
 3220 0000 10B5     		push	{r4, lr}
 3221              	.LCFI27:
 3222              		.cfi_def_cfa_offset 8
 3223              		.cfi_offset 4, -8
 3224              		.cfi_offset 14, -4
1335:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3225              		.loc 1 1335 2 is_stmt 1 view .LVU913
 3226              	.LVL234:
1338:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3227              		.loc 1 1338 3 view .LVU914
1338:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3228              		.loc 1 1338 5 is_stmt 0 view .LVU915
 3229 0002 A8B1     		cbz	r0, .L245
 3230 0004 0446     		mov	r4, r0
1340:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3231              		.loc 1 1340 4 is_stmt 1 view .LVU916
 3232 0006 104B     		ldr	r3, .L250
 3233 0008 1B68     		ldr	r3, [r3]
 3234 000a 43B1     		cbz	r3, .L246
1340:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3235              		.loc 1 1340 4 view .LVU917
 3236              	.LBB154:
 3237              	.LBI154:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3238              		.loc 2 195 30 view .LVU918
 3239              	.LBB155:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3240              		.loc 2 197 1 view .LVU919
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3241              		.loc 2 199 2 view .LVU920
 3242              		.syntax unified
 3243              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3244 000c 4FF05003 			mov r3, #80												
 3245 0010 83F31188 		msr basepri, r3											
 3246 0014 BFF36F8F 		isb														
 3247 0018 BFF34F8F 		dsb														
 3248              	
 3249              	@ 0 "" 2
 3250              	.LVL235:
 3251              		.thumb
 3252              		.syntax unified
 3253              	.L247:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3254              		.loc 2 199 2 is_stmt 0 view .LVU921
ARM GAS  /tmp/cc4Zpja9.s 			page 167


 3255              	.LBE155:
 3256              	.LBE154:
1340:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3257              		.loc 1 1340 4 is_stmt 1 discriminator 1 view .LVU922
1340:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3258              		.loc 1 1340 4 discriminator 1 view .LVU923
1340:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3259              		.loc 1 1340 4 discriminator 1 view .LVU924
 3260 001c FEE7     		b	.L247
 3261              	.L246:
1340:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3262              		.loc 1 1340 45 discriminator 2 view .LVU925
1341:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3263              		.loc 1 1341 4 discriminator 2 view .LVU926
 3264 001e FFF7FEFF 		bl	vTaskSuspendAll
 3265              	.LVL236:
1343:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3266              		.loc 1 1343 22 discriminator 2 view .LVU927
1352:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3267              		.loc 1 1352 5 discriminator 2 view .LVU928
 3268 0022 0021     		movs	r1, #0
 3269 0024 2046     		mov	r0, r4
 3270 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3271              	.LVL237:
1354:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3272              		.loc 1 1354 4 discriminator 2 view .LVU929
1354:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3273              		.loc 1 1354 22 is_stmt 0 discriminator 2 view .LVU930
 3274 002a FFF7FEFF 		bl	xTaskResumeAll
 3275              	.LVL238:
1358:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3276              		.loc 1 1358 28 is_stmt 1 discriminator 2 view .LVU931
1363:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3277              		.loc 1 1363 3 discriminator 2 view .LVU932
1363:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3278              		.loc 1 1363 5 is_stmt 0 discriminator 2 view .LVU933
 3279 002e 48B9     		cbnz	r0, .L244
 3280              	.LVL239:
 3281              	.L245:
1365:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3282              		.loc 1 1365 4 is_stmt 1 view .LVU934
 3283 0030 4FF0E023 		mov	r3, #-536813568
 3284 0034 4FF08052 		mov	r2, #268435456
 3285 0038 C3F8042D 		str	r2, [r3, #3332]
1365:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3286              		.loc 1 1365 4 view .LVU935
 3287              		.syntax unified
 3288              	@ 1365 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 3289 003c BFF34F8F 		dsb
 3290              	@ 0 "" 2
1365:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3291              		.loc 1 1365 4 view .LVU936
 3292              	@ 1365 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 3293 0040 BFF36F8F 		isb
 3294              	@ 0 "" 2
1365:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3295              		.loc 1 1365 26 view .LVU937
ARM GAS  /tmp/cc4Zpja9.s 			page 168


1369:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3296              		.loc 1 1369 28 view .LVU938
 3297              		.thumb
 3298              		.syntax unified
 3299              	.L244:
1371:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3300              		.loc 1 1371 2 is_stmt 0 view .LVU939
 3301 0044 10BD     		pop	{r4, pc}
 3302              	.L251:
 3303 0046 00BF     		.align	2
 3304              	.L250:
 3305 0048 00000000 		.word	.LANCHOR16
 3306              		.cfi_endproc
 3307              	.LFE10:
 3309              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3310              		.align	1
 3311              		.global	vTaskSwitchContext
 3312              		.syntax unified
 3313              		.thumb
 3314              		.thumb_func
 3316              	vTaskSwitchContext:
 3317              	.LFB27:
2948:ThirdParty/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3318              		.loc 1 2948 1 is_stmt 1 view -0
 3319              		.cfi_startproc
 3320              		@ args = 0, pretend = 0, frame = 0
 3321              		@ frame_needed = 0, uses_anonymous_args = 0
 3322 0000 08B5     		push	{r3, lr}
 3323              	.LCFI28:
 3324              		.cfi_def_cfa_offset 8
 3325              		.cfi_offset 3, -8
 3326              		.cfi_offset 14, -4
2949:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 3327              		.loc 1 2949 2 view .LVU941
2949:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 3328              		.loc 1 2949 27 is_stmt 0 view .LVU942
 3329 0002 274B     		ldr	r3, .L262
 3330 0004 1B68     		ldr	r3, [r3]
2949:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 3331              		.loc 1 2949 4 view .LVU943
 3332 0006 1BB1     		cbz	r3, .L253
2953:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 3333              		.loc 1 2953 3 is_stmt 1 view .LVU944
2953:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 3334              		.loc 1 2953 17 is_stmt 0 view .LVU945
 3335 0008 264B     		ldr	r3, .L262+4
 3336 000a 0122     		movs	r2, #1
 3337 000c 1A60     		str	r2, [r3]
 3338              	.L252:
3017:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3339              		.loc 1 3017 1 view .LVU946
 3340 000e 08BD     		pop	{r3, pc}
 3341              	.L253:
2957:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3342              		.loc 1 2957 3 is_stmt 1 view .LVU947
2957:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3343              		.loc 1 2957 17 is_stmt 0 view .LVU948
ARM GAS  /tmp/cc4Zpja9.s 			page 169


 3344 0010 244B     		ldr	r3, .L262+4
 3345 0012 0022     		movs	r2, #0
 3346 0014 1A60     		str	r2, [r3]
2958:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3347              		.loc 1 2958 27 is_stmt 1 view .LVU949
2988:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3348              		.loc 1 2988 3 view .LVU950
 3349 0016 244B     		ldr	r3, .L262+8
 3350 0018 1A68     		ldr	r2, [r3]
 3351 001a 1268     		ldr	r2, [r2]
 3352 001c 1B68     		ldr	r3, [r3]
 3353 001e 1B6B     		ldr	r3, [r3, #48]
 3354 0020 9A42     		cmp	r2, r3
 3355 0022 15D9     		bls	.L260
 3356              	.L255:
2988:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3357              		.loc 1 2988 33 discriminator 3 view .LVU951
 3358              	.LBB156:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3359              		.loc 1 2999 3 discriminator 3 view .LVU952
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3360              		.loc 1 2999 3 discriminator 3 view .LVU953
 3361 0024 214B     		ldr	r3, .L262+12
 3362 0026 1B68     		ldr	r3, [r3]
 3363              	.LVL240:
 3364              	.LBB157:
 3365              	.LBI157:
 130:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 3366              		.loc 2 130 59 discriminator 3 view .LVU954
 3367              	.LBB158:
 132:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3368              		.loc 2 132 2 discriminator 3 view .LVU955
 134:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3369              		.loc 2 134 3 discriminator 3 view .LVU956
 3370              		.syntax unified
 3371              	@ 134 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3372 0028 B3FA83F3 		clz r3, r3
 3373              	@ 0 "" 2
 3374              	.LVL241:
 134:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3375              		.loc 2 134 3 is_stmt 0 discriminator 3 view .LVU957
 3376              		.thumb
 3377              		.syntax unified
 3378 002c DBB2     		uxtb	r3, r3
 3379              	.LVL242:
 135:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3380              		.loc 2 135 3 is_stmt 1 discriminator 3 view .LVU958
 135:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 3381              		.loc 2 135 3 is_stmt 0 discriminator 3 view .LVU959
 3382              	.LBE158:
 3383              	.LBE157:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3384              		.loc 1 2999 3 discriminator 3 view .LVU960
 3385 002e C3F11F03 		rsb	r3, r3, #31
 3386              	.LVL243:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3387              		.loc 1 2999 3 is_stmt 1 discriminator 3 view .LVU961
ARM GAS  /tmp/cc4Zpja9.s 			page 170


 3388 0032 03EB8301 		add	r1, r3, r3, lsl #2
 3389 0036 8A00     		lsls	r2, r1, #2
 3390 0038 1D49     		ldr	r1, .L262+16
 3391 003a 8A58     		ldr	r2, [r1, r2]
 3392 003c 7AB9     		cbnz	r2, .L256
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3393              		.loc 1 2999 3 view .LVU962
 3394              	.LBB159:
 3395              	.LBI159:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3396              		.loc 2 195 30 view .LVU963
 3397              	.LBB160:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3398              		.loc 2 197 1 view .LVU964
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3399              		.loc 2 199 2 view .LVU965
 3400              		.syntax unified
 3401              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3402 003e 4FF05003 			mov r3, #80												
 3403 0042 83F31188 		msr basepri, r3											
 3404 0046 BFF36F8F 		isb														
 3405 004a BFF34F8F 		dsb														
 3406              	
 3407              	@ 0 "" 2
 3408              	.LVL244:
 3409              		.thumb
 3410              		.syntax unified
 3411              	.L257:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3412              		.loc 2 199 2 is_stmt 0 view .LVU966
 3413              	.LBE160:
 3414              	.LBE159:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3415              		.loc 1 2999 3 is_stmt 1 discriminator 1 view .LVU967
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3416              		.loc 1 2999 3 discriminator 1 view .LVU968
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3417              		.loc 1 2999 3 discriminator 1 view .LVU969
 3418 004e FEE7     		b	.L257
 3419              	.L260:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3420              		.loc 1 2999 3 is_stmt 0 discriminator 1 view .LVU970
 3421              	.LBE156:
2988:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3422              		.loc 1 2988 3 is_stmt 1 discriminator 1 view .LVU971
 3423 0050 154B     		ldr	r3, .L262+8
 3424 0052 1868     		ldr	r0, [r3]
 3425 0054 1968     		ldr	r1, [r3]
 3426 0056 3431     		adds	r1, r1, #52
 3427 0058 FFF7FEFF 		bl	vApplicationStackOverflowHook
 3428              	.LVL245:
 3429 005c E2E7     		b	.L255
 3430              	.LVL246:
 3431              	.L256:
 3432              	.LBB163:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3433              		.loc 1 2999 3 discriminator 2 view .LVU972
ARM GAS  /tmp/cc4Zpja9.s 			page 171


 3434              	.LBB161:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3435              		.loc 1 2999 3 discriminator 2 view .LVU973
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3436              		.loc 1 2999 3 discriminator 2 view .LVU974
 3437 005e 1449     		ldr	r1, .L262+16
 3438 0060 03EB8300 		add	r0, r3, r3, lsl #2
 3439 0064 8200     		lsls	r2, r0, #2
 3440 0066 0A44     		add	r2, r2, r1
 3441 0068 5068     		ldr	r0, [r2, #4]
 3442 006a 4068     		ldr	r0, [r0, #4]
 3443 006c 5060     		str	r0, [r2, #4]
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3444              		.loc 1 2999 3 discriminator 2 view .LVU975
 3445 006e 03EB830C 		add	ip, r3, r3, lsl #2
 3446 0072 4FEA8C02 		lsl	r2, ip, #2
 3447 0076 0832     		adds	r2, r2, #8
 3448 0078 1144     		add	r1, r1, r2
 3449 007a 8842     		cmp	r0, r1
 3450 007c 09D0     		beq	.L261
 3451              	.L258:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3452              		.loc 1 2999 3 discriminator 6 view .LVU976
 3453 007e 03EB8303 		add	r3, r3, r3, lsl #2
 3454              	.LVL247:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3455              		.loc 1 2999 3 is_stmt 0 discriminator 6 view .LVU977
 3456 0082 9A00     		lsls	r2, r3, #2
 3457 0084 0A4B     		ldr	r3, .L262+16
 3458 0086 1344     		add	r3, r3, r2
 3459 0088 5B68     		ldr	r3, [r3, #4]
 3460 008a DA68     		ldr	r2, [r3, #12]
 3461 008c 064B     		ldr	r3, .L262+8
 3462 008e 1A60     		str	r2, [r3]
 3463              	.LBE161:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3464              		.loc 1 2999 3 is_stmt 1 discriminator 6 view .LVU978
 3465              	.LBE163:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3466              		.loc 1 2999 37 discriminator 6 view .LVU979
3000:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3467              		.loc 1 3000 26 discriminator 6 view .LVU980
3017:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3468              		.loc 1 3017 1 is_stmt 0 discriminator 6 view .LVU981
 3469 0090 BDE7     		b	.L252
 3470              	.LVL248:
 3471              	.L261:
 3472              	.LBB164:
 3473              	.LBB162:
2999:ThirdParty/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3474              		.loc 1 2999 3 is_stmt 1 discriminator 4 view .LVU982
 3475 0092 4068     		ldr	r0, [r0, #4]
 3476 0094 6246     		mov	r2, ip
 3477 0096 9100     		lsls	r1, r2, #2
 3478 0098 054A     		ldr	r2, .L262+16
 3479 009a 0A44     		add	r2, r2, r1
 3480 009c 5060     		str	r0, [r2, #4]
ARM GAS  /tmp/cc4Zpja9.s 			page 172


 3481 009e EEE7     		b	.L258
 3482              	.L263:
 3483              		.align	2
 3484              	.L262:
 3485 00a0 00000000 		.word	.LANCHOR16
 3486 00a4 00000000 		.word	.LANCHOR20
 3487 00a8 00000000 		.word	.LANCHOR10
 3488 00ac 00000000 		.word	.LANCHOR13
 3489 00b0 00000000 		.word	.LANCHOR4
 3490              	.LBE162:
 3491              	.LBE164:
 3492              		.cfi_endproc
 3493              	.LFE27:
 3495              		.section	.text.vTaskSuspend,"ax",%progbits
 3496              		.align	1
 3497              		.global	vTaskSuspend
 3498              		.syntax unified
 3499              		.thumb
 3500              		.thumb_func
 3502              	vTaskSuspend:
 3503              	.LVL249:
 3504              	.LFB14:
1697:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3505              		.loc 1 1697 2 view -0
 3506              		.cfi_startproc
 3507              		@ args = 0, pretend = 0, frame = 0
 3508              		@ frame_needed = 0, uses_anonymous_args = 0
1697:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3509              		.loc 1 1697 2 is_stmt 0 view .LVU984
 3510 0000 38B5     		push	{r3, r4, r5, lr}
 3511              	.LCFI29:
 3512              		.cfi_def_cfa_offset 16
 3513              		.cfi_offset 3, -16
 3514              		.cfi_offset 4, -12
 3515              		.cfi_offset 5, -8
 3516              		.cfi_offset 14, -4
 3517 0002 0446     		mov	r4, r0
1698:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3518              		.loc 1 1698 2 is_stmt 1 view .LVU985
1700:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3519              		.loc 1 1700 3 view .LVU986
 3520 0004 FFF7FEFF 		bl	vPortEnterCritical
 3521              	.LVL250:
1704:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3522              		.loc 1 1704 4 view .LVU987
1704:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3523              		.loc 1 1704 12 is_stmt 0 view .LVU988
 3524 0008 5CB3     		cbz	r4, .L276
 3525              	.LVL251:
 3526              	.L265:
1706:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3527              		.loc 1 1706 30 is_stmt 1 discriminator 4 view .LVU989
1710:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3528              		.loc 1 1710 4 discriminator 4 view .LVU990
1710:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3529              		.loc 1 1710 8 is_stmt 0 discriminator 4 view .LVU991
 3530 000a 251D     		adds	r5, r4, #4
ARM GAS  /tmp/cc4Zpja9.s 			page 173


 3531 000c 2846     		mov	r0, r5
 3532 000e FFF7FEFF 		bl	uxListRemove
 3533              	.LVL252:
1710:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3534              		.loc 1 1710 6 discriminator 4 view .LVU992
 3535 0012 68B9     		cbnz	r0, .L266
1712:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3536              		.loc 1 1712 5 is_stmt 1 view .LVU993
 3537 0014 E26A     		ldr	r2, [r4, #44]
 3538 0016 02EB8203 		add	r3, r2, r2, lsl #2
 3539 001a 9B00     		lsls	r3, r3, #2
 3540 001c 2B49     		ldr	r1, .L280
 3541 001e CB58     		ldr	r3, [r1, r3]
 3542 0020 33B9     		cbnz	r3, .L266
1712:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3543              		.loc 1 1712 5 discriminator 1 view .LVU994
 3544 0022 0123     		movs	r3, #1
 3545 0024 9340     		lsls	r3, r3, r2
 3546 0026 2A49     		ldr	r1, .L280+4
 3547 0028 0A68     		ldr	r2, [r1]
 3548 002a 22EA0302 		bic	r2, r2, r3
 3549 002e 0A60     		str	r2, [r1]
 3550              	.L266:
1716:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3551              		.loc 1 1716 29 view .LVU995
1720:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3552              		.loc 1 1720 4 view .LVU996
1720:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3553              		.loc 1 1720 8 is_stmt 0 view .LVU997
 3554 0030 A36A     		ldr	r3, [r4, #40]
1720:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3555              		.loc 1 1720 6 view .LVU998
 3556 0032 1BB1     		cbz	r3, .L267
1722:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3557              		.loc 1 1722 5 is_stmt 1 view .LVU999
1722:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3558              		.loc 1 1722 14 is_stmt 0 view .LVU1000
 3559 0034 04F11800 		add	r0, r4, #24
 3560 0038 FFF7FEFF 		bl	uxListRemove
 3561              	.LVL253:
 3562              	.L267:
1726:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3563              		.loc 1 1726 29 is_stmt 1 view .LVU1001
1729:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3564              		.loc 1 1729 4 view .LVU1002
 3565 003c 2946     		mov	r1, r5
 3566 003e 2548     		ldr	r0, .L280+8
 3567 0040 FFF7FEFF 		bl	vListInsertEnd
 3568              	.LVL254:
1733:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3569              		.loc 1 1733 5 view .LVU1003
1733:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3570              		.loc 1 1733 14 is_stmt 0 view .LVU1004
 3571 0044 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 3572 0048 DBB2     		uxtb	r3, r3
1733:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3573              		.loc 1 1733 7 view .LVU1005
ARM GAS  /tmp/cc4Zpja9.s 			page 174


 3574 004a 012B     		cmp	r3, #1
 3575 004c 0CD0     		beq	.L277
 3576              	.L268:
1742:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3577              		.loc 1 1742 3 is_stmt 1 view .LVU1006
 3578 004e FFF7FEFF 		bl	vPortExitCritical
 3579              	.LVL255:
1744:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3580              		.loc 1 1744 3 view .LVU1007
1744:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3581              		.loc 1 1744 25 is_stmt 0 view .LVU1008
 3582 0052 214B     		ldr	r3, .L280+12
 3583 0054 1B68     		ldr	r3, [r3]
1744:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3584              		.loc 1 1744 5 view .LVU1009
 3585 0056 5BB9     		cbnz	r3, .L278
 3586              	.L269:
1756:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3587              		.loc 1 1756 28 is_stmt 1 view .LVU1010
1759:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3588              		.loc 1 1759 3 view .LVU1011
1759:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3589              		.loc 1 1759 13 is_stmt 0 view .LVU1012
 3590 0058 204B     		ldr	r3, .L280+16
 3591 005a 1B68     		ldr	r3, [r3]
1759:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 3592              		.loc 1 1759 5 view .LVU1013
 3593 005c A342     		cmp	r3, r4
 3594 005e 0ED0     		beq	.L279
 3595              	.L264:
1790:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3596              		.loc 1 1790 2 view .LVU1014
 3597 0060 38BD     		pop	{r3, r4, r5, pc}
 3598              	.LVL256:
 3599              	.L276:
1704:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3600              		.loc 1 1704 12 discriminator 1 view .LVU1015
 3601 0062 1E4B     		ldr	r3, .L280+16
 3602 0064 1C68     		ldr	r4, [r3]
 3603              	.LVL257:
1704:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3604              		.loc 1 1704 12 discriminator 1 view .LVU1016
 3605 0066 D0E7     		b	.L265
 3606              	.LVL258:
 3607              	.L277:
1737:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 3608              		.loc 1 1737 6 is_stmt 1 view .LVU1017
1737:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 3609              		.loc 1 1737 27 is_stmt 0 view .LVU1018
 3610 0068 0023     		movs	r3, #0
 3611 006a 84F85030 		strb	r3, [r4, #80]
 3612 006e EEE7     		b	.L268
 3613              	.L278:
1748:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3614              		.loc 1 1748 4 is_stmt 1 view .LVU1019
 3615 0070 FFF7FEFF 		bl	vPortEnterCritical
 3616              	.LVL259:
ARM GAS  /tmp/cc4Zpja9.s 			page 175


1750:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3617              		.loc 1 1750 5 view .LVU1020
 3618 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3619              	.LVL260:
1752:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3620              		.loc 1 1752 4 view .LVU1021
 3621 0078 FFF7FEFF 		bl	vPortExitCritical
 3622              	.LVL261:
 3623 007c ECE7     		b	.L269
 3624              	.L279:
1761:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3625              		.loc 1 1761 4 view .LVU1022
1761:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3626              		.loc 1 1761 26 is_stmt 0 view .LVU1023
 3627 007e 164B     		ldr	r3, .L280+12
 3628 0080 1B68     		ldr	r3, [r3]
1761:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 3629              		.loc 1 1761 6 view .LVU1024
 3630 0082 B3B1     		cbz	r3, .L271
1764:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3631              		.loc 1 1764 5 is_stmt 1 view .LVU1025
 3632 0084 164B     		ldr	r3, .L280+20
 3633 0086 1B68     		ldr	r3, [r3]
 3634 0088 43B1     		cbz	r3, .L272
1764:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3635              		.loc 1 1764 5 view .LVU1026
 3636              	.LBB165:
 3637              	.LBI165:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3638              		.loc 2 195 30 view .LVU1027
 3639              	.LBB166:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3640              		.loc 2 197 1 view .LVU1028
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3641              		.loc 2 199 2 view .LVU1029
 3642              		.syntax unified
 3643              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3644 008a 4FF05003 			mov r3, #80												
 3645 008e 83F31188 		msr basepri, r3											
 3646 0092 BFF36F8F 		isb														
 3647 0096 BFF34F8F 		dsb														
 3648              	
 3649              	@ 0 "" 2
 3650              	.LVL262:
 3651              		.thumb
 3652              		.syntax unified
 3653              	.L273:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3654              		.loc 2 199 2 is_stmt 0 view .LVU1030
 3655              	.LBE166:
 3656              	.LBE165:
1764:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3657              		.loc 1 1764 5 is_stmt 1 discriminator 1 view .LVU1031
1764:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3658              		.loc 1 1764 5 discriminator 1 view .LVU1032
1764:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3659              		.loc 1 1764 5 discriminator 1 view .LVU1033
ARM GAS  /tmp/cc4Zpja9.s 			page 176


 3660 009a FEE7     		b	.L273
 3661              	.L272:
1764:ThirdParty/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3662              		.loc 1 1764 46 discriminator 2 view .LVU1034
1765:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3663              		.loc 1 1765 5 discriminator 2 view .LVU1035
 3664 009c 4FF0E023 		mov	r3, #-536813568
 3665 00a0 4FF08052 		mov	r2, #268435456
 3666 00a4 C3F8042D 		str	r2, [r3, #3332]
1765:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3667              		.loc 1 1765 5 discriminator 2 view .LVU1036
 3668              		.syntax unified
 3669              	@ 1765 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 3670 00a8 BFF34F8F 		dsb
 3671              	@ 0 "" 2
1765:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3672              		.loc 1 1765 5 discriminator 2 view .LVU1037
 3673              	@ 1765 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 3674 00ac BFF36F8F 		isb
 3675              	@ 0 "" 2
1765:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 3676              		.loc 1 1765 27 discriminator 2 view .LVU1038
 3677              		.thumb
 3678              		.syntax unified
 3679 00b0 D6E7     		b	.L264
 3680              	.L271:
1772:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3681              		.loc 1 1772 5 view .LVU1039
1772:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3682              		.loc 1 1772 9 is_stmt 0 view .LVU1040
 3683 00b2 084B     		ldr	r3, .L280+8
 3684 00b4 1A68     		ldr	r2, [r3]
1772:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3685              		.loc 1 1772 56 view .LVU1041
 3686 00b6 0B4B     		ldr	r3, .L280+24
 3687 00b8 1B68     		ldr	r3, [r3]
1772:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 3688              		.loc 1 1772 7 view .LVU1042
 3689 00ba 9A42     		cmp	r2, r3
 3690 00bc 03D1     		bne	.L274
1778:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 3691              		.loc 1 1778 6 is_stmt 1 view .LVU1043
1778:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 3692              		.loc 1 1778 19 is_stmt 0 view .LVU1044
 3693 00be 074B     		ldr	r3, .L280+16
 3694 00c0 0022     		movs	r2, #0
 3695 00c2 1A60     		str	r2, [r3]
 3696 00c4 CCE7     		b	.L264
 3697              	.L274:
1782:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 3698              		.loc 1 1782 6 is_stmt 1 view .LVU1045
 3699 00c6 FFF7FEFF 		bl	vTaskSwitchContext
 3700              	.LVL263:
1788:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 3701              		.loc 1 1788 28 view .LVU1046
1790:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3702              		.loc 1 1790 2 is_stmt 0 view .LVU1047
ARM GAS  /tmp/cc4Zpja9.s 			page 177


 3703 00ca C9E7     		b	.L264
 3704              	.L281:
 3705              		.align	2
 3706              	.L280:
 3707 00cc 00000000 		.word	.LANCHOR4
 3708 00d0 00000000 		.word	.LANCHOR13
 3709 00d4 00000000 		.word	.LANCHOR0
 3710 00d8 00000000 		.word	.LANCHOR11
 3711 00dc 00000000 		.word	.LANCHOR10
 3712 00e0 00000000 		.word	.LANCHOR16
 3713 00e4 00000000 		.word	.LANCHOR9
 3714              		.cfi_endproc
 3715              	.LFE14:
 3717              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3718              		.align	1
 3719              		.global	vTaskPlaceOnEventList
 3720              		.syntax unified
 3721              		.thumb
 3722              		.thumb_func
 3724              	vTaskPlaceOnEventList:
 3725              	.LVL264:
 3726              	.LFB28:
3021:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3727              		.loc 1 3021 1 is_stmt 1 view -0
 3728              		.cfi_startproc
 3729              		@ args = 0, pretend = 0, frame = 0
 3730              		@ frame_needed = 0, uses_anonymous_args = 0
3022:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3731              		.loc 1 3022 2 view .LVU1049
 3732 0000 58B1     		cbz	r0, .L287
3021:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3733              		.loc 1 3021 1 is_stmt 0 discriminator 2 view .LVU1050
 3734 0002 10B5     		push	{r4, lr}
 3735              	.LCFI30:
 3736              		.cfi_def_cfa_offset 8
 3737              		.cfi_offset 4, -8
 3738              		.cfi_offset 14, -4
 3739 0004 0C46     		mov	r4, r1
3022:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3740              		.loc 1 3022 29 is_stmt 1 discriminator 2 view .LVU1051
3031:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3741              		.loc 1 3031 2 discriminator 2 view .LVU1052
3031:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3742              		.loc 1 3031 43 is_stmt 0 discriminator 2 view .LVU1053
 3743 0006 094A     		ldr	r2, .L288
 3744 0008 1168     		ldr	r1, [r2]
 3745              	.LVL265:
3031:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3746              		.loc 1 3031 2 discriminator 2 view .LVU1054
 3747 000a 1831     		adds	r1, r1, #24
 3748 000c FFF7FEFF 		bl	vListInsert
 3749              	.LVL266:
3033:ThirdParty/FreeRTOS/Source/tasks.c **** }
 3750              		.loc 1 3033 2 is_stmt 1 discriminator 2 view .LVU1055
 3751 0010 0121     		movs	r1, #1
 3752 0012 2046     		mov	r0, r4
 3753 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  /tmp/cc4Zpja9.s 			page 178


 3754              	.LVL267:
3034:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3755              		.loc 1 3034 1 is_stmt 0 discriminator 2 view .LVU1056
 3756 0018 10BD     		pop	{r4, pc}
 3757              	.LVL268:
 3758              	.L287:
 3759              	.LCFI31:
 3760              		.cfi_def_cfa_offset 0
 3761              		.cfi_restore 4
 3762              		.cfi_restore 14
3022:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3763              		.loc 1 3022 2 is_stmt 1 view .LVU1057
 3764              	.LBB167:
 3765              	.LBI167:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3766              		.loc 2 195 30 view .LVU1058
 3767              	.LBB168:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3768              		.loc 2 197 1 view .LVU1059
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3769              		.loc 2 199 2 view .LVU1060
 3770              		.syntax unified
 3771              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3772 001a 4FF05003 			mov r3, #80												
 3773 001e 83F31188 		msr basepri, r3											
 3774 0022 BFF36F8F 		isb														
 3775 0026 BFF34F8F 		dsb														
 3776              	
 3777              	@ 0 "" 2
 3778              	.LVL269:
 3779              		.thumb
 3780              		.syntax unified
 3781              	.L284:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3782              		.loc 2 199 2 is_stmt 0 view .LVU1061
 3783              	.LBE168:
 3784              	.LBE167:
3022:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3785              		.loc 1 3022 2 is_stmt 1 discriminator 1 view .LVU1062
3022:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3786              		.loc 1 3022 2 discriminator 1 view .LVU1063
3022:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3787              		.loc 1 3022 2 discriminator 1 view .LVU1064
 3788 002a FEE7     		b	.L284
 3789              	.L289:
 3790              		.align	2
 3791              	.L288:
 3792 002c 00000000 		.word	.LANCHOR10
 3793              		.cfi_endproc
 3794              	.LFE28:
 3796              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3797              		.align	1
 3798              		.global	vTaskPlaceOnUnorderedEventList
 3799              		.syntax unified
 3800              		.thumb
 3801              		.thumb_func
 3803              	vTaskPlaceOnUnorderedEventList:
ARM GAS  /tmp/cc4Zpja9.s 			page 179


 3804              	.LVL270:
 3805              	.LFB29:
3038:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3806              		.loc 1 3038 1 view -0
 3807              		.cfi_startproc
 3808              		@ args = 0, pretend = 0, frame = 0
 3809              		@ frame_needed = 0, uses_anonymous_args = 0
3039:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3810              		.loc 1 3039 2 view .LVU1066
 3811 0000 70B1     		cbz	r0, .L297
3038:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3812              		.loc 1 3038 1 is_stmt 0 discriminator 2 view .LVU1067
 3813 0002 10B5     		push	{r4, lr}
 3814              	.LCFI32:
 3815              		.cfi_def_cfa_offset 8
 3816              		.cfi_offset 4, -8
 3817              		.cfi_offset 14, -4
 3818 0004 1446     		mov	r4, r2
 3819 0006 0246     		mov	r2, r0
 3820              	.LVL271:
3039:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3821              		.loc 1 3039 29 is_stmt 1 discriminator 2 view .LVU1068
3043:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3822              		.loc 1 3043 2 discriminator 2 view .LVU1069
 3823 0008 114B     		ldr	r3, .L298
 3824 000a 1B68     		ldr	r3, [r3]
 3825 000c 8BB9     		cbnz	r3, .L293
3043:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3826              		.loc 1 3043 2 view .LVU1070
 3827              	.LBB169:
 3828              	.LBI169:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3829              		.loc 2 195 30 view .LVU1071
 3830              	.LBB170:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3831              		.loc 2 197 1 view .LVU1072
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3832              		.loc 2 199 2 view .LVU1073
 3833              		.syntax unified
 3834              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3835 000e 4FF05003 			mov r3, #80												
 3836 0012 83F31188 		msr basepri, r3											
 3837 0016 BFF36F8F 		isb														
 3838 001a BFF34F8F 		dsb														
 3839              	
 3840              	@ 0 "" 2
 3841              	.LVL272:
 3842              		.thumb
 3843              		.syntax unified
 3844              	.L294:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3845              		.loc 2 199 2 is_stmt 0 view .LVU1074
 3846              	.LBE170:
 3847              	.LBE169:
3043:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3848              		.loc 1 3043 2 is_stmt 1 discriminator 2 view .LVU1075
3043:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 180


 3849              		.loc 1 3043 2 discriminator 2 view .LVU1076
3043:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3850              		.loc 1 3043 2 discriminator 2 view .LVU1077
 3851 001e FEE7     		b	.L294
 3852              	.LVL273:
 3853              	.L297:
 3854              	.LCFI33:
 3855              		.cfi_def_cfa_offset 0
 3856              		.cfi_restore 4
 3857              		.cfi_restore 14
3039:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3858              		.loc 1 3039 2 view .LVU1078
 3859              	.LBB171:
 3860              	.LBI171:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 3861              		.loc 2 195 30 view .LVU1079
 3862              	.LBB172:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 3863              		.loc 2 197 1 view .LVU1080
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3864              		.loc 2 199 2 view .LVU1081
 3865              		.syntax unified
 3866              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3867 0020 4FF05003 			mov r3, #80												
 3868 0024 83F31188 		msr basepri, r3											
 3869 0028 BFF36F8F 		isb														
 3870 002c BFF34F8F 		dsb														
 3871              	
 3872              	@ 0 "" 2
 3873              	.LVL274:
 3874              		.thumb
 3875              		.syntax unified
 3876              	.L292:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3877              		.loc 2 199 2 is_stmt 0 view .LVU1082
 3878              	.LBE172:
 3879              	.LBE171:
3039:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3880              		.loc 1 3039 2 is_stmt 1 discriminator 1 view .LVU1083
3039:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3881              		.loc 1 3039 2 discriminator 1 view .LVU1084
3039:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3882              		.loc 1 3039 2 discriminator 1 view .LVU1085
 3883 0030 FEE7     		b	.L292
 3884              	.LVL275:
 3885              	.L293:
 3886              	.LCFI34:
 3887              		.cfi_def_cfa_offset 8
 3888              		.cfi_offset 4, -8
 3889              		.cfi_offset 14, -4
3043:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3890              		.loc 1 3043 43 discriminator 2 view .LVU1086
3048:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3891              		.loc 1 3048 2 discriminator 2 view .LVU1087
 3892 0032 084B     		ldr	r3, .L298+4
 3893 0034 1868     		ldr	r0, [r3]
 3894              	.LVL276:
ARM GAS  /tmp/cc4Zpja9.s 			page 181


3048:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3895              		.loc 1 3048 2 is_stmt 0 discriminator 2 view .LVU1088
 3896 0036 41F00041 		orr	r1, r1, #-2147483648
 3897              	.LVL277:
3048:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3898              		.loc 1 3048 2 discriminator 2 view .LVU1089
 3899 003a 8161     		str	r1, [r0, #24]
3055:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3900              		.loc 1 3055 2 is_stmt 1 discriminator 2 view .LVU1090
3055:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3901              		.loc 1 3055 46 is_stmt 0 discriminator 2 view .LVU1091
 3902 003c 1968     		ldr	r1, [r3]
3055:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3903              		.loc 1 3055 2 discriminator 2 view .LVU1092
 3904 003e 1831     		adds	r1, r1, #24
 3905 0040 1046     		mov	r0, r2
 3906 0042 FFF7FEFF 		bl	vListInsertEnd
 3907              	.LVL278:
3057:ThirdParty/FreeRTOS/Source/tasks.c **** }
 3908              		.loc 1 3057 2 is_stmt 1 discriminator 2 view .LVU1093
 3909 0046 0121     		movs	r1, #1
 3910 0048 2046     		mov	r0, r4
 3911 004a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3912              	.LVL279:
3058:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3913              		.loc 1 3058 1 is_stmt 0 discriminator 2 view .LVU1094
 3914 004e 10BD     		pop	{r4, pc}
 3915              	.LVL280:
 3916              	.L299:
3058:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3917              		.loc 1 3058 1 discriminator 2 view .LVU1095
 3918              		.align	2
 3919              	.L298:
 3920 0050 00000000 		.word	.LANCHOR16
 3921 0054 00000000 		.word	.LANCHOR10
 3922              		.cfi_endproc
 3923              	.LFE29:
 3925              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3926              		.align	1
 3927              		.global	xTaskRemoveFromEventList
 3928              		.syntax unified
 3929              		.thumb
 3930              		.thumb_func
 3932              	xTaskRemoveFromEventList:
 3933              	.LVL281:
 3934              	.LFB30:
3095:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3935              		.loc 1 3095 1 is_stmt 1 view -0
 3936              		.cfi_startproc
 3937              		@ args = 0, pretend = 0, frame = 0
 3938              		@ frame_needed = 0, uses_anonymous_args = 0
3095:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3939              		.loc 1 3095 1 is_stmt 0 view .LVU1097
 3940 0000 38B5     		push	{r3, r4, r5, lr}
 3941              	.LCFI35:
 3942              		.cfi_def_cfa_offset 16
 3943              		.cfi_offset 3, -16
ARM GAS  /tmp/cc4Zpja9.s 			page 182


 3944              		.cfi_offset 4, -12
 3945              		.cfi_offset 5, -8
 3946              		.cfi_offset 14, -4
3096:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3947              		.loc 1 3096 1 is_stmt 1 view .LVU1098
3097:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3948              		.loc 1 3097 1 view .LVU1099
3112:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3949              		.loc 1 3112 2 view .LVU1100
3112:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3950              		.loc 1 3112 19 is_stmt 0 view .LVU1101
 3951 0002 C368     		ldr	r3, [r0, #12]
3112:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3952              		.loc 1 3112 17 view .LVU1102
 3953 0004 DC68     		ldr	r4, [r3, #12]
 3954              	.LVL282:
3113:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3955              		.loc 1 3113 2 is_stmt 1 view .LVU1103
 3956 0006 24B3     		cbz	r4, .L308
3113:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3957              		.loc 1 3113 32 discriminator 2 view .LVU1104
3114:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3958              		.loc 1 3114 2 discriminator 2 view .LVU1105
3114:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3959              		.loc 1 3114 11 is_stmt 0 discriminator 2 view .LVU1106
 3960 0008 04F11805 		add	r5, r4, #24
 3961 000c 2846     		mov	r0, r5
 3962              	.LVL283:
3114:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3963              		.loc 1 3114 11 discriminator 2 view .LVU1107
 3964 000e FFF7FEFF 		bl	uxListRemove
 3965              	.LVL284:
3116:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 3966              		.loc 1 3116 2 is_stmt 1 discriminator 2 view .LVU1108
3116:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 3967              		.loc 1 3116 27 is_stmt 0 discriminator 2 view .LVU1109
 3968 0012 184B     		ldr	r3, .L309
 3969 0014 1B68     		ldr	r3, [r3]
3116:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 3970              		.loc 1 3116 4 discriminator 2 view .LVU1110
 3971 0016 2BBB     		cbnz	r3, .L303
3118:ThirdParty/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3972              		.loc 1 3118 3 is_stmt 1 view .LVU1111
3118:ThirdParty/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3973              		.loc 1 3118 12 is_stmt 0 view .LVU1112
 3974 0018 251D     		adds	r5, r4, #4
 3975 001a 2846     		mov	r0, r5
 3976 001c FFF7FEFF 		bl	uxListRemove
 3977              	.LVL285:
3119:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3978              		.loc 1 3119 3 is_stmt 1 view .LVU1113
3119:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3979              		.loc 1 3119 3 view .LVU1114
 3980 0020 E06A     		ldr	r0, [r4, #44]
 3981 0022 0123     		movs	r3, #1
 3982 0024 8340     		lsls	r3, r3, r0
 3983 0026 144A     		ldr	r2, .L309+4
ARM GAS  /tmp/cc4Zpja9.s 			page 183


 3984 0028 1168     		ldr	r1, [r2]
 3985 002a 0B43     		orrs	r3, r3, r1
 3986 002c 1360     		str	r3, [r2]
3119:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3987              		.loc 1 3119 3 view .LVU1115
 3988 002e 00EB8000 		add	r0, r0, r0, lsl #2
 3989 0032 2946     		mov	r1, r5
 3990 0034 114B     		ldr	r3, .L309+8
 3991 0036 03EB8000 		add	r0, r3, r0, lsl #2
 3992 003a FFF7FEFF 		bl	vListInsertEnd
 3993              	.LVL286:
3119:ThirdParty/FreeRTOS/Source/tasks.c **** 
 3994              		.loc 1 3119 42 view .LVU1116
 3995              	.L304:
3142:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 3996              		.loc 1 3142 2 view .LVU1117
3142:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 3997              		.loc 1 3142 20 is_stmt 0 view .LVU1118
 3998 003e E26A     		ldr	r2, [r4, #44]
3142:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 3999              		.loc 1 3142 47 view .LVU1119
 4000 0040 0F4B     		ldr	r3, .L309+12
 4001 0042 1B68     		ldr	r3, [r3]
 4002 0044 DB6A     		ldr	r3, [r3, #44]
3142:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 4003              		.loc 1 3142 4 view .LVU1120
 4004 0046 9A42     		cmp	r2, r3
 4005 0048 11D9     		bls	.L306
3147:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4006              		.loc 1 3147 3 is_stmt 1 view .LVU1121
 4007              	.LVL287:
3151:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4008              		.loc 1 3151 3 view .LVU1122
3151:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4009              		.loc 1 3151 17 is_stmt 0 view .LVU1123
 4010 004a 0120     		movs	r0, #1
 4011 004c 0D4B     		ldr	r3, .L309+16
 4012 004e 1860     		str	r0, [r3]
 4013              	.LVL288:
 4014              	.L300:
3159:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4015              		.loc 1 3159 1 view .LVU1124
 4016 0050 38BD     		pop	{r3, r4, r5, pc}
 4017              	.LVL289:
 4018              	.L308:
3113:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4019              		.loc 1 3113 2 is_stmt 1 view .LVU1125
 4020              	.LBB173:
 4021              	.LBI173:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4022              		.loc 2 195 30 view .LVU1126
 4023              	.LBB174:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4024              		.loc 2 197 1 view .LVU1127
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4025              		.loc 2 199 2 view .LVU1128
 4026              		.syntax unified
ARM GAS  /tmp/cc4Zpja9.s 			page 184


 4027              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4028 0052 4FF05003 			mov r3, #80												
 4029 0056 83F31188 		msr basepri, r3											
 4030 005a BFF36F8F 		isb														
 4031 005e BFF34F8F 		dsb														
 4032              	
 4033              	@ 0 "" 2
 4034              	.LVL290:
 4035              		.thumb
 4036              		.syntax unified
 4037              	.L302:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4038              		.loc 2 199 2 is_stmt 0 view .LVU1129
 4039              	.LBE174:
 4040              	.LBE173:
3113:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4041              		.loc 1 3113 2 is_stmt 1 discriminator 1 view .LVU1130
3113:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4042              		.loc 1 3113 2 discriminator 1 view .LVU1131
3113:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4043              		.loc 1 3113 2 discriminator 1 view .LVU1132
 4044 0062 FEE7     		b	.L302
 4045              	.LVL291:
 4046              	.L303:
3139:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4047              		.loc 1 3139 3 view .LVU1133
 4048 0064 2946     		mov	r1, r5
 4049 0066 0848     		ldr	r0, .L309+20
 4050 0068 FFF7FEFF 		bl	vListInsertEnd
 4051              	.LVL292:
 4052 006c E7E7     		b	.L304
 4053              	.L306:
3155:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4054              		.loc 1 3155 11 is_stmt 0 view .LVU1134
 4055 006e 0020     		movs	r0, #0
 4056              	.LVL293:
3158:ThirdParty/FreeRTOS/Source/tasks.c **** }
 4057              		.loc 1 3158 2 is_stmt 1 view .LVU1135
3158:ThirdParty/FreeRTOS/Source/tasks.c **** }
 4058              		.loc 1 3158 9 is_stmt 0 view .LVU1136
 4059 0070 EEE7     		b	.L300
 4060              	.L310:
 4061 0072 00BF     		.align	2
 4062              	.L309:
 4063 0074 00000000 		.word	.LANCHOR16
 4064 0078 00000000 		.word	.LANCHOR13
 4065 007c 00000000 		.word	.LANCHOR4
 4066 0080 00000000 		.word	.LANCHOR10
 4067 0084 00000000 		.word	.LANCHOR20
 4068 0088 00000000 		.word	.LANCHOR1
 4069              		.cfi_endproc
 4070              	.LFE30:
 4072              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4073              		.align	1
 4074              		.global	vTaskRemoveFromUnorderedEventList
 4075              		.syntax unified
 4076              		.thumb
ARM GAS  /tmp/cc4Zpja9.s 			page 185


 4077              		.thumb_func
 4079              	vTaskRemoveFromUnorderedEventList:
 4080              	.LVL294:
 4081              	.LFB31:
3163:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 4082              		.loc 1 3163 1 is_stmt 1 view -0
 4083              		.cfi_startproc
 4084              		@ args = 0, pretend = 0, frame = 0
 4085              		@ frame_needed = 0, uses_anonymous_args = 0
3163:ThirdParty/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 4086              		.loc 1 3163 1 is_stmt 0 view .LVU1138
 4087 0000 38B5     		push	{r3, r4, r5, lr}
 4088              	.LCFI36:
 4089              		.cfi_def_cfa_offset 16
 4090              		.cfi_offset 3, -16
 4091              		.cfi_offset 4, -12
 4092              		.cfi_offset 5, -8
 4093              		.cfi_offset 14, -4
3164:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4094              		.loc 1 3164 1 is_stmt 1 view .LVU1139
3168:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4095              		.loc 1 3168 2 view .LVU1140
 4096 0002 1C4B     		ldr	r3, .L319
 4097 0004 1B68     		ldr	r3, [r3]
 4098 0006 43B9     		cbnz	r3, .L312
3168:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4099              		.loc 1 3168 2 view .LVU1141
 4100              	.LBB175:
 4101              	.LBI175:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4102              		.loc 2 195 30 view .LVU1142
 4103              	.LBB176:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4104              		.loc 2 197 1 view .LVU1143
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4105              		.loc 2 199 2 view .LVU1144
 4106              		.syntax unified
 4107              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4108 0008 4FF05003 			mov r3, #80												
 4109 000c 83F31188 		msr basepri, r3											
 4110 0010 BFF36F8F 		isb														
 4111 0014 BFF34F8F 		dsb														
 4112              	
 4113              	@ 0 "" 2
 4114              	.LVL295:
 4115              		.thumb
 4116              		.syntax unified
 4117              	.L313:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4118              		.loc 2 199 2 is_stmt 0 view .LVU1145
 4119              	.LBE176:
 4120              	.LBE175:
3168:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4121              		.loc 1 3168 2 is_stmt 1 discriminator 1 view .LVU1146
3168:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4122              		.loc 1 3168 2 discriminator 1 view .LVU1147
3168:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 186


 4123              		.loc 1 3168 2 discriminator 1 view .LVU1148
 4124 0018 FEE7     		b	.L313
 4125              	.L312:
3168:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4126              		.loc 1 3168 49 discriminator 2 view .LVU1149
3171:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4127              		.loc 1 3171 2 discriminator 2 view .LVU1150
 4128 001a 41F00041 		orr	r1, r1, #-2147483648
 4129              	.LVL296:
3171:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4130              		.loc 1 3171 2 is_stmt 0 discriminator 2 view .LVU1151
 4131 001e 0160     		str	r1, [r0]
3175:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4132              		.loc 1 3175 2 is_stmt 1 discriminator 2 view .LVU1152
3175:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4133              		.loc 1 3175 17 is_stmt 0 discriminator 2 view .LVU1153
 4134 0020 C468     		ldr	r4, [r0, #12]
 4135              	.LVL297:
3176:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4136              		.loc 1 3176 2 is_stmt 1 discriminator 2 view .LVU1154
 4137 0022 F4B1     		cbz	r4, .L318
3176:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4138              		.loc 1 3176 32 discriminator 2 view .LVU1155
3177:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4139              		.loc 1 3177 2 discriminator 2 view .LVU1156
3177:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4140              		.loc 1 3177 11 is_stmt 0 discriminator 2 view .LVU1157
 4141 0024 FFF7FEFF 		bl	uxListRemove
 4142              	.LVL298:
3182:ThirdParty/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4143              		.loc 1 3182 2 is_stmt 1 discriminator 2 view .LVU1158
3182:ThirdParty/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 4144              		.loc 1 3182 11 is_stmt 0 discriminator 2 view .LVU1159
 4145 0028 251D     		adds	r5, r4, #4
 4146 002a 2846     		mov	r0, r5
 4147 002c FFF7FEFF 		bl	uxListRemove
 4148              	.LVL299:
3183:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4149              		.loc 1 3183 2 is_stmt 1 discriminator 2 view .LVU1160
3183:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4150              		.loc 1 3183 2 discriminator 2 view .LVU1161
 4151 0030 E06A     		ldr	r0, [r4, #44]
 4152 0032 0123     		movs	r3, #1
 4153 0034 8340     		lsls	r3, r3, r0
 4154 0036 104A     		ldr	r2, .L319+4
 4155 0038 1168     		ldr	r1, [r2]
 4156 003a 0B43     		orrs	r3, r3, r1
 4157 003c 1360     		str	r3, [r2]
3183:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4158              		.loc 1 3183 2 discriminator 2 view .LVU1162
 4159 003e 00EB8000 		add	r0, r0, r0, lsl #2
 4160 0042 2946     		mov	r1, r5
 4161 0044 0D4B     		ldr	r3, .L319+8
 4162 0046 03EB8000 		add	r0, r3, r0, lsl #2
 4163 004a FFF7FEFF 		bl	vListInsertEnd
 4164              	.LVL300:
3183:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 187


 4165              		.loc 1 3183 41 discriminator 2 view .LVU1163
3185:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 4166              		.loc 1 3185 2 discriminator 2 view .LVU1164
3185:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 4167              		.loc 1 3185 20 is_stmt 0 discriminator 2 view .LVU1165
 4168 004e E26A     		ldr	r2, [r4, #44]
3185:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 4169              		.loc 1 3185 47 discriminator 2 view .LVU1166
 4170 0050 0B4B     		ldr	r3, .L319+12
 4171 0052 1B68     		ldr	r3, [r3]
 4172 0054 DB6A     		ldr	r3, [r3, #44]
3185:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 4173              		.loc 1 3185 4 discriminator 2 view .LVU1167
 4174 0056 9A42     		cmp	r2, r3
 4175 0058 02D9     		bls	.L311
3191:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4176              		.loc 1 3191 3 is_stmt 1 view .LVU1168
3191:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4177              		.loc 1 3191 17 is_stmt 0 view .LVU1169
 4178 005a 0A4B     		ldr	r3, .L319+16
 4179 005c 0122     		movs	r2, #1
 4180 005e 1A60     		str	r2, [r3]
 4181              	.L311:
3193:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4182              		.loc 1 3193 1 view .LVU1170
 4183 0060 38BD     		pop	{r3, r4, r5, pc}
 4184              	.LVL301:
 4185              	.L318:
3176:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4186              		.loc 1 3176 2 is_stmt 1 view .LVU1171
 4187              	.LBB177:
 4188              	.LBI177:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4189              		.loc 2 195 30 view .LVU1172
 4190              	.LBB178:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4191              		.loc 2 197 1 view .LVU1173
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4192              		.loc 2 199 2 view .LVU1174
 4193              		.syntax unified
 4194              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4195 0062 4FF05003 			mov r3, #80												
 4196 0066 83F31188 		msr basepri, r3											
 4197 006a BFF36F8F 		isb														
 4198 006e BFF34F8F 		dsb														
 4199              	
 4200              	@ 0 "" 2
 4201              	.LVL302:
 4202              		.thumb
 4203              		.syntax unified
 4204              	.L315:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4205              		.loc 2 199 2 is_stmt 0 view .LVU1175
 4206              	.LBE178:
 4207              	.LBE177:
3176:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4208              		.loc 1 3176 2 is_stmt 1 discriminator 2 view .LVU1176
ARM GAS  /tmp/cc4Zpja9.s 			page 188


3176:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4209              		.loc 1 3176 2 discriminator 2 view .LVU1177
3176:ThirdParty/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 4210              		.loc 1 3176 2 discriminator 2 view .LVU1178
 4211 0072 FEE7     		b	.L315
 4212              	.L320:
 4213              		.align	2
 4214              	.L319:
 4215 0074 00000000 		.word	.LANCHOR16
 4216 0078 00000000 		.word	.LANCHOR13
 4217 007c 00000000 		.word	.LANCHOR4
 4218 0080 00000000 		.word	.LANCHOR10
 4219 0084 00000000 		.word	.LANCHOR20
 4220              		.cfi_endproc
 4221              	.LFE31:
 4223              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4224              		.align	1
 4225              		.global	vTaskSetTimeOutState
 4226              		.syntax unified
 4227              		.thumb
 4228              		.thumb_func
 4230              	vTaskSetTimeOutState:
 4231              	.LVL303:
 4232              	.LFB32:
3197:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4233              		.loc 1 3197 1 view -0
 4234              		.cfi_startproc
 4235              		@ args = 0, pretend = 0, frame = 0
 4236              		@ frame_needed = 0, uses_anonymous_args = 0
3198:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4237              		.loc 1 3198 2 view .LVU1180
 4238 0000 60B1     		cbz	r0, .L326
3197:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 4239              		.loc 1 3197 1 is_stmt 0 discriminator 2 view .LVU1181
 4240 0002 10B5     		push	{r4, lr}
 4241              	.LCFI37:
 4242              		.cfi_def_cfa_offset 8
 4243              		.cfi_offset 4, -8
 4244              		.cfi_offset 14, -4
 4245 0004 0446     		mov	r4, r0
3198:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4246              		.loc 1 3198 27 is_stmt 1 discriminator 2 view .LVU1182
3199:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 4247              		.loc 1 3199 2 discriminator 2 view .LVU1183
 4248 0006 FFF7FEFF 		bl	vPortEnterCritical
 4249              	.LVL304:
3201:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4250              		.loc 1 3201 3 discriminator 2 view .LVU1184
3201:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 4251              		.loc 1 3201 29 is_stmt 0 discriminator 2 view .LVU1185
 4252 000a 094B     		ldr	r3, .L327
 4253 000c 1B68     		ldr	r3, [r3]
 4254 000e 2360     		str	r3, [r4]
3202:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4255              		.loc 1 3202 3 is_stmt 1 discriminator 2 view .LVU1186
3202:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4256              		.loc 1 3202 30 is_stmt 0 discriminator 2 view .LVU1187
ARM GAS  /tmp/cc4Zpja9.s 			page 189


 4257 0010 084B     		ldr	r3, .L327+4
 4258 0012 1B68     		ldr	r3, [r3]
 4259 0014 6360     		str	r3, [r4, #4]
3204:ThirdParty/FreeRTOS/Source/tasks.c **** }
 4260              		.loc 1 3204 2 is_stmt 1 discriminator 2 view .LVU1188
 4261 0016 FFF7FEFF 		bl	vPortExitCritical
 4262              	.LVL305:
3205:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4263              		.loc 1 3205 1 is_stmt 0 discriminator 2 view .LVU1189
 4264 001a 10BD     		pop	{r4, pc}
 4265              	.LVL306:
 4266              	.L326:
 4267              	.LCFI38:
 4268              		.cfi_def_cfa_offset 0
 4269              		.cfi_restore 4
 4270              		.cfi_restore 14
3198:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4271              		.loc 1 3198 2 is_stmt 1 view .LVU1190
 4272              	.LBB179:
 4273              	.LBI179:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4274              		.loc 2 195 30 view .LVU1191
 4275              	.LBB180:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4276              		.loc 2 197 1 view .LVU1192
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4277              		.loc 2 199 2 view .LVU1193
 4278              		.syntax unified
 4279              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4280 001c 4FF05003 			mov r3, #80												
 4281 0020 83F31188 		msr basepri, r3											
 4282 0024 BFF36F8F 		isb														
 4283 0028 BFF34F8F 		dsb														
 4284              	
 4285              	@ 0 "" 2
 4286              	.LVL307:
 4287              		.thumb
 4288              		.syntax unified
 4289              	.L323:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4290              		.loc 2 199 2 is_stmt 0 view .LVU1194
 4291              	.LBE180:
 4292              	.LBE179:
3198:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4293              		.loc 1 3198 2 is_stmt 1 discriminator 1 view .LVU1195
3198:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4294              		.loc 1 3198 2 discriminator 1 view .LVU1196
3198:ThirdParty/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 4295              		.loc 1 3198 2 discriminator 1 view .LVU1197
 4296 002c FEE7     		b	.L323
 4297              	.L328:
 4298 002e 00BF     		.align	2
 4299              	.L327:
 4300 0030 00000000 		.word	.LANCHOR18
 4301 0034 00000000 		.word	.LANCHOR15
 4302              		.cfi_endproc
 4303              	.LFE32:
ARM GAS  /tmp/cc4Zpja9.s 			page 190


 4305              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 4306              		.align	1
 4307              		.global	vTaskInternalSetTimeOutState
 4308              		.syntax unified
 4309              		.thumb
 4310              		.thumb_func
 4312              	vTaskInternalSetTimeOutState:
 4313              	.LVL308:
 4314              	.LFB33:
3209:ThirdParty/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 4315              		.loc 1 3209 1 view -0
 4316              		.cfi_startproc
 4317              		@ args = 0, pretend = 0, frame = 0
 4318              		@ frame_needed = 0, uses_anonymous_args = 0
 4319              		@ link register save eliminated.
3211:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4320              		.loc 1 3211 2 view .LVU1199
3211:ThirdParty/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4321              		.loc 1 3211 28 is_stmt 0 view .LVU1200
 4322 0000 034B     		ldr	r3, .L330
 4323 0002 1B68     		ldr	r3, [r3]
 4324 0004 0360     		str	r3, [r0]
3212:ThirdParty/FreeRTOS/Source/tasks.c **** }
 4325              		.loc 1 3212 2 is_stmt 1 view .LVU1201
3212:ThirdParty/FreeRTOS/Source/tasks.c **** }
 4326              		.loc 1 3212 29 is_stmt 0 view .LVU1202
 4327 0006 034B     		ldr	r3, .L330+4
 4328 0008 1B68     		ldr	r3, [r3]
 4329 000a 4360     		str	r3, [r0, #4]
3213:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4330              		.loc 1 3213 1 view .LVU1203
 4331 000c 7047     		bx	lr
 4332              	.L331:
 4333 000e 00BF     		.align	2
 4334              	.L330:
 4335 0010 00000000 		.word	.LANCHOR18
 4336 0014 00000000 		.word	.LANCHOR15
 4337              		.cfi_endproc
 4338              	.LFE33:
 4340              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4341              		.align	1
 4342              		.global	xTaskCheckForTimeOut
 4343              		.syntax unified
 4344              		.thumb
 4345              		.thumb_func
 4347              	xTaskCheckForTimeOut:
 4348              	.LVL309:
 4349              	.LFB34:
3217:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 4350              		.loc 1 3217 1 is_stmt 1 view -0
 4351              		.cfi_startproc
 4352              		@ args = 0, pretend = 0, frame = 0
 4353              		@ frame_needed = 0, uses_anonymous_args = 0
3217:ThirdParty/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 4354              		.loc 1 3217 1 is_stmt 0 view .LVU1205
 4355 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4356              	.LCFI39:
ARM GAS  /tmp/cc4Zpja9.s 			page 191


 4357              		.cfi_def_cfa_offset 24
 4358              		.cfi_offset 3, -24
 4359              		.cfi_offset 4, -20
 4360              		.cfi_offset 5, -16
 4361              		.cfi_offset 6, -12
 4362              		.cfi_offset 7, -8
 4363              		.cfi_offset 14, -4
3218:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4364              		.loc 1 3218 1 is_stmt 1 view .LVU1206
3220:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4365              		.loc 1 3220 2 view .LVU1207
 4366 0002 C8B1     		cbz	r0, .L343
 4367 0004 0C46     		mov	r4, r1
 4368 0006 0546     		mov	r5, r0
3220:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4369              		.loc 1 3220 27 discriminator 2 view .LVU1208
3221:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4370              		.loc 1 3221 2 discriminator 2 view .LVU1209
 4371 0008 F9B1     		cbz	r1, .L344
3221:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4372              		.loc 1 3221 31 discriminator 2 view .LVU1210
3223:ThirdParty/FreeRTOS/Source/tasks.c **** 	{
 4373              		.loc 1 3223 2 discriminator 2 view .LVU1211
 4374 000a FFF7FEFF 		bl	vPortEnterCritical
 4375              	.LVL310:
 4376              	.LBB181:
3226:ThirdParty/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4377              		.loc 1 3226 3 discriminator 2 view .LVU1212
3226:ThirdParty/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 4378              		.loc 1 3226 20 is_stmt 0 discriminator 2 view .LVU1213
 4379 000e 1B4B     		ldr	r3, .L346
 4380 0010 1968     		ldr	r1, [r3]
 4381              	.LVL311:
3227:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4382              		.loc 1 3227 3 is_stmt 1 discriminator 2 view .LVU1214
3227:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4383              		.loc 1 3227 62 is_stmt 0 discriminator 2 view .LVU1215
 4384 0012 6B68     		ldr	r3, [r5, #4]
3227:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4385              		.loc 1 3227 20 discriminator 2 view .LVU1216
 4386 0014 C81A     		subs	r0, r1, r3
 4387              	.LVL312:
3241:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4388              		.loc 1 3241 4 is_stmt 1 discriminator 2 view .LVU1217
3241:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4389              		.loc 1 3241 8 is_stmt 0 discriminator 2 view .LVU1218
 4390 0016 2268     		ldr	r2, [r4]
3241:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4391              		.loc 1 3241 6 discriminator 2 view .LVU1219
 4392 0018 B2F1FF3F 		cmp	r2, #-1
 4393 001c 26D0     		beq	.L340
3251:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4394              		.loc 1 3251 3 is_stmt 1 view .LVU1220
3251:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4395              		.loc 1 3251 25 is_stmt 0 view .LVU1221
 4396 001e 184E     		ldr	r6, .L346+4
 4397 0020 3668     		ldr	r6, [r6]
ARM GAS  /tmp/cc4Zpja9.s 			page 192


3251:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4398              		.loc 1 3251 5 view .LVU1222
 4399 0022 2F68     		ldr	r7, [r5]
 4400 0024 B742     		cmp	r7, r6
 4401 0026 01D0     		beq	.L338
3251:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4402              		.loc 1 3251 56 discriminator 1 view .LVU1223
 4403 0028 8B42     		cmp	r3, r1
 4404 002a 24D9     		bls	.L341
 4405              	.L338:
3260:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4406              		.loc 1 3260 8 is_stmt 1 view .LVU1224
3260:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4407              		.loc 1 3260 10 is_stmt 0 view .LVU1225
 4408 002c 8242     		cmp	r2, r0
 4409 002e 15D8     		bhi	.L345
3269:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4410              		.loc 1 3269 4 is_stmt 1 view .LVU1226
3269:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4411              		.loc 1 3269 19 is_stmt 0 view .LVU1227
 4412 0030 0023     		movs	r3, #0
 4413 0032 2360     		str	r3, [r4]
3270:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4414              		.loc 1 3270 4 is_stmt 1 view .LVU1228
 4415              	.LVL313:
3270:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4416              		.loc 1 3270 12 is_stmt 0 view .LVU1229
 4417 0034 0124     		movs	r4, #1
 4418              	.LVL314:
3270:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4419              		.loc 1 3270 12 view .LVU1230
 4420 0036 1AE0     		b	.L337
 4421              	.LVL315:
 4422              	.L343:
3270:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4423              		.loc 1 3270 12 view .LVU1231
 4424              	.LBE181:
3220:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4425              		.loc 1 3220 2 is_stmt 1 view .LVU1232
 4426              	.LBB182:
 4427              	.LBI182:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4428              		.loc 2 195 30 view .LVU1233
 4429              	.LBB183:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4430              		.loc 2 197 1 view .LVU1234
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4431              		.loc 2 199 2 view .LVU1235
 4432              		.syntax unified
 4433              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4434 0038 4FF05003 			mov r3, #80												
 4435 003c 83F31188 		msr basepri, r3											
 4436 0040 BFF36F8F 		isb														
 4437 0044 BFF34F8F 		dsb														
 4438              	
 4439              	@ 0 "" 2
 4440              	.LVL316:
ARM GAS  /tmp/cc4Zpja9.s 			page 193


 4441              		.thumb
 4442              		.syntax unified
 4443              	.L334:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4444              		.loc 2 199 2 is_stmt 0 view .LVU1236
 4445              	.LBE183:
 4446              	.LBE182:
3220:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4447              		.loc 1 3220 2 is_stmt 1 discriminator 1 view .LVU1237
3220:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4448              		.loc 1 3220 2 discriminator 1 view .LVU1238
3220:ThirdParty/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 4449              		.loc 1 3220 2 discriminator 1 view .LVU1239
 4450 0048 FEE7     		b	.L334
 4451              	.L344:
3221:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4452              		.loc 1 3221 2 view .LVU1240
 4453              	.LBB184:
 4454              	.LBI184:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4455              		.loc 2 195 30 view .LVU1241
 4456              	.LBB185:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4457              		.loc 2 197 1 view .LVU1242
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4458              		.loc 2 199 2 view .LVU1243
 4459              		.syntax unified
 4460              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4461 004a 4FF05003 			mov r3, #80												
 4462 004e 83F31188 		msr basepri, r3											
 4463 0052 BFF36F8F 		isb														
 4464 0056 BFF34F8F 		dsb														
 4465              	
 4466              	@ 0 "" 2
 4467              	.LVL317:
 4468              		.thumb
 4469              		.syntax unified
 4470              	.L336:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4471              		.loc 2 199 2 is_stmt 0 view .LVU1244
 4472              	.LBE185:
 4473              	.LBE184:
3221:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4474              		.loc 1 3221 2 is_stmt 1 discriminator 2 view .LVU1245
3221:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4475              		.loc 1 3221 2 discriminator 2 view .LVU1246
3221:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4476              		.loc 1 3221 2 discriminator 2 view .LVU1247
 4477 005a FEE7     		b	.L336
 4478              	.LVL318:
 4479              	.L345:
 4480              	.LBB186:
3263:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4481              		.loc 1 3263 4 view .LVU1248
3263:ThirdParty/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4482              		.loc 1 3263 19 is_stmt 0 view .LVU1249
 4483 005c 5B1A     		subs	r3, r3, r1
ARM GAS  /tmp/cc4Zpja9.s 			page 194


 4484 005e 1344     		add	r3, r3, r2
 4485 0060 2360     		str	r3, [r4]
3264:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4486              		.loc 1 3264 4 is_stmt 1 view .LVU1250
 4487 0062 2846     		mov	r0, r5
 4488              	.LVL319:
3264:ThirdParty/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4489              		.loc 1 3264 4 is_stmt 0 view .LVU1251
 4490 0064 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4491              	.LVL320:
3265:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4492              		.loc 1 3265 4 is_stmt 1 view .LVU1252
3265:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4493              		.loc 1 3265 12 is_stmt 0 view .LVU1253
 4494 0068 0024     		movs	r4, #0
 4495              	.LVL321:
3265:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4496              		.loc 1 3265 12 view .LVU1254
 4497 006a 00E0     		b	.L337
 4498              	.LVL322:
 4499              	.L340:
3246:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 4500              		.loc 1 3246 13 view .LVU1255
 4501 006c 0024     		movs	r4, #0
 4502              	.LVL323:
 4503              	.L337:
3246:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 4504              		.loc 1 3246 13 view .LVU1256
 4505              	.LBE186:
3273:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4506              		.loc 1 3273 2 is_stmt 1 view .LVU1257
 4507 006e FFF7FEFF 		bl	vPortExitCritical
 4508              	.LVL324:
3275:ThirdParty/FreeRTOS/Source/tasks.c **** }
 4509              		.loc 1 3275 2 view .LVU1258
3276:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4510              		.loc 1 3276 1 is_stmt 0 view .LVU1259
 4511 0072 2046     		mov	r0, r4
 4512 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4513              	.LVL325:
 4514              	.L341:
 4515              	.LBB187:
3258:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4516              		.loc 1 3258 12 view .LVU1260
 4517 0076 0124     		movs	r4, #1
 4518              	.LVL326:
3258:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4519              		.loc 1 3258 12 view .LVU1261
 4520 0078 F9E7     		b	.L337
 4521              	.L347:
 4522 007a 00BF     		.align	2
 4523              	.L346:
 4524 007c 00000000 		.word	.LANCHOR15
 4525 0080 00000000 		.word	.LANCHOR18
 4526              	.LBE187:
 4527              		.cfi_endproc
 4528              	.LFE34:
ARM GAS  /tmp/cc4Zpja9.s 			page 195


 4530              		.section	.text.vTaskMissedYield,"ax",%progbits
 4531              		.align	1
 4532              		.global	vTaskMissedYield
 4533              		.syntax unified
 4534              		.thumb
 4535              		.thumb_func
 4537              	vTaskMissedYield:
 4538              	.LFB35:
3280:ThirdParty/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4539              		.loc 1 3280 1 is_stmt 1 view -0
 4540              		.cfi_startproc
 4541              		@ args = 0, pretend = 0, frame = 0
 4542              		@ frame_needed = 0, uses_anonymous_args = 0
 4543              		@ link register save eliminated.
3281:ThirdParty/FreeRTOS/Source/tasks.c **** }
 4544              		.loc 1 3281 2 view .LVU1263
3281:ThirdParty/FreeRTOS/Source/tasks.c **** }
 4545              		.loc 1 3281 16 is_stmt 0 view .LVU1264
 4546 0000 014B     		ldr	r3, .L349
 4547 0002 0122     		movs	r2, #1
 4548 0004 1A60     		str	r2, [r3]
3282:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4549              		.loc 1 3282 1 view .LVU1265
 4550 0006 7047     		bx	lr
 4551              	.L350:
 4552              		.align	2
 4553              	.L349:
 4554 0008 00000000 		.word	.LANCHOR20
 4555              		.cfi_endproc
 4556              	.LFE35:
 4558              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4559              		.align	1
 4560              		.global	uxTaskGetStackHighWaterMark
 4561              		.syntax unified
 4562              		.thumb
 4563              		.thumb_func
 4565              	uxTaskGetStackHighWaterMark:
 4566              	.LVL327:
 4567              	.LFB40:
3799:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4568              		.loc 1 3799 2 is_stmt 1 view -0
 4569              		.cfi_startproc
 4570              		@ args = 0, pretend = 0, frame = 0
 4571              		@ frame_needed = 0, uses_anonymous_args = 0
3799:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4572              		.loc 1 3799 2 is_stmt 0 view .LVU1267
 4573 0000 08B5     		push	{r3, lr}
 4574              	.LCFI40:
 4575              		.cfi_def_cfa_offset 8
 4576              		.cfi_offset 3, -8
 4577              		.cfi_offset 14, -4
3800:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
 4578              		.loc 1 3800 2 is_stmt 1 view .LVU1268
3801:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4579              		.loc 1 3801 2 view .LVU1269
3802:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4580              		.loc 1 3802 2 view .LVU1270
ARM GAS  /tmp/cc4Zpja9.s 			page 196


3804:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4581              		.loc 1 3804 3 view .LVU1271
3804:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4582              		.loc 1 3804 11 is_stmt 0 view .LVU1272
 4583 0002 0346     		mov	r3, r0
 4584 0004 18B1     		cbz	r0, .L354
 4585              	.LVL328:
 4586              	.L352:
3808:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4587              		.loc 1 3808 4 is_stmt 1 discriminator 4 view .LVU1273
3816:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4588              		.loc 1 3816 3 discriminator 4 view .LVU1274
3816:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4589              		.loc 1 3816 30 is_stmt 0 discriminator 4 view .LVU1275
 4590 0006 186B     		ldr	r0, [r3, #48]
 4591 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4592              	.LVL329:
3818:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4593              		.loc 1 3818 3 is_stmt 1 discriminator 4 view .LVU1276
3819:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4594              		.loc 1 3819 2 is_stmt 0 discriminator 4 view .LVU1277
 4595 000c 08BD     		pop	{r3, pc}
 4596              	.LVL330:
 4597              	.L354:
3804:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4598              		.loc 1 3804 11 discriminator 1 view .LVU1278
 4599 000e 014B     		ldr	r3, .L355
 4600 0010 1B68     		ldr	r3, [r3]
 4601              	.LVL331:
3804:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4602              		.loc 1 3804 11 discriminator 1 view .LVU1279
 4603 0012 F8E7     		b	.L352
 4604              	.L356:
 4605              		.align	2
 4606              	.L355:
 4607 0014 00000000 		.word	.LANCHOR10
 4608              		.cfi_endproc
 4609              	.LFE40:
 4611              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4612              		.align	1
 4613              		.global	xTaskGetCurrentTaskHandle
 4614              		.syntax unified
 4615              		.thumb
 4616              		.thumb_func
 4618              	xTaskGetCurrentTaskHandle:
 4619              	.LFB43:
3907:ThirdParty/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4620              		.loc 1 3907 2 is_stmt 1 view -0
 4621              		.cfi_startproc
 4622              		@ args = 0, pretend = 0, frame = 0
 4623              		@ frame_needed = 0, uses_anonymous_args = 0
 4624              		@ link register save eliminated.
3908:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4625              		.loc 1 3908 2 view .LVU1281
3913:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4626              		.loc 1 3913 3 view .LVU1282
3913:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 197


 4627              		.loc 1 3913 11 is_stmt 0 view .LVU1283
 4628 0000 014B     		ldr	r3, .L358
 4629 0002 1868     		ldr	r0, [r3]
 4630              	.LVL332:
3915:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4631              		.loc 1 3915 3 is_stmt 1 view .LVU1284
3916:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4632              		.loc 1 3916 2 is_stmt 0 view .LVU1285
 4633 0004 7047     		bx	lr
 4634              	.L359:
 4635 0006 00BF     		.align	2
 4636              	.L358:
 4637 0008 00000000 		.word	.LANCHOR10
 4638              		.cfi_endproc
 4639              	.LFE43:
 4641              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4642              		.align	1
 4643              		.global	xTaskGetSchedulerState
 4644              		.syntax unified
 4645              		.thumb
 4646              		.thumb_func
 4648              	xTaskGetSchedulerState:
 4649              	.LFB44:
3924:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4650              		.loc 1 3924 2 is_stmt 1 view -0
 4651              		.cfi_startproc
 4652              		@ args = 0, pretend = 0, frame = 0
 4653              		@ frame_needed = 0, uses_anonymous_args = 0
 4654              		@ link register save eliminated.
3925:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4655              		.loc 1 3925 2 view .LVU1287
3927:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4656              		.loc 1 3927 3 view .LVU1288
3927:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4657              		.loc 1 3927 25 is_stmt 0 view .LVU1289
 4658 0000 054B     		ldr	r3, .L365
 4659 0002 1B68     		ldr	r3, [r3]
3927:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4660              		.loc 1 3927 5 view .LVU1290
 4661 0004 33B1     		cbz	r3, .L362
3933:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4662              		.loc 1 3933 4 is_stmt 1 view .LVU1291
3933:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4663              		.loc 1 3933 29 is_stmt 0 view .LVU1292
 4664 0006 054B     		ldr	r3, .L365+4
 4665 0008 1B68     		ldr	r3, [r3]
3933:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4666              		.loc 1 3933 6 view .LVU1293
 4667 000a 0BB1     		cbz	r3, .L364
3939:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 4668              		.loc 1 3939 13 view .LVU1294
 4669 000c 0020     		movs	r0, #0
 4670              	.LVL333:
3943:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4671              		.loc 1 3943 3 is_stmt 1 view .LVU1295
3944:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4672              		.loc 1 3944 2 is_stmt 0 view .LVU1296
ARM GAS  /tmp/cc4Zpja9.s 			page 198


 4673 000e 7047     		bx	lr
 4674              	.LVL334:
 4675              	.L364:
3935:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 4676              		.loc 1 3935 13 view .LVU1297
 4677 0010 0220     		movs	r0, #2
 4678 0012 7047     		bx	lr
 4679              	.L362:
3929:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4680              		.loc 1 3929 12 view .LVU1298
 4681 0014 0120     		movs	r0, #1
 4682 0016 7047     		bx	lr
 4683              	.L366:
 4684              		.align	2
 4685              	.L365:
 4686 0018 00000000 		.word	.LANCHOR11
 4687 001c 00000000 		.word	.LANCHOR16
 4688              		.cfi_endproc
 4689              	.LFE44:
 4691              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4692              		.align	1
 4693              		.global	xTaskPriorityInherit
 4694              		.syntax unified
 4695              		.thumb
 4696              		.thumb_func
 4698              	xTaskPriorityInherit:
 4699              	.LVL335:
 4700              	.LFB45:
3952:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4701              		.loc 1 3952 2 is_stmt 1 view -0
 4702              		.cfi_startproc
 4703              		@ args = 0, pretend = 0, frame = 0
 4704              		@ frame_needed = 0, uses_anonymous_args = 0
3953:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4705              		.loc 1 3953 2 view .LVU1300
3954:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4706              		.loc 1 3954 2 view .LVU1301
3959:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4707              		.loc 1 3959 3 view .LVU1302
3959:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4708              		.loc 1 3959 5 is_stmt 0 view .LVU1303
 4709 0000 0028     		cmp	r0, #0
 4710 0002 4FD0     		beq	.L373
3952:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4711              		.loc 1 3952 2 view .LVU1304
 4712 0004 38B5     		push	{r3, r4, r5, lr}
 4713              	.LCFI41:
 4714              		.cfi_def_cfa_offset 16
 4715              		.cfi_offset 3, -16
 4716              		.cfi_offset 4, -12
 4717              		.cfi_offset 5, -8
 4718              		.cfi_offset 14, -4
 4719 0006 0446     		mov	r4, r0
3964:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4720              		.loc 1 3964 4 is_stmt 1 view .LVU1305
3964:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4721              		.loc 1 3964 24 is_stmt 0 view .LVU1306
ARM GAS  /tmp/cc4Zpja9.s 			page 199


 4722 0008 C36A     		ldr	r3, [r0, #44]
3964:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4723              		.loc 1 3964 51 view .LVU1307
 4724 000a 284A     		ldr	r2, .L380
 4725 000c 1268     		ldr	r2, [r2]
 4726 000e D26A     		ldr	r2, [r2, #44]
3964:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4727              		.loc 1 3964 6 view .LVU1308
 4728 0010 9342     		cmp	r3, r2
 4729 0012 3FD2     		bcs	.L369
3969:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4730              		.loc 1 3969 5 is_stmt 1 view .LVU1309
3969:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4731              		.loc 1 3969 11 is_stmt 0 view .LVU1310
 4732 0014 8269     		ldr	r2, [r0, #24]
3969:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4733              		.loc 1 3969 7 view .LVU1311
 4734 0016 002A     		cmp	r2, #0
 4735 0018 05DB     		blt	.L370
3971:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 4736              		.loc 1 3971 6 is_stmt 1 view .LVU1312
 4737 001a 244A     		ldr	r2, .L380
 4738 001c 1268     		ldr	r2, [r2]
 4739 001e D26A     		ldr	r2, [r2, #44]
 4740 0020 C2F10702 		rsb	r2, r2, #7
 4741 0024 8261     		str	r2, [r0, #24]
 4742              	.L370:
3975:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 4743              		.loc 1 3975 30 view .LVU1313
3980:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4744              		.loc 1 3980 5 view .LVU1314
3980:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4745              		.loc 1 3980 9 is_stmt 0 view .LVU1315
 4746 0026 6169     		ldr	r1, [r4, #20]
 4747 0028 03EB8303 		add	r3, r3, r3, lsl #2
 4748 002c 204A     		ldr	r2, .L380+4
 4749 002e 02EB8303 		add	r3, r2, r3, lsl #2
3980:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4750              		.loc 1 3980 7 view .LVU1316
 4751 0032 9942     		cmp	r1, r3
 4752 0034 05D0     		beq	.L379
3998:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 4753              		.loc 1 3998 6 is_stmt 1 view .LVU1317
3998:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 4754              		.loc 1 3998 49 is_stmt 0 view .LVU1318
 4755 0036 1D4B     		ldr	r3, .L380
 4756 0038 1B68     		ldr	r3, [r3]
 4757 003a DB6A     		ldr	r3, [r3, #44]
3998:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 4758              		.loc 1 3998 35 view .LVU1319
 4759 003c E362     		str	r3, [r4, #44]
4004:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 4760              		.loc 1 4004 13 view .LVU1320
 4761 003e 0120     		movs	r0, #1
 4762              	.LVL336:
 4763              	.L367:
4031:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 200


 4764              		.loc 1 4031 2 view .LVU1321
 4765 0040 38BD     		pop	{r3, r4, r5, pc}
 4766              	.LVL337:
 4767              	.L379:
3982:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 4768              		.loc 1 3982 6 is_stmt 1 view .LVU1322
3982:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 4769              		.loc 1 3982 10 is_stmt 0 view .LVU1323
 4770 0042 251D     		adds	r5, r4, #4
 4771 0044 2846     		mov	r0, r5
 4772              	.LVL338:
3982:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 4773              		.loc 1 3982 10 view .LVU1324
 4774 0046 FFF7FEFF 		bl	uxListRemove
 4775              	.LVL339:
3982:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 4776              		.loc 1 3982 8 view .LVU1325
 4777 004a 70B9     		cbnz	r0, .L372
3984:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 4778              		.loc 1 3984 7 is_stmt 1 view .LVU1326
 4779 004c E26A     		ldr	r2, [r4, #44]
 4780 004e 02EB8203 		add	r3, r2, r2, lsl #2
 4781 0052 9B00     		lsls	r3, r3, #2
 4782 0054 1649     		ldr	r1, .L380+4
 4783 0056 CB58     		ldr	r3, [r1, r3]
 4784 0058 3BB9     		cbnz	r3, .L372
3984:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 4785              		.loc 1 3984 7 discriminator 1 view .LVU1327
 4786 005a 0123     		movs	r3, #1
 4787 005c 03FA02F2 		lsl	r2, r3, r2
 4788 0060 1449     		ldr	r1, .L380+8
 4789 0062 0B68     		ldr	r3, [r1]
 4790 0064 23EA0203 		bic	r3, r3, r2
 4791 0068 0B60     		str	r3, [r1]
 4792              	.L372:
3988:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 4793              		.loc 1 3988 31 view .LVU1328
3992:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4794              		.loc 1 3992 6 view .LVU1329
3992:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4795              		.loc 1 3992 49 is_stmt 0 view .LVU1330
 4796 006a 104B     		ldr	r3, .L380
 4797 006c 1B68     		ldr	r3, [r3]
 4798 006e D86A     		ldr	r0, [r3, #44]
3992:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4799              		.loc 1 3992 35 view .LVU1331
 4800 0070 E062     		str	r0, [r4, #44]
3993:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 4801              		.loc 1 3993 6 is_stmt 1 view .LVU1332
3993:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 4802              		.loc 1 3993 6 view .LVU1333
 4803 0072 0124     		movs	r4, #1
 4804              	.LVL340:
3993:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 4805              		.loc 1 3993 6 is_stmt 0 view .LVU1334
 4806 0074 04FA00F3 		lsl	r3, r4, r0
 4807 0078 0E4A     		ldr	r2, .L380+8
ARM GAS  /tmp/cc4Zpja9.s 			page 201


 4808 007a 1168     		ldr	r1, [r2]
 4809 007c 0B43     		orrs	r3, r3, r1
 4810 007e 1360     		str	r3, [r2]
3993:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 4811              		.loc 1 3993 6 is_stmt 1 view .LVU1335
 4812 0080 00EB8000 		add	r0, r0, r0, lsl #2
 4813 0084 2946     		mov	r1, r5
 4814 0086 0A4B     		ldr	r3, .L380+4
 4815 0088 03EB8000 		add	r0, r3, r0, lsl #2
 4816 008c FFF7FEFF 		bl	vListInsertEnd
 4817              	.LVL341:
3993:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 4818              		.loc 1 3993 47 view .LVU1336
4004:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 4819              		.loc 1 4004 13 is_stmt 0 view .LVU1337
 4820 0090 2046     		mov	r0, r4
 4821 0092 D5E7     		b	.L367
 4822              	.LVL342:
 4823              	.L369:
4008:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4824              		.loc 1 4008 5 is_stmt 1 view .LVU1338
4008:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4825              		.loc 1 4008 25 is_stmt 0 view .LVU1339
 4826 0094 426C     		ldr	r2, [r0, #68]
4008:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4827              		.loc 1 4008 56 view .LVU1340
 4828 0096 054B     		ldr	r3, .L380
 4829 0098 1B68     		ldr	r3, [r3]
 4830 009a DB6A     		ldr	r3, [r3, #44]
4008:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4831              		.loc 1 4008 7 view .LVU1341
 4832 009c 9A42     		cmp	r2, r3
 4833 009e 03D3     		bcc	.L374
3954:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4834              		.loc 1 3954 13 view .LVU1342
 4835 00a0 0020     		movs	r0, #0
 4836              	.LVL343:
3954:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4837              		.loc 1 3954 13 view .LVU1343
 4838 00a2 CDE7     		b	.L367
 4839              	.LVL344:
 4840              	.L373:
 4841              	.LCFI42:
 4842              		.cfi_def_cfa_offset 0
 4843              		.cfi_restore 3
 4844              		.cfi_restore 4
 4845              		.cfi_restore 5
 4846              		.cfi_restore 14
3954:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4847              		.loc 1 3954 13 view .LVU1344
 4848 00a4 0020     		movs	r0, #0
 4849              	.LVL345:
4031:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4850              		.loc 1 4031 2 view .LVU1345
 4851 00a6 7047     		bx	lr
 4852              	.LVL346:
 4853              	.L374:
ARM GAS  /tmp/cc4Zpja9.s 			page 202


 4854              	.LCFI43:
 4855              		.cfi_def_cfa_offset 16
 4856              		.cfi_offset 3, -16
 4857              		.cfi_offset 4, -12
 4858              		.cfi_offset 5, -8
 4859              		.cfi_offset 14, -4
4017:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 4860              		.loc 1 4017 14 view .LVU1346
 4861 00a8 0120     		movs	r0, #1
 4862              	.LVL347:
4027:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 4863              		.loc 1 4027 28 is_stmt 1 view .LVU1347
4030:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4864              		.loc 1 4030 3 view .LVU1348
4030:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4865              		.loc 1 4030 10 is_stmt 0 view .LVU1349
 4866 00aa C9E7     		b	.L367
 4867              	.L381:
 4868              		.align	2
 4869              	.L380:
 4870 00ac 00000000 		.word	.LANCHOR10
 4871 00b0 00000000 		.word	.LANCHOR4
 4872 00b4 00000000 		.word	.LANCHOR13
 4873              		.cfi_endproc
 4874              	.LFE45:
 4876              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4877              		.align	1
 4878              		.global	xTaskPriorityDisinherit
 4879              		.syntax unified
 4880              		.thumb
 4881              		.thumb_func
 4883              	xTaskPriorityDisinherit:
 4884              	.LVL348:
 4885              	.LFB46:
4039:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4886              		.loc 1 4039 2 is_stmt 1 view -0
 4887              		.cfi_startproc
 4888              		@ args = 0, pretend = 0, frame = 0
 4889              		@ frame_needed = 0, uses_anonymous_args = 0
4040:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4890              		.loc 1 4040 2 view .LVU1351
4041:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4891              		.loc 1 4041 2 view .LVU1352
4043:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4892              		.loc 1 4043 3 view .LVU1353
4043:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 4893              		.loc 1 4043 5 is_stmt 0 view .LVU1354
 4894 0000 0028     		cmp	r0, #0
 4895 0002 4CD0     		beq	.L389
4039:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4896              		.loc 1 4039 2 view .LVU1355
 4897 0004 38B5     		push	{r3, r4, r5, lr}
 4898              	.LCFI44:
 4899              		.cfi_def_cfa_offset 16
 4900              		.cfi_offset 3, -16
 4901              		.cfi_offset 4, -12
 4902              		.cfi_offset 5, -8
ARM GAS  /tmp/cc4Zpja9.s 			page 203


 4903              		.cfi_offset 14, -4
 4904 0006 0446     		mov	r4, r0
4049:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4905              		.loc 1 4049 4 is_stmt 1 view .LVU1356
 4906 0008 274B     		ldr	r3, .L397
 4907 000a 1B68     		ldr	r3, [r3]
 4908 000c 8342     		cmp	r3, r0
 4909 000e 08D0     		beq	.L384
4049:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4910              		.loc 1 4049 4 view .LVU1357
 4911              	.LBB188:
 4912              	.LBI188:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4913              		.loc 2 195 30 view .LVU1358
 4914              	.LBB189:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 4915              		.loc 2 197 1 view .LVU1359
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4916              		.loc 2 199 2 view .LVU1360
 4917              		.syntax unified
 4918              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4919 0010 4FF05003 			mov r3, #80												
 4920 0014 83F31188 		msr basepri, r3											
 4921 0018 BFF36F8F 		isb														
 4922 001c BFF34F8F 		dsb														
 4923              	
 4924              	@ 0 "" 2
 4925              	.LVL349:
 4926              		.thumb
 4927              		.syntax unified
 4928              	.L385:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4929              		.loc 2 199 2 is_stmt 0 view .LVU1361
 4930              	.LBE189:
 4931              	.LBE188:
4049:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4932              		.loc 1 4049 4 is_stmt 1 discriminator 1 view .LVU1362
4049:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4933              		.loc 1 4049 4 discriminator 1 view .LVU1363
4049:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4934              		.loc 1 4049 4 discriminator 1 view .LVU1364
 4935 0020 FEE7     		b	.L385
 4936              	.L384:
4049:ThirdParty/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4937              		.loc 1 4049 41 discriminator 2 view .LVU1365
4050:ThirdParty/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4938              		.loc 1 4050 4 discriminator 2 view .LVU1366
 4939 0022 836C     		ldr	r3, [r0, #72]
 4940 0024 43B9     		cbnz	r3, .L386
4050:ThirdParty/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4941              		.loc 1 4050 4 view .LVU1367
 4942              	.LBB190:
 4943              	.LBI190:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 4944              		.loc 2 195 30 view .LVU1368
 4945              	.LBB191:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 204


 4946              		.loc 2 197 1 view .LVU1369
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4947              		.loc 2 199 2 view .LVU1370
 4948              		.syntax unified
 4949              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4950 0026 4FF05003 			mov r3, #80												
 4951 002a 83F31188 		msr basepri, r3											
 4952 002e BFF36F8F 		isb														
 4953 0032 BFF34F8F 		dsb														
 4954              	
 4955              	@ 0 "" 2
 4956              	.LVL350:
 4957              		.thumb
 4958              		.syntax unified
 4959              	.L387:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4960              		.loc 2 199 2 is_stmt 0 view .LVU1371
 4961              	.LBE191:
 4962              	.LBE190:
4050:ThirdParty/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4963              		.loc 1 4050 4 is_stmt 1 discriminator 2 view .LVU1372
4050:ThirdParty/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4964              		.loc 1 4050 4 discriminator 2 view .LVU1373
4050:ThirdParty/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4965              		.loc 1 4050 4 discriminator 2 view .LVU1374
 4966 0036 FEE7     		b	.L387
 4967              	.L386:
4050:ThirdParty/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4968              		.loc 1 4050 40 discriminator 2 view .LVU1375
4051:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4969              		.loc 1 4051 4 discriminator 2 view .LVU1376
4051:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4970              		.loc 1 4051 28 is_stmt 0 discriminator 2 view .LVU1377
 4971 0038 013B     		subs	r3, r3, #1
 4972 003a 8364     		str	r3, [r0, #72]
4055:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4973              		.loc 1 4055 4 is_stmt 1 discriminator 2 view .LVU1378
4055:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4974              		.loc 1 4055 13 is_stmt 0 discriminator 2 view .LVU1379
 4975 003c C16A     		ldr	r1, [r0, #44]
4055:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4976              		.loc 1 4055 34 discriminator 2 view .LVU1380
 4977 003e 426C     		ldr	r2, [r0, #68]
4055:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 4978              		.loc 1 4055 6 discriminator 2 view .LVU1381
 4979 0040 9142     		cmp	r1, r2
 4980 0042 2ED0     		beq	.L390
4058:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4981              		.loc 1 4058 5 is_stmt 1 view .LVU1382
4058:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 4982              		.loc 1 4058 7 is_stmt 0 view .LVU1383
 4983 0044 0BB1     		cbz	r3, .L396
4041:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4984              		.loc 1 4041 13 view .LVU1384
 4985 0046 0020     		movs	r0, #0
 4986              	.LVL351:
4107:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/cc4Zpja9.s 			page 205


 4987              		.loc 1 4107 28 is_stmt 1 view .LVU1385
4110:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 4988              		.loc 1 4110 3 view .LVU1386
 4989              	.L382:
4111:ThirdParty/FreeRTOS/Source/tasks.c **** 
 4990              		.loc 1 4111 2 is_stmt 0 view .LVU1387
 4991 0048 38BD     		pop	{r3, r4, r5, pc}
 4992              	.LVL352:
 4993              	.L396:
4065:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 4994              		.loc 1 4065 6 is_stmt 1 view .LVU1388
4065:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 4995              		.loc 1 4065 10 is_stmt 0 view .LVU1389
 4996 004a 051D     		adds	r5, r0, #4
 4997 004c 2846     		mov	r0, r5
 4998              	.LVL353:
4065:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 4999              		.loc 1 4065 10 view .LVU1390
 5000 004e FFF7FEFF 		bl	uxListRemove
 5001              	.LVL354:
4065:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 5002              		.loc 1 4065 8 view .LVU1391
 5003 0052 70B9     		cbnz	r0, .L388
4067:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5004              		.loc 1 4067 7 is_stmt 1 view .LVU1392
 5005 0054 E26A     		ldr	r2, [r4, #44]
 5006 0056 02EB8203 		add	r3, r2, r2, lsl #2
 5007 005a 9B00     		lsls	r3, r3, #2
 5008 005c 1349     		ldr	r1, .L397+4
 5009 005e CB58     		ldr	r3, [r1, r3]
 5010 0060 3BB9     		cbnz	r3, .L388
4067:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5011              		.loc 1 4067 7 discriminator 1 view .LVU1393
 5012 0062 0123     		movs	r3, #1
 5013 0064 03FA02F2 		lsl	r2, r3, r2
 5014 0068 1149     		ldr	r1, .L397+8
 5015 006a 0B68     		ldr	r3, [r1]
 5016 006c 23EA0203 		bic	r3, r3, r2
 5017 0070 0B60     		str	r3, [r1]
 5018              	.L388:
4071:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5019              		.loc 1 4071 31 view .LVU1394
4076:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 5020              		.loc 1 4076 67 view .LVU1395
4077:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5021              		.loc 1 4077 6 view .LVU1396
4077:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5022              		.loc 1 4077 31 is_stmt 0 view .LVU1397
 5023 0072 606C     		ldr	r0, [r4, #68]
4077:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5024              		.loc 1 4077 24 view .LVU1398
 5025 0074 E062     		str	r0, [r4, #44]
4082:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5026              		.loc 1 4082 6 is_stmt 1 view .LVU1399
 5027 0076 C0F10703 		rsb	r3, r0, #7
 5028 007a A361     		str	r3, [r4, #24]
4083:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 206


 5029              		.loc 1 4083 6 view .LVU1400
4083:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5030              		.loc 1 4083 6 view .LVU1401
 5031 007c 0124     		movs	r4, #1
 5032              	.LVL355:
4083:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5033              		.loc 1 4083 6 is_stmt 0 view .LVU1402
 5034 007e 04FA00F3 		lsl	r3, r4, r0
 5035 0082 0B4A     		ldr	r2, .L397+8
 5036 0084 1168     		ldr	r1, [r2]
 5037 0086 0B43     		orrs	r3, r3, r1
 5038 0088 1360     		str	r3, [r2]
4083:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5039              		.loc 1 4083 6 is_stmt 1 view .LVU1403
 5040 008a 00EB8000 		add	r0, r0, r0, lsl #2
 5041 008e 2946     		mov	r1, r5
 5042 0090 064B     		ldr	r3, .L397+4
 5043 0092 03EB8000 		add	r0, r3, r0, lsl #2
 5044 0096 FFF7FEFF 		bl	vListInsertEnd
 5045              	.LVL356:
4083:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5046              		.loc 1 4083 36 view .LVU1404
4093:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5047              		.loc 1 4093 6 view .LVU1405
4093:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5048              		.loc 1 4093 14 is_stmt 0 view .LVU1406
 5049 009a 2046     		mov	r0, r4
 5050 009c D4E7     		b	.L382
 5051              	.LVL357:
 5052              	.L389:
 5053              	.LCFI45:
 5054              		.cfi_def_cfa_offset 0
 5055              		.cfi_restore 3
 5056              		.cfi_restore 4
 5057              		.cfi_restore 5
 5058              		.cfi_restore 14
4041:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5059              		.loc 1 4041 13 view .LVU1407
 5060 009e 0020     		movs	r0, #0
 5061              	.LVL358:
4111:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5062              		.loc 1 4111 2 view .LVU1408
 5063 00a0 7047     		bx	lr
 5064              	.LVL359:
 5065              	.L390:
 5066              	.LCFI46:
 5067              		.cfi_def_cfa_offset 16
 5068              		.cfi_offset 3, -16
 5069              		.cfi_offset 4, -12
 5070              		.cfi_offset 5, -8
 5071              		.cfi_offset 14, -4
4041:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5072              		.loc 1 4041 13 view .LVU1409
 5073 00a2 0020     		movs	r0, #0
 5074              	.LVL360:
4041:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5075              		.loc 1 4041 13 view .LVU1410
ARM GAS  /tmp/cc4Zpja9.s 			page 207


 5076 00a4 D0E7     		b	.L382
 5077              	.L398:
 5078 00a6 00BF     		.align	2
 5079              	.L397:
 5080 00a8 00000000 		.word	.LANCHOR10
 5081 00ac 00000000 		.word	.LANCHOR4
 5082 00b0 00000000 		.word	.LANCHOR13
 5083              		.cfi_endproc
 5084              	.LFE46:
 5086              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 5087              		.align	1
 5088              		.global	vTaskPriorityDisinheritAfterTimeout
 5089              		.syntax unified
 5090              		.thumb
 5091              		.thumb_func
 5093              	vTaskPriorityDisinheritAfterTimeout:
 5094              	.LVL361:
 5095              	.LFB47:
4119:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5096              		.loc 1 4119 2 is_stmt 1 view -0
 5097              		.cfi_startproc
 5098              		@ args = 0, pretend = 0, frame = 0
 5099              		@ frame_needed = 0, uses_anonymous_args = 0
4120:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 5100              		.loc 1 4120 2 view .LVU1412
4121:ThirdParty/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 5101              		.loc 1 4121 2 view .LVU1413
4122:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5102              		.loc 1 4122 2 view .LVU1414
4124:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 5103              		.loc 1 4124 3 view .LVU1415
4124:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 5104              		.loc 1 4124 5 is_stmt 0 view .LVU1416
 5105 0000 0028     		cmp	r0, #0
 5106 0002 56D0     		beq	.L409
4119:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 5107              		.loc 1 4119 2 view .LVU1417
 5108 0004 38B5     		push	{r3, r4, r5, lr}
 5109              	.LCFI47:
 5110              		.cfi_def_cfa_offset 16
 5111              		.cfi_offset 3, -16
 5112              		.cfi_offset 4, -12
 5113              		.cfi_offset 5, -8
 5114              		.cfi_offset 14, -4
 5115 0006 0446     		mov	r4, r0
4128:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5116              		.loc 1 4128 4 is_stmt 1 view .LVU1418
 5117 0008 836C     		ldr	r3, [r0, #72]
 5118 000a 43B9     		cbnz	r3, .L401
4128:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5119              		.loc 1 4128 4 view .LVU1419
 5120              	.LBB192:
 5121              	.LBI192:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 5122              		.loc 2 195 30 view .LVU1420
 5123              	.LBB193:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 208


 5124              		.loc 2 197 1 view .LVU1421
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5125              		.loc 2 199 2 view .LVU1422
 5126              		.syntax unified
 5127              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5128 000c 4FF05003 			mov r3, #80												
 5129 0010 83F31188 		msr basepri, r3											
 5130 0014 BFF36F8F 		isb														
 5131 0018 BFF34F8F 		dsb														
 5132              	
 5133              	@ 0 "" 2
 5134              	.LVL362:
 5135              		.thumb
 5136              		.syntax unified
 5137              	.L402:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5138              		.loc 2 199 2 is_stmt 0 view .LVU1423
 5139              	.LBE193:
 5140              	.LBE192:
4128:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5141              		.loc 1 4128 4 is_stmt 1 discriminator 1 view .LVU1424
4128:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5142              		.loc 1 4128 4 discriminator 1 view .LVU1425
4128:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5143              		.loc 1 4128 4 discriminator 1 view .LVU1426
 5144 001c FEE7     		b	.L402
 5145              	.L401:
4128:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5146              		.loc 1 4128 40 discriminator 2 view .LVU1427
4134:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5147              		.loc 1 4134 4 discriminator 2 view .LVU1428
4134:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5148              		.loc 1 4134 13 is_stmt 0 discriminator 2 view .LVU1429
 5149 001e 426C     		ldr	r2, [r0, #68]
4134:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5150              		.loc 1 4134 6 discriminator 2 view .LVU1430
 5151 0020 8A42     		cmp	r2, r1
 5152 0022 00D2     		bcs	.L403
4136:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5153              		.loc 1 4136 21 view .LVU1431
 5154 0024 0A46     		mov	r2, r1
 5155              	.L403:
 5156              	.LVL363:
4144:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5157              		.loc 1 4144 4 is_stmt 1 view .LVU1432
4144:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5158              		.loc 1 4144 13 is_stmt 0 view .LVU1433
 5159 0026 E16A     		ldr	r1, [r4, #44]
 5160              	.LVL364:
4144:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5161              		.loc 1 4144 6 view .LVU1434
 5162 0028 9142     		cmp	r1, r2
 5163 002a 01D0     		beq	.L399
4150:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5164              		.loc 1 4150 5 is_stmt 1 view .LVU1435
4150:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5165              		.loc 1 4150 7 is_stmt 0 view .LVU1436
ARM GAS  /tmp/cc4Zpja9.s 			page 209


 5166 002c 012B     		cmp	r3, #1
 5167 002e 00D0     		beq	.L412
 5168              	.LVL365:
 5169              	.L399:
4213:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5170              		.loc 1 4213 2 view .LVU1437
 5171 0030 38BD     		pop	{r3, r4, r5, pc}
 5172              	.LVL366:
 5173              	.L412:
4155:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5174              		.loc 1 4155 6 is_stmt 1 view .LVU1438
 5175 0032 204B     		ldr	r3, .L414
 5176 0034 1B68     		ldr	r3, [r3]
 5177 0036 A342     		cmp	r3, r4
 5178 0038 32D0     		beq	.L413
4155:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5179              		.loc 1 4155 43 discriminator 2 view .LVU1439
4160:ThirdParty/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 5180              		.loc 1 4160 67 discriminator 2 view .LVU1440
4161:ThirdParty/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 5181              		.loc 1 4161 6 discriminator 2 view .LVU1441
 5182              	.LVL367:
4162:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5183              		.loc 1 4162 6 discriminator 2 view .LVU1442
4162:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5184              		.loc 1 4162 24 is_stmt 0 discriminator 2 view .LVU1443
 5185 003a E262     		str	r2, [r4, #44]
4166:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 5186              		.loc 1 4166 6 is_stmt 1 discriminator 2 view .LVU1444
4166:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 5187              		.loc 1 4166 12 is_stmt 0 discriminator 2 view .LVU1445
 5188 003c A369     		ldr	r3, [r4, #24]
4166:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 5189              		.loc 1 4166 8 discriminator 2 view .LVU1446
 5190 003e 002B     		cmp	r3, #0
 5191 0040 02DB     		blt	.L406
4168:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5192              		.loc 1 4168 7 is_stmt 1 view .LVU1447
 5193 0042 C2F10702 		rsb	r2, r2, #7
 5194              	.LVL368:
4168:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5195              		.loc 1 4168 7 is_stmt 0 view .LVU1448
 5196 0046 A261     		str	r2, [r4, #24]
 5197              	.L406:
4172:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5198              		.loc 1 4172 31 is_stmt 1 view .LVU1449
4181:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 5199              		.loc 1 4181 6 view .LVU1450
4181:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 5200              		.loc 1 4181 10 is_stmt 0 view .LVU1451
 5201 0048 6269     		ldr	r2, [r4, #20]
 5202 004a 01EB8101 		add	r1, r1, r1, lsl #2
 5203              	.LVL369:
4181:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 5204              		.loc 1 4181 10 view .LVU1452
 5205 004e 1A4B     		ldr	r3, .L414+4
 5206 0050 03EB8101 		add	r1, r3, r1, lsl #2
ARM GAS  /tmp/cc4Zpja9.s 			page 210


4181:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 5207              		.loc 1 4181 8 view .LVU1453
 5208 0054 8A42     		cmp	r2, r1
 5209 0056 EBD1     		bne	.L399
4183:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 5210              		.loc 1 4183 7 is_stmt 1 view .LVU1454
4183:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 5211              		.loc 1 4183 11 is_stmt 0 view .LVU1455
 5212 0058 251D     		adds	r5, r4, #4
 5213 005a 2846     		mov	r0, r5
 5214              	.LVL370:
4183:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 5215              		.loc 1 4183 11 view .LVU1456
 5216 005c FFF7FEFF 		bl	uxListRemove
 5217              	.LVL371:
4183:ThirdParty/FreeRTOS/Source/tasks.c **** 						{
 5218              		.loc 1 4183 9 view .LVU1457
 5219 0060 70B9     		cbnz	r0, .L407
4185:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
 5220              		.loc 1 4185 8 is_stmt 1 view .LVU1458
 5221 0062 E26A     		ldr	r2, [r4, #44]
 5222 0064 02EB8203 		add	r3, r2, r2, lsl #2
 5223 0068 9B00     		lsls	r3, r3, #2
 5224 006a 1349     		ldr	r1, .L414+4
 5225 006c CB58     		ldr	r3, [r1, r3]
 5226 006e 3BB9     		cbnz	r3, .L407
4185:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
 5227              		.loc 1 4185 8 discriminator 1 view .LVU1459
 5228 0070 0123     		movs	r3, #1
 5229 0072 03FA02F2 		lsl	r2, r3, r2
 5230 0076 1149     		ldr	r1, .L414+8
 5231 0078 0B68     		ldr	r3, [r1]
 5232 007a 23EA0203 		bic	r3, r3, r2
 5233 007e 0B60     		str	r3, [r1]
 5234              	.L407:
4189:ThirdParty/FreeRTOS/Source/tasks.c **** 						}
 5235              		.loc 1 4189 32 view .LVU1460
4192:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5236              		.loc 1 4192 7 view .LVU1461
4192:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5237              		.loc 1 4192 7 view .LVU1462
 5238 0080 E06A     		ldr	r0, [r4, #44]
 5239 0082 0123     		movs	r3, #1
 5240 0084 8340     		lsls	r3, r3, r0
 5241 0086 0D4A     		ldr	r2, .L414+8
 5242 0088 1168     		ldr	r1, [r2]
 5243 008a 0B43     		orrs	r3, r3, r1
 5244 008c 1360     		str	r3, [r2]
4192:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5245              		.loc 1 4192 7 view .LVU1463
 5246 008e 00EB8000 		add	r0, r0, r0, lsl #2
 5247 0092 2946     		mov	r1, r5
 5248 0094 084B     		ldr	r3, .L414+4
 5249 0096 03EB8000 		add	r0, r3, r0, lsl #2
 5250 009a FFF7FEFF 		bl	vListInsertEnd
 5251              	.LVL372:
4192:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/cc4Zpja9.s 			page 211


 5252              		.loc 1 4192 37 view .LVU1464
4211:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 5253              		.loc 1 4211 28 view .LVU1465
4213:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5254              		.loc 1 4213 2 is_stmt 0 view .LVU1466
 5255 009e C7E7     		b	.L399
 5256              	.LVL373:
 5257              	.L413:
4155:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5258              		.loc 1 4155 6 is_stmt 1 view .LVU1467
 5259              	.LBB194:
 5260              	.LBI194:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 5261              		.loc 2 195 30 view .LVU1468
 5262              	.LBB195:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5263              		.loc 2 197 1 view .LVU1469
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5264              		.loc 2 199 2 view .LVU1470
 5265              		.syntax unified
 5266              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5267 00a0 4FF05003 			mov r3, #80												
 5268 00a4 83F31188 		msr basepri, r3											
 5269 00a8 BFF36F8F 		isb														
 5270 00ac BFF34F8F 		dsb														
 5271              	
 5272              	@ 0 "" 2
 5273              	.LVL374:
 5274              		.thumb
 5275              		.syntax unified
 5276              	.L405:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5277              		.loc 2 199 2 is_stmt 0 view .LVU1471
 5278              	.LBE195:
 5279              	.LBE194:
4155:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5280              		.loc 1 4155 6 is_stmt 1 discriminator 2 view .LVU1472
4155:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5281              		.loc 1 4155 6 discriminator 2 view .LVU1473
4155:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5282              		.loc 1 4155 6 discriminator 2 view .LVU1474
 5283 00b0 FEE7     		b	.L405
 5284              	.LVL375:
 5285              	.L409:
 5286              	.LCFI48:
 5287              		.cfi_def_cfa_offset 0
 5288              		.cfi_restore 3
 5289              		.cfi_restore 4
 5290              		.cfi_restore 5
 5291              		.cfi_restore 14
4155:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5292              		.loc 1 4155 6 is_stmt 0 discriminator 2 view .LVU1475
 5293 00b2 7047     		bx	lr
 5294              	.L415:
 5295              		.align	2
 5296              	.L414:
 5297 00b4 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/cc4Zpja9.s 			page 212


 5298 00b8 00000000 		.word	.LANCHOR4
 5299 00bc 00000000 		.word	.LANCHOR13
 5300              		.cfi_endproc
 5301              	.LFE47:
 5303              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5304              		.align	1
 5305              		.global	uxTaskResetEventItemValue
 5306              		.syntax unified
 5307              		.thumb
 5308              		.thumb_func
 5310              	uxTaskResetEventItemValue:
 5311              	.LFB48:
4534:ThirdParty/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 5312              		.loc 1 4534 1 is_stmt 1 view -0
 5313              		.cfi_startproc
 5314              		@ args = 0, pretend = 0, frame = 0
 5315              		@ frame_needed = 0, uses_anonymous_args = 0
 5316              		@ link register save eliminated.
4535:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5317              		.loc 1 4535 1 view .LVU1477
4537:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5318              		.loc 1 4537 2 view .LVU1478
4537:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5319              		.loc 1 4537 13 is_stmt 0 view .LVU1479
 5320 0000 044A     		ldr	r2, .L417
 5321 0002 1368     		ldr	r3, [r2]
4537:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5322              		.loc 1 4537 11 view .LVU1480
 5323 0004 9869     		ldr	r0, [r3, #24]
 5324              	.LVL376:
4541:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5325              		.loc 1 4541 2 is_stmt 1 view .LVU1481
 5326 0006 1368     		ldr	r3, [r2]
 5327 0008 DB6A     		ldr	r3, [r3, #44]
 5328 000a 1268     		ldr	r2, [r2]
 5329 000c C3F10703 		rsb	r3, r3, #7
 5330 0010 9361     		str	r3, [r2, #24]
4543:ThirdParty/FreeRTOS/Source/tasks.c **** }
 5331              		.loc 1 4543 2 view .LVU1482
4544:ThirdParty/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5332              		.loc 1 4544 1 is_stmt 0 view .LVU1483
 5333 0012 7047     		bx	lr
 5334              	.L418:
 5335              		.align	2
 5336              	.L417:
 5337 0014 00000000 		.word	.LANCHOR10
 5338              		.cfi_endproc
 5339              	.LFE48:
 5341              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5342              		.align	1
 5343              		.global	pvTaskIncrementMutexHeldCount
 5344              		.syntax unified
 5345              		.thumb
 5346              		.thumb_func
 5348              	pvTaskIncrementMutexHeldCount:
 5349              	.LFB49:
4550:ThirdParty/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
ARM GAS  /tmp/cc4Zpja9.s 			page 213


 5350              		.loc 1 4550 2 is_stmt 1 view -0
 5351              		.cfi_startproc
 5352              		@ args = 0, pretend = 0, frame = 0
 5353              		@ frame_needed = 0, uses_anonymous_args = 0
 5354              		@ link register save eliminated.
4553:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 5355              		.loc 1 4553 3 view .LVU1485
4553:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 5356              		.loc 1 4553 20 is_stmt 0 view .LVU1486
 5357 0000 054B     		ldr	r3, .L421
 5358 0002 1B68     		ldr	r3, [r3]
4553:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 5359              		.loc 1 4553 5 view .LVU1487
 5360 0004 23B1     		cbz	r3, .L420
4555:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 5361              		.loc 1 4555 4 is_stmt 1 view .LVU1488
4555:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 5362              		.loc 1 4555 18 is_stmt 0 view .LVU1489
 5363 0006 044B     		ldr	r3, .L421
 5364 0008 1A68     		ldr	r2, [r3]
 5365 000a 936C     		ldr	r3, [r2, #72]
4555:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 5366              		.loc 1 4555 35 view .LVU1490
 5367 000c 0133     		adds	r3, r3, #1
 5368 000e 9364     		str	r3, [r2, #72]
 5369              	.L420:
4558:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 5370              		.loc 1 4558 3 is_stmt 1 view .LVU1491
4558:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 5371              		.loc 1 4558 10 is_stmt 0 view .LVU1492
 5372 0010 014B     		ldr	r3, .L421
 5373 0012 1868     		ldr	r0, [r3]
4559:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5374              		.loc 1 4559 2 view .LVU1493
 5375 0014 7047     		bx	lr
 5376              	.L422:
 5377 0016 00BF     		.align	2
 5378              	.L421:
 5379 0018 00000000 		.word	.LANCHOR10
 5380              		.cfi_endproc
 5381              	.LFE49:
 5383              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5384              		.align	1
 5385              		.global	ulTaskNotifyTake
 5386              		.syntax unified
 5387              		.thumb
 5388              		.thumb_func
 5390              	ulTaskNotifyTake:
 5391              	.LVL377:
 5392              	.LFB50:
4567:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5393              		.loc 1 4567 2 is_stmt 1 view -0
 5394              		.cfi_startproc
 5395              		@ args = 0, pretend = 0, frame = 0
 5396              		@ frame_needed = 0, uses_anonymous_args = 0
4567:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5397              		.loc 1 4567 2 is_stmt 0 view .LVU1495
ARM GAS  /tmp/cc4Zpja9.s 			page 214


 5398 0000 38B5     		push	{r3, r4, r5, lr}
 5399              	.LCFI49:
 5400              		.cfi_def_cfa_offset 16
 5401              		.cfi_offset 3, -16
 5402              		.cfi_offset 4, -12
 5403              		.cfi_offset 5, -8
 5404              		.cfi_offset 14, -4
 5405 0002 0546     		mov	r5, r0
 5406 0004 0C46     		mov	r4, r1
4568:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5407              		.loc 1 4568 2 is_stmt 1 view .LVU1496
4570:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 5408              		.loc 1 4570 3 view .LVU1497
 5409 0006 FFF7FEFF 		bl	vPortEnterCritical
 5410              	.LVL378:
4573:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5411              		.loc 1 4573 4 view .LVU1498
4573:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5412              		.loc 1 4573 20 is_stmt 0 view .LVU1499
 5413 000a 1A4B     		ldr	r3, .L429
 5414 000c 1B68     		ldr	r3, [r3]
 5415 000e DB6C     		ldr	r3, [r3, #76]
4573:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5416              		.loc 1 4573 6 view .LVU1500
 5417 0010 2BB9     		cbnz	r3, .L424
4576:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5418              		.loc 1 4576 5 is_stmt 1 view .LVU1501
4576:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5419              		.loc 1 4576 17 is_stmt 0 view .LVU1502
 5420 0012 184B     		ldr	r3, .L429
 5421 0014 1B68     		ldr	r3, [r3]
4576:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5422              		.loc 1 4576 33 view .LVU1503
 5423 0016 0122     		movs	r2, #1
 5424 0018 83F85020 		strb	r2, [r3, #80]
4578:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5425              		.loc 1 4578 5 is_stmt 1 view .LVU1504
4578:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5426              		.loc 1 4578 7 is_stmt 0 view .LVU1505
 5427 001c ACB9     		cbnz	r4, .L428
 5428              	.L424:
4596:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5429              		.loc 1 4596 29 is_stmt 1 view .LVU1506
4599:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5430              		.loc 1 4599 3 view .LVU1507
 5431 001e FFF7FEFF 		bl	vPortExitCritical
 5432              	.LVL379:
4601:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 5433              		.loc 1 4601 3 view .LVU1508
 5434 0022 FFF7FEFF 		bl	vPortEnterCritical
 5435              	.LVL380:
4603:ThirdParty/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 5436              		.loc 1 4603 27 view .LVU1509
4604:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5437              		.loc 1 4604 4 view .LVU1510
4604:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5438              		.loc 1 4604 27 is_stmt 0 view .LVU1511
ARM GAS  /tmp/cc4Zpja9.s 			page 215


 5439 0026 134B     		ldr	r3, .L429
 5440 0028 1B68     		ldr	r3, [r3]
4604:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5441              		.loc 1 4604 13 view .LVU1512
 5442 002a DC6C     		ldr	r4, [r3, #76]
 5443              	.LVL381:
4606:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5444              		.loc 1 4606 4 is_stmt 1 view .LVU1513
4606:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5445              		.loc 1 4606 6 is_stmt 0 view .LVU1514
 5446 002c 24B1     		cbz	r4, .L425
4608:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5447              		.loc 1 4608 5 is_stmt 1 view .LVU1515
4608:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5448              		.loc 1 4608 7 is_stmt 0 view .LVU1516
 5449 002e DDB1     		cbz	r5, .L426
4610:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5450              		.loc 1 4610 6 is_stmt 1 view .LVU1517
4610:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5451              		.loc 1 4610 18 is_stmt 0 view .LVU1518
 5452 0030 104B     		ldr	r3, .L429
 5453 0032 1B68     		ldr	r3, [r3]
4610:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5454              		.loc 1 4610 36 view .LVU1519
 5455 0034 0022     		movs	r2, #0
 5456 0036 DA64     		str	r2, [r3, #76]
 5457              	.L425:
4619:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5458              		.loc 1 4619 29 is_stmt 1 view .LVU1520
4622:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 5459              		.loc 1 4622 4 view .LVU1521
4622:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 5460              		.loc 1 4622 16 is_stmt 0 view .LVU1522
 5461 0038 0E4B     		ldr	r3, .L429
 5462 003a 1B68     		ldr	r3, [r3]
4622:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 5463              		.loc 1 4622 32 view .LVU1523
 5464 003c 0022     		movs	r2, #0
 5465 003e 83F85020 		strb	r2, [r3, #80]
4624:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5466              		.loc 1 4624 3 is_stmt 1 view .LVU1524
 5467 0042 FFF7FEFF 		bl	vPortExitCritical
 5468              	.LVL382:
4626:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 5469              		.loc 1 4626 3 view .LVU1525
4627:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5470              		.loc 1 4627 2 is_stmt 0 view .LVU1526
 5471 0046 2046     		mov	r0, r4
 5472 0048 38BD     		pop	{r3, r4, r5, pc}
 5473              	.LVL383:
 5474              	.L428:
4580:ThirdParty/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5475              		.loc 1 4580 6 is_stmt 1 view .LVU1527
 5476 004a 1146     		mov	r1, r2
 5477 004c 2046     		mov	r0, r4
 5478 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5479              	.LVL384:
ARM GAS  /tmp/cc4Zpja9.s 			page 216


4581:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5480              		.loc 1 4581 35 view .LVU1528
4587:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5481              		.loc 1 4587 6 view .LVU1529
 5482 0052 4FF0E023 		mov	r3, #-536813568
 5483 0056 4FF08052 		mov	r2, #268435456
 5484 005a C3F8042D 		str	r2, [r3, #3332]
4587:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5485              		.loc 1 4587 6 view .LVU1530
 5486              		.syntax unified
 5487              	@ 4587 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 5488 005e BFF34F8F 		dsb
 5489              	@ 0 "" 2
4587:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5490              		.loc 1 4587 6 view .LVU1531
 5491              	@ 4587 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 5492 0062 BFF36F8F 		isb
 5493              	@ 0 "" 2
4587:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5494              		.loc 1 4587 28 view .LVU1532
 5495              		.thumb
 5496              		.syntax unified
 5497 0066 DAE7     		b	.L424
 5498              	.LVL385:
 5499              	.L426:
4614:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5500              		.loc 1 4614 6 view .LVU1533
4614:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5501              		.loc 1 4614 18 is_stmt 0 view .LVU1534
 5502 0068 024B     		ldr	r3, .L429
 5503 006a 1B68     		ldr	r3, [r3]
4614:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5504              		.loc 1 4614 47 view .LVU1535
 5505 006c 621E     		subs	r2, r4, #1
4614:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5506              		.loc 1 4614 36 view .LVU1536
 5507 006e DA64     		str	r2, [r3, #76]
 5508 0070 E2E7     		b	.L425
 5509              	.L430:
 5510 0072 00BF     		.align	2
 5511              	.L429:
 5512 0074 00000000 		.word	.LANCHOR10
 5513              		.cfi_endproc
 5514              	.LFE50:
 5516              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5517              		.align	1
 5518              		.global	xTaskNotifyWait
 5519              		.syntax unified
 5520              		.thumb
 5521              		.thumb_func
 5523              	xTaskNotifyWait:
 5524              	.LVL386:
 5525              	.LFB51:
4635:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5526              		.loc 1 4635 2 is_stmt 1 view -0
 5527              		.cfi_startproc
 5528              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc4Zpja9.s 			page 217


 5529              		@ frame_needed = 0, uses_anonymous_args = 0
4635:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5530              		.loc 1 4635 2 is_stmt 0 view .LVU1538
 5531 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5532              	.LCFI50:
 5533              		.cfi_def_cfa_offset 24
 5534              		.cfi_offset 3, -24
 5535              		.cfi_offset 4, -20
 5536              		.cfi_offset 5, -16
 5537              		.cfi_offset 6, -12
 5538              		.cfi_offset 7, -8
 5539              		.cfi_offset 14, -4
 5540 0002 0646     		mov	r6, r0
 5541 0004 0F46     		mov	r7, r1
 5542 0006 1446     		mov	r4, r2
 5543 0008 1D46     		mov	r5, r3
4636:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5544              		.loc 1 4636 2 is_stmt 1 view .LVU1539
4638:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 5545              		.loc 1 4638 3 view .LVU1540
 5546 000a FFF7FEFF 		bl	vPortEnterCritical
 5547              	.LVL387:
4641:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5548              		.loc 1 4641 4 view .LVU1541
4641:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5549              		.loc 1 4641 20 is_stmt 0 view .LVU1542
 5550 000e 214B     		ldr	r3, .L439
 5551 0010 1B68     		ldr	r3, [r3]
 5552 0012 93F85020 		ldrb	r2, [r3, #80]	@ zero_extendqisi2
 5553 0016 D2B2     		uxtb	r2, r2
4641:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5554              		.loc 1 4641 6 view .LVU1543
 5555 0018 022A     		cmp	r2, #2
 5556 001a 0AD0     		beq	.L432
4646:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5557              		.loc 1 4646 5 is_stmt 1 view .LVU1544
4646:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5558              		.loc 1 4646 35 is_stmt 0 view .LVU1545
 5559 001c 1D4B     		ldr	r3, .L439
 5560 001e 1A68     		ldr	r2, [r3]
 5561 0020 D06C     		ldr	r0, [r2, #76]
 5562 0022 20EA0606 		bic	r6, r0, r6
 5563              	.LVL388:
4646:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5564              		.loc 1 4646 35 view .LVU1546
 5565 0026 D664     		str	r6, [r2, #76]
4649:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5566              		.loc 1 4649 5 is_stmt 1 view .LVU1547
4649:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5567              		.loc 1 4649 17 is_stmt 0 view .LVU1548
 5568 0028 1B68     		ldr	r3, [r3]
4649:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5569              		.loc 1 4649 33 view .LVU1549
 5570 002a 0122     		movs	r2, #1
 5571 002c 83F85020 		strb	r2, [r3, #80]
4651:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5572              		.loc 1 4651 5 is_stmt 1 view .LVU1550
ARM GAS  /tmp/cc4Zpja9.s 			page 218


4651:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5573              		.loc 1 4651 7 is_stmt 0 view .LVU1551
 5574 0030 CDB9     		cbnz	r5, .L437
 5575              	.L432:
4669:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5576              		.loc 1 4669 29 is_stmt 1 view .LVU1552
4672:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5577              		.loc 1 4672 3 view .LVU1553
 5578 0032 FFF7FEFF 		bl	vPortExitCritical
 5579              	.LVL389:
4674:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 5580              		.loc 1 4674 3 view .LVU1554
 5581 0036 FFF7FEFF 		bl	vPortEnterCritical
 5582              	.LVL390:
4676:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5583              		.loc 1 4676 27 view .LVU1555
4678:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5584              		.loc 1 4678 4 view .LVU1556
4678:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5585              		.loc 1 4678 6 is_stmt 0 view .LVU1557
 5586 003a 1CB1     		cbz	r4, .L433
4682:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5587              		.loc 1 4682 5 is_stmt 1 view .LVU1558
4682:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5588              		.loc 1 4682 41 is_stmt 0 view .LVU1559
 5589 003c 154B     		ldr	r3, .L439
 5590 003e 1B68     		ldr	r3, [r3]
 5591 0040 DB6C     		ldr	r3, [r3, #76]
4682:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5592              		.loc 1 4682 27 view .LVU1560
 5593 0042 2360     		str	r3, [r4]
 5594              	.L433:
4689:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5595              		.loc 1 4689 4 is_stmt 1 view .LVU1561
4689:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5596              		.loc 1 4689 20 is_stmt 0 view .LVU1562
 5597 0044 134B     		ldr	r3, .L439
 5598 0046 1B68     		ldr	r3, [r3]
 5599 0048 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 5600 004c DBB2     		uxtb	r3, r3
4689:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5601              		.loc 1 4689 6 view .LVU1563
 5602 004e 022B     		cmp	r3, #2
 5603 0050 18D0     		beq	.L438
4692:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5604              		.loc 1 4692 13 view .LVU1564
 5605 0052 0024     		movs	r4, #0
 5606              	.LVL391:
 5607              	.L434:
4702:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 5608              		.loc 1 4702 4 is_stmt 1 view .LVU1565
4702:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 5609              		.loc 1 4702 16 is_stmt 0 view .LVU1566
 5610 0054 0F4B     		ldr	r3, .L439
 5611 0056 1B68     		ldr	r3, [r3]
4702:ThirdParty/FreeRTOS/Source/tasks.c **** 		}
 5612              		.loc 1 4702 32 view .LVU1567
ARM GAS  /tmp/cc4Zpja9.s 			page 219


 5613 0058 0022     		movs	r2, #0
 5614 005a 83F85020 		strb	r2, [r3, #80]
4704:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5615              		.loc 1 4704 3 is_stmt 1 view .LVU1568
 5616 005e FFF7FEFF 		bl	vPortExitCritical
 5617              	.LVL392:
4706:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 5618              		.loc 1 4706 3 view .LVU1569
4707:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5619              		.loc 1 4707 2 is_stmt 0 view .LVU1570
 5620 0062 2046     		mov	r0, r4
 5621 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5622              	.LVL393:
 5623              	.L437:
4653:ThirdParty/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5624              		.loc 1 4653 6 is_stmt 1 view .LVU1571
 5625 0066 1146     		mov	r1, r2
 5626 0068 2846     		mov	r0, r5
 5627 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5628              	.LVL394:
4654:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5629              		.loc 1 4654 35 view .LVU1572
4660:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5630              		.loc 1 4660 6 view .LVU1573
 5631 006e 4FF0E023 		mov	r3, #-536813568
 5632 0072 4FF08052 		mov	r2, #268435456
 5633 0076 C3F8042D 		str	r2, [r3, #3332]
4660:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5634              		.loc 1 4660 6 view .LVU1574
 5635              		.syntax unified
 5636              	@ 4660 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 5637 007a BFF34F8F 		dsb
 5638              	@ 0 "" 2
4660:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5639              		.loc 1 4660 6 view .LVU1575
 5640              	@ 4660 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 5641 007e BFF36F8F 		isb
 5642              	@ 0 "" 2
4660:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5643              		.loc 1 4660 28 view .LVU1576
 5644              		.thumb
 5645              		.syntax unified
 5646 0082 D6E7     		b	.L432
 5647              	.L438:
4698:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5648              		.loc 1 4698 5 view .LVU1577
4698:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5649              		.loc 1 4698 35 is_stmt 0 view .LVU1578
 5650 0084 034B     		ldr	r3, .L439
 5651 0086 1B68     		ldr	r3, [r3]
 5652 0088 D96C     		ldr	r1, [r3, #76]
 5653 008a 21EA0707 		bic	r7, r1, r7
 5654              	.LVL395:
4698:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5655              		.loc 1 4698 35 view .LVU1579
 5656 008e DF64     		str	r7, [r3, #76]
4699:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/cc4Zpja9.s 			page 220


 5657              		.loc 1 4699 5 is_stmt 1 view .LVU1580
 5658              	.LVL396:
4699:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5659              		.loc 1 4699 13 is_stmt 0 view .LVU1581
 5660 0090 0124     		movs	r4, #1
 5661              	.LVL397:
4699:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5662              		.loc 1 4699 13 view .LVU1582
 5663 0092 DFE7     		b	.L434
 5664              	.L440:
 5665              		.align	2
 5666              	.L439:
 5667 0094 00000000 		.word	.LANCHOR10
 5668              		.cfi_endproc
 5669              	.LFE51:
 5671              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5672              		.align	1
 5673              		.global	xTaskGenericNotify
 5674              		.syntax unified
 5675              		.thumb
 5676              		.thumb_func
 5678              	xTaskGenericNotify:
 5679              	.LVL398:
 5680              	.LFB52:
4715:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5681              		.loc 1 4715 2 is_stmt 1 view -0
 5682              		.cfi_startproc
 5683              		@ args = 0, pretend = 0, frame = 0
 5684              		@ frame_needed = 0, uses_anonymous_args = 0
4715:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5685              		.loc 1 4715 2 is_stmt 0 view .LVU1584
 5686 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5687              	.LCFI51:
 5688              		.cfi_def_cfa_offset 24
 5689              		.cfi_offset 3, -24
 5690              		.cfi_offset 4, -20
 5691              		.cfi_offset 5, -16
 5692              		.cfi_offset 6, -12
 5693              		.cfi_offset 7, -8
 5694              		.cfi_offset 14, -4
4716:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5695              		.loc 1 4716 2 is_stmt 1 view .LVU1585
4717:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5696              		.loc 1 4717 2 view .LVU1586
 5697              	.LVL399:
4718:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5698              		.loc 1 4718 2 view .LVU1587
4720:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5699              		.loc 1 4720 3 view .LVU1588
 5700 0002 A8B1     		cbz	r0, .L460
 5701 0004 0F46     		mov	r7, r1
 5702 0006 1446     		mov	r4, r2
 5703 0008 1D46     		mov	r5, r3
 5704 000a 0646     		mov	r6, r0
4720:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5705              		.loc 1 4720 32 discriminator 2 view .LVU1589
4721:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 221


 5706              		.loc 1 4721 3 discriminator 2 view .LVU1590
 5707              	.LVL400:
4723:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 5708              		.loc 1 4723 3 discriminator 2 view .LVU1591
 5709 000c FFF7FEFF 		bl	vPortEnterCritical
 5710              	.LVL401:
4725:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5711              		.loc 1 4725 4 discriminator 2 view .LVU1592
4725:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5712              		.loc 1 4725 6 is_stmt 0 discriminator 2 view .LVU1593
 5713 0010 0DB1     		cbz	r5, .L444
4727:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5714              		.loc 1 4727 5 is_stmt 1 view .LVU1594
4727:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5715              		.loc 1 4727 42 is_stmt 0 view .LVU1595
 5716 0012 F36C     		ldr	r3, [r6, #76]
4727:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5717              		.loc 1 4727 35 view .LVU1596
 5718 0014 2B60     		str	r3, [r5]
 5719              	.L444:
4730:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5720              		.loc 1 4730 4 is_stmt 1 view .LVU1597
4730:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5721              		.loc 1 4730 26 is_stmt 0 view .LVU1598
 5722 0016 96F85030 		ldrb	r3, [r6, #80]	@ zero_extendqisi2
 5723 001a DBB2     		uxtb	r3, r3
 5724              	.LVL402:
4732:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5725              		.loc 1 4732 4 is_stmt 1 view .LVU1599
4732:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5726              		.loc 1 4732 25 is_stmt 0 view .LVU1600
 5727 001c 0222     		movs	r2, #2
 5728 001e 86F85020 		strb	r2, [r6, #80]
4734:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5729              		.loc 1 4734 4 is_stmt 1 view .LVU1601
 5730 0022 042C     		cmp	r4, #4
 5731 0024 1FD8     		bhi	.L445
 5732 0026 DFE804F0 		tbb	[pc, r4]
 5733              	.L447:
 5734 002a 2B       		.byte	(.L456-.L447)/2
 5735 002b 0C       		.byte	(.L450-.L447)/2
 5736 002c 11       		.byte	(.L449-.L447)/2
 5737 002d 16       		.byte	(.L448-.L447)/2
 5738 002e 19       		.byte	(.L446-.L447)/2
 5739              	.LVL403:
 5740 002f 00       		.p2align 1
 5741              	.L460:
4720:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5742              		.loc 1 4720 3 view .LVU1602
 5743              	.LBB196:
 5744              	.LBI196:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 5745              		.loc 2 195 30 view .LVU1603
 5746              	.LBB197:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5747              		.loc 2 197 1 view .LVU1604
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/cc4Zpja9.s 			page 222


 5748              		.loc 2 199 2 view .LVU1605
 5749              		.syntax unified
 5750              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5751 0030 4FF05003 			mov r3, #80												
 5752 0034 83F31188 		msr basepri, r3											
 5753 0038 BFF36F8F 		isb														
 5754 003c BFF34F8F 		dsb														
 5755              	
 5756              	@ 0 "" 2
 5757              	.LVL404:
 5758              		.thumb
 5759              		.syntax unified
 5760              	.L443:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5761              		.loc 2 199 2 is_stmt 0 view .LVU1606
 5762              	.LBE197:
 5763              	.LBE196:
4720:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5764              		.loc 1 4720 3 is_stmt 1 discriminator 1 view .LVU1607
4720:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5765              		.loc 1 4720 3 discriminator 1 view .LVU1608
4720:ThirdParty/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5766              		.loc 1 4720 3 discriminator 1 view .LVU1609
 5767 0040 FEE7     		b	.L443
 5768              	.LVL405:
 5769              	.L450:
4737:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 5770              		.loc 1 4737 6 view .LVU1610
4737:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 5771              		.loc 1 4737 29 is_stmt 0 view .LVU1611
 5772 0042 F26C     		ldr	r2, [r6, #76]
 5773 0044 1743     		orrs	r7, r7, r2
 5774              	.LVL406:
4737:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 5775              		.loc 1 4737 29 view .LVU1612
 5776 0046 F764     		str	r7, [r6, #76]
4738:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5777              		.loc 1 4738 6 is_stmt 1 view .LVU1613
4717:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5778              		.loc 1 4717 13 is_stmt 0 view .LVU1614
 5779 0048 0124     		movs	r4, #1
4738:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5780              		.loc 1 4738 6 view .LVU1615
 5781 004a 1AE0     		b	.L451
 5782              	.LVL407:
 5783              	.L449:
4741:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 5784              		.loc 1 4741 6 is_stmt 1 view .LVU1616
4741:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 5785              		.loc 1 4741 13 is_stmt 0 view .LVU1617
 5786 004c F26C     		ldr	r2, [r6, #76]
4741:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 5787              		.loc 1 4741 32 view .LVU1618
 5788 004e 0132     		adds	r2, r2, #1
 5789 0050 F264     		str	r2, [r6, #76]
4742:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5790              		.loc 1 4742 6 is_stmt 1 view .LVU1619
ARM GAS  /tmp/cc4Zpja9.s 			page 223


4717:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5791              		.loc 1 4717 13 is_stmt 0 view .LVU1620
 5792 0052 0124     		movs	r4, #1
4742:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5793              		.loc 1 4742 6 view .LVU1621
 5794 0054 15E0     		b	.L451
 5795              	.L448:
4745:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 5796              		.loc 1 4745 6 is_stmt 1 view .LVU1622
4745:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 5797              		.loc 1 4745 29 is_stmt 0 view .LVU1623
 5798 0056 F764     		str	r7, [r6, #76]
4746:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5799              		.loc 1 4746 6 is_stmt 1 view .LVU1624
4717:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5800              		.loc 1 4717 13 is_stmt 0 view .LVU1625
 5801 0058 0124     		movs	r4, #1
4746:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5802              		.loc 1 4746 6 view .LVU1626
 5803 005a 12E0     		b	.L451
 5804              	.L446:
4749:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 5805              		.loc 1 4749 6 is_stmt 1 view .LVU1627
4749:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 5806              		.loc 1 4749 8 is_stmt 0 view .LVU1628
 5807 005c 022B     		cmp	r3, #2
 5808 005e 16D0     		beq	.L457
4751:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5809              		.loc 1 4751 7 is_stmt 1 view .LVU1629
4751:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5810              		.loc 1 4751 30 is_stmt 0 view .LVU1630
 5811 0060 F764     		str	r7, [r6, #76]
4717:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5812              		.loc 1 4717 13 view .LVU1631
 5813 0062 0124     		movs	r4, #1
 5814 0064 0DE0     		b	.L451
 5815              	.L445:
4769:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5816              		.loc 1 4769 6 is_stmt 1 view .LVU1632
 5817 0066 F26C     		ldr	r2, [r6, #76]
 5818 0068 B2F1FF3F 		cmp	r2, #-1
 5819 006c 11D0     		beq	.L458
4769:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5820              		.loc 1 4769 6 view .LVU1633
 5821              	.LBB198:
 5822              	.LBI198:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 5823              		.loc 2 195 30 view .LVU1634
 5824              	.LBB199:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5825              		.loc 2 197 1 view .LVU1635
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5826              		.loc 2 199 2 view .LVU1636
 5827              		.syntax unified
 5828              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5829 006e 4FF05003 			mov r3, #80												
 5830 0072 83F31188 		msr basepri, r3											
ARM GAS  /tmp/cc4Zpja9.s 			page 224


 5831 0076 BFF36F8F 		isb														
 5832 007a BFF34F8F 		dsb														
 5833              	
 5834              	@ 0 "" 2
 5835              	.LVL408:
 5836              		.thumb
 5837              		.syntax unified
 5838              	.L452:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5839              		.loc 2 199 2 is_stmt 0 view .LVU1637
 5840              	.LBE199:
 5841              	.LBE198:
4769:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5842              		.loc 1 4769 6 is_stmt 1 discriminator 2 view .LVU1638
4769:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5843              		.loc 1 4769 6 discriminator 2 view .LVU1639
4769:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5844              		.loc 1 4769 6 discriminator 2 view .LVU1640
 5845 007e FEE7     		b	.L452
 5846              	.LVL409:
 5847              	.L456:
4734:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5848              		.loc 1 4734 4 is_stmt 0 view .LVU1641
 5849 0080 0124     		movs	r4, #1
 5850              	.LVL410:
 5851              	.L451:
4774:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5852              		.loc 1 4774 22 is_stmt 1 view .LVU1642
4778:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5853              		.loc 1 4778 4 view .LVU1643
4778:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 5854              		.loc 1 4778 6 is_stmt 0 view .LVU1644
 5855 0082 012B     		cmp	r3, #1
 5856 0084 07D0     		beq	.L461
 5857              	.LVL411:
 5858              	.L453:
4815:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 5859              		.loc 1 4815 29 is_stmt 1 view .LVU1645
4818:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5860              		.loc 1 4818 3 view .LVU1646
 5861 0086 FFF7FEFF 		bl	vPortExitCritical
 5862              	.LVL412:
4820:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 5863              		.loc 1 4820 3 view .LVU1647
4821:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5864              		.loc 1 4821 2 is_stmt 0 view .LVU1648
 5865 008a 2046     		mov	r0, r4
 5866 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5867              	.LVL413:
 5868              	.L457:
4756:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 5869              		.loc 1 4756 15 view .LVU1649
 5870 008e 0024     		movs	r4, #0
 5871 0090 F7E7     		b	.L451
 5872              	.L458:
4717:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5873              		.loc 1 4717 13 view .LVU1650
ARM GAS  /tmp/cc4Zpja9.s 			page 225


 5874 0092 0124     		movs	r4, #1
 5875 0094 F5E7     		b	.L451
 5876              	.LVL414:
 5877              	.L461:
4780:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5878              		.loc 1 4780 5 is_stmt 1 view .LVU1651
4780:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5879              		.loc 1 4780 14 is_stmt 0 view .LVU1652
 5880 0096 351D     		adds	r5, r6, #4
 5881              	.LVL415:
4780:ThirdParty/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5882              		.loc 1 4780 14 view .LVU1653
 5883 0098 2846     		mov	r0, r5
 5884 009a FFF7FEFF 		bl	uxListRemove
 5885              	.LVL416:
4781:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5886              		.loc 1 4781 5 is_stmt 1 view .LVU1654
4781:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5887              		.loc 1 4781 5 view .LVU1655
 5888 009e F06A     		ldr	r0, [r6, #44]
 5889 00a0 0123     		movs	r3, #1
 5890 00a2 8340     		lsls	r3, r3, r0
 5891 00a4 134A     		ldr	r2, .L462
 5892 00a6 1168     		ldr	r1, [r2]
 5893 00a8 0B43     		orrs	r3, r3, r1
 5894 00aa 1360     		str	r3, [r2]
4781:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5895              		.loc 1 4781 5 view .LVU1656
 5896 00ac 00EB8000 		add	r0, r0, r0, lsl #2
 5897 00b0 2946     		mov	r1, r5
 5898 00b2 114B     		ldr	r3, .L462+4
 5899 00b4 03EB8000 		add	r0, r3, r0, lsl #2
 5900 00b8 FFF7FEFF 		bl	vListInsertEnd
 5901              	.LVL417:
4781:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5902              		.loc 1 4781 35 view .LVU1657
4784:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5903              		.loc 1 4784 5 view .LVU1658
 5904 00bc B36A     		ldr	r3, [r6, #40]
 5905 00be 43B1     		cbz	r3, .L454
4784:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5906              		.loc 1 4784 5 view .LVU1659
 5907              	.LBB200:
 5908              	.LBI200:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 5909              		.loc 2 195 30 view .LVU1660
 5910              	.LBB201:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 5911              		.loc 2 197 1 view .LVU1661
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5912              		.loc 2 199 2 view .LVU1662
 5913              		.syntax unified
 5914              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5915 00c0 4FF05003 			mov r3, #80												
 5916 00c4 83F31188 		msr basepri, r3											
 5917 00c8 BFF36F8F 		isb														
 5918 00cc BFF34F8F 		dsb														
ARM GAS  /tmp/cc4Zpja9.s 			page 226


 5919              	
 5920              	@ 0 "" 2
 5921              	.LVL418:
 5922              		.thumb
 5923              		.syntax unified
 5924              	.L455:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5925              		.loc 2 199 2 is_stmt 0 view .LVU1663
 5926              	.LBE201:
 5927              	.LBE200:
4784:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5928              		.loc 1 4784 5 is_stmt 1 discriminator 3 view .LVU1664
4784:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5929              		.loc 1 4784 5 discriminator 3 view .LVU1665
4784:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5930              		.loc 1 4784 5 discriminator 3 view .LVU1666
 5931 00d0 FEE7     		b	.L455
 5932              	.L454:
4784:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5933              		.loc 1 4784 82 discriminator 2 view .LVU1667
4802:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5934              		.loc 1 4802 5 discriminator 2 view .LVU1668
4802:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5935              		.loc 1 4802 14 is_stmt 0 discriminator 2 view .LVU1669
 5936 00d2 F26A     		ldr	r2, [r6, #44]
4802:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5937              		.loc 1 4802 41 discriminator 2 view .LVU1670
 5938 00d4 094B     		ldr	r3, .L462+8
 5939 00d6 1B68     		ldr	r3, [r3]
 5940 00d8 DB6A     		ldr	r3, [r3, #44]
4802:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 5941              		.loc 1 4802 7 discriminator 2 view .LVU1671
 5942 00da 9A42     		cmp	r2, r3
 5943 00dc D3D9     		bls	.L453
4806:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5944              		.loc 1 4806 6 is_stmt 1 view .LVU1672
 5945 00de 4FF0E023 		mov	r3, #-536813568
 5946 00e2 4FF08052 		mov	r2, #268435456
 5947 00e6 C3F8042D 		str	r2, [r3, #3332]
4806:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5948              		.loc 1 4806 6 view .LVU1673
 5949              		.syntax unified
 5950              	@ 4806 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 5951 00ea BFF34F8F 		dsb
 5952              	@ 0 "" 2
4806:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5953              		.loc 1 4806 6 view .LVU1674
 5954              	@ 4806 "ThirdParty/FreeRTOS/Source/tasks.c" 1
 5955 00ee BFF36F8F 		isb
 5956              	@ 0 "" 2
4806:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 5957              		.loc 1 4806 37 view .LVU1675
 5958              		.thumb
 5959              		.syntax unified
 5960 00f2 C8E7     		b	.L453
 5961              	.L463:
 5962              		.align	2
ARM GAS  /tmp/cc4Zpja9.s 			page 227


 5963              	.L462:
 5964 00f4 00000000 		.word	.LANCHOR13
 5965 00f8 00000000 		.word	.LANCHOR4
 5966 00fc 00000000 		.word	.LANCHOR10
 5967              		.cfi_endproc
 5968              	.LFE52:
 5970              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5971              		.align	1
 5972              		.global	xTaskGenericNotifyFromISR
 5973              		.syntax unified
 5974              		.thumb
 5975              		.thumb_func
 5977              	xTaskGenericNotifyFromISR:
 5978              	.LVL419:
 5979              	.LFB53:
4829:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5980              		.loc 1 4829 2 view -0
 5981              		.cfi_startproc
 5982              		@ args = 4, pretend = 0, frame = 0
 5983              		@ frame_needed = 0, uses_anonymous_args = 0
4830:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5984              		.loc 1 4830 2 view .LVU1677
4831:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 5985              		.loc 1 4831 2 view .LVU1678
4832:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5986              		.loc 1 4832 2 view .LVU1679
4833:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5987              		.loc 1 4833 2 view .LVU1680
4835:ThirdParty/FreeRTOS/Source/tasks.c **** 
 5988              		.loc 1 4835 3 view .LVU1681
 5989 0000 08B3     		cbz	r0, .L487
4829:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5990              		.loc 1 4829 2 is_stmt 0 discriminator 2 view .LVU1682
 5991 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 5992              	.LCFI52:
 5993              		.cfi_def_cfa_offset 24
 5994              		.cfi_offset 4, -24
 5995              		.cfi_offset 5, -20
 5996              		.cfi_offset 6, -16
 5997              		.cfi_offset 7, -12
 5998              		.cfi_offset 8, -8
 5999              		.cfi_offset 14, -4
 6000 0006 0E46     		mov	r6, r1
 6001 0008 1446     		mov	r4, r2
 6002 000a 1D46     		mov	r5, r3
 6003 000c 0746     		mov	r7, r0
4835:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6004              		.loc 1 4835 32 is_stmt 1 discriminator 2 view .LVU1683
4853:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6005              		.loc 1 4853 3 discriminator 2 view .LVU1684
 6006 000e FFF7FEFF 		bl	vPortValidateInterruptPriority
 6007              	.LVL420:
4855:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6008              		.loc 1 4855 3 discriminator 2 view .LVU1685
4857:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 6009              		.loc 1 4857 3 discriminator 2 view .LVU1686
 6010              	.LBB202:
ARM GAS  /tmp/cc4Zpja9.s 			page 228


 6011              	.LBI202:
 211:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6012              		.loc 2 211 34 discriminator 2 view .LVU1687
 6013              	.LBB203:
 213:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6014              		.loc 2 213 1 discriminator 2 view .LVU1688
 215:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6015              		.loc 2 215 2 discriminator 2 view .LVU1689
 6016              		.syntax unified
 6017              	@ 215 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6018 0012 EFF31188 			mrs r8, basepri											
 6019 0016 4FF05003 		mov r3, #80												
 6020 001a 83F31188 		msr basepri, r3											
 6021 001e BFF36F8F 		isb														
 6022 0022 BFF34F8F 		dsb														
 6023              	
 6024              	@ 0 "" 2
 6025              	.LVL421:
 227:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6026              		.loc 2 227 2 discriminator 2 view .LVU1690
 227:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6027              		.loc 2 227 2 is_stmt 0 discriminator 2 view .LVU1691
 6028              		.thumb
 6029              		.syntax unified
 6030              	.LBE203:
 6031              	.LBE202:
4859:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 6032              		.loc 1 4859 4 is_stmt 1 discriminator 2 view .LVU1692
4859:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 6033              		.loc 1 4859 6 is_stmt 0 discriminator 2 view .LVU1693
 6034 0026 0DB1     		cbz	r5, .L467
4861:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 6035              		.loc 1 4861 5 is_stmt 1 view .LVU1694
4861:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 6036              		.loc 1 4861 42 is_stmt 0 view .LVU1695
 6037 0028 FB6C     		ldr	r3, [r7, #76]
4861:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 6038              		.loc 1 4861 35 view .LVU1696
 6039 002a 2B60     		str	r3, [r5]
 6040              	.L467:
4864:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6041              		.loc 1 4864 4 is_stmt 1 view .LVU1697
4864:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6042              		.loc 1 4864 26 is_stmt 0 view .LVU1698
 6043 002c 97F85030 		ldrb	r3, [r7, #80]	@ zero_extendqisi2
 6044 0030 DBB2     		uxtb	r3, r3
 6045              	.LVL422:
4865:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6046              		.loc 1 4865 4 is_stmt 1 view .LVU1699
4865:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6047              		.loc 1 4865 25 is_stmt 0 view .LVU1700
 6048 0032 0222     		movs	r2, #2
 6049 0034 87F85020 		strb	r2, [r7, #80]
4867:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 6050              		.loc 1 4867 4 is_stmt 1 view .LVU1701
 6051 0038 042C     		cmp	r4, #4
 6052 003a 1FD8     		bhi	.L468
ARM GAS  /tmp/cc4Zpja9.s 			page 229


 6053 003c DFE804F0 		tbb	[pc, r4]
 6054              	.L470:
 6055 0040 2B       		.byte	(.L482-.L470)/2
 6056 0041 0C       		.byte	(.L473-.L470)/2
 6057 0042 11       		.byte	(.L472-.L470)/2
 6058 0043 16       		.byte	(.L471-.L470)/2
 6059 0044 19       		.byte	(.L469-.L470)/2
 6060              	.LVL423:
 6061 0045 00       		.p2align 1
 6062              	.L487:
 6063              	.LCFI53:
 6064              		.cfi_def_cfa_offset 0
 6065              		.cfi_restore 4
 6066              		.cfi_restore 5
 6067              		.cfi_restore 6
 6068              		.cfi_restore 7
 6069              		.cfi_restore 8
 6070              		.cfi_restore 14
4835:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6071              		.loc 1 4835 3 view .LVU1702
 6072              	.LBB204:
 6073              	.LBI204:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6074              		.loc 2 195 30 view .LVU1703
 6075              	.LBB205:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6076              		.loc 2 197 1 view .LVU1704
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6077              		.loc 2 199 2 view .LVU1705
 6078              		.syntax unified
 6079              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6080 0046 4FF05003 			mov r3, #80												
 6081 004a 83F31188 		msr basepri, r3											
 6082 004e BFF36F8F 		isb														
 6083 0052 BFF34F8F 		dsb														
 6084              	
 6085              	@ 0 "" 2
 6086              	.LVL424:
 6087              		.thumb
 6088              		.syntax unified
 6089              	.L466:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6090              		.loc 2 199 2 is_stmt 0 view .LVU1706
 6091              	.LBE205:
 6092              	.LBE204:
4835:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6093              		.loc 1 4835 3 is_stmt 1 discriminator 1 view .LVU1707
4835:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6094              		.loc 1 4835 3 discriminator 1 view .LVU1708
4835:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6095              		.loc 1 4835 3 discriminator 1 view .LVU1709
 6096 0056 FEE7     		b	.L466
 6097              	.LVL425:
 6098              	.L473:
 6099              	.LCFI54:
 6100              		.cfi_def_cfa_offset 24
 6101              		.cfi_offset 4, -24
ARM GAS  /tmp/cc4Zpja9.s 			page 230


 6102              		.cfi_offset 5, -20
 6103              		.cfi_offset 6, -16
 6104              		.cfi_offset 7, -12
 6105              		.cfi_offset 8, -8
 6106              		.cfi_offset 14, -4
4870:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6107              		.loc 1 4870 6 view .LVU1710
4870:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6108              		.loc 1 4870 29 is_stmt 0 view .LVU1711
 6109 0058 FA6C     		ldr	r2, [r7, #76]
 6110 005a 1643     		orrs	r6, r6, r2
 6111              	.LVL426:
4870:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6112              		.loc 1 4870 29 view .LVU1712
 6113 005c FE64     		str	r6, [r7, #76]
4871:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6114              		.loc 1 4871 6 is_stmt 1 view .LVU1713
4832:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6115              		.loc 1 4832 13 is_stmt 0 view .LVU1714
 6116 005e 0124     		movs	r4, #1
4871:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6117              		.loc 1 4871 6 view .LVU1715
 6118 0060 1AE0     		b	.L474
 6119              	.LVL427:
 6120              	.L472:
4874:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6121              		.loc 1 4874 6 is_stmt 1 view .LVU1716
4874:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6122              		.loc 1 4874 13 is_stmt 0 view .LVU1717
 6123 0062 FA6C     		ldr	r2, [r7, #76]
4874:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6124              		.loc 1 4874 32 view .LVU1718
 6125 0064 0132     		adds	r2, r2, #1
 6126 0066 FA64     		str	r2, [r7, #76]
4875:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6127              		.loc 1 4875 6 is_stmt 1 view .LVU1719
4832:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6128              		.loc 1 4832 13 is_stmt 0 view .LVU1720
 6129 0068 0124     		movs	r4, #1
4875:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6130              		.loc 1 4875 6 view .LVU1721
 6131 006a 15E0     		b	.L474
 6132              	.L471:
4878:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6133              		.loc 1 4878 6 is_stmt 1 view .LVU1722
4878:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6134              		.loc 1 4878 29 is_stmt 0 view .LVU1723
 6135 006c FE64     		str	r6, [r7, #76]
4879:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6136              		.loc 1 4879 6 is_stmt 1 view .LVU1724
4832:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6137              		.loc 1 4832 13 is_stmt 0 view .LVU1725
 6138 006e 0124     		movs	r4, #1
4879:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6139              		.loc 1 4879 6 view .LVU1726
 6140 0070 12E0     		b	.L474
 6141              	.L469:
ARM GAS  /tmp/cc4Zpja9.s 			page 231


4882:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 6142              		.loc 1 4882 6 is_stmt 1 view .LVU1727
4882:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 6143              		.loc 1 4882 8 is_stmt 0 view .LVU1728
 6144 0072 022B     		cmp	r3, #2
 6145 0074 17D0     		beq	.L483
4884:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 6146              		.loc 1 4884 7 is_stmt 1 view .LVU1729
4884:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 6147              		.loc 1 4884 30 is_stmt 0 view .LVU1730
 6148 0076 FE64     		str	r6, [r7, #76]
4832:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6149              		.loc 1 4832 13 view .LVU1731
 6150 0078 0124     		movs	r4, #1
 6151 007a 0DE0     		b	.L474
 6152              	.L468:
4902:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6153              		.loc 1 4902 6 is_stmt 1 view .LVU1732
 6154 007c FA6C     		ldr	r2, [r7, #76]
 6155 007e B2F1FF3F 		cmp	r2, #-1
 6156 0082 12D0     		beq	.L484
4902:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6157              		.loc 1 4902 6 view .LVU1733
 6158              	.LBB206:
 6159              	.LBI206:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6160              		.loc 2 195 30 view .LVU1734
 6161              	.LBB207:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6162              		.loc 2 197 1 view .LVU1735
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6163              		.loc 2 199 2 view .LVU1736
 6164              		.syntax unified
 6165              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6166 0084 4FF05003 			mov r3, #80												
 6167 0088 83F31188 		msr basepri, r3											
 6168 008c BFF36F8F 		isb														
 6169 0090 BFF34F8F 		dsb														
 6170              	
 6171              	@ 0 "" 2
 6172              	.LVL428:
 6173              		.thumb
 6174              		.syntax unified
 6175              	.L475:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6176              		.loc 2 199 2 is_stmt 0 view .LVU1737
 6177              	.LBE207:
 6178              	.LBE206:
4902:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6179              		.loc 1 4902 6 is_stmt 1 discriminator 2 view .LVU1738
4902:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6180              		.loc 1 4902 6 discriminator 2 view .LVU1739
4902:ThirdParty/FreeRTOS/Source/tasks.c **** 					break;
 6181              		.loc 1 4902 6 discriminator 2 view .LVU1740
 6182 0094 FEE7     		b	.L475
 6183              	.LVL429:
 6184              	.L482:
ARM GAS  /tmp/cc4Zpja9.s 			page 232


4867:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 6185              		.loc 1 4867 4 is_stmt 0 view .LVU1741
 6186 0096 0124     		movs	r4, #1
 6187              	.LVL430:
 6188              	.L474:
4906:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6189              		.loc 1 4906 31 is_stmt 1 view .LVU1742
4910:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 6190              		.loc 1 4910 4 view .LVU1743
4910:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 6191              		.loc 1 4910 6 is_stmt 0 view .LVU1744
 6192 0098 012B     		cmp	r3, #1
 6193 009a 08D0     		beq	.L488
 6194              	.LVL431:
 6195              	.L476:
4943:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6196              		.loc 1 4943 30 is_stmt 1 view .LVU1745
4947:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6197              		.loc 1 4947 3 view .LVU1746
 6198              	.LBB208:
 6199              	.LBI208:
 231:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6200              		.loc 2 231 30 view .LVU1747
 6201              	.LBB209:
 6202              		.loc 2 233 2 view .LVU1748
 6203              		.syntax unified
 6204              	@ 233 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6205 009c 88F31188 			msr basepri, r8	
 6206              	@ 0 "" 2
 6207              	.LVL432:
 6208              		.loc 2 233 2 is_stmt 0 view .LVU1749
 6209              		.thumb
 6210              		.syntax unified
 6211              	.LBE209:
 6212              	.LBE208:
4949:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 6213              		.loc 1 4949 3 is_stmt 1 view .LVU1750
4950:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6214              		.loc 1 4950 2 is_stmt 0 view .LVU1751
 6215 00a0 2046     		mov	r0, r4
 6216 00a2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6217              	.LVL433:
 6218              	.L483:
4889:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 6219              		.loc 1 4889 15 view .LVU1752
 6220 00a6 0024     		movs	r4, #0
 6221 00a8 F6E7     		b	.L474
 6222              	.L484:
4832:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6223              		.loc 1 4832 13 view .LVU1753
 6224 00aa 0124     		movs	r4, #1
 6225 00ac F4E7     		b	.L474
 6226              	.LVL434:
 6227              	.L488:
4913:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6228              		.loc 1 4913 5 is_stmt 1 view .LVU1754
 6229 00ae BB6A     		ldr	r3, [r7, #40]
ARM GAS  /tmp/cc4Zpja9.s 			page 233


 6230              	.LVL435:
4913:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6231              		.loc 1 4913 5 is_stmt 0 view .LVU1755
 6232 00b0 43B1     		cbz	r3, .L477
4913:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6233              		.loc 1 4913 5 is_stmt 1 view .LVU1756
 6234              	.LBB210:
 6235              	.LBI210:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6236              		.loc 2 195 30 view .LVU1757
 6237              	.LBB211:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6238              		.loc 2 197 1 view .LVU1758
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6239              		.loc 2 199 2 view .LVU1759
 6240              		.syntax unified
 6241              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6242 00b2 4FF05003 			mov r3, #80												
 6243 00b6 83F31188 		msr basepri, r3											
 6244 00ba BFF36F8F 		isb														
 6245 00be BFF34F8F 		dsb														
 6246              	
 6247              	@ 0 "" 2
 6248              	.LVL436:
 6249              		.thumb
 6250              		.syntax unified
 6251              	.L478:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6252              		.loc 2 199 2 is_stmt 0 view .LVU1760
 6253              	.LBE211:
 6254              	.LBE210:
4913:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6255              		.loc 1 4913 5 is_stmt 1 discriminator 3 view .LVU1761
4913:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6256              		.loc 1 4913 5 discriminator 3 view .LVU1762
4913:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6257              		.loc 1 4913 5 discriminator 3 view .LVU1763
 6258 00c2 FEE7     		b	.L478
 6259              	.L477:
4913:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6260              		.loc 1 4913 82 discriminator 2 view .LVU1764
4915:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6261              		.loc 1 4915 5 discriminator 2 view .LVU1765
4915:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6262              		.loc 1 4915 30 is_stmt 0 discriminator 2 view .LVU1766
 6263 00c4 154B     		ldr	r3, .L489
 6264 00c6 1B68     		ldr	r3, [r3]
4915:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6265              		.loc 1 4915 7 discriminator 2 view .LVU1767
 6266 00c8 0BBB     		cbnz	r3, .L479
4917:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6267              		.loc 1 4917 6 is_stmt 1 view .LVU1768
4917:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6268              		.loc 1 4917 15 is_stmt 0 view .LVU1769
 6269 00ca 3D1D     		adds	r5, r7, #4
 6270              	.LVL437:
4917:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/cc4Zpja9.s 			page 234


 6271              		.loc 1 4917 15 view .LVU1770
 6272 00cc 2846     		mov	r0, r5
 6273 00ce FFF7FEFF 		bl	uxListRemove
 6274              	.LVL438:
4918:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6275              		.loc 1 4918 6 is_stmt 1 view .LVU1771
4918:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6276              		.loc 1 4918 6 view .LVU1772
 6277 00d2 F86A     		ldr	r0, [r7, #44]
 6278 00d4 0123     		movs	r3, #1
 6279 00d6 8340     		lsls	r3, r3, r0
 6280 00d8 114A     		ldr	r2, .L489+4
 6281 00da 1168     		ldr	r1, [r2]
 6282 00dc 0B43     		orrs	r3, r3, r1
 6283 00de 1360     		str	r3, [r2]
4918:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6284              		.loc 1 4918 6 view .LVU1773
 6285 00e0 00EB8000 		add	r0, r0, r0, lsl #2
 6286 00e4 2946     		mov	r1, r5
 6287 00e6 0F4B     		ldr	r3, .L489+8
 6288 00e8 03EB8000 		add	r0, r3, r0, lsl #2
 6289 00ec FFF7FEFF 		bl	vListInsertEnd
 6290              	.LVL439:
4918:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6291              		.loc 1 4918 36 view .LVU1774
 6292              	.L480:
4927:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6293              		.loc 1 4927 5 view .LVU1775
4927:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6294              		.loc 1 4927 14 is_stmt 0 view .LVU1776
 6295 00f0 FA6A     		ldr	r2, [r7, #44]
4927:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6296              		.loc 1 4927 41 view .LVU1777
 6297 00f2 0D4B     		ldr	r3, .L489+12
 6298 00f4 1B68     		ldr	r3, [r3]
 6299 00f6 DB6A     		ldr	r3, [r3, #44]
4927:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6300              		.loc 1 4927 7 view .LVU1778
 6301 00f8 9A42     		cmp	r2, r3
 6302 00fa CFD9     		bls	.L476
4931:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 6303              		.loc 1 4931 6 is_stmt 1 view .LVU1779
4931:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 6304              		.loc 1 4931 8 is_stmt 0 view .LVU1780
 6305 00fc 069B     		ldr	r3, [sp, #24]
 6306 00fe 13B1     		cbz	r3, .L481
4933:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 6307              		.loc 1 4933 7 is_stmt 1 view .LVU1781
4933:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 6308              		.loc 1 4933 34 is_stmt 0 view .LVU1782
 6309 0100 0123     		movs	r3, #1
 6310 0102 069A     		ldr	r2, [sp, #24]
 6311 0104 1360     		str	r3, [r2]
 6312              	.L481:
4939:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6313              		.loc 1 4939 6 is_stmt 1 view .LVU1783
4939:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/cc4Zpja9.s 			page 235


 6314              		.loc 1 4939 20 is_stmt 0 view .LVU1784
 6315 0106 094B     		ldr	r3, .L489+16
 6316 0108 0122     		movs	r2, #1
 6317 010a 1A60     		str	r2, [r3]
 6318 010c C6E7     		b	.L476
 6319              	.LVL440:
 6320              	.L479:
4924:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6321              		.loc 1 4924 6 is_stmt 1 view .LVU1785
 6322 010e 07F11801 		add	r1, r7, #24
 6323 0112 0748     		ldr	r0, .L489+20
 6324 0114 FFF7FEFF 		bl	vListInsertEnd
 6325              	.LVL441:
 6326 0118 EAE7     		b	.L480
 6327              	.L490:
 6328 011a 00BF     		.align	2
 6329              	.L489:
 6330 011c 00000000 		.word	.LANCHOR16
 6331 0120 00000000 		.word	.LANCHOR13
 6332 0124 00000000 		.word	.LANCHOR4
 6333 0128 00000000 		.word	.LANCHOR10
 6334 012c 00000000 		.word	.LANCHOR20
 6335 0130 00000000 		.word	.LANCHOR1
 6336              		.cfi_endproc
 6337              	.LFE53:
 6339              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 6340              		.align	1
 6341              		.global	vTaskNotifyGiveFromISR
 6342              		.syntax unified
 6343              		.thumb
 6344              		.thumb_func
 6346              	vTaskNotifyGiveFromISR:
 6347              	.LVL442:
 6348              	.LFB54:
4958:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 6349              		.loc 1 4958 2 view -0
 6350              		.cfi_startproc
 6351              		@ args = 0, pretend = 0, frame = 0
 6352              		@ frame_needed = 0, uses_anonymous_args = 0
4958:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 6353              		.loc 1 4958 2 is_stmt 0 view .LVU1787
 6354 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6355              	.LCFI55:
 6356              		.cfi_def_cfa_offset 24
 6357              		.cfi_offset 3, -24
 6358              		.cfi_offset 4, -20
 6359              		.cfi_offset 5, -16
 6360              		.cfi_offset 6, -12
 6361              		.cfi_offset 7, -8
 6362              		.cfi_offset 14, -4
4959:ThirdParty/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 6363              		.loc 1 4959 2 is_stmt 1 view .LVU1788
4960:ThirdParty/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 6364              		.loc 1 4960 2 view .LVU1789
4961:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6365              		.loc 1 4961 2 view .LVU1790
4963:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 236


 6366              		.loc 1 4963 3 view .LVU1791
 6367 0002 D8B1     		cbz	r0, .L501
 6368 0004 0D46     		mov	r5, r1
 6369 0006 0446     		mov	r4, r0
4963:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6370              		.loc 1 4963 32 discriminator 2 view .LVU1792
4981:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6371              		.loc 1 4981 3 discriminator 2 view .LVU1793
 6372 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 6373              	.LVL443:
4983:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6374              		.loc 1 4983 3 discriminator 2 view .LVU1794
4985:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 6375              		.loc 1 4985 3 discriminator 2 view .LVU1795
 6376              	.LBB212:
 6377              	.LBI212:
 211:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6378              		.loc 2 211 34 discriminator 2 view .LVU1796
 6379              	.LBB213:
 213:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6380              		.loc 2 213 1 discriminator 2 view .LVU1797
 215:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6381              		.loc 2 215 2 discriminator 2 view .LVU1798
 6382              		.syntax unified
 6383              	@ 215 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6384 000c EFF31186 			mrs r6, basepri											
 6385 0010 4FF05003 		mov r3, #80												
 6386 0014 83F31188 		msr basepri, r3											
 6387 0018 BFF36F8F 		isb														
 6388 001c BFF34F8F 		dsb														
 6389              	
 6390              	@ 0 "" 2
 6391              	.LVL444:
 227:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6392              		.loc 2 227 2 discriminator 2 view .LVU1799
 227:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 6393              		.loc 2 227 2 is_stmt 0 discriminator 2 view .LVU1800
 6394              		.thumb
 6395              		.syntax unified
 6396              	.LBE213:
 6397              	.LBE212:
4987:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6398              		.loc 1 4987 4 is_stmt 1 discriminator 2 view .LVU1801
4987:ThirdParty/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6399              		.loc 1 4987 26 is_stmt 0 discriminator 2 view .LVU1802
 6400 0020 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 6401 0024 DBB2     		uxtb	r3, r3
 6402              	.LVL445:
4988:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6403              		.loc 1 4988 4 is_stmt 1 discriminator 2 view .LVU1803
4988:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6404              		.loc 1 4988 25 is_stmt 0 discriminator 2 view .LVU1804
 6405 0026 0222     		movs	r2, #2
 6406 0028 84F85020 		strb	r2, [r4, #80]
4992:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6407              		.loc 1 4992 4 is_stmt 1 discriminator 2 view .LVU1805
4992:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 237


 6408              		.loc 1 4992 11 is_stmt 0 discriminator 2 view .LVU1806
 6409 002c E26C     		ldr	r2, [r4, #76]
4992:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6410              		.loc 1 4992 30 discriminator 2 view .LVU1807
 6411 002e 0132     		adds	r2, r2, #1
 6412 0030 E264     		str	r2, [r4, #76]
4994:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6413              		.loc 1 4994 36 is_stmt 1 discriminator 2 view .LVU1808
4998:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 6414              		.loc 1 4998 4 discriminator 2 view .LVU1809
4998:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 6415              		.loc 1 4998 6 is_stmt 0 discriminator 2 view .LVU1810
 6416 0032 012B     		cmp	r3, #1
 6417 0034 0BD0     		beq	.L502
 6418              	.LVL446:
 6419              	.L494:
5031:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6420              		.loc 1 5031 30 is_stmt 1 view .LVU1811
5035:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 6421              		.loc 1 5035 3 view .LVU1812
 6422              	.LBB214:
 6423              	.LBI214:
 231:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6424              		.loc 2 231 30 view .LVU1813
 6425              	.LBB215:
 6426              		.loc 2 233 2 view .LVU1814
 6427              		.syntax unified
 6428              	@ 233 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6429 0036 86F31188 			msr basepri, r6	
 6430              	@ 0 "" 2
 6431              	.LVL447:
 6432              		.loc 2 233 2 is_stmt 0 view .LVU1815
 6433              		.thumb
 6434              		.syntax unified
 6435              	.LBE215:
 6436              	.LBE214:
5036:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6437              		.loc 1 5036 2 view .LVU1816
 6438 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6439              	.LVL448:
 6440              	.L501:
4963:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6441              		.loc 1 4963 3 is_stmt 1 view .LVU1817
 6442              	.LBB216:
 6443              	.LBI216:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6444              		.loc 2 195 30 view .LVU1818
 6445              	.LBB217:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6446              		.loc 2 197 1 view .LVU1819
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6447              		.loc 2 199 2 view .LVU1820
 6448              		.syntax unified
 6449              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6450 003c 4FF05003 			mov r3, #80												
 6451 0040 83F31188 		msr basepri, r3											
 6452 0044 BFF36F8F 		isb														
ARM GAS  /tmp/cc4Zpja9.s 			page 238


 6453 0048 BFF34F8F 		dsb														
 6454              	
 6455              	@ 0 "" 2
 6456              	.LVL449:
 6457              		.thumb
 6458              		.syntax unified
 6459              	.L493:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6460              		.loc 2 199 2 is_stmt 0 view .LVU1821
 6461              	.LBE217:
 6462              	.LBE216:
4963:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6463              		.loc 1 4963 3 is_stmt 1 discriminator 1 view .LVU1822
4963:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6464              		.loc 1 4963 3 discriminator 1 view .LVU1823
4963:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6465              		.loc 1 4963 3 discriminator 1 view .LVU1824
 6466 004c FEE7     		b	.L493
 6467              	.LVL450:
 6468              	.L502:
5001:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6469              		.loc 1 5001 5 view .LVU1825
 6470 004e A36A     		ldr	r3, [r4, #40]
 6471              	.LVL451:
5001:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6472              		.loc 1 5001 5 is_stmt 0 view .LVU1826
 6473 0050 43B1     		cbz	r3, .L495
5001:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6474              		.loc 1 5001 5 is_stmt 1 view .LVU1827
 6475              	.LBB218:
 6476              	.LBI218:
 195:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 6477              		.loc 2 195 30 view .LVU1828
 6478              	.LBB219:
 197:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 6479              		.loc 2 197 1 view .LVU1829
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6480              		.loc 2 199 2 view .LVU1830
 6481              		.syntax unified
 6482              	@ 199 "ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6483 0052 4FF05003 			mov r3, #80												
 6484 0056 83F31188 		msr basepri, r3											
 6485 005a BFF36F8F 		isb														
 6486 005e BFF34F8F 		dsb														
 6487              	
 6488              	@ 0 "" 2
 6489              	.LVL452:
 6490              		.thumb
 6491              		.syntax unified
 6492              	.L496:
 199:ThirdParty/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6493              		.loc 2 199 2 is_stmt 0 view .LVU1831
 6494              	.LBE219:
 6495              	.LBE218:
5001:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6496              		.loc 1 5001 5 is_stmt 1 discriminator 2 view .LVU1832
5001:ThirdParty/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/cc4Zpja9.s 			page 239


 6497              		.loc 1 5001 5 discriminator 2 view .LVU1833
5001:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6498              		.loc 1 5001 5 discriminator 2 view .LVU1834
 6499 0062 FEE7     		b	.L496
 6500              	.L495:
5001:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6501              		.loc 1 5001 82 discriminator 2 view .LVU1835
5003:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6502              		.loc 1 5003 5 discriminator 2 view .LVU1836
5003:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6503              		.loc 1 5003 30 is_stmt 0 discriminator 2 view .LVU1837
 6504 0064 144B     		ldr	r3, .L503
 6505 0066 1B68     		ldr	r3, [r3]
5003:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6506              		.loc 1 5003 7 discriminator 2 view .LVU1838
 6507 0068 FBB9     		cbnz	r3, .L497
5005:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6508              		.loc 1 5005 6 is_stmt 1 view .LVU1839
5005:ThirdParty/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6509              		.loc 1 5005 15 is_stmt 0 view .LVU1840
 6510 006a 271D     		adds	r7, r4, #4
 6511 006c 3846     		mov	r0, r7
 6512 006e FFF7FEFF 		bl	uxListRemove
 6513              	.LVL453:
5006:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6514              		.loc 1 5006 6 is_stmt 1 view .LVU1841
5006:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6515              		.loc 1 5006 6 view .LVU1842
 6516 0072 E06A     		ldr	r0, [r4, #44]
 6517 0074 0123     		movs	r3, #1
 6518 0076 8340     		lsls	r3, r3, r0
 6519 0078 104A     		ldr	r2, .L503+4
 6520 007a 1168     		ldr	r1, [r2]
 6521 007c 0B43     		orrs	r3, r3, r1
 6522 007e 1360     		str	r3, [r2]
5006:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6523              		.loc 1 5006 6 view .LVU1843
 6524 0080 00EB8000 		add	r0, r0, r0, lsl #2
 6525 0084 3946     		mov	r1, r7
 6526 0086 0E4B     		ldr	r3, .L503+8
 6527 0088 03EB8000 		add	r0, r3, r0, lsl #2
 6528 008c FFF7FEFF 		bl	vListInsertEnd
 6529              	.LVL454:
5006:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6530              		.loc 1 5006 36 view .LVU1844
 6531              	.L498:
5015:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6532              		.loc 1 5015 5 view .LVU1845
5015:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6533              		.loc 1 5015 14 is_stmt 0 view .LVU1846
 6534 0090 E26A     		ldr	r2, [r4, #44]
5015:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
 6535              		.loc 1 5015 41 view .LVU1847
 6536 0092 0C4B     		ldr	r3, .L503+12
 6537 0094 1B68     		ldr	r3, [r3]
 6538 0096 DB6A     		ldr	r3, [r3, #44]
5015:ThirdParty/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/cc4Zpja9.s 			page 240


 6539              		.loc 1 5015 7 view .LVU1848
 6540 0098 9A42     		cmp	r2, r3
 6541 009a CCD9     		bls	.L494
5019:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 6542              		.loc 1 5019 6 is_stmt 1 view .LVU1849
5019:ThirdParty/FreeRTOS/Source/tasks.c **** 					{
 6543              		.loc 1 5019 8 is_stmt 0 view .LVU1850
 6544 009c 0DB1     		cbz	r5, .L499
5021:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 6545              		.loc 1 5021 7 is_stmt 1 view .LVU1851
5021:ThirdParty/FreeRTOS/Source/tasks.c **** 					}
 6546              		.loc 1 5021 34 is_stmt 0 view .LVU1852
 6547 009e 0123     		movs	r3, #1
 6548 00a0 2B60     		str	r3, [r5]
 6549              	.L499:
5027:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6550              		.loc 1 5027 6 is_stmt 1 view .LVU1853
5027:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6551              		.loc 1 5027 20 is_stmt 0 view .LVU1854
 6552 00a2 094B     		ldr	r3, .L503+16
 6553 00a4 0122     		movs	r2, #1
 6554 00a6 1A60     		str	r2, [r3]
 6555 00a8 C5E7     		b	.L494
 6556              	.L497:
5012:ThirdParty/FreeRTOS/Source/tasks.c **** 				}
 6557              		.loc 1 5012 6 is_stmt 1 view .LVU1855
 6558 00aa 04F11801 		add	r1, r4, #24
 6559 00ae 0748     		ldr	r0, .L503+20
 6560 00b0 FFF7FEFF 		bl	vListInsertEnd
 6561              	.LVL455:
 6562 00b4 ECE7     		b	.L498
 6563              	.L504:
 6564 00b6 00BF     		.align	2
 6565              	.L503:
 6566 00b8 00000000 		.word	.LANCHOR16
 6567 00bc 00000000 		.word	.LANCHOR13
 6568 00c0 00000000 		.word	.LANCHOR4
 6569 00c4 00000000 		.word	.LANCHOR10
 6570 00c8 00000000 		.word	.LANCHOR20
 6571 00cc 00000000 		.word	.LANCHOR1
 6572              		.cfi_endproc
 6573              	.LFE54:
 6575              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6576              		.align	1
 6577              		.global	xTaskNotifyStateClear
 6578              		.syntax unified
 6579              		.thumb
 6580              		.thumb_func
 6582              	xTaskNotifyStateClear:
 6583              	.LVL456:
 6584              	.LFB55:
5045:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6585              		.loc 1 5045 2 view -0
 6586              		.cfi_startproc
 6587              		@ args = 0, pretend = 0, frame = 0
 6588              		@ frame_needed = 0, uses_anonymous_args = 0
5045:ThirdParty/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/cc4Zpja9.s 			page 241


 6589              		.loc 1 5045 2 is_stmt 0 view .LVU1857
 6590 0000 10B5     		push	{r4, lr}
 6591              	.LCFI56:
 6592              		.cfi_def_cfa_offset 8
 6593              		.cfi_offset 4, -8
 6594              		.cfi_offset 14, -4
5046:ThirdParty/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 6595              		.loc 1 5046 2 is_stmt 1 view .LVU1858
5047:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6596              		.loc 1 5047 2 view .LVU1859
5051:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6597              		.loc 1 5051 3 view .LVU1860
5051:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6598              		.loc 1 5051 11 is_stmt 0 view .LVU1861
 6599 0002 0446     		mov	r4, r0
 6600 0004 58B1     		cbz	r0, .L510
 6601              	.LVL457:
 6602              	.L506:
5053:ThirdParty/FreeRTOS/Source/tasks.c **** 		{
 6603              		.loc 1 5053 3 is_stmt 1 discriminator 4 view .LVU1862
 6604 0006 FFF7FEFF 		bl	vPortEnterCritical
 6605              	.LVL458:
5055:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 6606              		.loc 1 5055 4 discriminator 4 view .LVU1863
5055:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 6607              		.loc 1 5055 13 is_stmt 0 discriminator 4 view .LVU1864
 6608 000a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 6609 000e DBB2     		uxtb	r3, r3
5055:ThirdParty/FreeRTOS/Source/tasks.c **** 			{
 6610              		.loc 1 5055 6 discriminator 4 view .LVU1865
 6611 0010 022B     		cmp	r3, #2
 6612 0012 07D0     		beq	.L511
5062:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 6613              		.loc 1 5062 13 view .LVU1866
 6614 0014 0024     		movs	r4, #0
 6615              	.LVL459:
 6616              	.L507:
5065:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6617              		.loc 1 5065 3 is_stmt 1 view .LVU1867
 6618 0016 FFF7FEFF 		bl	vPortExitCritical
 6619              	.LVL460:
5067:ThirdParty/FreeRTOS/Source/tasks.c **** 	}
 6620              		.loc 1 5067 3 view .LVU1868
5068:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6621              		.loc 1 5068 2 is_stmt 0 view .LVU1869
 6622 001a 2046     		mov	r0, r4
 6623 001c 10BD     		pop	{r4, pc}
 6624              	.LVL461:
 6625              	.L510:
5051:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6626              		.loc 1 5051 11 discriminator 1 view .LVU1870
 6627 001e 044B     		ldr	r3, .L512
 6628 0020 1C68     		ldr	r4, [r3]
 6629              	.LVL462:
5051:ThirdParty/FreeRTOS/Source/tasks.c **** 
 6630              		.loc 1 5051 11 discriminator 1 view .LVU1871
 6631 0022 F0E7     		b	.L506
ARM GAS  /tmp/cc4Zpja9.s 			page 242


 6632              	.LVL463:
 6633              	.L511:
5057:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6634              		.loc 1 5057 5 is_stmt 1 view .LVU1872
5057:ThirdParty/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6635              		.loc 1 5057 26 is_stmt 0 view .LVU1873
 6636 0024 0023     		movs	r3, #0
 6637 0026 84F85030 		strb	r3, [r4, #80]
5058:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 6638              		.loc 1 5058 5 is_stmt 1 view .LVU1874
 6639              	.LVL464:
5058:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 6640              		.loc 1 5058 13 is_stmt 0 view .LVU1875
 6641 002a 0124     		movs	r4, #1
 6642              	.LVL465:
5058:ThirdParty/FreeRTOS/Source/tasks.c **** 			}
 6643              		.loc 1 5058 13 view .LVU1876
 6644 002c F3E7     		b	.L507
 6645              	.L513:
 6646 002e 00BF     		.align	2
 6647              	.L512:
 6648 0030 00000000 		.word	.LANCHOR10
 6649              		.cfi_endproc
 6650              	.LFE55:
 6652              		.global	pxCurrentTCB
 6653              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6654              		.align	2
 6655              		.set	.LANCHOR10,. + 0
 6658              	pxCurrentTCB:
 6659 0000 00000000 		.space	4
 6660              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6661              		.align	2
 6662              		.set	.LANCHOR2,. + 0
 6665              	pxDelayedTaskList:
 6666 0000 00000000 		.space	4
 6667              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6668              		.align	2
 6669              		.set	.LANCHOR8,. + 0
 6672              	pxOverflowDelayedTaskList:
 6673 0000 00000000 		.space	4
 6674              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6675              		.align	2
 6676              		.set	.LANCHOR4,. + 0
 6679              	pxReadyTasksLists:
 6680 0000 00000000 		.space	140
 6680      00000000 
 6680      00000000 
 6680      00000000 
 6680      00000000 
 6681              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6682              		.align	2
 6683              		.set	.LANCHOR9,. + 0
 6686              	uxCurrentNumberOfTasks:
 6687 0000 00000000 		.space	4
 6688              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6689              		.align	2
 6690              		.set	.LANCHOR14,. + 0
ARM GAS  /tmp/cc4Zpja9.s 			page 243


 6693              	uxDeletedTasksWaitingCleanUp:
 6694 0000 00000000 		.space	4
 6695              		.section	.bss.uxPendedTicks,"aw",%nobits
 6696              		.align	2
 6697              		.set	.LANCHOR19,. + 0
 6700              	uxPendedTicks:
 6701 0000 00000000 		.space	4
 6702              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6703              		.align	2
 6704              		.set	.LANCHOR16,. + 0
 6707              	uxSchedulerSuspended:
 6708 0000 00000000 		.space	4
 6709              		.section	.bss.uxTaskNumber,"aw",%nobits
 6710              		.align	2
 6711              		.set	.LANCHOR12,. + 0
 6714              	uxTaskNumber:
 6715 0000 00000000 		.space	4
 6716              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6717              		.align	2
 6718              		.set	.LANCHOR13,. + 0
 6721              	uxTopReadyPriority:
 6722 0000 00000000 		.space	4
 6723              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6724              		.align	2
 6725              		.set	.LANCHOR5,. + 0
 6728              	xDelayedTaskList1:
 6729 0000 00000000 		.space	20
 6729      00000000 
 6729      00000000 
 6729      00000000 
 6729      00000000 
 6730              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6731              		.align	2
 6732              		.set	.LANCHOR6,. + 0
 6735              	xDelayedTaskList2:
 6736 0000 00000000 		.space	20
 6736      00000000 
 6736      00000000 
 6736      00000000 
 6736      00000000 
 6737              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 6738              		.align	2
 6739              		.set	.LANCHOR17,. + 0
 6742              	xIdleTaskHandle:
 6743 0000 00000000 		.space	4
 6744              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6745              		.align	2
 6746              		.set	.LANCHOR3,. + 0
 6749              	xNextTaskUnblockTime:
 6750 0000 00000000 		.space	4
 6751              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6752              		.align	2
 6753              		.set	.LANCHOR18,. + 0
 6756              	xNumOfOverflows:
 6757 0000 00000000 		.space	4
 6758              		.section	.bss.xPendingReadyList,"aw",%nobits
 6759              		.align	2
ARM GAS  /tmp/cc4Zpja9.s 			page 244


 6760              		.set	.LANCHOR1,. + 0
 6763              	xPendingReadyList:
 6764 0000 00000000 		.space	20
 6764      00000000 
 6764      00000000 
 6764      00000000 
 6764      00000000 
 6765              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6766              		.align	2
 6767              		.set	.LANCHOR11,. + 0
 6770              	xSchedulerRunning:
 6771 0000 00000000 		.space	4
 6772              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6773              		.align	2
 6774              		.set	.LANCHOR0,. + 0
 6777              	xSuspendedTaskList:
 6778 0000 00000000 		.space	20
 6778      00000000 
 6778      00000000 
 6778      00000000 
 6778      00000000 
 6779              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6780              		.align	2
 6781              		.set	.LANCHOR7,. + 0
 6784              	xTasksWaitingTermination:
 6785 0000 00000000 		.space	20
 6785      00000000 
 6785      00000000 
 6785      00000000 
 6785      00000000 
 6786              		.section	.bss.xTickCount,"aw",%nobits
 6787              		.align	2
 6788              		.set	.LANCHOR15,. + 0
 6791              	xTickCount:
 6792 0000 00000000 		.space	4
 6793              		.section	.bss.xYieldPending,"aw",%nobits
 6794              		.align	2
 6795              		.set	.LANCHOR20,. + 0
 6798              	xYieldPending:
 6799 0000 00000000 		.space	4
 6800              		.text
 6801              	.Letext0:
 6802              		.file 3 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 6803              		.file 4 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 6804              		.file 5 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 6805              		.file 6 "ThirdParty/FreeRTOS/Source/include/projdefs.h"
 6806              		.file 7 "ThirdParty/FreeRTOS/Source/include/list.h"
 6807              		.file 8 "ThirdParty/FreeRTOS/Source/include/task.h"
 6808              		.file 9 "ThirdParty/FreeRTOS/Source/include/portable.h"
 6809              		.file 10 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/string.h"
ARM GAS  /tmp/cc4Zpja9.s 			page 245


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/cc4Zpja9.s:20     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/cc4Zpja9.s:25     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/cc4Zpja9.s:115    .text.prvTaskIsTaskSuspended:0000000000000038 $d
     /tmp/cc4Zpja9.s:121    .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/cc4Zpja9.s:126    .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/cc4Zpja9.s:169    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/cc4Zpja9.s:174    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/cc4Zpja9.s:217    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/cc4Zpja9.s:223    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/cc4Zpja9.s:228    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/cc4Zpja9.s:260    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/cc4Zpja9.s:265    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/cc4Zpja9.s:433    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/cc4Zpja9.s:438    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/cc4Zpja9.s:513    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/cc4Zpja9.s:525    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/cc4Zpja9.s:530    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/cc4Zpja9.s:666    .text.prvAddNewTaskToReadyList:0000000000000090 $d
     /tmp/cc4Zpja9.s:676    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/cc4Zpja9.s:681    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/cc4Zpja9.s:758    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/cc4Zpja9.s:765    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/cc4Zpja9.s:770    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/cc4Zpja9.s:890    .text.prvAddCurrentTaskToDelayedList:000000000000007c $d
     /tmp/cc4Zpja9.s:901    .text.prvIdleTask:0000000000000000 $t
     /tmp/cc4Zpja9.s:906    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/cc4Zpja9.s:966    .text.prvIdleTask:000000000000002c $d
     /tmp/cc4Zpja9.s:971    .text.xTaskCreate:0000000000000000 $t
     /tmp/cc4Zpja9.s:977    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/cc4Zpja9.s:1099   .text.vTaskDelete:0000000000000000 $t
     /tmp/cc4Zpja9.s:1105   .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/cc4Zpja9.s:1290   .text.vTaskDelete:00000000000000bc $d
     /tmp/cc4Zpja9.s:1303   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/cc4Zpja9.s:1309   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/cc4Zpja9.s:1355   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/cc4Zpja9.s:1360   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/cc4Zpja9.s:1366   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/cc4Zpja9.s:1447   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/cc4Zpja9.s:1452   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/cc4Zpja9.s:1458   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/cc4Zpja9.s:1703   .text.vTaskPrioritySet:00000000000000dc $d
     /tmp/cc4Zpja9.s:1710   .text.vTaskResume:0000000000000000 $t
     /tmp/cc4Zpja9.s:1716   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/cc4Zpja9.s:1847   .text.vTaskResume:000000000000007c $d
     /tmp/cc4Zpja9.s:1854   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/cc4Zpja9.s:1860   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/cc4Zpja9.s:2031   .text.xTaskResumeFromISR:0000000000000090 $d
     /tmp/cc4Zpja9.s:2040   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
     /tmp/cc4Zpja9.s:2044   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/cc4Zpja9.s:2050   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/cc4Zpja9.s:2168   .text.vTaskStartScheduler:0000000000000064 $d
     /tmp/cc4Zpja9.s:2178   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/cc4Zpja9.s:2184   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/cc4Zpja9.s:2227   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/cc4Zpja9.s:2232   .text.vTaskSuspendAll:0000000000000000 $t
ARM GAS  /tmp/cc4Zpja9.s 			page 246


     /tmp/cc4Zpja9.s:2238   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/cc4Zpja9.s:2256   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/cc4Zpja9.s:2261   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/cc4Zpja9.s:2267   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/cc4Zpja9.s:2288   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/cc4Zpja9.s:2293   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/cc4Zpja9.s:2299   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/cc4Zpja9.s:2328   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/cc4Zpja9.s:2333   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/cc4Zpja9.s:2339   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/cc4Zpja9.s:2355   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/cc4Zpja9.s:2360   .text.pcTaskGetName:0000000000000000 $t
     /tmp/cc4Zpja9.s:2366   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/cc4Zpja9.s:2427   .text.pcTaskGetName:0000000000000024 $d
     /tmp/cc4Zpja9.s:2432   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/cc4Zpja9.s:2438   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/cc4Zpja9.s:2701   .text.xTaskIncrementTick:00000000000000ec $d
     /tmp/cc4Zpja9.s:2716   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/cc4Zpja9.s:2722   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/cc4Zpja9.s:2958   .text.xTaskResumeAll:00000000000000d8 $d
     /tmp/cc4Zpja9.s:2970   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/cc4Zpja9.s:2976   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/cc4Zpja9.s:3199   .text.vTaskDelayUntil:000000000000009c $d
     /tmp/cc4Zpja9.s:3206   .text.vTaskDelay:0000000000000000 $t
     /tmp/cc4Zpja9.s:3212   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/cc4Zpja9.s:3305   .text.vTaskDelay:0000000000000048 $d
     /tmp/cc4Zpja9.s:3310   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/cc4Zpja9.s:3316   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/cc4Zpja9.s:3485   .text.vTaskSwitchContext:00000000000000a0 $d
     /tmp/cc4Zpja9.s:3496   .text.vTaskSuspend:0000000000000000 $t
     /tmp/cc4Zpja9.s:3502   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/cc4Zpja9.s:3707   .text.vTaskSuspend:00000000000000cc $d
     /tmp/cc4Zpja9.s:3718   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/cc4Zpja9.s:3724   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/cc4Zpja9.s:3792   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/cc4Zpja9.s:3797   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/cc4Zpja9.s:3803   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/cc4Zpja9.s:3920   .text.vTaskPlaceOnUnorderedEventList:0000000000000050 $d
     /tmp/cc4Zpja9.s:3926   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/cc4Zpja9.s:3932   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/cc4Zpja9.s:4063   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/cc4Zpja9.s:4073   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/cc4Zpja9.s:4079   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/cc4Zpja9.s:4215   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/cc4Zpja9.s:4224   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/cc4Zpja9.s:4230   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/cc4Zpja9.s:4300   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/cc4Zpja9.s:4306   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/cc4Zpja9.s:4312   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/cc4Zpja9.s:4335   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
     /tmp/cc4Zpja9.s:4341   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/cc4Zpja9.s:4347   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/cc4Zpja9.s:4524   .text.xTaskCheckForTimeOut:000000000000007c $d
     /tmp/cc4Zpja9.s:4531   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/cc4Zpja9.s:4537   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/cc4Zpja9.s:4554   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/cc4Zpja9.s:4559   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
ARM GAS  /tmp/cc4Zpja9.s 			page 247


     /tmp/cc4Zpja9.s:4565   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/cc4Zpja9.s:4607   .text.uxTaskGetStackHighWaterMark:0000000000000014 $d
     /tmp/cc4Zpja9.s:4612   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/cc4Zpja9.s:4618   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/cc4Zpja9.s:4637   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/cc4Zpja9.s:4642   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/cc4Zpja9.s:4648   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/cc4Zpja9.s:4686   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/cc4Zpja9.s:4692   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/cc4Zpja9.s:4698   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/cc4Zpja9.s:4870   .text.xTaskPriorityInherit:00000000000000ac $d
     /tmp/cc4Zpja9.s:4877   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/cc4Zpja9.s:4883   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/cc4Zpja9.s:5080   .text.xTaskPriorityDisinherit:00000000000000a8 $d
     /tmp/cc4Zpja9.s:5087   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/cc4Zpja9.s:5093   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/cc4Zpja9.s:5297   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000b4 $d
     /tmp/cc4Zpja9.s:5304   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/cc4Zpja9.s:5310   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/cc4Zpja9.s:5337   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/cc4Zpja9.s:5342   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/cc4Zpja9.s:5348   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/cc4Zpja9.s:5379   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/cc4Zpja9.s:5384   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/cc4Zpja9.s:5390   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/cc4Zpja9.s:5512   .text.ulTaskNotifyTake:0000000000000074 $d
     /tmp/cc4Zpja9.s:5517   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/cc4Zpja9.s:5523   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/cc4Zpja9.s:5667   .text.xTaskNotifyWait:0000000000000094 $d
     /tmp/cc4Zpja9.s:5672   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/cc4Zpja9.s:5678   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/cc4Zpja9.s:5734   .text.xTaskGenericNotify:000000000000002a $d
     /tmp/cc4Zpja9.s:5964   .text.xTaskGenericNotify:00000000000000f4 $d
     /tmp/cc4Zpja9.s:5971   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/cc4Zpja9.s:5977   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/cc4Zpja9.s:6055   .text.xTaskGenericNotifyFromISR:0000000000000040 $d
     /tmp/cc4Zpja9.s:6330   .text.xTaskGenericNotifyFromISR:000000000000011c $d
     /tmp/cc4Zpja9.s:6340   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/cc4Zpja9.s:6346   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/cc4Zpja9.s:6566   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
     /tmp/cc4Zpja9.s:6576   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/cc4Zpja9.s:6582   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/cc4Zpja9.s:6648   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/cc4Zpja9.s:6658   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/cc4Zpja9.s:6654   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/cc4Zpja9.s:6661   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/cc4Zpja9.s:6665   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/cc4Zpja9.s:6668   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/cc4Zpja9.s:6672   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/cc4Zpja9.s:6675   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/cc4Zpja9.s:6679   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/cc4Zpja9.s:6682   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/cc4Zpja9.s:6686   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/cc4Zpja9.s:6689   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/cc4Zpja9.s:6693   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/cc4Zpja9.s:6696   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/cc4Zpja9.s:6700   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
ARM GAS  /tmp/cc4Zpja9.s 			page 248


     /tmp/cc4Zpja9.s:6703   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/cc4Zpja9.s:6707   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/cc4Zpja9.s:6710   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/cc4Zpja9.s:6714   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/cc4Zpja9.s:6717   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/cc4Zpja9.s:6721   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/cc4Zpja9.s:6724   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/cc4Zpja9.s:6728   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/cc4Zpja9.s:6731   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/cc4Zpja9.s:6735   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/cc4Zpja9.s:6738   .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/cc4Zpja9.s:6742   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/cc4Zpja9.s:6745   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/cc4Zpja9.s:6749   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/cc4Zpja9.s:6752   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/cc4Zpja9.s:6756   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/cc4Zpja9.s:6759   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/cc4Zpja9.s:6763   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/cc4Zpja9.s:6766   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/cc4Zpja9.s:6770   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/cc4Zpja9.s:6773   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/cc4Zpja9.s:6777   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/cc4Zpja9.s:6780   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/cc4Zpja9.s:6784   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/cc4Zpja9.s:6787   .bss.xTickCount:0000000000000000 $d
     /tmp/cc4Zpja9.s:6791   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/cc4Zpja9.s:6794   .bss.xYieldPending:0000000000000000 $d
     /tmp/cc4Zpja9.s:6798   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/cc4Zpja9.s:5740   .text.xTaskGenericNotify:000000000000002f $d
     /tmp/cc4Zpja9.s:5740   .text.xTaskGenericNotify:0000000000000030 $t
     /tmp/cc4Zpja9.s:6061   .text.xTaskGenericNotifyFromISR:0000000000000045 $d
     /tmp/cc4Zpja9.s:6061   .text.xTaskGenericNotifyFromISR:0000000000000046 $t

UNDEFINED SYMBOLS
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
vApplicationIdleHook
pvPortMalloc
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
vApplicationStackOverflowHook
