ARM GAS  /tmp/ccofeNgA.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"motor.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZNKSt18bad_variant_access4whatEv,"axG",%progbits,_ZNKSt18bad_variant_access4whatEv
  20              		.align	1
  21              		.weak	_ZNKSt18bad_variant_access4whatEv
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	_ZNKSt18bad_variant_access4whatEv:
  27              		.fnstart
  28              	.LVL0:
  29              	.LFB3066:
  30              		.file 1 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // <variant> -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** /** @file variant
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****  *  This is the `<variant>` C++ Library header.
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****  */
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
ARM GAS  /tmp/ccofeNgA.s 			page 2


  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #ifndef _GLIBCXX_VARIANT
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #define _GLIBCXX_VARIANT 1
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #if __cplusplus >= 201703L
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <type_traits>
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <utility>
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/enable_special_members.h>
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/functexcept.h>
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/move.h>
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/functional_hash.h>
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/invoke.h>
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <ext/aligned_buffer.h>
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/parse_numbers.h>
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/stl_iterator_base_types.h>
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/stl_iterator_base_funcs.h>
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #include <bits/stl_construct.h>
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #if __cplusplus > 201703L
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** # include <compare>
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #endif
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** {
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** namespace __detail
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** {
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** namespace __variant
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** {
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Nth_type;
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Nth_type<_Np, _First, _Rest...>
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : _Nth_type<_Np-1, _Rest...> { };
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _First, typename... _Rest>
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Nth_type<0, _First, _Rest...>
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { using type = _First; };
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** } // namespace __variant
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** } // namespace __detail
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #define __cpp_lib_variant 201606L
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types> class tuple;
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types> class variant;
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template <typename> struct hash;
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_size;
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_size<const _Variant> : variant_size<_Variant> {};
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
ARM GAS  /tmp/ccofeNgA.s 			page 3


  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_size<volatile _Variant> : variant_size<_Variant> {};
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_size<const volatile _Variant> : variant_size<_Variant> {};
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_size<variant<_Types...>>
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : std::integral_constant<size_t, sizeof...(_Types)> {};
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     inline constexpr size_t variant_size_v = variant_size<_Variant>::value;
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative;
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _First, typename... _Rest>
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative<_Np, variant<_First, _Rest...>>
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : variant_alternative<_Np-1, variant<_Rest...>> {};
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _First, typename... _Rest>
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative<0, variant<_First, _Rest...>>
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { using type = _First; };
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using variant_alternative_t =
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       typename variant_alternative<_Np, _Variant>::type;
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative<_Np, const _Variant>
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { using type = add_const_t<variant_alternative_t<_Np, _Variant>>; };
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative<_Np, volatile _Variant>
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { using type = add_volatile_t<variant_alternative_t<_Np, _Variant>>; };
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct variant_alternative<_Np, const volatile _Variant>
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { using type = add_cv_t<variant_alternative_t<_Np, _Variant>>; };
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   inline constexpr size_t variant_npos = -1;
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get(variant<_Types...>&);
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&&
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get(variant<_Types...>&&);
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get(const variant<_Types...>&);
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>> const&&
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get(const variant<_Types...>&&);
ARM GAS  /tmp/ccofeNgA.s 			page 4


 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr decltype(auto)
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __do_visit(_Visitor&& __visitor, _Variants&&... __variants);
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template <typename... _Types, typename _Tp>
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     decltype(auto)
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __variant_cast(_Tp&& __rhs)
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       if constexpr (is_lvalue_reference_v<_Tp>)
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (is_const_v<remove_reference_t<_Tp>>)
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    return static_cast<const variant<_Types...>&>(__rhs);
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    return static_cast<variant<_Types...>&>(__rhs);
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       else
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         return static_cast<variant<_Types...>&&>(__rhs);
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** namespace __detail
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** {
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** namespace __variant
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** {
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Returns the first appearence of _Tp in _Types.
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Returns sizeof...(_Types) if _Tp is not in _Types.
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __index_of : std::integral_constant<size_t, 0> {};
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     inline constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __index_of<_Tp, _First, _Rest...> :
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       std::integral_constant<size_t, is_same_v<_Tp, _First>
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	? 0 : __index_of_v<_Tp, _Rest...> + 1> {};
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // used for raw visitation
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   struct __variant_cookie {};
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // used for raw visitation with indices passed in
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   struct __variant_idx_cookie { using type = __variant_idx_cookie; };
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Used to enable deduction (and same-type checking) for std::visit:
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename> struct __deduce_visit_result { };
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Visit variants that might be valueless.
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Visitor, typename... _Variants>
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr void
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				        std::forward<_Variants>(__variants)...);
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Visit variants that might be valueless, passing indices to the visitor.
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Visitor, typename... _Variants>
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr void
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __raw_idx_visit(_Visitor&& __visitor, _Variants&&... __variants)
ARM GAS  /tmp/ccofeNgA.s 			page 5


 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       std::__do_visit<__variant_idx_cookie>(std::forward<_Visitor>(__visitor),
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  std::forward<_Variants>(__variants)...);
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // _Uninitialized<T> is guaranteed to be a trivially destructible type,
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // even if T is not.
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Uninitialized;
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Type>
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Uninitialized<_Type, true>
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename... _Args>
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr const _Type& _M_get() const & noexcept
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr _Type& _M_get() & noexcept
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr const _Type&& _M_get() const && noexcept
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return std::move(_M_storage); }
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr _Type&& _M_get() && noexcept
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return std::move(_M_storage); }
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Type _M_storage;
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Type>
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Uninitialized<_Type, false>
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename... _Args>
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Uninitialized(in_place_index_t<0>, _Args&&... __args)
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  ::new ((void*)std::addressof(_M_storage))
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    _Type(std::forward<_Args>(__args)...);
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       const _Type& _M_get() const & noexcept
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return *_M_storage._M_ptr(); }
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Type& _M_get() & noexcept
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return *_M_storage._M_ptr(); }
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       const _Type&& _M_get() const && noexcept
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Type&& _M_get() && noexcept
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return std::move(*_M_storage._M_ptr()); }
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
ARM GAS  /tmp/ccofeNgA.s 			page 6


 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __gnu_cxx::__aligned_membuf<_Type> _M_storage;
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Union>
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr decltype(auto)
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __get(in_place_index_t<0>, _Union&& __u) noexcept
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Union>
 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr decltype(auto)
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __get(in_place_index_t<_Np>, _Union&& __u) noexcept
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return __variant::__get(in_place_index<_Np-1>,
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			      std::forward<_Union>(__u)._M_rest);
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Returns the typed storage for __v.
 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr decltype(auto)
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     __get(_Variant&& __v) noexcept
 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return __variant::__get(std::in_place_index<_Np>,
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			      std::forward<_Variant>(__v)._M_u);
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Traits
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_default_ctor =
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_copy_ctor =
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_copy_constructible_v<_Types> && ...);
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_move_ctor =
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_move_constructible_v<_Types> && ...);
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_copy_assign =
 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _S_copy_ctor
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  && (is_copy_assignable_v<_Types> && ...);
 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_move_assign =
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _S_move_ctor
 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  && (is_move_assignable_v<_Types> && ...);
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_trivial_dtor =
 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_trivially_destructible_v<_Types> && ...);
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_trivial_copy_ctor =
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_trivially_copy_constructible_v<_Types> && ...);
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_trivial_move_ctor =
 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_trivially_move_constructible_v<_Types> && ...);
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_trivial_copy_assign =
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _S_trivial_dtor && _S_trivial_copy_ctor
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  && (is_trivially_copy_assignable_v<_Types> && ...);
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_trivial_move_assign =
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _S_trivial_dtor && _S_trivial_move_ctor
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  && (is_trivially_move_assignable_v<_Types> && ...);
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // The following nothrow traits are for non-trivial SMFs. Trivial SMFs
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // are always nothrow.
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_nothrow_default_ctor =
ARM GAS  /tmp/ccofeNgA.s 			page 7


 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  is_nothrow_default_constructible_v<
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      typename _Nth_type<0, _Types...>::type>;
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_nothrow_copy_ctor = false;
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_nothrow_move_ctor =
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (is_nothrow_move_constructible_v<_Types> && ...);
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_nothrow_copy_assign = false;
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool _S_nothrow_move_assign =
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _S_nothrow_move_ctor
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  && (is_nothrow_move_assignable_v<_Types> && ...);
 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Defines members and ctors.
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     union _Variadic_union { };
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _First, typename... _Rest>
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     union _Variadic_union<_First, _Rest...>
 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr _Variadic_union() : _M_rest() { }
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename... _Args>
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args>
 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Uninitialized<_First> _M_first;
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variadic_union<_Rest...> _M_rest;
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // _Never_valueless_alt is true for variant alternatives that can
 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // always be placed in a variant without it becoming valueless.
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // For suitably-small, trivially copyable types we can create temporaries
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // on the stack and then memcpy them into place.
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp>
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Never_valueless_alt
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { };
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Specialize _Never_valueless_alt for other types which have a
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // non-throwing and cheap move construction and move assignment operator,
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // so that emplacing the type will provide the strong exception-safety
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // guarantee, by creating and moving a temporary.
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Whether _Never_valueless_alt<T> is true or not affects the ABI of a
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // variant using that alternative, so we can't change the value later!
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // True if every alternative in _Types... can be emplaced in a variant
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // without it becoming valueless. If this is true, variant<_Types...>
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // can never be valueless, which enables some minor optimizations.
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template <typename... _Types>
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr bool __never_valueless()
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
ARM GAS  /tmp/ccofeNgA.s 			page 8


 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return _Traits<_Types...>::_S_move_assign
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	&& (_Never_valueless_alt<_Types>::value && ...);
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Defines index and the dtor, possibly trivial.
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<bool __trivially_destructible, typename... _Types>
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_storage;
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template <typename... _Types>
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using __select_index =
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       typename __select_int::_Select_int_base<sizeof...(_Types),
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 					      unsigned char,
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 					      unsigned short>::type::value_type;
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_storage<false, _Types...>
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_storage()
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { }
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args>
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_M_index{_Np}
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void _M_reset()
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	if (!_M_valid()) [[unlikely]]
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return;
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	std::__do_visit<void>([](auto&& __this_mem) mutable
 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  {
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    std::_Destroy(std::__addressof(__this_mem));
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  }, __variant_cast<_Types...>(*this));
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_M_index = static_cast<__index_type>(variant_npos);
 411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       ~_Variant_storage()
 414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { _M_reset(); }
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void*
 417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _M_storage() const noexcept
 418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    std::addressof(_M_u)));
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr bool
 424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _M_valid() const noexcept
 425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return true;
ARM GAS  /tmp/ccofeNgA.s 			page 9


 428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return this->_M_index != __index_type(variant_npos);
 429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variadic_union<_Types...> _M_u;
 432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using __index_type = __select_index<_Types...>;
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __index_type _M_index;
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_storage<true, _Types...>
 438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr
 440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_storage()
 441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       : _M_index(static_cast<__index_type>(variant_npos))
 442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { }
 443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args>
 445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_M_index{_Np}
 449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void _M_reset() noexcept
 452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { _M_index = static_cast<__index_type>(variant_npos); }
 453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void*
 455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _M_storage() const noexcept
 456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return const_cast<void*>(static_cast<const void*>(
 458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    std::addressof(_M_u)));
 459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr bool
 462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _M_valid() const noexcept
 463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	if constexpr (__variant::__never_valueless<_Types...>())
 465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return true;
 466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return this->_M_index != static_cast<__index_type>(variant_npos);
 467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variadic_union<_Types...> _M_u;
 470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using __index_type = __select_index<_Types...>;
 471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __index_type _M_index;
 472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _Variant_storage_alias =
 476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;
 477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Up>
 479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
 480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void* __storage = std::addressof(__lhs._M_u);
 482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Type = remove_reference_t<decltype(__rhs_mem)>;
 483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       if constexpr (!is_same_v<_Type, __variant_cookie>)
 484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         ::new (__storage)
ARM GAS  /tmp/ccofeNgA.s 			page 10


 485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
 486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types, typename _Tp, typename _Up>
 489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
 490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __lhs._M_index = __rhs._M_index;
 492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __variant_construct_single(std::forward<_Tp>(__lhs),
 495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      std::forward<decltype(__rhs_mem)>(__rhs_mem));
 496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}, __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
 497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
 498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // The following are (Copy|Move) (ctor|assign) layers for forwarding
 500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // triviality and handling non-trivial SMF behaviors.
 501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<bool, typename... _Types>
 503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
 504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
 510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__variant_construct<_Types...>(*this, __rhs);
 512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_ctor_base(_Copy_ctor_base&&) = default;
 515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_ctor_base& operator=(const _Copy_ctor_base&) = default;
 516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_ctor_base& operator=(_Copy_ctor_base&&) = default;
 517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Copy_ctor_base<true, _Types...> : _Variant_storage_alias<_Types...>
 521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Variant_storage_alias<_Types...>;
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _Copy_ctor_alias =
 528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;
 529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<bool, typename... _Types>
 531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
 532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_ctor_base(_Move_ctor_base&& __rhs)
 537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
 538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__variant_construct<_Types...>(*this, std::move(__rhs));
 540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
ARM GAS  /tmp/ccofeNgA.s 			page 11


 542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Up>
 543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_reset();
 546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_index = __rhs_index;
 548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Up>
 551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_reset();
 554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __variant_construct_single(*this, __rhs);
 555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_index = __rhs_index;
 556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_ctor_base(const _Move_ctor_base&) = default;
 559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_ctor_base& operator=(const _Move_ctor_base&) = default;
 560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_ctor_base& operator=(_Move_ctor_base&&) = default;
 561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Move_ctor_base<true, _Types...> : _Copy_ctor_alias<_Types...>
 565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Copy_ctor_alias<_Types...>;
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Up>
 570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
 571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_reset();
 573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __variant_construct_single(*this, std::forward<_Up>(__rhs));
 574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_index = __rhs_index;
 575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Up>
 578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
 579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_reset();
 581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __variant_construct_single(*this, __rhs);
 582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  this->_M_index = __rhs_index;
 583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _Move_ctor_alias =
 588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;
 589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<bool, typename... _Types>
 591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Copy_assign_base : _Move_ctor_alias<_Types...>
 592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_assign_base&
 597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       operator=(const _Copy_assign_base& __rhs)
 598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)
ARM GAS  /tmp/ccofeNgA.s 			page 12


 599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__variant::__raw_idx_visit(
 601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  {
 603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      {
 605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		if (this->_M_index == __rhs_index)
 606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __variant::__get<__rhs_index>(*this) = __rhs_mem;
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		else
 608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  {
 609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    using __rhs_type = __remove_cvref_t<decltype(__rhs_mem)>;
 610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    if constexpr (is_nothrow_copy_constructible_v<__rhs_type>
 611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			|| !is_nothrow_move_constructible_v<__rhs_type>)
 612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // The standard says this->emplace<__rhs_type>(__rhs_mem)
 613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // should be used here, but _M_destructive_copy is
 614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // equivalent in this case. Either copy construction
 615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // doesn't throw, so _M_destructive_copy gives strong
 616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // exception safety guarantee, or both copy construction
 617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // and move construction can throw, so emplace only gives
 618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      // basic exception safety anyway.
 619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      this->_M_destructive_copy(__rhs_index, __rhs_mem);
 620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    else
 621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      __variant_cast<_Types...>(*this)
 622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			= variant<_Types...>(std::in_place_index<__rhs_index>,
 623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 					     __rhs_mem);
 624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  }
 625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      }
 626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    else
 627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
 628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return *this;
 630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_assign_base(const _Copy_assign_base&) = default;
 633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_assign_base(_Copy_assign_base&&) = default;
 634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_assign_base& operator=(_Copy_assign_base&&) = default;
 635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Copy_assign_base<true, _Types...> : _Move_ctor_alias<_Types...>
 639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Move_ctor_alias<_Types...>;
 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _Copy_assign_alias =
 646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign, _Types...>;
 647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<bool, typename... _Types>
 649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Move_assign_base : _Copy_assign_alias<_Types...>
 650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_assign_base&
 655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       operator=(_Move_assign_base&& __rhs)
ARM GAS  /tmp/ccofeNgA.s 			page 13


 656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_move_assign)
 657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__variant::__raw_idx_visit(
 659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  {
 661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
 662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      {
 663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		if (this->_M_index == __rhs_index)
 664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		else
 666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __variant_cast<_Types...>(*this)
 667:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    .template emplace<__rhs_index>(std::move(__rhs_mem));
 668:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      }
 669:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    else
 670:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
 671:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  }, __variant_cast<_Types...>(__rhs));
 672:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return *this;
 673:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 674:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 675:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_assign_base(const _Move_assign_base&) = default;
 676:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_assign_base(_Move_assign_base&&) = default;
 677:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_assign_base& operator=(const _Move_assign_base&) = default;
 678:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 679:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 681:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Move_assign_base<true, _Types...> : _Copy_assign_alias<_Types...>
 682:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 683:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Copy_assign_alias<_Types...>;
 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_Base;
 685:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 686:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 687:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 688:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _Move_assign_alias =
 689:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign, _Types...>;
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 691:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_base : _Move_assign_alias<_Types...>
 693:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 694:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = _Move_assign_alias<_Types...>;
 695:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 696:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_base()
 698:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 699:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       : _Variant_base(in_place_index<0>) { }
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args>
 702:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr explicit
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 704:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 705:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 706:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 707:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_base(const _Variant_base&) = default;
 708:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_base(_Variant_base&&) = default;
 709:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_base& operator=(const _Variant_base&) = default;
 710:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Variant_base& operator=(_Variant_base&&) = default;
 711:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 712:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
ARM GAS  /tmp/ccofeNgA.s 			page 14


 713:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // For how many times does _Tp appear in _Tuple?
 714:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Tuple>
 715:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __tuple_count;
 716:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 717:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Tuple>
 718:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     inline constexpr size_t __tuple_count_v =
 719:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __tuple_count<_Tp, _Tuple>::value;
 720:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 721:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
 722:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __tuple_count<_Tp, tuple<_Types...>>
 723:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : integral_constant<size_t, 0> { };
 724:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 725:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _First, typename... _Rest>
 726:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __tuple_count<_Tp, tuple<_First, _Rest...>>
 727:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : integral_constant<
 728:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	size_t,
 729:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__tuple_count_v<_Tp, tuple<_Rest...>> + is_same_v<_Tp, _First>> { };
 730:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 731:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // TODO: Reuse this in <tuple> ?
 732:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
 733:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     inline constexpr bool __exactly_once =
 734:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __tuple_count_v<_Tp, tuple<_Types...>> == 1;
 735:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 736:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Helper used to check for valid conversions that don't involve narrowing.
 737:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Ti> struct _Arr { _Ti _M_x[1]; };
 738:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 739:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Build an imaginary function FUN(Ti) for each alternative type Ti
 740:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti,
 741:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   bool _Ti_is_cv_bool = is_same_v<remove_cv_t<_Ti>, bool>,
 742:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   typename = void>
 743:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Build_FUN
 744:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 745:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // This function means 'using _Build_FUN<I, T, Ti>::_S_fun;' is valid,
 746:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // but only static functions will be considered in the call below.
 747:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void _S_fun();
 748:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 749:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 750:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // ... for which Ti x[] = {std::forward<T>(t)}; is well-formed,
 751:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 752:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, false,
 753:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      void_t<decltype(_Arr<_Ti>{{std::declval<_Tp>()}})>>
 754:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 755:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // This is the FUN function for type _Ti, with index _Ind
 756:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 757:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 758:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 759:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // ... and if Ti is cv bool, remove_cvref_t<T> is bool.
 760:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Ind, typename _Tp, typename _Ti>
 761:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Build_FUN<_Ind, _Tp, _Ti, true,
 762:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      enable_if_t<is_same_v<__remove_cvref_t<_Tp>, bool>>>
 763:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 764:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       // This is the FUN function for when _Ti is cv bool, with index _Ind
 765:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static integral_constant<size_t, _Ind> _S_fun(_Ti);
 766:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 767:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 768:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Variant,
 769:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   typename = make_index_sequence<variant_size_v<_Variant>>>
ARM GAS  /tmp/ccofeNgA.s 			page 15


 770:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Build_FUNs;
 771:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 772:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Ti, size_t... _Ind>
 773:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Build_FUNs<_Tp, variant<_Ti...>, index_sequence<_Ind...>>
 774:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : _Build_FUN<_Ind, _Tp, _Ti>...
 775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 776:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Build_FUN<_Ind, _Tp, _Ti>::_S_fun...;
 777:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 778:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 779:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // The index j of the overload FUN(Tj) selected by overload resolution
 780:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // for FUN(std::forward<_Tp>(t))
 781:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Variant>
 782:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using _FUN_type
 783:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       = decltype(_Build_FUNs<_Tp, _Variant>::_S_fun(std::declval<_Tp>()));
 784:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 785:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // The index selected for FUN(std::forward<T>(t)), or variant_npos if none.
 786:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Variant, typename = void>
 787:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __accepted_index
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : integral_constant<size_t, variant_npos>
 789:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { };
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename _Variant>
 792:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>
 793:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : _FUN_type<_Tp, _Variant>
 794:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { };
 795:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 796:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Returns the raw storage for __v.
 797:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant>
 798:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     void* __get_storage(_Variant&& __v) noexcept
 799:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return __v._M_storage(); }
 800:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 801:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template <typename _Maybe_variant_cookie, typename _Variant>
 802:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Extra_visit_slot_needed
 803:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 804:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename> struct _Variant_never_valueless;
 805:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 806:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename... _Types>
 807:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct _Variant_never_valueless<variant<_Types...>>
 808:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: bool_constant<__variant::__never_valueless<_Types...>()> {};
 809:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 810:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr bool value =
 811:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	(is_same_v<_Maybe_variant_cookie, __variant_cookie>
 812:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	 || is_same_v<_Maybe_variant_cookie, __variant_idx_cookie>)
 813:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	&& !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
 814:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 815:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 816:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Used for storing a multi-dimensional vtable.
 817:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, size_t... _Dimensions>
 818:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Multi_array;
 819:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 820:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Partial specialization with rank zero, stores a single _Tp element.
 821:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp>
 822:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Multi_array<_Tp>
 823:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 824:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename>
 825:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __untag_result
 826:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: false_type
ARM GAS  /tmp/ccofeNgA.s 			page 16


 827:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ using element_type = _Tp; };
 828:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 829:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename... _Args>
 830:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __untag_result<const void(*)(_Args...)>
 831:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: false_type
 832:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ using element_type = void(*)(_Args...); };
 833:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 834:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename... _Args>
 835:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __untag_result<__variant_cookie(*)(_Args...)>
 836:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: false_type
 837:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ using element_type = void(*)(_Args...); };
 838:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 839:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename... _Args>
 840:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __untag_result<__variant_idx_cookie(*)(_Args...)>
 841:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: false_type
 842:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ using element_type = void(*)(_Args...); };
 843:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 844:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename _Res, typename... _Args>
 845:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __untag_result<__deduce_visit_result<_Res>(*)(_Args...)>
 846:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: true_type
 847:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ using element_type = _Res(*)(_Args...); };
 848:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 849:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using __result_is_deduced = __untag_result<_Tp>;
 850:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 851:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr const typename __untag_result<_Tp>::element_type&
 852:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _M_access() const
 853:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_data; }
 854:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 855:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       typename __untag_result<_Tp>::element_type _M_data;
 856:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 857:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 858:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Partial specialization with rank >= 1.
 859:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Ret,
 860:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   typename _Visitor,
 861:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   typename... _Variants,
 862:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   size_t __first, size_t... __rest>
 863:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Multi_array<_Ret(*)(_Visitor, _Variants...), __first, __rest...>
 864:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 865:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr size_t __index =
 866:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	sizeof...(_Variants) - sizeof...(__rest) - 1;
 867:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 868:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Variant = typename _Nth_type<__index, _Variants...>::type;
 869:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 870:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr int __do_cookie =
 871:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;
 872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 873:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Tp = _Ret(*)(_Visitor, _Variants...);
 874:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 875:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename... _Args>
 876:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr decltype(auto)
 877:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_M_access(size_t __first_index, _Args... __rest_indices) const
 878:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 879:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return _M_arr[__first_index + __do_cookie]
 880:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    ._M_access(__rest_indices...);
 881:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 882:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 883:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
ARM GAS  /tmp/ccofeNgA.s 			page 17


 884:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 885:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 886:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Creates a multi-dimensional vtable recursively.
 887:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //
 888:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // For example,
 889:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // visit([](auto, auto){},
 890:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //       variant<int, char>(),  // typedef'ed as V1
 891:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //       variant<float, double, long double>())  // typedef'ed as V2
 892:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // will trigger instantiations of:
 893:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 2, 3>,
 894:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                   tuple<V1&&, V2&&>, std::index_sequence<>>
 895:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 896:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<0>>
 897:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 898:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 0>>
 899:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 900:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 1>>
 901:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 902:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<0, 2>>
 903:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //   __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&), 3>,
 904:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                     tuple<V1&&, V2&&>, std::index_sequence<1>>
 905:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 906:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 0>>
 907:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 908:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 1>>
 909:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //     __gen_vtable_impl<_Multi_array<void(*)(V1&&, V2&&)>,
 910:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //                       tuple<V1&&, V2&&>, std::index_sequence<1, 2>>
 911:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // The returned multi-dimensional vtable can be fast accessed by the visitor
 912:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // using index calculation.
 913:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Array_type, typename _Index_seq>
 914:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __gen_vtable_impl;
 915:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Defines the _S_apply() member that returns a _Multi_array populated
 917:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // with function pointers that perform the visitation expressions e(m)
 918:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // for each valid pack of indexes into the variant types _Variants.
 919:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   //
 920:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // This partial specialization builds up the index sequences by recursively
 921:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // calling _S_apply() on the next specialization of __gen_vtable_impl.
 922:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // The base case of the recursion defines the actual function pointers.
 923:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Result_type, typename _Visitor, size_t... __dimensions,
 924:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   typename... _Variants, size_t... __indices>
 925:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __gen_vtable_impl<
 926:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,
 927:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	std::index_sequence<__indices...>>
 928:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 929:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Next =
 930:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  remove_reference_t<typename _Nth_type<sizeof...(__indices),
 931:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			     _Variants...>::type>;
 932:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Array_type =
 933:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
 934:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		       __dimensions...>;
 935:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 936:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr _Array_type
 937:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _S_apply()
 938:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 939:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Array_type __vtable{};
 940:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_S_apply_all_alts(
ARM GAS  /tmp/ccofeNgA.s 			page 18


 941:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __vtable, make_index_sequence<variant_size_v<_Next>>());
 942:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return __vtable;
 943:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
 944:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 945:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t... __var_indices>
 946:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr void
 947:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_S_apply_all_alts(_Array_type& __vtable,
 948:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			  std::index_sequence<__var_indices...>)
 949:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
 950:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)
 951:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    (_S_apply_single_alt<true, __var_indices>(
 952:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __vtable._M_arr[__var_indices + 1],
 953:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      &(__vtable._M_arr[0])), ...);
 954:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
 955:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    (_S_apply_single_alt<false, __var_indices>(
 956:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __vtable._M_arr[__var_indices]), ...);
 957:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 958:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 959:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<bool __do_cookie, size_t __index, typename _Tp>
 960:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr void
 961:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
 962:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
 963:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (__do_cookie)
 964:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
 965:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __element = __gen_vtable_impl<
 966:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		_Tp,
 967:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 968:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      *__cookie_element = __gen_vtable_impl<
 969:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		_Tp,
 970:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::index_sequence<__indices..., variant_npos>>::_S_apply();
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
 972:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
 973:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
 974:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __element = __gen_vtable_impl<
 975:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		remove_reference_t<decltype(__element)>,
 976:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::index_sequence<__indices..., __index>>::_S_apply();
 977:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
 978:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
 979:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 980:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 981:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // This partial specialization is the base case for the recursion.
 982:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // It populates a _Multi_array element with the address of a function
 983:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // that invokes the visitor with the alternatives specified by __indices.
 984:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants,
 985:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	   size_t... __indices>
 986:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __gen_vtable_impl<
 987:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,
 988:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		   std::index_sequence<__indices...>>
 989:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 990:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Array_type =
 991:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...)>;
 992:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 993:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t __index, typename _Variant>
 994:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr decltype(auto)
 995:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__element_by_index_or_cookie(_Variant&& __var) noexcept
 996:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         {
 997:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (__index != variant_npos)
ARM GAS  /tmp/ccofeNgA.s 			page 19


 998:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    return __variant::__get<__index>(std::forward<_Variant>(__var));
 999:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
1000:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    return __variant_cookie{};
1001:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1002:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1003:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr decltype(auto)
1004:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
1005:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
1006:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
1007:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // For raw visitation using indices, pass the indices to the visitor
1008:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // and discard the return value:
1009:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1010:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1011:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::forward<_Variants>(__vars))...,
1012:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      integral_constant<size_t, __indices>()...);
1013:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (is_same_v<_Result_type, __variant_cookie>)
1014:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // For raw visitation without indices, and discard the return value:
1015:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  std::__invoke(std::forward<_Visitor>(__visitor),
1016:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1017:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::forward<_Variants>(__vars))...);
1018:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (_Array_type::__result_is_deduced::value)
1019:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // For the usual std::visit case deduce the return value:
1020:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return std::__invoke(std::forward<_Visitor>(__visitor),
1021:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __element_by_index_or_cookie<__indices>(
1022:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		std::forward<_Variants>(__vars))...);
1023:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else // for std::visit<R> use INVOKE<R>
1024:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return std::__invoke_r<_Result_type>(
1025:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      std::forward<_Visitor>(__visitor),
1026:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
1027:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
1028:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1029:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr auto
1030:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _S_apply()
1031:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _Array_type{&__visit_invoke}; }
1032:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
1033:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1034:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Result_type, typename _Visitor, typename... _Variants>
1035:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct __gen_vtable
1036:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1037:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Array_type =
1038:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  _Multi_array<_Result_type (*)(_Visitor, _Variants...),
1039:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		       variant_size_v<remove_reference_t<_Variants>>...>;
1040:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1041:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static constexpr _Array_type _S_vtable
1042:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	= __gen_vtable_impl<_Array_type, std::index_sequence<>>::_S_apply();
1043:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
1044:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1045:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Tp>
1046:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Base_dedup : public _Tp { };
1047:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1048:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Variant, typename __indices>
1049:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_hash_base;
1050:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1051:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types, size_t... __indices>
1052:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     struct _Variant_hash_base<variant<_Types...>,
1053:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			      std::index_sequence<__indices...>>
1054:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>... { };
ARM GAS  /tmp/ccofeNgA.s 			page 20


1055:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1056:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant>
1057:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using __get_t = decltype(std::get<_Np>(std::declval<_Variant>()));
1058:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1059:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Return type of std::visit.
1060:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Visitor, typename... _Variants>
1061:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     using __visit_result_t
1062:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       = invoke_result_t<_Visitor, __get_t<0, _Variants>...>;
1063:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1064:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** } // namespace __variant
1065:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** } // namespace __detail
1066:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1067:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename _Variant, typename... _Args>
1068:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     void __variant_construct_by_index(_Variant& __v, _Args&&... __args)
1069:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1070:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __v._M_index = _Np;
1071:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       auto&& __storage = __detail::__variant::__get<_Np>(__v);
1072:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       ::new ((void*)std::addressof(__storage))
1073:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         remove_reference_t<decltype(__storage)>
1074:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  (std::forward<_Args>(__args)...);
1075:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1076:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1077:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1078:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr bool
1079:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     holds_alternative(const variant<_Types...>& __v) noexcept
1080:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1081:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1082:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1083:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
1084:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1085:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1086:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1087:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr _Tp& get(variant<_Types...>& __v)
1088:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1089:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1090:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1091:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1092:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
1093:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1094:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1095:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1096:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr _Tp&& get(variant<_Types...>&& __v)
1097:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1098:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1099:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	std::move(__v));
1103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr const _Tp& get(const variant<_Types...>& __v)
1107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
ARM GAS  /tmp/ccofeNgA.s 			page 21


1112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr const _Tp&& get(const variant<_Types...>&& __v)
1116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	std::move(__v));
1122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
1125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>
1126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(_Np < sizeof...(_Types),
1130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "The index must be in [0, number of alternatives)");
1131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       if (__ptr && __ptr->index() == _Np)
1133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return nullptr;
1135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
1138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr
1139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>>
1140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
1143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(_Np < sizeof...(_Types),
1144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "The index must be in [0, number of alternatives)");
1145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
1146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       if (__ptr && __ptr->index() == _Np)
1147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
1148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return nullptr;
1149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr add_pointer_t<_Tp>
1153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get_if(variant<_Types...>* __ptr) noexcept
1154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
1158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __ptr);
1160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Tp, typename... _Types>
1163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr add_pointer_t<const _Tp>
1164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get_if(const variant<_Types...>* __ptr) noexcept
1165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
1167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "T must occur exactly once in alternatives");
1168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!is_void_v<_Tp>, "_Tp must not be void");
ARM GAS  /tmp/ccofeNgA.s 			page 22


1169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(
1170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __ptr);
1171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   struct monostate { };
1174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP, __NAME) \
1176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types> \
1177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr bool operator __OP(const variant<_Types...>& __lhs, \
1178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				 const variant<_Types...>& __rhs) \
1179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { \
1180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       bool __ret = true; \
1181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __detail::__variant::__raw_idx_visit( \
1182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         [&__ret, &__lhs] (auto&& __rhs_mem, auto __rhs_index) mutable \
1183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****         { \
1184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (__rhs_index != variant_npos) \
1185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    { \
1186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      if (__lhs.index() == __rhs_index) \
1187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	        { \
1188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  auto& __this_mem = std::get<__rhs_index>(__lhs);	\
1189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****                   __ret = __this_mem __OP __rhs_mem; \
1190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****                 } \
1191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      else \
1192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		__ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****             } \
1194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****           else \
1195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****             __ret = (__lhs.index() + 1) __OP (__rhs_index + 1); \
1196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}, __rhs); \
1197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return __ret; \
1198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<, less)
1201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(<=, less_equal)
1202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(==, equal)
1203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(!=, not_equal)
1204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>=, greater_equal)
1205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   _VARIANT_RELATION_FUNCTION_TEMPLATE(>, greater)
1206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator==(monostate, monostate) noexcept { return true; }
1210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #ifdef __cpp_lib_three_way_comparison
1212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
1213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     requires (three_way_comparable<_Types> && ...)
1214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr
1215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     common_comparison_category_t<compare_three_way_result_t<_Types>...>
1216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     operator<=>(const variant<_Types...>& __v, const variant<_Types...>& __w)
1217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       common_comparison_category_t<compare_three_way_result_t<_Types>...> __ret
1219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	= strong_ordering::equal;
1220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __detail::__variant::__raw_idx_visit(
1222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	[&__ret, &__v] (auto&& __w_mem, auto __w_index) mutable
1223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
1224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (__w_index != variant_npos)
1225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
ARM GAS  /tmp/ccofeNgA.s 			page 23


1226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      if (__v.index() == __w_index)
1227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		{
1228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  auto& __this_mem = std::get<__w_index>(__v);
1229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __ret = __this_mem <=> __w_mem;
1230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  return;
1231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		}
1232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __ret = (__v.index() + 1) <=> (__w_index + 1);
1234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}, __w);
1235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       return __ret;
1236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     }
1237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr strong_ordering
1239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   operator<=>(monostate, monostate) noexcept { return strong_ordering::equal; }
1240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #else
1241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator!=(monostate, monostate) noexcept { return false; }
1242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator<(monostate, monostate) noexcept { return false; }
1243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator>(monostate, monostate) noexcept { return false; }
1244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator<=(monostate, monostate) noexcept { return true; }
1245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   constexpr bool operator>=(monostate, monostate) noexcept { return true; }
1246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #endif
1247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename _Visitor, typename... _Variants>
1249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr __detail::__variant::__visit_result_t<_Visitor, _Variants...>
1250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     visit(_Visitor&&, _Variants&&...);
1251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
1253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     inline enable_if_t<(is_move_constructible_v<_Types> && ...)
1254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			&& (is_swappable_v<_Types> && ...)>
1255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
1256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     noexcept(noexcept(__lhs.swap(__rhs)))
1257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { __lhs.swap(__rhs); }
1258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
1260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     enable_if_t<!((is_move_constructible_v<_Types> && ...)
1261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		   && (is_swappable_v<_Types> && ...))>
1262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     swap(variant<_Types...>&, variant<_Types...>&) = delete;
1263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   class bad_variant_access : public exception
1265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
1266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   public:
1267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     bad_variant_access() noexcept { }
1268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     const char* what() const noexcept override
  31              		.loc 1 1269 17 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
1270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return _M_reason; }
  36              		.loc 1 1270 7 view .LVU1
  37              		.loc 1 1270 25 is_stmt 0 view .LVU2
  38 0000 4068     		ldr	r0, [r0, #4]
  39              	.LVL1:
  40              		.loc 1 1270 25 view .LVU3
  41 0002 7047     		bx	lr
  42              		.cfi_endproc
ARM GAS  /tmp/ccofeNgA.s 			page 24


  43              	.LFE3066:
  44              		.cantunwind
  45              		.fnend
  47              		.section	.text._ZN31ResistanceMeasurementControlLaw5resetEv,"axG",%progbits,_ZN31ResistanceMeasure
  48              		.align	1
  49              		.weak	_ZN31ResistanceMeasurementControlLaw5resetEv
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  54              	_ZN31ResistanceMeasurementControlLaw5resetEv:
  55              		.fnstart
  56              	.LVL2:
  57              	.LFB5158:
  58              		.file 2 "MotorControl/motor.cpp"
   1:MotorControl/motor.cpp **** 
   2:MotorControl/motor.cpp **** #include "motor.hpp"
   3:MotorControl/motor.cpp **** #include "axis.hpp"
   4:MotorControl/motor.cpp **** #include "low_level.h"
   5:MotorControl/motor.cpp **** #include "odrive_main.h"
   6:MotorControl/motor.cpp **** 
   7:MotorControl/motor.cpp **** #include <algorithm>
   8:MotorControl/motor.cpp **** 
   9:MotorControl/motor.cpp **** static constexpr auto CURRENT_ADC_LOWER_BOUND =        (uint32_t)((float)(1 << 12) * CURRENT_SENSE_
  10:MotorControl/motor.cpp **** static constexpr auto CURRENT_ADC_UPPER_BOUND =        (uint32_t)((float)(1 << 12) * CURRENT_SENSE_
  11:MotorControl/motor.cpp **** 
  12:MotorControl/motor.cpp **** /**
  13:MotorControl/motor.cpp ****  * @brief This control law adjusts the output voltage such that a predefined
  14:MotorControl/motor.cpp ****  * current is tracked. A hardcoded integrator gain is used for this.
  15:MotorControl/motor.cpp ****  * 
  16:MotorControl/motor.cpp ****  * TODO: this might as well be implemented using the FieldOrientedController.
  17:MotorControl/motor.cpp ****  */
  18:MotorControl/motor.cpp **** struct ResistanceMeasurementControlLaw : AlphaBetaFrameController {
  19:MotorControl/motor.cpp ****     void reset() final {
  59              		.loc 2 19 10 is_stmt 1 view -0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  20:MotorControl/motor.cpp ****         test_voltage_ = 0.0f;
  64              		.loc 2 20 9 view .LVU5
  65              		.loc 2 20 23 is_stmt 0 view .LVU6
  66 0000 0023     		movs	r3, #0
  67 0002 8361     		str	r3, [r0, #24]	@ float
  21:MotorControl/motor.cpp ****         test_mod_ = std::nullopt;
  68              		.loc 2 21 9 is_stmt 1 view .LVU7
  69              	.LVL3:
  70              	.LBB1377:
  71              	.LBI1377:
  72              		.file 3 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // <optional> -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // Copyright (C) 2013-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // Free Software Foundation; either version 3, or (at your option)
ARM GAS  /tmp/ccofeNgA.s 			page 25


   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** /** @file include/optional
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****  *  This is a Standard C++ Library header.
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****  */
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #ifndef _GLIBCXX_OPTIONAL
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #define _GLIBCXX_OPTIONAL 1
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #if __cplusplus >= 201703L
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <utility>
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <type_traits>
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <exception>
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <new>
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <initializer_list>
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <bits/exception_defines.h>
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <bits/functional_hash.h>
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #include <bits/enable_special_members.h>
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #if __cplusplus > 201703L
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** # include <compare>
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #endif
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** {
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @addtogroup utilities
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @{
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    */
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #define __cpp_lib_optional 201606L
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     class optional;
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /// Tag type to disengage optional objects.
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   struct nullopt_t
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   {
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // Do not user-declare default constructor at all for
ARM GAS  /tmp/ccofeNgA.s 			page 26


  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // optional_value = {} syntax to work.
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // nullopt_t() = delete;
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // Used for constructing nullopt.
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     enum class _Construct { _Token };
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     // Must be constexpr for nullopt_t to be literal.
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     explicit constexpr nullopt_t(_Construct) { }
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   };
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /// Tag to disengage optional objects.
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   inline constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @brief Exception class thrown when a disengaged optional object is
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  dereferenced.
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    *  @ingroup exceptions
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****    */
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   class bad_optional_access : public exception
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   {
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   public:
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     bad_optional_access() = default;
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     virtual ~bad_optional_access() = default;
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     const char* what() const noexcept override
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return "bad optional access"; }
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   };
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   void
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   __throw_bad_optional_access()
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   __attribute__((__noreturn__));
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // XXX Does not belong here.
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   inline void
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   __throw_bad_optional_access()
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // This class template manages construction/destruction of
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // the contained value for a std::optional.
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload_base
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base() = default;
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_engaged(true)
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args>
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_Optional_payload_base(std::initializer_list<_Up> __il,
ARM GAS  /tmp/ccofeNgA.s 			page 27


 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			       _Args&&... __args)
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__il, std::forward<_Args>(__args)...),
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_engaged(true)
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructor used by _Optional_base copy constructor when the
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // contained value is not trivially copy constructible.
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(bool __engaged,
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			     const _Optional_payload_base& __other)
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (__other._M_engaged)
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(__other._M_get());
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructor used by _Optional_base move constructor when the
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // contained value is not trivially move constructible.
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(bool __engaged,
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			     _Optional_payload_base&& __other)
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (__other._M_engaged)
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(std::move(__other._M_get()));
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy constructor is only used to when the contained value is
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // trivially copy constructible.
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(const _Optional_payload_base&) = default;
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Move constructor is only used to when the contained value is
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // trivially copy constructible.
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base(_Optional_payload_base&&) = default;
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base&
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(const _Optional_payload_base&) = default;
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload_base&
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(_Optional_payload_base&&) = default;
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // used to perform non-trivial copy assignment.
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_copy_assign(const _Optional_payload_base& __other)
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         if (this->_M_engaged && __other._M_engaged)
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           this->_M_get() = __other._M_get();
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         else
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    if (__other._M_engaged)
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(__other._M_get());
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    else
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // used to perform non-trivial move assignment.
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_move_assign(_Optional_payload_base&& __other)
ARM GAS  /tmp/ccofeNgA.s 			page 28


 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (this->_M_engaged && __other._M_engaged)
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_get() = std::move(__other._M_get());
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	else
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    if (__other._M_engaged)
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_construct(std::move(__other._M_get()));
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    else
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       struct _Empty_byte { };
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, bool = is_trivially_destructible_v<_Up>>
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	union _Storage
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename... _Args>
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename _Vp, typename... _Args>
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _Empty_byte _M_empty;
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           _Up _M_value;
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	};
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	union _Storage<_Up, false>
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  constexpr _Storage() noexcept : _M_empty() { }
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename... _Args>
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(in_place_t, _Args&&... __args)
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  template<typename _Vp, typename... _Args>
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    constexpr
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(__il, std::forward<_Args>(__args)...)
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  // User-provided destructor is needed when _Up has non-trivial dtor.
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ~_Storage() { }
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
ARM GAS  /tmp/ccofeNgA.s 			page 29


 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _Empty_byte _M_empty;
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           _Up _M_value;
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	};
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Storage<_Stored_type> _M_payload;
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       bool _M_engaged = false;
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         void
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         _M_construct(_Args&&... __args)
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         {
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           ::new ((void *) std::__addressof(this->_M_payload))
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****             _Stored_type(std::forward<_Args>(__args)...);
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****           this->_M_engaged = true;
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         }
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_destroy() noexcept
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_engaged = false;
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // The _M_get() operations have _M_engaged as a precondition.
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // They exist to access the contained value with the appropriate
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // const-qualification, because _M_payload has had the const removed.
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() noexcept
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_payload._M_value; }
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() const noexcept
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_payload._M_value; }
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_reset() noexcept
 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (this->_M_engaged)
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Class template that manages the payload for optionals.
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp,
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    bool /*_HasTrivialDestructor*/ =
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      is_trivially_destructible_v<_Tp>,
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    bool /*_HasTrivialCopy */ =
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      is_trivially_copy_assignable_v<_Tp>
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      && is_trivially_copy_constructible_v<_Tp>,
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    bool /*_HasTrivialMove */ =
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      is_trivially_move_assignable_v<_Tp>
 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      && is_trivially_move_constructible_v<_Tp>>
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload;
ARM GAS  /tmp/ccofeNgA.s 			page 30


 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for potentially-constexpr optionals (trivial copy/move/destroy).
 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, true, true>
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial copy construction/assignment.
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, false, true>
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial copy assignment.
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(const _Optional_payload& __other)
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_copy_assign(__other);
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial move construction/assignment.
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, true, false>
 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial move assignment.
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(_Optional_payload&& __other)
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_move_assign(std::move(__other));
 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
ARM GAS  /tmp/ccofeNgA.s 			page 31


 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial copy and move assignment.
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp>
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, true, false, false>
 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload_base<_Tp>
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload_base<_Tp>::_Optional_payload_base;
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial copy assignment.
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(const _Optional_payload& __other)
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_copy_assign(__other);
 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Non-trivial move assignment.
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload&
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(_Optional_payload&& __other)
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(__and_v<is_nothrow_move_constructible<_Tp>,
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		       is_nothrow_move_assignable<_Tp>>)
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_move_assign(std::move(__other));
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Payload for optionals with non-trivial destructors.
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template <typename _Tp, bool _Copy, bool _Move>
 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_payload<_Tp, false, _Copy, _Move>
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : _Optional_payload<_Tp, true, false, false>
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Base class implements all the constructors and assignment operators:
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload() = default;
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(const _Optional_payload&) = default;
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload(_Optional_payload&&) = default;
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(const _Optional_payload&) = default;
 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload& operator=(_Optional_payload&&) = default;
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Destructor needs to destroy the contained value:
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() { this->_M_reset(); }
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Common base class for _Optional_base<T> to avoid repeating these
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // member functions in each specialization.
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Dp>
 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     class _Optional_base_impl
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
ARM GAS  /tmp/ccofeNgA.s 			page 32


 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     protected:
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Stored_type = remove_const_t<_Tp>;
 410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // The _M_construct operation has !_M_engaged as a precondition
 412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // while _M_destruct has _M_engaged as a precondition.
 413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
 414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	void
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_construct(_Args&&... __args)
 416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ::new
 419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
 420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    _Stored_type(std::forward<_Args>(__args)...);
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       void
 425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_destruct() noexcept
 426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_destroy(); }
 427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // _M_reset is a 'safe' operation with no precondition.
 429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr void
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_reset() noexcept
 431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr bool _M_is_engaged() const noexcept
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // The _M_get operations have _M_engaged as a precondition.
 437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&
 438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() noexcept
 439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return static_cast<_Dp*>(this)->_M_payload._M_get();
 442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&
 445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _M_get() const noexcept
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__glibcxx_assert(this->_M_is_engaged());
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return static_cast<const _Dp*>(this)->_M_payload._M_get();
 449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
 453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * @brief Class template that provides copy/move constructors of optional.
 454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
 455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * Such a separate base class template is necessary in order to
 456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * conditionally make copy/move constructors trivial.
 457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
 458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * When the contained value is trivially copy/move constructible,
 459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * the copy/move constructors of _Optional_base will invoke the
 460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * trivial copy/move constructor of _Optional_payload. Otherwise,
 461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * they will invoke _Optional_payload(bool, const _Optional_payload&)
 462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * or _Optional_payload(bool, _Optional_payload&&) to initialize
 463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * the contained value, if copying/moving an engaged optional.
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
ARM GAS  /tmp/ccofeNgA.s 			page 33


 465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * Whether the other special members are trivial is determined by the
 466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * _Optional_payload<_Tp> specialization used for the _M_payload member.
 467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     *
 468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * @see optional, _Enable_special_members
 469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     */
 470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp,
 471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	   bool = is_trivially_copy_constructible_v<_Tp>,
 472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	   bool = is_trivially_move_constructible_v<_Tp>>
 473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base
 474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
 478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __other._M_payload)
 501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::move(__other._M_payload))
 507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base<_Tp, false, true>
 518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
ARM GAS  /tmp/ccofeNgA.s 			page 34


 522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other)
 543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __other._M_payload)
 545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base<_Tp, true, false>
 558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
 562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
ARM GAS  /tmp/ccofeNgA.s 			page 35


 579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other)
 585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>)
 586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__other._M_payload._M_engaged,
 587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::move(__other._M_payload))
 588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { }
 589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     struct _Optional_base<_Tp, true, true>
 599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
 600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for disengaged optionals.
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base() = default;
 603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Constructors for engaged optionals.
 605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     std::forward<_Args>(__args)...) { }
 610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                enable_if_t<is_constructible_v<_Tp,
 613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      initializer_list<_Up>&,
 614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					      _Args&&...>, bool> = false>
 615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         constexpr explicit _Optional_base(in_place_t,
 616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           initializer_list<_Up> __il,
 617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****                                           _Args&&... __args)
 618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		     __il, std::forward<_Args>(__args)...)
 620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         { }
 621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Copy and move constructors.
 623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(const _Optional_base& __other) = default;
 624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Optional_base(_Optional_base&& __other) = default;
 625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(const _Optional_base&) = default;
 628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_base& operator=(_Optional_base&&) = default;
 629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       _Optional_payload<_Tp> _M_payload;
 631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   class optional;
 635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
ARM GAS  /tmp/ccofeNgA.s 			page 36


 636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __converts_from_optional =
 638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       __or_<is_constructible<_Tp, const optional<_Up>&>,
 639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_constructible<_Tp, optional<_Up>&>,
 640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_constructible<_Tp, const optional<_Up>&&>,
 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_constructible<_Tp, optional<_Up>&&>,
 642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<const optional<_Up>&, _Tp>,
 643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<optional<_Up>&, _Tp>,
 644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<const optional<_Up>&&, _Tp>,
 645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_convertible<optional<_Up>&&, _Tp>>;
 646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __assigns_from_optional =
 649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       __or_<is_assignable<_Tp&, const optional<_Up>&>,
 650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&>,
 651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_assignable<_Tp&, const optional<_Up>&&>,
 652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    is_assignable<_Tp&, optional<_Up>&&>>;
 653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   /**
 655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     * @brief Class template for optional values.
 656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     */
 657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     class optional
 659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     : private _Optional_base<_Tp>,
 660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       private _Enable_copy_move<
 661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Copy constructor.
 662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	is_copy_constructible_v<_Tp>,
 663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Copy assignment.
 664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__and_v<is_copy_constructible<_Tp>, is_copy_assignable<_Tp>>,
 665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Move constructor.
 666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	is_move_constructible_v<_Tp>,
 667:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Move assignment.
 668:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	__and_v<is_move_constructible<_Tp>, is_move_assignable<_Tp>>,
 669:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	// Unique tag type.
 670:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional<_Tp>>
 671:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
 672:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, nullopt_t>);
 673:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       static_assert(!is_same_v<remove_cv_t<_Tp>, in_place_t>);
 674:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       static_assert(!is_reference_v<_Tp>);
 675:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 676:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     private:
 677:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using _Base = _Optional_base<_Tp>;
 678:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 679:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // SFINAE helpers
 680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 681:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using __not_self = __not_<is_same<optional, __remove_cvref_t<_Up>>>;
 682:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 683:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using __not_tag = __not_<is_same<in_place_t, __remove_cvref_t<_Up>>>;
 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Cond>
 685:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using _Requires = enable_if_t<__and_v<_Cond...>, bool>;
 686:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 687:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     public:
 688:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       using value_type = _Tp;
 689:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr optional() = default;
 691:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr optional(nullopt_t) noexcept { }
ARM GAS  /tmp/ccofeNgA.s 			page 37


 693:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 694:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Converting constructors for engaged optionals.
 695:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up = _Tp,
 696:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 698:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_convertible<_Up&&, _Tp>> = true>
 699:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(_Up&& __t)
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 702:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up = _Tp,
 704:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_self<_Up>, __not_tag<_Up>,
 705:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, _Up&&>,
 706:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<is_convertible<_Up&&, _Tp>>> = false>
 707:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 708:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(_Up&& __t)
 709:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _Base(std::in_place, std::forward<_Up>(__t)) { }
 710:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 711:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up,
 712:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 713:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 714:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_convertible<const _Up&, _Tp>,
 715:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = true>
 716:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 717:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(const optional<_Up>& __t)
 718:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 719:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 720:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(*__t);
 721:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 722:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 723:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up,
 724:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<__not_<is_same<_Tp, _Up>>,
 725:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 is_constructible<_Tp, const _Up&>,
 726:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<is_convertible<const _Up&, _Tp>>,
 727:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			 __not_<__converts_from_optional<_Tp, _Up>>> = false>
 728:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 729:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(const optional<_Up>& __t)
 730:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 731:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 732:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(*__t);
 733:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 734:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 735:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template <typename _Up,
 736:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 737:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  is_constructible<_Tp, _Up&&>,
 738:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  is_convertible<_Up&&, _Tp>,
 739:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = true>
 740:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr
 741:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(optional<_Up>&& __t)
 742:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 743:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 744:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(std::move(*__t));
 745:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 746:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 747:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template <typename _Up,
 748:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		_Requires<__not_<is_same<_Tp, _Up>>,
 749:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  is_constructible<_Tp, _Up&&>,
ARM GAS  /tmp/ccofeNgA.s 			page 38


 750:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  __not_<is_convertible<_Up&&, _Tp>>,
 751:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			  __not_<__converts_from_optional<_Tp, _Up>>> = false>
 752:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 753:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(optional<_Up>&& __t)
 754:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 755:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__t)
 756:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    emplace(std::move(*__t));
 757:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 758:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 759:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args,
 760:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<is_constructible<_Tp, _Args&&...>> = false>
 761:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 762:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(in_place_t, _Args&&... __args)
 763:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Args>(__args)...) { }
 764:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 765:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args,
 766:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       _Requires<is_constructible<_Tp,
 767:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					  initializer_list<_Up>&,
 768:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					  _Args&&...>> = false>
 769:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	explicit constexpr
 770:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	optional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
 771:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, __il, std::forward<_Args>(__args)...) { }
 772:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 773:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Assignment operators.
 774:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       optional&
 775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator=(nullopt_t) noexcept
  73              		.loc 3 775 7 view .LVU8
  74              	.LBB1378:
  75              	.LBI1378:
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
  76              		.loc 3 430 7 view .LVU9
  77              	.LBB1379:
  78              	.LBI1379:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
  79              		.loc 3 276 7 view .LVU10
  80              	.LBB1380:
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
  81              		.loc 3 278 12 is_stmt 0 view .LVU11
  82 0004 90F82430 		ldrb	r3, [r0, #36]	@ zero_extendqisi2
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
  83              		.loc 3 278 2 view .LVU12
  84 0008 13B1     		cbz	r3, .L2
  85              	.LVL4:
  86              	.LBB1381:
  87              	.LBI1381:
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
  88              		.loc 3 256 7 is_stmt 1 view .LVU13
  89              	.LBB1382:
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
  90              		.loc 3 258 13 is_stmt 0 view .LVU14
  91 000a 0023     		movs	r3, #0
  92 000c 80F82430 		strb	r3, [r0, #36]
  93              	.LVL5:
  94              	.L2:
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
  95              		.loc 3 258 13 view .LVU15
  96              	.LBE1382:
ARM GAS  /tmp/ccofeNgA.s 			page 39


  97              	.LBE1381:
  98              	.LBE1380:
  99              	.LBE1379:
 100              	.LBE1378:
 101              	.LBE1377:
  22:MotorControl/motor.cpp ****     }
 102              		.loc 2 22 5 view .LVU16
 103 0010 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE5158:
 106              		.cantunwind
 107              		.fnend
 109              		.section	.text._ZN31InductanceMeasurementControlLaw5resetEv,"axG",%progbits,_ZN31InductanceMeasure
 110              		.align	1
 111              		.weak	_ZN31InductanceMeasurementControlLaw5resetEv
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 116              	_ZN31InductanceMeasurementControlLaw5resetEv:
 117              		.fnstart
 118              	.LVL6:
 119              	.LFB5179:
  23:MotorControl/motor.cpp **** 
  24:MotorControl/motor.cpp ****     ODriveIntf::MotorIntf::Error on_measurement(
  25:MotorControl/motor.cpp ****             std::optional<float> vbus_voltage,
  26:MotorControl/motor.cpp ****             std::optional<float2D> Ialpha_beta,
  27:MotorControl/motor.cpp ****             uint32_t input_timestamp) final {
  28:MotorControl/motor.cpp **** 
  29:MotorControl/motor.cpp ****         if (Ialpha_beta.has_value()) {
  30:MotorControl/motor.cpp ****             actual_current_ = Ialpha_beta->first;
  31:MotorControl/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
  32:MotorControl/motor.cpp ****             I_beta_ += (kIBetaFilt * current_meas_period) * (Ialpha_beta->second - I_beta_);
  33:MotorControl/motor.cpp ****         } else {
  34:MotorControl/motor.cpp ****             actual_current_ = 0.0f;
  35:MotorControl/motor.cpp ****             test_voltage_ = 0.0f;
  36:MotorControl/motor.cpp ****         }
  37:MotorControl/motor.cpp ****     
  38:MotorControl/motor.cpp ****         if (std::abs(test_voltage_) > max_voltage_) {
  39:MotorControl/motor.cpp ****             test_voltage_ = NAN;
  40:MotorControl/motor.cpp ****             return Motor::ERROR_PHASE_RESISTANCE_OUT_OF_RANGE;
  41:MotorControl/motor.cpp ****         } else if (!vbus_voltage.has_value()) {
  42:MotorControl/motor.cpp ****             return Motor::ERROR_UNKNOWN_VBUS_VOLTAGE;
  43:MotorControl/motor.cpp ****         } else {
  44:MotorControl/motor.cpp ****             float vfactor = 1.0f / ((2.0f / 3.0f) * *vbus_voltage);
  45:MotorControl/motor.cpp ****             test_mod_ = test_voltage_ * vfactor;
  46:MotorControl/motor.cpp ****             return Motor::ERROR_NONE;
  47:MotorControl/motor.cpp ****         }
  48:MotorControl/motor.cpp ****     }
  49:MotorControl/motor.cpp **** 
  50:MotorControl/motor.cpp ****     ODriveIntf::MotorIntf::Error get_alpha_beta_output(
  51:MotorControl/motor.cpp ****             uint32_t output_timestamp,
  52:MotorControl/motor.cpp ****             std::optional<float2D>* mod_alpha_beta,
  53:MotorControl/motor.cpp ****             std::optional<float>* ibus) final {
  54:MotorControl/motor.cpp ****         if (!test_mod_.has_value()) {
  55:MotorControl/motor.cpp ****             return Motor::ERROR_CONTROLLER_INITIALIZING;
  56:MotorControl/motor.cpp ****         } else {
  57:MotorControl/motor.cpp ****             *mod_alpha_beta = {*test_mod_, 0.0f};
ARM GAS  /tmp/ccofeNgA.s 			page 40


  58:MotorControl/motor.cpp ****             *ibus = *test_mod_ * actual_current_;
  59:MotorControl/motor.cpp ****             return Motor::ERROR_NONE;
  60:MotorControl/motor.cpp ****         }
  61:MotorControl/motor.cpp ****     }
  62:MotorControl/motor.cpp **** 
  63:MotorControl/motor.cpp ****     float get_resistance() {
  64:MotorControl/motor.cpp ****         return test_voltage_ / target_current_;
  65:MotorControl/motor.cpp ****     }
  66:MotorControl/motor.cpp **** 
  67:MotorControl/motor.cpp ****     float get_Ibeta() {
  68:MotorControl/motor.cpp ****         return I_beta_;
  69:MotorControl/motor.cpp ****     }
  70:MotorControl/motor.cpp **** 
  71:MotorControl/motor.cpp ****     const float kI = 1.0f; // [(V/s)/A]
  72:MotorControl/motor.cpp ****     const float kIBetaFilt = 80.0f;
  73:MotorControl/motor.cpp ****     float max_voltage_ = 0.0f;
  74:MotorControl/motor.cpp ****     float actual_current_ = 0.0f;
  75:MotorControl/motor.cpp ****     float target_current_ = 0.0f;
  76:MotorControl/motor.cpp ****     float test_voltage_ = 0.0f;
  77:MotorControl/motor.cpp ****     float I_beta_ = 0.0f; // [A] low pass filtered Ibeta response
  78:MotorControl/motor.cpp ****     std::optional<float> test_mod_ = NAN;
  79:MotorControl/motor.cpp **** };
  80:MotorControl/motor.cpp **** 
  81:MotorControl/motor.cpp **** /**
  82:MotorControl/motor.cpp ****  * @brief This control law toggles rapidly between positive and negative output
  83:MotorControl/motor.cpp ****  * voltage. By measuring how large the current ripples are, the phase inductance
  84:MotorControl/motor.cpp ****  * can be determined.
  85:MotorControl/motor.cpp ****  * 
  86:MotorControl/motor.cpp ****  * TODO: this method assumes a certain synchronization between current measurement and output appli
  87:MotorControl/motor.cpp ****  */
  88:MotorControl/motor.cpp **** struct InductanceMeasurementControlLaw : AlphaBetaFrameController {
  89:MotorControl/motor.cpp ****     void reset() final {
 120              		.loc 2 89 10 is_stmt 1 view -0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
  90:MotorControl/motor.cpp ****         attached_ = false;
 125              		.loc 2 90 9 view .LVU18
 126              		.loc 2 90 19 is_stmt 0 view .LVU19
 127 0000 0023     		movs	r3, #0
 128 0002 0372     		strb	r3, [r0, #8]
  91:MotorControl/motor.cpp ****     }
 129              		.loc 2 91 5 view .LVU20
 130 0004 7047     		bx	lr
 131              		.cfi_endproc
 132              	.LFE5179:
 133              		.cantunwind
 134              		.fnend
 136              		.section	.text._ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEE
 137              		.align	1
 138              		.weak	_ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 143              	_ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:
 144              		.fnstart
ARM GAS  /tmp/ccofeNgA.s 			page 41


 145              	.LVL7:
 146              	.LFB5180:
  92:MotorControl/motor.cpp **** 
  93:MotorControl/motor.cpp ****     ODriveIntf::MotorIntf::Error on_measurement(
 147              		.loc 2 93 34 is_stmt 1 view -0
 148              		.cfi_startproc
 149              		@ args = 20, pretend = 8, frame = 8
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 152              		.loc 2 93 34 is_stmt 0 view .LVU22
 153 0000 82B0     		sub	sp, sp, #8
 154              	.LCFI0:
 155              		.cfi_def_cfa_offset 8
 156 0002 82B0     		sub	sp, sp, #8
 157              	.LCFI1:
 158              		.cfi_def_cfa_offset 16
 159 0004 0DF1080C 		add	ip, sp, #8
 160 0008 0CE90600 		stmdb	ip, {r1, r2}
 161 000c 0393     		str	r3, [sp, #12]
 162 000e 069B     		ldr	r3, [sp, #24]
  94:MotorControl/motor.cpp ****             std::optional<float> vbus_voltage,
  95:MotorControl/motor.cpp ****             std::optional<float2D> Ialpha_beta,
  96:MotorControl/motor.cpp ****             uint32_t input_timestamp) final
  97:MotorControl/motor.cpp ****     {
  98:MotorControl/motor.cpp ****         if (!Ialpha_beta.has_value()) {
 163              		.loc 2 98 9 is_stmt 1 view .LVU23
 164              	.LVL8:
 165              	.LBB1383:
 166              	.LBI1383:
 776:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 777:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	this->_M_reset();
 778:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return *this;
 779:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 780:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 781:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up = _Tp>
 782:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<__and_v<__not_self<_Up>,
 783:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__and_<is_scalar<_Tp>,
 784:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 					  is_same<_Tp, decay_t<_Up>>>>,
 785:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_constructible<_Tp, _Up>,
 786:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_assignable<_Tp&, _Up>>,
 787:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		    optional&>
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	operator=(_Up&& __u)
 789:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (this->_M_is_engaged())
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 792:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 793:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_construct(std::forward<_Up>(__u));
 794:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 795:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return *this;
 796:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 797:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 798:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 799:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 800:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_constructible<_Tp, const _Up&>,
 801:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_assignable<_Tp&, const _Up&>,
 802:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 803:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
ARM GAS  /tmp/ccofeNgA.s 			page 42


 804:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		    optional&>
 805:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	operator=(const optional<_Up>& __u)
 806:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 807:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__u)
 808:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
 809:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      if (this->_M_is_engaged())
 810:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_get() = *__u;
 811:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      else
 812:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_construct(*__u);
 813:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 814:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 815:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
 816:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 817:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 818:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return *this;
 819:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 820:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 821:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 822:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
 823:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_constructible<_Tp, _Up>,
 824:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    is_assignable<_Tp&, _Up>,
 825:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__converts_from_optional<_Tp, _Up>>,
 826:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 			    __not_<__assigns_from_optional<_Tp, _Up>>>,
 827:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		    optional&>
 828:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	operator=(optional<_Up>&& __u)
 829:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 830:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  if (__u)
 831:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
 832:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      if (this->_M_is_engaged())
 833:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_get() = std::move(*__u);
 834:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      else
 835:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 		this->_M_construct(std::move(*__u));
 836:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 837:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 838:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    {
 839:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	      this->_M_reset();
 840:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    }
 841:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 842:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return *this;
 843:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 844:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 845:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename... _Args>
 846:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<is_constructible_v<_Tp, _Args&&...>, _Tp&>
 847:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	emplace(_Args&&... __args)
 848:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 849:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_reset();
 850:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(std::forward<_Args>(__args)...);
 851:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return this->_M_get();
 852:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 853:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 854:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up, typename... _Args>
 855:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&,
 856:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 				       _Args&&...>, _Tp&>
 857:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
 858:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 859:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_reset();
 860:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  this->_M_construct(__il, std::forward<_Args>(__args)...);
ARM GAS  /tmp/ccofeNgA.s 			page 43


 861:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return this->_M_get();
 862:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 863:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 864:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Destructor is implicit, implemented in _Optional_base.
 865:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 866:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Swap.
 867:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       void
 868:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       swap(optional& __other)
 869:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       noexcept(is_nothrow_move_constructible_v<_Tp>
 870:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	       && is_nothrow_swappable_v<_Tp>)
 871:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	using std::swap;
 873:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 874:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	if (this->_M_is_engaged() && __other._M_is_engaged())
 875:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  swap(this->_M_get(), __other._M_get());
 876:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	else if (this->_M_is_engaged())
 877:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 878:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    __other._M_construct(std::move(this->_M_get()));
 879:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_destruct();
 880:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 881:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	else if (__other._M_is_engaged())
 882:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  {
 883:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_construct(std::move(__other._M_get()));
 884:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    __other._M_destruct();
 885:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  }
 886:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 887:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 888:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       // Observers.
 889:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp*
 890:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator->() const
 891:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::__addressof(this->_M_get()); }
 892:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 893:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp*
 894:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator->()
 895:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::__addressof(this->_M_get()); }
 896:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 897:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&
 898:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*() const&
 899:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_get(); }
 900:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 901:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&
 902:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*()&
 903:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_get(); }
 904:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 905:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&&
 906:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*()&&
 907:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::move(this->_M_get()); }
 908:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 909:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&&
 910:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       operator*() const&&
 911:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return std::move(this->_M_get()); }
 912:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 913:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr explicit operator bool() const noexcept
 914:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_is_engaged(); }
 915:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr bool has_value() const noexcept
 167              		.loc 3 916 22 view .LVU24
ARM GAS  /tmp/ccofeNgA.s 			page 44


 168              	.LBB1384:
 169              	.LBI1384:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 170              		.loc 3 433 22 view .LVU25
 171              	.LBB1385:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 172              		.loc 3 434 58 is_stmt 0 view .LVU26
 173 0010 9DF81420 		ldrb	r2, [sp, #20]	@ zero_extendqisi2
 174              	.LVL9:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 175              		.loc 3 434 58 view .LVU27
 176              	.LBE1385:
 177              	.LBE1384:
 178              	.LBE1383:
 179              		.loc 2 98 9 view .LVU28
 180 0014 3AB3     		cbz	r2, .L11
  99:MotorControl/motor.cpp ****             return {Motor::ERROR_UNKNOWN_CURRENT_MEASUREMENT};
 100:MotorControl/motor.cpp ****         }
 101:MotorControl/motor.cpp **** 
 102:MotorControl/motor.cpp ****         float Ialpha = Ialpha_beta->first;
 181              		.loc 2 102 9 is_stmt 1 view .LVU29
 182              		.loc 2 102 37 is_stmt 0 view .LVU30
 183 0016 DDED037A 		vldr.32	s15, [sp, #12]
 184              	.LVL10:
 103:MotorControl/motor.cpp **** 
 104:MotorControl/motor.cpp ****         if (attached_) {
 185              		.loc 2 104 9 is_stmt 1 view .LVU31
 186              	.LBB1386:
 187              		.loc 2 104 13 is_stmt 0 view .LVU32
 188 001a 027A     		ldrb	r2, [r0, #8]	@ zero_extendqisi2
 189              		.loc 2 104 9 view .LVU33
 190 001c FAB1     		cbz	r2, .L7
 191              	.LBB1387:
 105:MotorControl/motor.cpp ****             float sign = test_voltage_ >= 0.0f ? 1.0f : -1.0f;
 192              		.loc 2 105 13 is_stmt 1 view .LVU34
 193              		.loc 2 105 26 is_stmt 0 view .LVU35
 194 001e 90ED017A 		vldr.32	s14, [r0, #4]
 195              		.loc 2 105 48 view .LVU36
 196 0022 B5EEC07A 		vcmpe.f32	s14, #0
 197 0026 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 198 002a 15DB     		blt	.L14
 199 002c F7EE006A 		vmov.f32	s13, #1.0e+0
 200              	.L8:
 201              	.LVL11:
 106:MotorControl/motor.cpp ****             deltaI_ += -sign * (Ialpha - last_Ialpha_);
 202              		.loc 2 106 13 is_stmt 1 discriminator 4 view .LVU37
 203              		.loc 2 106 42 is_stmt 0 discriminator 4 view .LVU38
 204 0030 90ED057A 		vldr.32	s14, [r0, #20]
 205              		.loc 2 106 40 discriminator 4 view .LVU39
 206 0034 37EEC77A 		vsub.f32	s14, s15, s14
 207              		.loc 2 106 30 discriminator 4 view .LVU40
 208 0038 66EEC76A 		vnmul.f32	s13, s13, s14
 209              	.LVL12:
 210              		.loc 2 106 21 discriminator 4 view .LVU41
 211 003c 90ED077A 		vldr.32	s14, [r0, #28]
 212 0040 37EE267A 		vadd.f32	s14, s14, s13
 213 0044 80ED077A 		vstr.32	s14, [r0, #28]
ARM GAS  /tmp/ccofeNgA.s 			page 45


 214              	.L10:
 215              		.loc 2 106 21 discriminator 4 view .LVU42
 216              	.LBE1387:
 217              	.LBE1386:
 107:MotorControl/motor.cpp ****         } else {
 108:MotorControl/motor.cpp ****             start_timestamp_ = input_timestamp;
 109:MotorControl/motor.cpp ****             attached_ = true;
 110:MotorControl/motor.cpp ****         }
 111:MotorControl/motor.cpp **** 
 112:MotorControl/motor.cpp ****         last_Ialpha_ = Ialpha;
 218              		.loc 2 112 9 is_stmt 1 view .LVU43
 219              		.loc 2 112 22 is_stmt 0 view .LVU44
 220 0048 C0ED057A 		vstr.32	s15, [r0, #20]
 113:MotorControl/motor.cpp ****         last_input_timestamp_ = input_timestamp;
 221              		.loc 2 113 9 is_stmt 1 view .LVU45
 222              		.loc 2 113 31 is_stmt 0 view .LVU46
 223 004c 8361     		str	r3, [r0, #24]
 114:MotorControl/motor.cpp **** 
 115:MotorControl/motor.cpp ****         return Motor::ERROR_NONE;
 224              		.loc 2 115 9 is_stmt 1 view .LVU47
 225              		.loc 2 115 23 is_stmt 0 view .LVU48
 226 004e 0020     		movs	r0, #0
 227              	.LVL13:
 228              		.loc 2 115 23 view .LVU49
 229 0050 0021     		movs	r1, #0
 230              	.LVL14:
 231              	.L5:
 116:MotorControl/motor.cpp ****     }
 232              		.loc 2 116 5 view .LVU50
 233 0052 02B0     		add	sp, sp, #8
 234              	.LCFI2:
 235              		.cfi_remember_state
 236              		.cfi_def_cfa_offset 8
 237              		@ sp needed
 238 0054 02B0     		add	sp, sp, #8
 239              	.LCFI3:
 240              		.cfi_def_cfa_offset 0
 241 0056 7047     		bx	lr
 242              	.LVL15:
 243              	.L14:
 244              	.LCFI4:
 245              		.cfi_restore_state
 246              	.LBB1389:
 247              	.LBB1388:
 105:MotorControl/motor.cpp ****             deltaI_ += -sign * (Ialpha - last_Ialpha_);
 248              		.loc 2 105 48 view .LVU51
 249 0058 FFEE006A 		vmov.f32	s13, #-1.0e+0
 250 005c E8E7     		b	.L8
 251              	.L7:
 252              	.LBE1388:
 108:MotorControl/motor.cpp ****             attached_ = true;
 253              		.loc 2 108 13 is_stmt 1 view .LVU52
 108:MotorControl/motor.cpp ****             attached_ = true;
 254              		.loc 2 108 30 is_stmt 0 view .LVU53
 255 005e 0361     		str	r3, [r0, #16]
 109:MotorControl/motor.cpp ****         }
 256              		.loc 2 109 13 is_stmt 1 view .LVU54
ARM GAS  /tmp/ccofeNgA.s 			page 46


 109:MotorControl/motor.cpp ****         }
 257              		.loc 2 109 23 is_stmt 0 view .LVU55
 258 0060 0122     		movs	r2, #1
 259 0062 0272     		strb	r2, [r0, #8]
 260 0064 F0E7     		b	.L10
 261              	.LVL16:
 262              	.L11:
 109:MotorControl/motor.cpp ****         }
 263              		.loc 2 109 23 view .LVU56
 264              	.LBE1389:
  99:MotorControl/motor.cpp ****         }
 265              		.loc 2 99 61 view .LVU57
 266 0066 4FF08040 		mov	r0, #1073741824
 267              	.LVL17:
  99:MotorControl/motor.cpp ****         }
 268              		.loc 2 99 61 view .LVU58
 269 006a 0021     		movs	r1, #0
 270 006c F1E7     		b	.L5
 271              		.cfi_endproc
 272              	.LFE5180:
 273              		.cantunwind
 274              		.fnend
 276              		.section	.text._ZNSt18bad_variant_accessD2Ev,"axG",%progbits,_ZNSt18bad_variant_accessD5Ev,comdat
 277              		.align	1
 278              		.weak	_ZNSt18bad_variant_accessD2Ev
 279              		.syntax unified
 280              		.thumb
 281              		.thumb_func
 283              	_ZNSt18bad_variant_accessD2Ev:
 284              		.fnstart
 285              	.LVL18:
 286              	.LFB6447:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 287              		.loc 1 1264 9 is_stmt 1 view -0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 291              		.loc 1 1264 9 is_stmt 0 view .LVU60
 292 0000 10B5     		push	{r4, lr}
 293              	.LCFI5:
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 4, -8
 296              		.cfi_offset 14, -4
 297 0002 0446     		mov	r4, r0
 298              	.LBB1390:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 299              		.loc 1 1264 9 view .LVU61
 300 0004 024B     		ldr	r3, .L18
 301 0006 0360     		str	r3, [r0]
 302 0008 FFF7FEFF 		bl	_ZNSt9exceptionD2Ev
 303              	.LVL19:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 304              		.loc 1 1264 9 view .LVU62
 305              	.LBE1390:
 306 000c 2046     		mov	r0, r4
 307 000e 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccofeNgA.s 			page 47


 308              	.LVL20:
 309              	.L19:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 310              		.loc 1 1264 9 view .LVU63
 311              		.align	2
 312              	.L18:
 313 0010 08000000 		.word	_ZTVSt18bad_variant_access+8
 314              		.cfi_endproc
 315              	.LFE6447:
 316              		.cantunwind
 317              		.fnend
 319              		.weak	_ZNSt18bad_variant_accessD1Ev
 320              		.thumb_set _ZNSt18bad_variant_accessD1Ev,_ZNSt18bad_variant_accessD2Ev
 321              		.section	.text._ZNSt18bad_variant_accessD0Ev,"axG",%progbits,_ZNSt18bad_variant_accessD5Ev,comdat
 322              		.align	1
 323              		.weak	_ZNSt18bad_variant_accessD0Ev
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 328              	_ZNSt18bad_variant_accessD0Ev:
 329              		.fnstart
 330              	.LVL21:
 331              	.LFB6449:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 332              		.loc 1 1264 9 is_stmt 1 view -0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 0
 335              		@ frame_needed = 0, uses_anonymous_args = 0
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 336              		.loc 1 1264 9 is_stmt 0 view .LVU65
 337 0000 10B5     		push	{r4, lr}
 338              	.LCFI6:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 4, -8
 341              		.cfi_offset 14, -4
 342 0002 0446     		mov	r4, r0
 343              	.LVL22:
 344              	.LBB1391:
 345              	.LBI1391:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 346              		.loc 1 1264 9 is_stmt 1 view .LVU66
 347              	.LBB1392:
 348 0004 044B     		ldr	r3, .L22
 349 0006 0360     		str	r3, [r0]
 350 0008 FFF7FEFF 		bl	_ZNSt9exceptionD2Ev
 351              	.LVL23:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 352              		.loc 1 1264 9 is_stmt 0 view .LVU67
 353              	.LBE1392:
 354              	.LBE1391:
 355 000c 0821     		movs	r1, #8
 356 000e 2046     		mov	r0, r4
 357 0010 FFF7FEFF 		bl	_ZdlPvj
 358              	.LVL24:
 359 0014 2046     		mov	r0, r4
 360 0016 10BD     		pop	{r4, pc}
 361              	.LVL25:
ARM GAS  /tmp/ccofeNgA.s 			page 48


 362              	.L23:
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 363              		.loc 1 1264 9 view .LVU68
 364              		.align	2
 365              	.L22:
 366 0018 08000000 		.word	_ZTVSt18bad_variant_access+8
 367              		.cfi_endproc
 368              	.LFE6449:
 369              		.cantunwind
 370              		.fnend
 372              		.section	.text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIf
 373              		.align	1
 374              		.weak	_ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 375              		.syntax unified
 376              		.thumb
 377              		.thumb_func
 379              	_ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:
 380              		.fnstart
 381              	.LVL26:
 382              	.LFB5181:
 117:MotorControl/motor.cpp **** 
 118:MotorControl/motor.cpp ****     ODriveIntf::MotorIntf::Error get_alpha_beta_output(
 383              		.loc 2 118 34 is_stmt 1 view -0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 16
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 388              		.loc 2 118 34 is_stmt 0 view .LVU70
 389 0000 84B0     		sub	sp, sp, #16
 390              	.LCFI7:
 391              		.cfi_def_cfa_offset 16
 119:MotorControl/motor.cpp ****             uint32_t output_timestamp, std::optional<float2D>* mod_alpha_beta,
 120:MotorControl/motor.cpp ****             std::optional<float>* ibus) final
 121:MotorControl/motor.cpp ****     {
 122:MotorControl/motor.cpp ****         test_voltage_ *= -1.0f;
 392              		.loc 2 122 9 is_stmt 1 view .LVU71
 393              		.loc 2 122 23 is_stmt 0 view .LVU72
 394 0002 D0ED017A 		vldr.32	s15, [r0, #4]
 395 0006 F1EE677A 		vneg.f32	s15, s15
 396 000a C0ED017A 		vstr.32	s15, [r0, #4]
 123:MotorControl/motor.cpp ****         float vfactor = 1.0f / ((2.0f / 3.0f) * vbus_voltage);
 397              		.loc 2 123 9 is_stmt 1 view .LVU73
 398              		.loc 2 123 47 is_stmt 0 view .LVU74
 399 000e 1649     		ldr	r1, .L28
 400              	.LVL27:
 401              		.loc 2 123 47 view .LVU75
 402 0010 91ED007A 		vldr.32	s14, [r1]
 403 0014 DFED156A 		vldr.32	s13, .L28+4
 404 0018 27EE267A 		vmul.f32	s14, s14, s13
 405              		.loc 2 123 15 view .LVU76
 406 001c B7EE006A 		vmov.f32	s12, #1.0e+0
 407 0020 C6EE076A 		vdiv.f32	s13, s12, s14
 408              	.LVL28:
 124:MotorControl/motor.cpp ****         *mod_alpha_beta = {test_voltage_ * vfactor, 0.0f};
 409              		.loc 2 124 9 is_stmt 1 view .LVU77
 410              		.loc 2 124 42 is_stmt 0 view .LVU78
 411 0024 67EEA67A 		vmul.f32	s15, s15, s13
ARM GAS  /tmp/ccofeNgA.s 			page 49


 412              	.LVL29:
 413              	.LBB1425:
 414              	.LBI1425:
 415              		.file 4 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** /*
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  */
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
ARM GAS  /tmp/ccofeNgA.s 			page 50


  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  */
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** # include <type_traits> // for std::__decay_and_strip, std::is_reference_v
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus > 201703L
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** # include <compare>
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** # define __cpp_lib_constexpr_utility 201811L
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** {
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   /**
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  @addtogroup utilities
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  @{
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    */
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   /// Tag type for piecewise construction of std::pair objects.
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   /// Tag for piecewise construction of std::pair objects.
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     piecewise_construct_t();
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   /// @cond undocumented
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // Forward declarations.
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template<typename...>
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     class tuple;
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template<std::size_t...>
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     struct _Index_tuple;
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // constructors.
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // is_convertible if the types are the same to
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     struct _PCC
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     {
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
ARM GAS  /tmp/ccofeNgA.s 			page 51


 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				       __do_converts,
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      __converts
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      >::value;
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				       __do_converts,
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      __converts
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      >::value;
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   };
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     {
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return false;
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
ARM GAS  /tmp/ccofeNgA.s 			page 52


 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return false;
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return false;
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return false;
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   };
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif // C++11
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   {
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     __pair_base() = default;
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     ~__pair_base() = default;
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif // C++11
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   };
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   /// @endcond
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****  /**
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****    */
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     struct pair
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****     {
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       typedef _T1 first_type;    ///< The type of the `first` member
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       typedef _T2 second_type;   ///< The type of the `second` member
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       _T1 first;                 ///< The first member
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       _T2 second;                ///< The second member
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        *  respective default constructors.  */
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
ARM GAS  /tmp/ccofeNgA.s 			page 53


 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(), second() { }
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                        __not_<
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       explicit constexpr pair()
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(), second() { }
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// Two objects may be passed to a @c pair constructor to be copied.
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #else
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// @cond undocumented
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// @endcond
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// Construct from two const lvalues, allowing implicit conversions.
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	                 && _PCCP::template
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=true>
 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// Construct from two const lvalues, disallowing implicit conversions.
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		enable_if<_PCCP::template
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	                  && !_PCCP::template
 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// There is also a templated constructor to convert from other pairs.
ARM GAS  /tmp/ccofeNgA.s 			page 54


 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #else
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// @cond undocumented
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			    _T1, _T2>;
 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       /// @endcond
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			  bool>::type=true>
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****         constexpr pair(const pair<_U1, _U2>& __p)
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****         : first(__p.first), second(__p.second) { }
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #endif
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       constexpr pair(const pair&) = default;	///< Copy constructor
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       constexpr pair(pair&&) = default;		///< Move constructor
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       // DR 811.
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveCopyPair<true, _U1, _T2>(),
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=true>
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        constexpr pair(_U1&& __x, const _T2& __y)
 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveCopyPair<false, _U1, _T2>(),
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        explicit constexpr pair(_U1&& __x, const _T2& __y)
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U2, typename
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _CopyMovePair<true, _T1, _U2>(),
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=true>
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        constexpr pair(const _T1& __x, _U2&& __y)
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 55


 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U2, typename
 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _CopyMovePair<false, _T1, _U2>(),
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        explicit pair(const _T1& __x, _U2&& __y)
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			  && _PCCP::template
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=true>
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	constexpr pair(_U1&& __x, _U2&& __y)
 416              		.loc 4 352 12 is_stmt 1 view .LVU79
 417              	.LBB1426:
 418              	.LBB1427:
 419              	.LBB1428:
 420              	.LBI1428:
 421              		.file 5 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** /** @file bits/move.h
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****  */
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #ifndef _MOVE_H
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #define _MOVE_H 1
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #include <bits/c++config.h>
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #if __cplusplus < 201103L
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** # include <bits/concept_check.h>
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #endif
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 56


  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** {
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   /**
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @ingroup utilities
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    */
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   template<typename _Tp>
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     { return __builtin_addressof(__r); }
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #if __cplusplus >= 201103L
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** } // namespace
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** {
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   /**
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @addtogroup utilities
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @{
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    */
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h **** 
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   /**
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****    */
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****   template<typename _Tp>
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     constexpr _Tp&&
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 422              		.loc 5 76 5 view .LVU80
 423              		.loc 5 76 5 is_stmt 0 view .LVU81
 424              	.LBE1428:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 425              		.loc 4 353 64 view .LVU82
 426 0028 CDED007A 		vstr.32	s15, [sp]
 427              	.LVL30:
 428              	.LBB1429:
 429              	.LBI1429:
 430              		.loc 5 76 5 is_stmt 1 view .LVU83
 431              		.loc 5 76 5 is_stmt 0 view .LVU84
 432              	.LBE1429:
 433              		.loc 4 353 64 view .LVU85
 434 002c 0021     		movs	r1, #0
 435 002e 0191     		str	r1, [sp, #4]	@ float
 436              	.LVL31:
 437              		.loc 4 353 64 view .LVU86
 438              	.LBE1427:
ARM GAS  /tmp/ccofeNgA.s 			page 57


 439              	.LBE1426:
 440              	.LBE1425:
 441              	.LBB1430:
 442              	.LBI1430:
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 443              		.loc 3 788 2 is_stmt 1 view .LVU87
 444              	.LBB1431:
 445              	.LBB1432:
 446              	.LBI1432:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 447              		.loc 3 433 22 view .LVU88
 448              	.LBB1433:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 449              		.loc 3 434 58 is_stmt 0 view .LVU89
 450 0030 117A     		ldrb	r1, [r2, #8]	@ zero_extendqisi2
 451              	.LVL32:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 452              		.loc 3 434 58 view .LVU90
 453              	.LBE1433:
 454              	.LBE1432:
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 455              		.loc 3 790 4 view .LVU91
 456 0032 89B1     		cbz	r1, .L25
 457              	.LVL33:
 458              	.LBB1434:
 459              	.LBI1434:
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			  && !_PCCP::template
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	explicit constexpr pair(_U1&& __x, _U2&& __y)
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			  && _PCCFP<_U1, _U2>::template
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=true>
 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	constexpr pair(pair<_U1, _U2>&& __p)
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			  && !_PCCFP<_U1, _U2>::template
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****                          bool>::type=false>
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	explicit constexpr pair(pair<_U1, _U2>&& __p)
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 58


 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       template<typename... _Args1, typename... _Args2>
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	_GLIBCXX20_CONSTEXPR
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       operator=(typename conditional<
 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		       is_copy_assignable<_T2>>::value,
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		const pair&, const __nonesuch&>::type __p)
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	first = __p.first;
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	second = __p.second;
 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return *this;
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       }
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       _GLIBCXX20_CONSTEXPR pair&
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       operator=(typename conditional<
 460              		.loc 4 401 7 is_stmt 1 view .LVU92
 461              	.LBB1435:
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		       is_move_assignable<_T2>>::value,
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		pair&&, __nonesuch&&>::type __p)
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       noexcept(__and_<is_nothrow_move_assignable<_T1>,
 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		      is_nothrow_move_assignable<_T2>>::value)
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       {
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	first = std::forward<first_type>(__p.first);
 462              		.loc 4 408 8 is_stmt 0 view .LVU93
 463 0034 C2ED007A 		vstr.32	s15, [r2]
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 464              		.loc 4 409 9 view .LVU94
 465 0038 0021     		movs	r1, #0
 466 003a 5160     		str	r1, [r2, #4]	@ float
 467              	.LVL34:
 468              	.L26:
 469              		.loc 4 409 9 view .LVU95
 470              	.LBE1435:
 471              	.LBE1434:
 472              	.LBE1431:
 473              	.LBE1430:
 125:MotorControl/motor.cpp ****         *ibus = 0.0f;
 474              		.loc 2 125 9 is_stmt 1 view .LVU96
 475              	.LBB1441:
 476              	.LBI1441:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 477              		.loc 3 700 2 view .LVU97
 478              	.LBB1442:
 479              	.LBB1443:
 480              	.LBB1444:
 481              	.LBI1444:
 482              		.loc 5 76 5 view .LVU98
 483              		.loc 5 76 5 is_stmt 0 view .LVU99
 484              	.LBE1444:
 485              	.LBB1445:
 486              	.LBI1445:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 487              		.loc 3 607 28 is_stmt 1 view .LVU100
 488              	.LBB1446:
ARM GAS  /tmp/ccofeNgA.s 			page 59


 489              	.LBB1447:
 490              	.LBB1448:
 491              	.LBI1448:
 492              		.loc 5 76 5 view .LVU101
 493              		.loc 5 76 5 is_stmt 0 view .LVU102
 494              	.LBE1448:
 495              	.LBB1449:
 496              	.LBI1449:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 497              		.loc 3 300 42 is_stmt 1 view .LVU103
 498              	.LBB1450:
 499              	.LBB1451:
 500              	.LBB1452:
 501              	.LBI1452:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 502              		.loc 3 115 2 view .LVU104
 503              	.LBB1453:
 504              	.LBB1454:
 505              	.LBB1455:
 506              	.LBI1455:
 507              		.loc 5 76 5 view .LVU105
 508              		.loc 5 76 5 is_stmt 0 view .LVU106
 509              	.LBE1455:
 510              	.LBB1456:
 511              	.LBI1456:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 512              		.loc 3 203 6 is_stmt 1 view .LVU107
 513              	.LBB1457:
 514              	.LBB1458:
 515              	.LBB1459:
 516              	.LBI1459:
 517              		.loc 5 76 5 view .LVU108
 518              		.loc 5 76 5 is_stmt 0 view .LVU109
 519              	.LBE1459:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 520              		.loc 3 204 47 view .LVU110
 521 003c 0022     		movs	r2, #0
 522              	.LVL35:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 523              		.loc 3 204 47 view .LVU111
 524 003e 0292     		str	r2, [sp, #8]	@ float
 525              	.LVL36:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 526              		.loc 3 204 47 view .LVU112
 527              	.LBE1458:
 528              	.LBE1457:
 529              	.LBE1456:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 530              		.loc 3 117 19 view .LVU113
 531 0040 0122     		movs	r2, #1
 532 0042 8DF80C20 		strb	r2, [sp, #12]
 533              	.LVL37:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 534              		.loc 3 117 19 view .LVU114
 535              	.LBE1454:
 536              	.LBE1453:
 537              	.LBE1452:
ARM GAS  /tmp/ccofeNgA.s 			page 60


 538              	.LBE1451:
 539              	.LBE1450:
 540              	.LBE1449:
 541              	.LBE1447:
 542              	.LBE1446:
 543              	.LBE1445:
 544              	.LBE1443:
 545              	.LBE1442:
 546              	.LBE1441:
 547              		.loc 2 125 15 view .LVU115
 548 0046 04AA     		add	r2, sp, #16
 549 0048 12E90300 		ldmdb	r2, {r0, r1}
 550 004c 83E80300 		stm	r3, {r0, r1}
 126:MotorControl/motor.cpp ****         return Motor::ERROR_NONE;
 551              		.loc 2 126 9 is_stmt 1 view .LVU116
 127:MotorControl/motor.cpp ****     }
 552              		.loc 2 127 5 is_stmt 0 view .LVU117
 553 0050 0020     		movs	r0, #0
 554 0052 0021     		movs	r1, #0
 555 0054 04B0     		add	sp, sp, #16
 556              	.LCFI8:
 557              		.cfi_remember_state
 558              		.cfi_def_cfa_offset 0
 559              		@ sp needed
 560 0056 7047     		bx	lr
 561              	.LVL38:
 562              	.L25:
 563              	.LCFI9:
 564              		.cfi_restore_state
 565              	.LBB1460:
 566              	.LBB1439:
 567              	.LBB1436:
 568              	.LBI1436:
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 569              		.loc 3 415 2 is_stmt 1 view .LVU118
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 570              		.loc 3 415 2 is_stmt 0 view .LVU119
 571              	.LBE1436:
 572              	.LBE1439:
 573              	.LBE1460:
 574              		.file 6 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // Copyright (C) 1994-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // This file is part of GCC.
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** //
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // it under the terms of the GNU General Public License as published by
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // any later version.
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // 
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // GNU General Public License for more details.
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // 
ARM GAS  /tmp/ccofeNgA.s 			page 61


  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // You should have received a copy of the GNU General Public License and
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // <http://www.gnu.org/licenses/>.
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** /** @file new
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  This is a Standard C++ Library header.
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  handling memory allocation errors; see
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  for more.
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  */
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #ifndef _NEW
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #define _NEW
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #pragma GCC system_header
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #include <bits/c++config.h>
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #include <exception>
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #pragma GCC visibility push(default)
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** extern "C++" {
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** namespace std 
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** {
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   /**
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *  @brief  Exception possibly thrown by @c new.
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *  @ingroup exceptions
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *  errors from the throwing forms of @c new.  */
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   class bad_alloc : public exception 
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   {
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   public:
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     bad_alloc() throw() { }
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cplusplus >= 201103L
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     bad_alloc(const bad_alloc&) = default;
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // This declaration is not useless:
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     virtual ~bad_alloc() throw();
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // See comment in eh_exception.cc.
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     virtual const char* what() const throw();
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   };
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cplusplus >= 201103L
ARM GAS  /tmp/ccofeNgA.s 			page 62


  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   class bad_array_new_length : public bad_alloc
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   {
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   public:
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     bad_array_new_length() throw() { }
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // This declaration is not useless:
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     virtual ~bad_array_new_length() throw();
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     // See comment in eh_exception.cc.
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     virtual const char* what() const throw();
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   };
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cpp_aligned_new
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   enum class align_val_t: size_t {};
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   struct nothrow_t
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   {
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cplusplus >= 201103L
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****     explicit nothrow_t() = default;
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   };
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   extern const nothrow_t nothrow;
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   /** If you write your own error handler to be called by @c new, it must
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****    *  be of this type.  */
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   typedef void (*new_handler)();
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   /// Takes a replacement handler as the argument, returns the
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   /// previous handler.
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   new_handler set_new_handler(new_handler) throw();
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cplusplus >= 201103L
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   /// Return the current new handler.
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   new_handler get_new_handler() noexcept;
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** } // namespace std
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** //@{
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** /** These are replaceable signatures:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  - normal array new and delete (same)
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *    @c NULL on error)
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  - @c nothrow array new and delete (same)
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  Placement new and delete signatures (take a memory address argument,
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****  *  does nothing) may not be replaced by a user's program.
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** */
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
ARM GAS  /tmp/ccofeNgA.s 			page 63


 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cpp_sized_deallocation
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__, __malloc__));
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__, __malloc__));
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cpp_aligned_new
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*, std::align_val_t)
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*, std::align_val_t)
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #if __cpp_sized_deallocation
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif // __cpp_sized_deallocation
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** #endif // __cpp_aligned_new
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** 
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** // Default placement versions of operator new.
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new **** { return __p; }
 575              		.loc 6 175 3 is_stmt 1 view .LVU120
 576              	.LBB1461:
 577              	.LBB1440:
 578              	.LBB1438:
 579              	.LBB1437:
 580              		.loc 6 175 3 is_stmt 0 view .LVU121
 581 0058 6946     		mov	r1, sp
 582 005a 03C9     		ldm	r1, {r0, r1}
 583              	.LVL39:
 584              		.loc 6 175 3 view .LVU122
 585 005c 82E80300 		stm	r2, {r0, r1}
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
ARM GAS  /tmp/ccofeNgA.s 			page 64


 586              		.loc 3 421 51 view .LVU123
 587 0060 0121     		movs	r1, #1
 588 0062 1172     		strb	r1, [r2, #8]
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 589              		.loc 3 422 2 view .LVU124
 590 0064 EAE7     		b	.L26
 591              	.L29:
 592 0066 00BF     		.align	2
 593              	.L28:
 594 0068 00000000 		.word	vbus_voltage
 595 006c ABAA2A3F 		.word	1059760811
 596              	.LBE1437:
 597              	.LBE1438:
 598              	.LBE1440:
 599              	.LBE1461:
 600              		.cfi_endproc
 601              	.LFE5181:
 602              		.cantunwind
 603              		.fnend
 605              		.section	.text._ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIf
 606              		.align	1
 607              		.weak	_ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 612              	_ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:
 613              		.fnstart
 614              	.LVL40:
 615              	.LFB5171:
  50:MotorControl/motor.cpp ****             uint32_t output_timestamp,
 616              		.loc 2 50 34 is_stmt 1 view -0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 16
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              		@ link register save eliminated.
  54:MotorControl/motor.cpp ****             return Motor::ERROR_CONTROLLER_INITIALIZING;
 621              		.loc 2 54 9 view .LVU126
 622              	.LBB1497:
 623              	.LBI1497:
 624              		.loc 3 916 22 view .LVU127
 625              	.LBB1498:
 626              	.LBI1498:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 627              		.loc 3 433 22 view .LVU128
 628              	.LBB1499:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 629              		.loc 3 434 58 is_stmt 0 view .LVU129
 630 0000 90F82410 		ldrb	r1, [r0, #36]	@ zero_extendqisi2
 631              	.LVL41:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 632              		.loc 3 434 58 view .LVU130
 633              	.LBE1499:
 634              	.LBE1498:
 635              	.LBE1497:
  54:MotorControl/motor.cpp ****             return Motor::ERROR_CONTROLLER_INITIALIZING;
 636              		.loc 2 54 9 view .LVU131
 637 0004 29B3     		cbz	r1, .L34
ARM GAS  /tmp/ccofeNgA.s 			page 65


  50:MotorControl/motor.cpp ****             uint32_t output_timestamp,
 638              		.loc 2 50 34 view .LVU132
 639 0006 84B0     		sub	sp, sp, #16
 640              	.LCFI10:
 641              		.cfi_def_cfa_offset 16
 642 0008 8446     		mov	ip, r0
  57:MotorControl/motor.cpp ****             *ibus = *test_mod_ * actual_current_;
 643              		.loc 2 57 13 is_stmt 1 view .LVU133
 644              	.LVL42:
 645              	.LBB1500:
 646              	.LBI1500:
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 647              		.loc 4 352 12 view .LVU134
 648              	.LBB1501:
 649              	.LBB1502:
 650              	.LBB1503:
 651              	.LBI1503:
 652              		.loc 5 76 5 view .LVU135
 653              		.loc 5 76 5 is_stmt 0 view .LVU136
 654              	.LBE1503:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 655              		.loc 4 353 64 view .LVU137
 656 000a 016A     		ldr	r1, [r0, #32]	@ float
 657 000c 0091     		str	r1, [sp]	@ float
 658              	.LVL43:
 659              	.LBB1504:
 660              	.LBI1504:
 661              		.loc 5 76 5 is_stmt 1 view .LVU138
 662              		.loc 5 76 5 is_stmt 0 view .LVU139
 663              	.LBE1504:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 664              		.loc 4 353 64 view .LVU140
 665 000e 0020     		movs	r0, #0
 666              	.LVL44:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 667              		.loc 4 353 64 view .LVU141
 668 0010 0190     		str	r0, [sp, #4]	@ float
 669              	.LVL45:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 670              		.loc 4 353 64 view .LVU142
 671              	.LBE1502:
 672              	.LBE1501:
 673              	.LBE1500:
 674              	.LBB1505:
 675              	.LBI1505:
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 676              		.loc 3 788 2 is_stmt 1 view .LVU143
 677              	.LBB1506:
 678              	.LBB1507:
 679              	.LBI1507:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 680              		.loc 3 433 22 view .LVU144
 681              	.LBB1508:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 682              		.loc 3 434 58 is_stmt 0 view .LVU145
 683 0012 107A     		ldrb	r0, [r2, #8]	@ zero_extendqisi2
 684              	.LVL46:
ARM GAS  /tmp/ccofeNgA.s 			page 66


 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 685              		.loc 3 434 58 view .LVU146
 686              	.LBE1508:
 687              	.LBE1507:
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 688              		.loc 3 790 4 view .LVU147
 689 0014 B0B1     		cbz	r0, .L32
 690              	.LVL47:
 691              	.LBB1509:
 692              	.LBI1509:
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 693              		.loc 4 401 7 is_stmt 1 view .LVU148
 694              	.LBB1510:
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 695              		.loc 4 408 8 is_stmt 0 view .LVU149
 696 0016 1160     		str	r1, [r2]	@ float
 697              		.loc 4 409 9 view .LVU150
 698 0018 0021     		movs	r1, #0
 699 001a 5160     		str	r1, [r2, #4]	@ float
 700              	.LVL48:
 701              	.L33:
 702              		.loc 4 409 9 view .LVU151
 703              	.LBE1510:
 704              	.LBE1509:
 705              	.LBE1506:
 706              	.LBE1505:
  58:MotorControl/motor.cpp ****             return Motor::ERROR_NONE;
 707              		.loc 2 58 13 is_stmt 1 view .LVU152
  58:MotorControl/motor.cpp ****             return Motor::ERROR_NONE;
 708              		.loc 2 58 21 is_stmt 0 view .LVU153
 709 001c DCED087A 		vldr.32	s15, [ip, #32]
  58:MotorControl/motor.cpp ****             return Motor::ERROR_NONE;
 710              		.loc 2 58 34 view .LVU154
 711 0020 9CED047A 		vldr.32	s14, [ip, #16]
  58:MotorControl/motor.cpp ****             return Motor::ERROR_NONE;
 712              		.loc 2 58 32 view .LVU155
 713 0024 67EE877A 		vmul.f32	s15, s15, s14
 714              	.LVL49:
 715              	.LBB1516:
 716              	.LBI1516:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 717              		.loc 3 700 2 is_stmt 1 view .LVU156
 718              	.LBB1517:
 719              	.LBB1518:
 720              	.LBB1519:
 721              	.LBI1519:
 722              		.loc 5 76 5 view .LVU157
 723              		.loc 5 76 5 is_stmt 0 view .LVU158
 724              	.LBE1519:
 725              	.LBB1520:
 726              	.LBI1520:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 727              		.loc 3 607 28 is_stmt 1 view .LVU159
 728              	.LBB1521:
 729              	.LBB1522:
 730              	.LBB1523:
 731              	.LBI1523:
ARM GAS  /tmp/ccofeNgA.s 			page 67


 732              		.loc 5 76 5 view .LVU160
 733              		.loc 5 76 5 is_stmt 0 view .LVU161
 734              	.LBE1523:
 735              	.LBB1524:
 736              	.LBI1524:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 737              		.loc 3 300 42 is_stmt 1 view .LVU162
 738              	.LBB1525:
 739              	.LBB1526:
 740              	.LBB1527:
 741              	.LBI1527:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 742              		.loc 3 115 2 view .LVU163
 743              	.LBB1528:
 744              	.LBB1529:
 745              	.LBB1530:
 746              	.LBI1530:
 747              		.loc 5 76 5 view .LVU164
 748              		.loc 5 76 5 is_stmt 0 view .LVU165
 749              	.LBE1530:
 750              	.LBB1531:
 751              	.LBI1531:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 752              		.loc 3 203 6 is_stmt 1 view .LVU166
 753              	.LBB1532:
 754              	.LBB1533:
 755              	.LBB1534:
 756              	.LBI1534:
 757              		.loc 5 76 5 view .LVU167
 758              		.loc 5 76 5 is_stmt 0 view .LVU168
 759              	.LBE1534:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 760              		.loc 3 204 47 view .LVU169
 761 0028 CDED027A 		vstr.32	s15, [sp, #8]
 762              	.LVL50:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 763              		.loc 3 204 47 view .LVU170
 764              	.LBE1533:
 765              	.LBE1532:
 766              	.LBE1531:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 767              		.loc 3 117 19 view .LVU171
 768 002c 0122     		movs	r2, #1
 769              	.LVL51:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 770              		.loc 3 117 19 view .LVU172
 771 002e 8DF80C20 		strb	r2, [sp, #12]
 772              	.LVL52:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 773              		.loc 3 117 19 view .LVU173
 774              	.LBE1529:
 775              	.LBE1528:
 776              	.LBE1527:
 777              	.LBE1526:
 778              	.LBE1525:
 779              	.LBE1524:
 780              	.LBE1522:
ARM GAS  /tmp/ccofeNgA.s 			page 68


 781              	.LBE1521:
 782              	.LBE1520:
 783              	.LBE1518:
 784              	.LBE1517:
 785              	.LBE1516:
  58:MotorControl/motor.cpp ****             return Motor::ERROR_NONE;
 786              		.loc 2 58 19 view .LVU174
 787 0032 04AA     		add	r2, sp, #16
 788 0034 12E90300 		ldmdb	r2, {r0, r1}
 789 0038 83E80300 		stm	r3, {r0, r1}
  59:MotorControl/motor.cpp ****         }
 790              		.loc 2 59 13 is_stmt 1 view .LVU175
  59:MotorControl/motor.cpp ****         }
 791              		.loc 2 59 27 is_stmt 0 view .LVU176
 792 003c 0020     		movs	r0, #0
 793 003e 0021     		movs	r1, #0
  61:MotorControl/motor.cpp **** 
 794              		.loc 2 61 5 view .LVU177
 795 0040 04B0     		add	sp, sp, #16
 796              	.LCFI11:
 797              		.cfi_remember_state
 798              		.cfi_def_cfa_offset 0
 799              		@ sp needed
 800 0042 7047     		bx	lr
 801              	.LVL53:
 802              	.L32:
 803              	.LCFI12:
 804              		.cfi_restore_state
 805              	.LBB1535:
 806              	.LBB1514:
 807              	.LBB1511:
 808              	.LBI1511:
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 809              		.loc 3 415 2 is_stmt 1 view .LVU178
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 810              		.loc 3 415 2 is_stmt 0 view .LVU179
 811              	.LBE1511:
 812              	.LBE1514:
 813              	.LBE1535:
 814              		.loc 6 175 3 is_stmt 1 view .LVU180
 815              	.LBB1536:
 816              	.LBB1515:
 817              	.LBB1513:
 818              	.LBB1512:
 819              		.loc 6 175 3 is_stmt 0 view .LVU181
 820 0044 6946     		mov	r1, sp
 821 0046 03C9     		ldm	r1, {r0, r1}
 822 0048 82E80300 		stm	r2, {r0, r1}
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 823              		.loc 3 421 51 view .LVU182
 824 004c 0121     		movs	r1, #1
 825 004e 1172     		strb	r1, [r2, #8]
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 826              		.loc 3 422 2 view .LVU183
 827 0050 E4E7     		b	.L33
 828              	.LVL54:
 829              	.L34:
ARM GAS  /tmp/ccofeNgA.s 			page 69


 830              	.LCFI13:
 831              		.cfi_def_cfa_offset 0
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 832              		.loc 3 422 2 view .LVU184
 833              	.LBE1512:
 834              	.LBE1513:
 835              	.LBE1515:
 836              	.LBE1536:
  55:MotorControl/motor.cpp ****         } else {
 837              		.loc 2 55 27 view .LVU185
 838 0052 0020     		movs	r0, #0
 839              	.LVL55:
  55:MotorControl/motor.cpp ****         } else {
 840              		.loc 2 55 27 view .LVU186
 841 0054 0421     		movs	r1, #4
  61:MotorControl/motor.cpp **** 
 842              		.loc 2 61 5 view .LVU187
 843 0056 7047     		bx	lr
 844              		.cfi_endproc
 845              	.LFE5171:
 846              		.cantunwind
 847              		.fnend
 849              		.section	.text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEE
 850              		.align	1
 851              		.weak	_ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 852              		.syntax unified
 853              		.thumb
 854              		.thumb_func
 856              	_ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:
 857              		.fnstart
 858              	.LVL56:
 859              	.LFB5159:
  24:MotorControl/motor.cpp ****             std::optional<float> vbus_voltage,
 860              		.loc 2 24 34 is_stmt 1 view -0
 861              		.cfi_startproc
 862              		@ args = 20, pretend = 8, frame = 16
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 864              		@ link register save eliminated.
  24:MotorControl/motor.cpp ****             std::optional<float> vbus_voltage,
 865              		.loc 2 24 34 is_stmt 0 view .LVU189
 866 0000 82B0     		sub	sp, sp, #8
 867              	.LCFI14:
 868              		.cfi_def_cfa_offset 8
 869 0002 84B0     		sub	sp, sp, #16
 870              	.LCFI15:
 871              		.cfi_def_cfa_offset 24
 872 0004 EC46     		mov	ip, sp
 873 0006 8CE80600 		stm	ip, {r1, r2}
 874 000a 0593     		str	r3, [sp, #20]
  29:MotorControl/motor.cpp ****             actual_current_ = Ialpha_beta->first;
 875              		.loc 2 29 9 is_stmt 1 view .LVU190
 876              	.LVL57:
 877              	.LBB1567:
 878              	.LBI1567:
 879              		.loc 3 916 22 view .LVU191
 880              	.LBB1568:
 881              	.LBI1568:
ARM GAS  /tmp/ccofeNgA.s 			page 70


 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 882              		.loc 3 433 22 view .LVU192
 883              	.LBB1569:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 884              		.loc 3 434 58 is_stmt 0 view .LVU193
 885 000c 9DF81C30 		ldrb	r3, [sp, #28]	@ zero_extendqisi2
 886              	.LVL58:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 887              		.loc 3 434 58 view .LVU194
 888              	.LBE1569:
 889              	.LBE1568:
 890              	.LBE1567:
  29:MotorControl/motor.cpp ****             actual_current_ = Ialpha_beta->first;
 891              		.loc 2 29 9 view .LVU195
 892 0010 CBB3     		cbz	r3, .L40
  30:MotorControl/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 893              		.loc 2 30 13 is_stmt 1 view .LVU196
  30:MotorControl/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 894              		.loc 2 30 44 is_stmt 0 view .LVU197
 895 0012 DDED057A 		vldr.32	s15, [sp, #20]
  30:MotorControl/motor.cpp ****             test_voltage_ += (kI * current_meas_period) * (target_current_ - actual_current_);
 896              		.loc 2 30 29 view .LVU198
 897 0016 C0ED047A 		vstr.32	s15, [r0, #16]
  31:MotorControl/motor.cpp ****             I_beta_ += (kIBetaFilt * current_meas_period) * (Ialpha_beta->second - I_beta_);
 898              		.loc 2 31 13 is_stmt 1 view .LVU199
  31:MotorControl/motor.cpp ****             I_beta_ += (kIBetaFilt * current_meas_period) * (Ialpha_beta->second - I_beta_);
 899              		.loc 2 31 31 is_stmt 0 view .LVU200
 900 001a 90ED017A 		vldr.32	s14, [r0, #4]
  31:MotorControl/motor.cpp ****             I_beta_ += (kIBetaFilt * current_meas_period) * (Ialpha_beta->second - I_beta_);
 901              		.loc 2 31 34 view .LVU201
 902 001e 9FED2C6A 		vldr.32	s12, .L51
 903 0022 27EE067A 		vmul.f32	s14, s14, s12
  31:MotorControl/motor.cpp ****             I_beta_ += (kIBetaFilt * current_meas_period) * (Ialpha_beta->second - I_beta_);
 904              		.loc 2 31 60 view .LVU202
 905 0026 D0ED056A 		vldr.32	s13, [r0, #20]
  31:MotorControl/motor.cpp ****             I_beta_ += (kIBetaFilt * current_meas_period) * (Ialpha_beta->second - I_beta_);
 906              		.loc 2 31 76 view .LVU203
 907 002a 76EEE76A 		vsub.f32	s13, s13, s15
  31:MotorControl/motor.cpp ****             I_beta_ += (kIBetaFilt * current_meas_period) * (Ialpha_beta->second - I_beta_);
 908              		.loc 2 31 57 view .LVU204
 909 002e 27EE267A 		vmul.f32	s14, s14, s13
  31:MotorControl/motor.cpp ****             I_beta_ += (kIBetaFilt * current_meas_period) * (Ialpha_beta->second - I_beta_);
 910              		.loc 2 31 27 view .LVU205
 911 0032 D0ED066A 		vldr.32	s13, [r0, #24]
 912 0036 36EE877A 		vadd.f32	s14, s13, s14
 913 003a 80ED067A 		vstr.32	s14, [r0, #24]
  32:MotorControl/motor.cpp ****         } else {
 914              		.loc 2 32 13 is_stmt 1 view .LVU206
  32:MotorControl/motor.cpp ****         } else {
 915              		.loc 2 32 25 is_stmt 0 view .LVU207
 916 003e D0ED027A 		vldr.32	s15, [r0, #8]
  32:MotorControl/motor.cpp ****         } else {
 917              		.loc 2 32 36 view .LVU208
 918 0042 67EE867A 		vmul.f32	s15, s15, s12
  32:MotorControl/motor.cpp ****         } else {
 919              		.loc 2 32 84 view .LVU209
 920 0046 90ED077A 		vldr.32	s14, [r0, #28]
ARM GAS  /tmp/ccofeNgA.s 			page 71


  32:MotorControl/motor.cpp ****         } else {
 921              		.loc 2 32 82 view .LVU210
 922 004a DDED066A 		vldr.32	s13, [sp, #24]
 923 004e 76EEC76A 		vsub.f32	s13, s13, s14
  32:MotorControl/motor.cpp ****         } else {
 924              		.loc 2 32 59 view .LVU211
 925 0052 67EEA67A 		vmul.f32	s15, s15, s13
  32:MotorControl/motor.cpp ****         } else {
 926              		.loc 2 32 21 view .LVU212
 927 0056 77EE277A 		vadd.f32	s15, s14, s15
 928 005a C0ED077A 		vstr.32	s15, [r0, #28]
 929              	.L41:
  38:MotorControl/motor.cpp ****             test_voltage_ = NAN;
 930              		.loc 2 38 9 is_stmt 1 view .LVU213
 931              	.LBB1570:
  38:MotorControl/motor.cpp ****             test_voltage_ = NAN;
 932              		.loc 2 38 21 is_stmt 0 view .LVU214
 933 005e D0ED067A 		vldr.32	s15, [r0, #24]
 934              	.LVL59:
 935              	.LBB1571:
 936              	.LBI1571:
 937              		.file 7 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // -*- C++ -*- C library enhancements header.
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** /** @file include/bits/std_abs.h
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****  *  Do not attempt to use it directly. @headername{cmath, cstdlib}
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****  */
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #ifndef _GLIBCXX_BITS_STD_ABS_H
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #define _GLIBCXX_BITS_STD_ABS_H
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #pragma GCC system_header
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #include <bits/c++config.h>
ARM GAS  /tmp/ccofeNgA.s 			page 72


  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #include_next <stdlib.h>
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #ifdef __CORRECT_ISO_CPP_MATH_H_PROTO
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** # include_next <math.h>
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #endif
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #undef abs
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** extern "C++"
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** {
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** {
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   using ::abs;
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   inline long
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   abs(long __i) { return __builtin_labs(__i); }
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #endif
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #ifdef _GLIBCXX_USE_LONG_LONG
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   inline long long
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   abs(long long __x) { return __builtin_llabs (__x); }
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #endif
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // _GLIBCXX_RESOLVE_LIB_DEFECTS
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // 2192. Validity and return type of std::abs(0u) is unclear
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // 2294. <cstdlib> should declare abs(double)
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** // 2735. std::abs(short), std::abs(signed char) and others should return int
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR double
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   abs(double __x)
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   { return __builtin_fabs(__x); }
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h **** 
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   inline _GLIBCXX_CONSTEXPR float
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   abs(float __x)
 938              		.loc 7 75 3 is_stmt 1 view .LVU215
 939              	.LBB1572:
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 940              		.loc 7 76 5 view .LVU216
 941              		.loc 7 76 31 is_stmt 0 view .LVU217
 942 0062 B0EEE77A 		vabs.f32	s14, s15
 943              	.LVL60:
 944              		.loc 7 76 31 view .LVU218
 945              	.LBE1572:
 946              	.LBE1571:
  38:MotorControl/motor.cpp ****             test_voltage_ = NAN;
 947              		.loc 2 38 39 view .LVU219
 948 0066 D0ED036A 		vldr.32	s13, [r0, #12]
  38:MotorControl/motor.cpp ****             test_voltage_ = NAN;
 949              		.loc 2 38 9 view .LVU220
 950 006a F4EEC76A 		vcmpe.f32	s13, s14
 951 006e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
ARM GAS  /tmp/ccofeNgA.s 			page 73


 952 0072 0CD4     		bmi	.L49
 953              	.LBE1570:
  41:MotorControl/motor.cpp ****             return Motor::ERROR_UNKNOWN_VBUS_VOLTAGE;
 954              		.loc 2 41 16 is_stmt 1 view .LVU221
 955              	.LVL61:
 956              	.LBB1598:
 957              	.LBB1573:
 958              	.LBB1574:
 959              	.LBI1574:
 960              		.loc 3 916 22 view .LVU222
 961              	.LBB1575:
 962              	.LBI1575:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 963              		.loc 3 433 22 view .LVU223
 964              	.LBB1576:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 965              		.loc 3 434 58 is_stmt 0 view .LVU224
 966 0074 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 967              	.LVL62:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 968              		.loc 3 434 58 view .LVU225
 969              	.LBE1576:
 970              	.LBE1575:
 971              	.LBE1574:
  41:MotorControl/motor.cpp ****             return Motor::ERROR_UNKNOWN_VBUS_VOLTAGE;
 972              		.loc 2 41 16 view .LVU226
 973 0078 73B9     		cbnz	r3, .L50
  42:MotorControl/motor.cpp ****         } else {
 974              		.loc 2 42 27 view .LVU227
 975 007a 4FF00040 		mov	r0, #-2147483648
 976              	.LVL63:
  42:MotorControl/motor.cpp ****         } else {
 977              		.loc 2 42 27 view .LVU228
 978 007e 0021     		movs	r1, #0
 979              	.L39:
 980              	.LBE1573:
 981              	.LBE1598:
  48:MotorControl/motor.cpp **** 
 982              		.loc 2 48 5 view .LVU229
 983 0080 04B0     		add	sp, sp, #16
 984              	.LCFI16:
 985              		.cfi_remember_state
 986              		.cfi_def_cfa_offset 8
 987              		@ sp needed
 988 0082 02B0     		add	sp, sp, #8
 989              	.LCFI17:
 990              		.cfi_def_cfa_offset 0
 991 0084 7047     		bx	lr
 992              	.LVL64:
 993              	.L40:
 994              	.LCFI18:
 995              		.cfi_restore_state
  34:MotorControl/motor.cpp ****             test_voltage_ = 0.0f;
 996              		.loc 2 34 13 is_stmt 1 view .LVU230
  34:MotorControl/motor.cpp ****             test_voltage_ = 0.0f;
 997              		.loc 2 34 29 is_stmt 0 view .LVU231
 998 0086 0023     		movs	r3, #0
ARM GAS  /tmp/ccofeNgA.s 			page 74


 999 0088 0361     		str	r3, [r0, #16]	@ float
  35:MotorControl/motor.cpp ****         }
 1000              		.loc 2 35 13 is_stmt 1 view .LVU232
  35:MotorControl/motor.cpp ****         }
 1001              		.loc 2 35 27 is_stmt 0 view .LVU233
 1002 008a 8361     		str	r3, [r0, #24]	@ float
 1003 008c E7E7     		b	.L41
 1004              	.L49:
 1005              	.LBB1599:
  39:MotorControl/motor.cpp ****             return Motor::ERROR_PHASE_RESISTANCE_OUT_OF_RANGE;
 1006              		.loc 2 39 13 is_stmt 1 view .LVU234
  39:MotorControl/motor.cpp ****             return Motor::ERROR_PHASE_RESISTANCE_OUT_OF_RANGE;
 1007              		.loc 2 39 27 is_stmt 0 view .LVU235
 1008 008e 114B     		ldr	r3, .L51+4
 1009 0090 8361     		str	r3, [r0, #24]	@ float
  40:MotorControl/motor.cpp ****         } else if (!vbus_voltage.has_value()) {
 1010              		.loc 2 40 13 is_stmt 1 view .LVU236
  40:MotorControl/motor.cpp ****         } else if (!vbus_voltage.has_value()) {
 1011              		.loc 2 40 27 is_stmt 0 view .LVU237
 1012 0092 0120     		movs	r0, #1
 1013              	.LVL65:
  40:MotorControl/motor.cpp ****         } else if (!vbus_voltage.has_value()) {
 1014              		.loc 2 40 27 view .LVU238
 1015 0094 0021     		movs	r1, #0
 1016 0096 F3E7     		b	.L39
 1017              	.LVL66:
 1018              	.L50:
 1019              	.LBB1597:
 1020              	.LBB1577:
  44:MotorControl/motor.cpp ****             test_mod_ = test_voltage_ * vfactor;
 1021              		.loc 2 44 13 is_stmt 1 view .LVU239
  44:MotorControl/motor.cpp ****             test_mod_ = test_voltage_ * vfactor;
 1022              		.loc 2 44 51 is_stmt 0 view .LVU240
 1023 0098 9DED007A 		vldr.32	s14, [sp]
 1024 009c DFED0E6A 		vldr.32	s13, .L51+8
 1025 00a0 27EE267A 		vmul.f32	s14, s14, s13
  44:MotorControl/motor.cpp ****             test_mod_ = test_voltage_ * vfactor;
 1026              		.loc 2 44 66 view .LVU241
 1027 00a4 B7EE006A 		vmov.f32	s12, #1.0e+0
 1028 00a8 C6EE076A 		vdiv.f32	s13, s12, s14
 1029              	.LVL67:
  45:MotorControl/motor.cpp ****             return Motor::ERROR_NONE;
 1030              		.loc 2 45 13 is_stmt 1 view .LVU242
  45:MotorControl/motor.cpp ****             return Motor::ERROR_NONE;
 1031              		.loc 2 45 39 is_stmt 0 view .LVU243
 1032 00ac 67EEA67A 		vmul.f32	s15, s15, s13
 1033              	.LVL68:
 1034              	.LBB1578:
 1035              	.LBI1578:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 1036              		.loc 3 700 2 is_stmt 1 view .LVU244
 1037              	.LBB1579:
 1038              	.LBB1580:
 1039              	.LBB1581:
 1040              	.LBI1581:
 1041              		.loc 5 76 5 view .LVU245
 1042              		.loc 5 76 5 is_stmt 0 view .LVU246
ARM GAS  /tmp/ccofeNgA.s 			page 75


 1043              	.LBE1581:
 1044              	.LBB1582:
 1045              	.LBI1582:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 1046              		.loc 3 607 28 is_stmt 1 view .LVU247
 1047              	.LBB1583:
 1048              	.LBB1584:
 1049              	.LBB1585:
 1050              	.LBI1585:
 1051              		.loc 5 76 5 view .LVU248
 1052              		.loc 5 76 5 is_stmt 0 view .LVU249
 1053              	.LBE1585:
 1054              	.LBB1586:
 1055              	.LBI1586:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1056              		.loc 3 300 42 is_stmt 1 view .LVU250
 1057              	.LBB1587:
 1058              	.LBB1588:
 1059              	.LBB1589:
 1060              	.LBI1589:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 1061              		.loc 3 115 2 view .LVU251
 1062              	.LBB1590:
 1063              	.LBB1591:
 1064              	.LBB1592:
 1065              	.LBI1592:
 1066              		.loc 5 76 5 view .LVU252
 1067              		.loc 5 76 5 is_stmt 0 view .LVU253
 1068              	.LBE1592:
 1069              	.LBB1593:
 1070              	.LBI1593:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 1071              		.loc 3 203 6 is_stmt 1 view .LVU254
 1072              	.LBB1594:
 1073              	.LBB1595:
 1074              	.LBB1596:
 1075              	.LBI1596:
 1076              		.loc 5 76 5 view .LVU255
 1077              		.loc 5 76 5 is_stmt 0 view .LVU256
 1078              	.LBE1596:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 1079              		.loc 3 204 47 view .LVU257
 1080 00b0 CDED027A 		vstr.32	s15, [sp, #8]
 1081              	.LVL69:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 1082              		.loc 3 204 47 view .LVU258
 1083              	.LBE1595:
 1084              	.LBE1594:
 1085              	.LBE1593:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 1086              		.loc 3 117 19 view .LVU259
 1087 00b4 0123     		movs	r3, #1
 1088 00b6 8DF80C30 		strb	r3, [sp, #12]
 1089              	.LVL70:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 1090              		.loc 3 117 19 view .LVU260
 1091              	.LBE1591:
ARM GAS  /tmp/ccofeNgA.s 			page 76


 1092              	.LBE1590:
 1093              	.LBE1589:
 1094              	.LBE1588:
 1095              	.LBE1587:
 1096              	.LBE1586:
 1097              	.LBE1584:
 1098              	.LBE1583:
 1099              	.LBE1582:
 1100              	.LBE1580:
 1101              	.LBE1579:
 1102              	.LBE1578:
  45:MotorControl/motor.cpp ****             return Motor::ERROR_NONE;
 1103              		.loc 2 45 23 view .LVU261
 1104 00ba 00F12003 		add	r3, r0, #32
 1105 00be 04AA     		add	r2, sp, #16
 1106 00c0 12E90300 		ldmdb	r2, {r0, r1}
 1107              	.LVL71:
  45:MotorControl/motor.cpp ****             return Motor::ERROR_NONE;
 1108              		.loc 2 45 23 view .LVU262
 1109 00c4 83E80300 		stm	r3, {r0, r1}
  46:MotorControl/motor.cpp ****         }
 1110              		.loc 2 46 13 is_stmt 1 view .LVU263
  46:MotorControl/motor.cpp ****         }
 1111              		.loc 2 46 27 is_stmt 0 view .LVU264
 1112 00c8 0020     		movs	r0, #0
 1113 00ca 0021     		movs	r1, #0
 1114 00cc D8E7     		b	.L39
 1115              	.L52:
 1116 00ce 00BF     		.align	2
 1117              	.L51:
 1118 00d0 6F120339 		.word	956502639
 1119 00d4 0000C07F 		.word	2143289344
 1120 00d8 ABAA2A3F 		.word	1059760811
 1121              	.LBE1577:
 1122              	.LBE1597:
 1123              	.LBE1599:
 1124              		.cfi_endproc
 1125              	.LFE5159:
 1126              		.cantunwind
 1127              		.fnend
 1129              		.section	.text._ZSt26__throw_bad_variant_accessPKc,"axG",%progbits,_ZSt26__throw_bad_variant_acces
 1130              		.align	1
 1131              		.weak	_ZSt26__throw_bad_variant_accessPKc
 1132              		.syntax unified
 1133              		.thumb
 1134              		.thumb_func
 1136              	_ZSt26__throw_bad_variant_accessPKc:
 1137              		.fnstart
 1138              	.LVL72:
 1139              	.LFB3070:
1271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   private:
1273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     bad_variant_access(const char* __reason) noexcept : _M_reason(__reason) { }
1274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     // Must point to a string with static storage duration:
1276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     const char* _M_reason = "bad variant access";
1277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
ARM GAS  /tmp/ccofeNgA.s 			page 77


1278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     friend void __throw_bad_variant_access(const char* __what);
1279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   };
1280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   // Must only be called with a string literal
1282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   inline void
1283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   __throw_bad_variant_access(const char* __what)
1284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 1140              		.loc 1 1284 3 is_stmt 1 view -0
 1141              		.cfi_startproc
 1142              		@ args = 0, pretend = 0, frame = 0
 1143              		@ frame_needed = 0, uses_anonymous_args = 0
 1144              		.loc 1 1284 3 is_stmt 0 view .LVU266
 1145 0000 10B5     		push	{r4, lr}
 1146              		.save {r4, lr}
 1147              	.LCFI19:
 1148              		.cfi_def_cfa_offset 8
 1149              		.cfi_offset 4, -8
 1150              		.cfi_offset 14, -4
 1151 0002 0446     		mov	r4, r0
 1152              		.loc 1 1284 5 is_stmt 1 view .LVU267
 1153 0004 0820     		movs	r0, #8
 1154              	.LVL73:
 1155              		.loc 1 1284 5 is_stmt 0 view .LVU268
 1156 0006 FFF7FEFF 		bl	__cxa_allocate_exception
 1157              	.LVL74:
 1158              	.LBB1600:
 1159              	.LBI1600:
1273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 1160              		.loc 1 1273 5 is_stmt 1 view .LVU269
 1161              	.LBB1601:
 1162              	.LBB1602:
 1163              	.LBI1602:
 1164              		.file 8 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // Exception Handling support header for -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // Copyright (C) 2016-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // This file is part of GCC.
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** //
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // GCC is free software; you can redistribute it and/or modify
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // it under the terms of the GNU General Public License as published by
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // the Free Software Foundation; either version 3, or (at your option)
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // any later version.
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** //
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // GCC is distributed in the hope that it will be useful,
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // GNU General Public License for more details.
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** //
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** // <http://www.gnu.org/licenses/>.
ARM GAS  /tmp/ccofeNgA.s 			page 78


  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** /** @file bits/exception.h
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****  *  This is an internal header file, included by other library headers.
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****  *  Do not attempt to use it directly.
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****  */
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** #ifndef __EXCEPTION_H
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** #define __EXCEPTION_H 1
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** #pragma GCC system_header
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** #pragma GCC visibility push(default)
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** #include <bits/c++config.h>
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** extern "C++" {
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** namespace std
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** {
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****   /**
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    * @defgroup exceptions Exceptions
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    * @ingroup diagnostics
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    * Classes and functions for reporting errors via exceptions.
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    * @{
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    */
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****   /**
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *  @brief Base class for all library exceptions.
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *  This is the base class for all exceptions thrown by the standard
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *  library, and by certain language expressions.  You are free to derive
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *  your own %exception classes, or use a different hierarchy, or to
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    *  throw non-class data (e.g., fundamental types).
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****    */
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****   class exception
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****   {
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****   public:
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception.h ****     exception() _GLIBCXX_NOTHROW { }
 1165              		.loc 8 63 5 view .LVU270
 1166              	.LBB1603:
 1167              		.loc 8 63 34 is_stmt 0 view .LVU271
 1168 000a 044A     		ldr	r2, .L55
 1169 000c 0260     		str	r2, [r0]
 1170              	.LVL75:
 1171              		.loc 8 63 34 view .LVU272
 1172              	.LBE1603:
 1173              	.LBE1602:
1273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 1174              		.loc 1 1273 75 view .LVU273
 1175 000e 044A     		ldr	r2, .L55+4
 1176 0010 0260     		str	r2, [r0]
 1177 0012 4460     		str	r4, [r0, #4]
 1178              	.LVL76:
1273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 1179              		.loc 1 1273 75 view .LVU274
 1180              	.LBE1601:
ARM GAS  /tmp/ccofeNgA.s 			page 79


 1181              	.LBE1600:
 1182              		.loc 1 1284 5 view .LVU275
 1183 0014 034A     		ldr	r2, .L55+8
 1184 0016 0449     		ldr	r1, .L55+12
 1185 0018 FFF7FEFF 		bl	__cxa_throw
 1186              	.LVL77:
 1187              	.L56:
 1188              		.align	2
 1189              	.L55:
 1190 001c 08000000 		.word	_ZTVSt9exception+8
 1191 0020 08000000 		.word	_ZTVSt18bad_variant_access+8
 1192 0024 00000000 		.word	_ZNSt18bad_variant_accessD1Ev
 1193 0028 00000000 		.word	_ZTISt18bad_variant_access
 1194              		.cfi_endproc
 1195              	.LFE3070:
 1196              		.fnend
 1198              		.section	.text._ZoRRN10ODriveIntf8AxisIntf5ErrorES1_,"axG",%progbits,_ZoRRN10ODriveIntf8AxisIntf5E
 1199              		.align	1
 1200              		.weak	_ZoRRN10ODriveIntf8AxisIntf5ErrorES1_
 1201              		.syntax unified
 1202              		.thumb
 1203              		.thumb_func
 1205              	_ZoRRN10ODriveIntf8AxisIntf5ErrorES1_:
 1206              		.fnstart
 1207              	.LVL78:
 1208              	.LFB4170:
 1209              		.file 9 "./autogen/interfaces.hpp"
   1:./autogen/interfaces.hpp **** /*
   2:./autogen/interfaces.hpp ****  * ============================ WARNING ============================
   3:./autogen/interfaces.hpp ****  * ==== This is an autogenerated file.                          ====
   4:./autogen/interfaces.hpp ****  * ==== Any changes to this file will be lost when recompiling. ====
   5:./autogen/interfaces.hpp ****  * =================================================================
   6:./autogen/interfaces.hpp ****  *
   7:./autogen/interfaces.hpp ****  * This file contains base classes that correspond to the interfaces defined in
   8:./autogen/interfaces.hpp ****  * your interface file. The objects you publish should inherit from these
   9:./autogen/interfaces.hpp ****  * interfaces.
  10:./autogen/interfaces.hpp ****  *
  11:./autogen/interfaces.hpp ****  */
  12:./autogen/interfaces.hpp **** #ifndef __FIBRE_INTERFACES_HPP
  13:./autogen/interfaces.hpp **** #define __FIBRE_INTERFACES_HPP
  14:./autogen/interfaces.hpp **** 
  15:./autogen/interfaces.hpp **** #include <tuple>
  16:./autogen/interfaces.hpp **** using float2D = std::pair<float, float>;
  17:./autogen/interfaces.hpp **** struct Iph_ABC_t { float phA; float phB; float phC; };
  18:./autogen/interfaces.hpp **** 
  19:./autogen/interfaces.hpp **** 
  20:./autogen/interfaces.hpp **** #include <fibre/../../protocol.hpp>
  21:./autogen/interfaces.hpp **** 
  22:./autogen/interfaces.hpp **** #pragma GCC push_options
  23:./autogen/interfaces.hpp **** #pragma GCC optimize ("s")
  24:./autogen/interfaces.hpp **** 
  25:./autogen/interfaces.hpp **** 
  26:./autogen/interfaces.hpp **** 
  27:./autogen/interfaces.hpp **** class ODriveIntf {
  28:./autogen/interfaces.hpp **** public:
  29:./autogen/interfaces.hpp ****     class ConfigIntf {
  30:./autogen/interfaces.hpp ****     public:
ARM GAS  /tmp/ccofeNgA.s 			page 80


  31:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_enable_uart_a(T* obj) { return Property<bool>{&
  32:./autogen/interfaces.hpp ****         template<typename T> static inline void get_enable_uart_a(T* obj, void* ptr) { new (ptr) Pr
  33:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_enable_uart_b(T* obj) { return Property<bool>{&
  34:./autogen/interfaces.hpp ****         template<typename T> static inline void get_enable_uart_b(T* obj, void* ptr) { new (ptr) Pr
  35:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_enable_uart_c(T* obj) { return Property<bool>{&
  36:./autogen/interfaces.hpp ****         template<typename T> static inline void get_enable_uart_c(T* obj, void* ptr) { new (ptr) Pr
  37:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_uart_a_baudrate(T* obj) { return Property<uint3
  38:./autogen/interfaces.hpp ****         template<typename T> static inline void get_uart_a_baudrate(T* obj, void* ptr) { new (ptr) 
  39:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_uart_b_baudrate(T* obj) { return Property<uint3
  40:./autogen/interfaces.hpp ****         template<typename T> static inline void get_uart_b_baudrate(T* obj, void* ptr) { new (ptr) 
  41:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_uart_c_baudrate(T* obj) { return Property<uint3
  42:./autogen/interfaces.hpp ****         template<typename T> static inline void get_uart_c_baudrate(T* obj, void* ptr) { new (ptr) 
  43:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_enable_can_a(T* obj) { return Property<bool>{&o
  44:./autogen/interfaces.hpp ****         template<typename T> static inline void get_enable_can_a(T* obj, void* ptr) { new (ptr) Pro
  45:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_enable_i2c_a(T* obj) { return Property<bool>{&o
  46:./autogen/interfaces.hpp ****         template<typename T> static inline void get_enable_i2c_a(T* obj, void* ptr) { new (ptr) Pro
  47:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_usb_cdc_protocol(T* obj) { return Property<ODri
  48:./autogen/interfaces.hpp ****         template<typename T> static inline void get_usb_cdc_protocol(T* obj, void* ptr) { new (ptr)
  49:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_uart0_protocol(T* obj) { return Property<ODrive
  50:./autogen/interfaces.hpp ****         template<typename T> static inline void get_uart0_protocol(T* obj, void* ptr) { new (ptr) P
  51:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_uart1_protocol(T* obj) { return Property<ODrive
  52:./autogen/interfaces.hpp ****         template<typename T> static inline void get_uart1_protocol(T* obj, void* ptr) { new (ptr) P
  53:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_uart2_protocol(T* obj) { return Property<ODrive
  54:./autogen/interfaces.hpp ****         template<typename T> static inline void get_uart2_protocol(T* obj, void* ptr) { new (ptr) P
  55:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max_regen_current(T* obj) { return Property<flo
  56:./autogen/interfaces.hpp ****         template<typename T> static inline void get_max_regen_current(T* obj, void* ptr) { new (ptr
  57:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_brake_resistance(T* obj) { return Property<floa
  58:./autogen/interfaces.hpp ****         template<typename T> static inline void get_brake_resistance(T* obj, void* ptr) { new (ptr)
  59:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_enable_brake_resistor(T* obj) { return Property
  60:./autogen/interfaces.hpp ****         template<typename T> static inline void get_enable_brake_resistor(T* obj, void* ptr) { new 
  61:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_dc_bus_undervoltage_trip_level(T* obj) { return
  62:./autogen/interfaces.hpp ****         template<typename T> static inline void get_dc_bus_undervoltage_trip_level(T* obj, void* pt
  63:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_dc_bus_overvoltage_trip_level(T* obj) { return 
  64:./autogen/interfaces.hpp ****         template<typename T> static inline void get_dc_bus_overvoltage_trip_level(T* obj, void* ptr
  65:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_enable_dc_bus_overvoltage_ramp(T* obj) { return
  66:./autogen/interfaces.hpp ****         template<typename T> static inline void get_enable_dc_bus_overvoltage_ramp(T* obj, void* pt
  67:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_dc_bus_overvoltage_ramp_start(T* obj) { return 
  68:./autogen/interfaces.hpp ****         template<typename T> static inline void get_dc_bus_overvoltage_ramp_start(T* obj, void* ptr
  69:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_dc_bus_overvoltage_ramp_end(T* obj) { return Pr
  70:./autogen/interfaces.hpp ****         template<typename T> static inline void get_dc_bus_overvoltage_ramp_end(T* obj, void* ptr) 
  71:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_dc_max_positive_current(T* obj) { return Proper
  72:./autogen/interfaces.hpp ****         template<typename T> static inline void get_dc_max_positive_current(T* obj, void* ptr) { ne
  73:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_dc_max_negative_current(T* obj) { return Proper
  74:./autogen/interfaces.hpp ****         template<typename T> static inline void get_dc_max_negative_current(T* obj, void* ptr) { ne
  75:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_error_gpio_pin(T* obj) { return Property<uint32
  76:./autogen/interfaces.hpp ****         template<typename T> static inline void get_error_gpio_pin(T* obj, void* ptr) { new (ptr) P
  77:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio3_analog_mapping(T* obj) { return &obj->ana
  78:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio4_analog_mapping(T* obj) { return &obj->ana
  79:./autogen/interfaces.hpp ****     };
  80:./autogen/interfaces.hpp ****     class CanIntf {
  81:./autogen/interfaces.hpp ****     public:
  82:./autogen/interfaces.hpp ****         class ConfigIntf {
  83:./autogen/interfaces.hpp ****         public:
  84:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_baud_rate(T* obj) { return Property<uint32_
  85:./autogen/interfaces.hpp ****             template<typename T> static inline void get_baud_rate(T* obj, void* ptr) { new (ptr) Pr
  86:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_protocol(T* obj) { return Property<ODriveIn
  87:./autogen/interfaces.hpp ****             template<typename T> static inline void get_protocol(T* obj, void* ptr) { new (ptr) Pro
ARM GAS  /tmp/ccofeNgA.s 			page 81


  88:./autogen/interfaces.hpp ****         };
  89:./autogen/interfaces.hpp ****         enum Error {
  90:./autogen/interfaces.hpp ****             ERROR_NONE                       = 0x00000000,
  91:./autogen/interfaces.hpp ****             ERROR_DUPLICATE_CAN_IDS          = 0x00000001,
  92:./autogen/interfaces.hpp ****         };
  93:./autogen/interfaces.hpp ****         enum Protocol {
  94:./autogen/interfaces.hpp ****             PROTOCOL_SIMPLE                  = 0x00000001,
  95:./autogen/interfaces.hpp ****         };
  96:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_error(T* obj) { return Property<ODriveIntf::Can
  97:./autogen/interfaces.hpp ****         template<typename T> static inline void get_error(T* obj, void* ptr) { new (ptr) Property<O
  98:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
  99:./autogen/interfaces.hpp ****     };
 100:./autogen/interfaces.hpp ****     class EndpointIntf {
 101:./autogen/interfaces.hpp ****     public:
 102:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_endpoint(T* obj) { return Property<endpoint_ref
 103:./autogen/interfaces.hpp ****         template<typename T> static inline void get_endpoint(T* obj, void* ptr) { new (ptr) Propert
 104:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_min(T* obj) { return Property<float>{&obj->min}
 105:./autogen/interfaces.hpp ****         template<typename T> static inline void get_min(T* obj, void* ptr) { new (ptr) Property<flo
 106:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max(T* obj) { return Property<float>{&obj->max}
 107:./autogen/interfaces.hpp ****         template<typename T> static inline void get_max(T* obj, void* ptr) { new (ptr) Property<flo
 108:./autogen/interfaces.hpp ****     };
 109:./autogen/interfaces.hpp ****     class AxisIntf {
 110:./autogen/interfaces.hpp ****     public:
 111:./autogen/interfaces.hpp ****         class LockinConfigIntf {
 112:./autogen/interfaces.hpp ****         public:
 113:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_current(T* obj) { return Property<float>{&o
 114:./autogen/interfaces.hpp ****             template<typename T> static inline void get_current(T* obj, void* ptr) { new (ptr) Prop
 115:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_ramp_time(T* obj) { return Property<float>{
 116:./autogen/interfaces.hpp ****             template<typename T> static inline void get_ramp_time(T* obj, void* ptr) { new (ptr) Pr
 117:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_ramp_distance(T* obj) { return Property<flo
 118:./autogen/interfaces.hpp ****             template<typename T> static inline void get_ramp_distance(T* obj, void* ptr) { new (ptr
 119:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_accel(T* obj) { return Property<float>{&obj
 120:./autogen/interfaces.hpp ****             template<typename T> static inline void get_accel(T* obj, void* ptr) { new (ptr) Proper
 121:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_vel(T* obj) { return Property<float>{&obj->
 122:./autogen/interfaces.hpp ****             template<typename T> static inline void get_vel(T* obj, void* ptr) { new (ptr) Property
 123:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_finish_distance(T* obj) { return Property<f
 124:./autogen/interfaces.hpp ****             template<typename T> static inline void get_finish_distance(T* obj, void* ptr) { new (p
 125:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_finish_on_vel(T* obj) { return Property<boo
 126:./autogen/interfaces.hpp ****             template<typename T> static inline void get_finish_on_vel(T* obj, void* ptr) { new (ptr
 127:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_finish_on_distance(T* obj) { return Propert
 128:./autogen/interfaces.hpp ****             template<typename T> static inline void get_finish_on_distance(T* obj, void* ptr) { new
 129:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_finish_on_enc_idx(T* obj) { return Property
 130:./autogen/interfaces.hpp ****             template<typename T> static inline void get_finish_on_enc_idx(T* obj, void* ptr) { new 
 131:./autogen/interfaces.hpp ****         };
 132:./autogen/interfaces.hpp ****         class CanConfigIntf {
 133:./autogen/interfaces.hpp ****         public:
 134:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_node_id(T* obj) { return Property<uint32_t>
 135:./autogen/interfaces.hpp ****             template<typename T> static inline void get_node_id(T* obj, void* ptr) { new (ptr) Prop
 136:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_is_extended(T* obj) { return Property<bool>
 137:./autogen/interfaces.hpp ****             template<typename T> static inline void get_is_extended(T* obj, void* ptr) { new (ptr) 
 138:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_heartbeat_rate_ms(T* obj) { return Property
 139:./autogen/interfaces.hpp ****             template<typename T> static inline void get_heartbeat_rate_ms(T* obj, void* ptr) { new 
 140:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_encoder_rate_ms(T* obj) { return Property<u
 141:./autogen/interfaces.hpp ****             template<typename T> static inline void get_encoder_rate_ms(T* obj, void* ptr) { new (p
 142:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_motor_error_rate_ms(T* obj) { return Proper
 143:./autogen/interfaces.hpp ****             template<typename T> static inline void get_motor_error_rate_ms(T* obj, void* ptr) { ne
 144:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_encoder_error_rate_ms(T* obj) { return Prop
ARM GAS  /tmp/ccofeNgA.s 			page 82


 145:./autogen/interfaces.hpp ****             template<typename T> static inline void get_encoder_error_rate_ms(T* obj, void* ptr) { 
 146:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_controller_error_rate_ms(T* obj) { return P
 147:./autogen/interfaces.hpp ****             template<typename T> static inline void get_controller_error_rate_ms(T* obj, void* ptr)
 148:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_sensorless_error_rate_ms(T* obj) { return P
 149:./autogen/interfaces.hpp ****             template<typename T> static inline void get_sensorless_error_rate_ms(T* obj, void* ptr)
 150:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_encoder_count_rate_ms(T* obj) { return Prop
 151:./autogen/interfaces.hpp ****             template<typename T> static inline void get_encoder_count_rate_ms(T* obj, void* ptr) { 
 152:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_iq_rate_ms(T* obj) { return Property<uint32
 153:./autogen/interfaces.hpp ****             template<typename T> static inline void get_iq_rate_ms(T* obj, void* ptr) { new (ptr) P
 154:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_sensorless_rate_ms(T* obj) { return Propert
 155:./autogen/interfaces.hpp ****             template<typename T> static inline void get_sensorless_rate_ms(T* obj, void* ptr) { new
 156:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_bus_vi_rate_ms(T* obj) { return Property<ui
 157:./autogen/interfaces.hpp ****             template<typename T> static inline void get_bus_vi_rate_ms(T* obj, void* ptr) { new (pt
 158:./autogen/interfaces.hpp ****         };
 159:./autogen/interfaces.hpp ****         class ConfigIntf {
 160:./autogen/interfaces.hpp ****         public:
 161:./autogen/interfaces.hpp ****             class CalibrationLockinIntf {
 162:./autogen/interfaces.hpp ****             public:
 163:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_current(T* obj) { return Property<float
 164:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_current(T* obj, void* ptr) { new (ptr) 
 165:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_ramp_time(T* obj) { return Property<flo
 166:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_ramp_time(T* obj, void* ptr) { new (ptr
 167:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_ramp_distance(T* obj) { return Property
 168:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_ramp_distance(T* obj, void* ptr) { new 
 169:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_accel(T* obj) { return Property<float>{
 170:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_accel(T* obj, void* ptr) { new (ptr) Pr
 171:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_vel(T* obj) { return Property<float>{&o
 172:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_vel(T* obj, void* ptr) { new (ptr) Prop
 173:./autogen/interfaces.hpp ****             };
 174:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_startup_motor_calibration(T* obj) { return 
 175:./autogen/interfaces.hpp ****             template<typename T> static inline void get_startup_motor_calibration(T* obj, void* ptr
 176:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_startup_encoder_index_search(T* obj) { retu
 177:./autogen/interfaces.hpp ****             template<typename T> static inline void get_startup_encoder_index_search(T* obj, void* 
 178:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_startup_encoder_offset_calibration(T* obj) 
 179:./autogen/interfaces.hpp ****             template<typename T> static inline void get_startup_encoder_offset_calibration(T* obj, 
 180:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_startup_closed_loop_control(T* obj) { retur
 181:./autogen/interfaces.hpp ****             template<typename T> static inline void get_startup_closed_loop_control(T* obj, void* p
 182:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_startup_homing(T* obj) { return Property<bo
 183:./autogen/interfaces.hpp ****             template<typename T> static inline void get_startup_homing(T* obj, void* ptr) { new (pt
 184:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_enable_step_dir(T* obj) { return Property<b
 185:./autogen/interfaces.hpp ****             template<typename T> static inline void get_enable_step_dir(T* obj, void* ptr) { new (p
 186:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_step_dir_always_on(T* obj) { return Propert
 187:./autogen/interfaces.hpp ****             template<typename T> static inline void get_step_dir_always_on(T* obj, void* ptr) { new
 188:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_enable_sensorless_mode(T* obj) { return Pro
 189:./autogen/interfaces.hpp ****             template<typename T> static inline void get_enable_sensorless_mode(T* obj, void* ptr) {
 190:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_watchdog_timeout(T* obj) { return Property<
 191:./autogen/interfaces.hpp ****             template<typename T> static inline void get_watchdog_timeout(T* obj, void* ptr) { new (
 192:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_enable_watchdog(T* obj) { return Property<b
 193:./autogen/interfaces.hpp ****             template<typename T> static inline void get_enable_watchdog(T* obj, void* ptr) { new (p
 194:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_step_gpio_pin(T* obj) { return Property<uin
 195:./autogen/interfaces.hpp ****             template<typename T> static inline void get_step_gpio_pin(T* obj, void* ptr) { new (ptr
 196:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_dir_gpio_pin(T* obj) { return Property<uint
 197:./autogen/interfaces.hpp ****             template<typename T> static inline void get_dir_gpio_pin(T* obj, void* ptr) { new (ptr)
 198:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_calibration_lockin(T* obj) { return &obj->c
 199:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_sensorless_ramp(T* obj) { return &obj->sens
 200:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_general_lockin(T* obj) { return &obj->gener
 201:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_can(T* obj) { return &obj->can; }
ARM GAS  /tmp/ccofeNgA.s 			page 83


 202:./autogen/interfaces.hpp ****         };
 203:./autogen/interfaces.hpp ****         class TaskTimesIntf {
 204:./autogen/interfaces.hpp ****         public:
 205:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_thermistor_update(T* obj) { return &obj->th
 206:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_encoder_update(T* obj) { return &obj->encod
 207:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_sensorless_estimator_update(T* obj) { retur
 208:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_endstop_update(T* obj) { return &obj->endst
 209:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_can_heartbeat(T* obj) { return &obj->can_he
 210:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_controller_update(T* obj) { return &obj->co
 211:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_open_loop_controller_update(T* obj) { retur
 212:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_acim_estimator_update(T* obj) { return &obj
 213:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_motor_update(T* obj) { return &obj->motor_u
 214:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_current_controller_update(T* obj) { return 
 215:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_dc_calib(T* obj) { return &obj->dc_calib; }
 216:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_current_sense(T* obj) { return &obj->curren
 217:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_pwm_update(T* obj) { return &obj->pwm_updat
 218:./autogen/interfaces.hpp ****         };
 219:./autogen/interfaces.hpp ****         enum Error {
 220:./autogen/interfaces.hpp ****             ERROR_NONE                       = 0x00000000,
 221:./autogen/interfaces.hpp ****             ERROR_INVALID_STATE              = 0x00000001,
 222:./autogen/interfaces.hpp ****             ERROR_MOTOR_FAILED               = 0x00000040,
 223:./autogen/interfaces.hpp ****             ERROR_SENSORLESS_ESTIMATOR_FAILED = 0x00000080,
 224:./autogen/interfaces.hpp ****             ERROR_ENCODER_FAILED             = 0x00000100,
 225:./autogen/interfaces.hpp ****             ERROR_CONTROLLER_FAILED          = 0x00000200,
 226:./autogen/interfaces.hpp ****             ERROR_WATCHDOG_TIMER_EXPIRED     = 0x00000800,
 227:./autogen/interfaces.hpp ****             ERROR_MIN_ENDSTOP_PRESSED        = 0x00001000,
 228:./autogen/interfaces.hpp ****             ERROR_MAX_ENDSTOP_PRESSED        = 0x00002000,
 229:./autogen/interfaces.hpp ****             ERROR_ESTOP_REQUESTED            = 0x00004000,
 230:./autogen/interfaces.hpp ****             ERROR_HOMING_WITHOUT_ENDSTOP     = 0x00020000,
 231:./autogen/interfaces.hpp ****             ERROR_OVER_TEMP                  = 0x00040000,
 232:./autogen/interfaces.hpp ****             ERROR_UNKNOWN_POSITION           = 0x00080000,
 233:./autogen/interfaces.hpp ****         };
 234:./autogen/interfaces.hpp ****         enum AxisState {
 235:./autogen/interfaces.hpp ****             AXIS_STATE_UNDEFINED             = 0,
 236:./autogen/interfaces.hpp ****             AXIS_STATE_IDLE                  = 1,
 237:./autogen/interfaces.hpp ****             AXIS_STATE_STARTUP_SEQUENCE      = 2,
 238:./autogen/interfaces.hpp ****             AXIS_STATE_FULL_CALIBRATION_SEQUENCE = 3,
 239:./autogen/interfaces.hpp ****             AXIS_STATE_MOTOR_CALIBRATION     = 4,
 240:./autogen/interfaces.hpp ****             AXIS_STATE_ENCODER_INDEX_SEARCH  = 6,
 241:./autogen/interfaces.hpp ****             AXIS_STATE_ENCODER_OFFSET_CALIBRATION = 7,
 242:./autogen/interfaces.hpp ****             AXIS_STATE_CLOSED_LOOP_CONTROL   = 8,
 243:./autogen/interfaces.hpp ****             AXIS_STATE_LOCKIN_SPIN           = 9,
 244:./autogen/interfaces.hpp ****             AXIS_STATE_ENCODER_DIR_FIND      = 10,
 245:./autogen/interfaces.hpp ****             AXIS_STATE_HOMING                = 11,
 246:./autogen/interfaces.hpp ****             AXIS_STATE_ENCODER_HALL_POLARITY_CALIBRATION = 12,
 247:./autogen/interfaces.hpp ****             AXIS_STATE_ENCODER_HALL_PHASE_CALIBRATION = 13,
 248:./autogen/interfaces.hpp ****         };
 249:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_error(T* obj) { return Property<ODriveIntf::Axi
 250:./autogen/interfaces.hpp ****         template<typename T> static inline void get_error(T* obj, void* ptr) { new (ptr) Property<O
 251:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_step_dir_active(T* obj) { return Property<const
 252:./autogen/interfaces.hpp ****         template<typename T> static inline void get_step_dir_active(T* obj, void* ptr) { new (ptr) 
 253:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_last_drv_fault(T* obj) { return Property<const 
 254:./autogen/interfaces.hpp ****         template<typename T> static inline void get_last_drv_fault(T* obj, void* ptr) { new (ptr) P
 255:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_steps(T* obj) { return Property<const int64_t>{
 256:./autogen/interfaces.hpp ****         template<typename T> static inline void get_steps(T* obj, void* ptr) { new (ptr) Property<c
 257:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_current_state(T* obj) { return Property<const O
 258:./autogen/interfaces.hpp ****         template<typename T> static inline void get_current_state(T* obj, void* ptr) { new (ptr) Pr
ARM GAS  /tmp/ccofeNgA.s 			page 84


 259:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_requested_state(T* obj) { return Property<ODriv
 260:./autogen/interfaces.hpp ****         template<typename T> static inline void get_requested_state(T* obj, void* ptr) { new (ptr) 
 261:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_is_homed(T* obj) { return Property<bool>{&obj->
 262:./autogen/interfaces.hpp ****         template<typename T> static inline void get_is_homed(T* obj, void* ptr) { new (ptr) Propert
 263:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
 264:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_motor(T* obj) { return &obj->motor_; }
 265:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_controller(T* obj) { return &obj->controller_; 
 266:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_encoder(T* obj) { return &obj->encoder_; }
 267:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_acim_estimator(T* obj) { return &obj->acim_esti
 268:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_sensorless_estimator(T* obj) { return &obj->sen
 269:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_trap_traj(T* obj) { return &obj->trap_traj_; }
 270:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_min_endstop(T* obj) { return &obj->min_endstop_
 271:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max_endstop(T* obj) { return &obj->max_endstop_
 272:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_mechanical_brake(T* obj) { return &obj->mechani
 273:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_task_times(T* obj) { return &obj->task_times_; 
 274:./autogen/interfaces.hpp ****         virtual void watchdog_feed() = 0;
 275:./autogen/interfaces.hpp ****     };
 276:./autogen/interfaces.hpp ****     class ThermistorCurrentLimiterIntf {
 277:./autogen/interfaces.hpp ****     public:
 278:./autogen/interfaces.hpp ****     };
 279:./autogen/interfaces.hpp ****     class OnboardThermistorCurrentLimiterIntf {
 280:./autogen/interfaces.hpp ****     public:
 281:./autogen/interfaces.hpp ****         class ConfigIntf {
 282:./autogen/interfaces.hpp ****         public:
 283:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_temp_limit_lower(T* obj) { return Property<
 284:./autogen/interfaces.hpp ****             template<typename T> static inline void get_temp_limit_lower(T* obj, void* ptr) { new (
 285:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_temp_limit_upper(T* obj) { return Property<
 286:./autogen/interfaces.hpp ****             template<typename T> static inline void get_temp_limit_upper(T* obj, void* ptr) { new (
 287:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_enabled(T* obj) { return Property<bool>{&ob
 288:./autogen/interfaces.hpp ****             template<typename T> static inline void get_enabled(T* obj, void* ptr) { new (ptr) Prop
 289:./autogen/interfaces.hpp ****         };
 290:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_temperature(T* obj) { return Property<const flo
 291:./autogen/interfaces.hpp ****         template<typename T> static inline void get_temperature(T* obj, void* ptr) { new (ptr) Prop
 292:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
 293:./autogen/interfaces.hpp ****     };
 294:./autogen/interfaces.hpp ****     class OffboardThermistorCurrentLimiterIntf {
 295:./autogen/interfaces.hpp ****     public:
 296:./autogen/interfaces.hpp ****         class ConfigIntf {
 297:./autogen/interfaces.hpp ****         public:
 298:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_gpio_pin(T* obj) { return Property<uint16_t
 299:./autogen/interfaces.hpp ****             template<typename T> static inline void get_gpio_pin(T* obj, void* ptr) { new (ptr) Pro
 300:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_poly_coefficient_0(T* obj) { return Propert
 301:./autogen/interfaces.hpp ****             template<typename T> static inline void get_poly_coefficient_0(T* obj, void* ptr) { new
 302:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_poly_coefficient_1(T* obj) { return Propert
 303:./autogen/interfaces.hpp ****             template<typename T> static inline void get_poly_coefficient_1(T* obj, void* ptr) { new
 304:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_poly_coefficient_2(T* obj) { return Propert
 305:./autogen/interfaces.hpp ****             template<typename T> static inline void get_poly_coefficient_2(T* obj, void* ptr) { new
 306:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_poly_coefficient_3(T* obj) { return Propert
 307:./autogen/interfaces.hpp ****             template<typename T> static inline void get_poly_coefficient_3(T* obj, void* ptr) { new
 308:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_temp_limit_lower(T* obj) { return Property<
 309:./autogen/interfaces.hpp ****             template<typename T> static inline void get_temp_limit_lower(T* obj, void* ptr) { new (
 310:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_temp_limit_upper(T* obj) { return Property<
 311:./autogen/interfaces.hpp ****             template<typename T> static inline void get_temp_limit_upper(T* obj, void* ptr) { new (
 312:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_enabled(T* obj) { return Property<bool>{&ob
 313:./autogen/interfaces.hpp ****             template<typename T> static inline void get_enabled(T* obj, void* ptr) { new (ptr) Prop
 314:./autogen/interfaces.hpp ****         };
 315:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_temperature(T* obj) { return Property<const flo
ARM GAS  /tmp/ccofeNgA.s 			page 85


 316:./autogen/interfaces.hpp ****         template<typename T> static inline void get_temperature(T* obj, void* ptr) { new (ptr) Prop
 317:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
 318:./autogen/interfaces.hpp ****     };
 319:./autogen/interfaces.hpp ****     class MotorIntf {
 320:./autogen/interfaces.hpp ****     public:
 321:./autogen/interfaces.hpp ****         class CurrentControlIntf {
 322:./autogen/interfaces.hpp ****         public:
 323:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_p_gain(T* obj) { return Property<const floa
 324:./autogen/interfaces.hpp ****             template<typename T> static inline void get_p_gain(T* obj, void* ptr) { new (ptr) Prope
 325:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_i_gain(T* obj) { return Property<const floa
 326:./autogen/interfaces.hpp ****             template<typename T> static inline void get_i_gain(T* obj, void* ptr) { new (ptr) Prope
 327:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_I_measured_report_filter_k(T* obj) { return
 328:./autogen/interfaces.hpp ****             template<typename T> static inline void get_I_measured_report_filter_k(T* obj, void* pt
 329:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_Id_setpoint(T* obj) { return Property<const
 330:./autogen/interfaces.hpp ****             template<typename T> static inline void get_Id_setpoint(T* obj, void* ptr) { new (ptr) 
 331:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_Iq_setpoint(T* obj) { return Property<const
 332:./autogen/interfaces.hpp ****             template<typename T> static inline void get_Iq_setpoint(T* obj, void* ptr) { new (ptr) 
 333:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_Vd_setpoint(T* obj) { return Property<const
 334:./autogen/interfaces.hpp ****             template<typename T> static inline void get_Vd_setpoint(T* obj, void* ptr) { new (ptr) 
 335:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_Vq_setpoint(T* obj) { return Property<const
 336:./autogen/interfaces.hpp ****             template<typename T> static inline void get_Vq_setpoint(T* obj, void* ptr) { new (ptr) 
 337:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_phase(T* obj) { return Property<const float
 338:./autogen/interfaces.hpp ****             template<typename T> static inline void get_phase(T* obj, void* ptr) { new (ptr) Proper
 339:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_phase_vel(T* obj) { return Property<const f
 340:./autogen/interfaces.hpp ****             template<typename T> static inline void get_phase_vel(T* obj, void* ptr) { new (ptr) Pr
 341:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_Ialpha_measured(T* obj) { return Property<c
 342:./autogen/interfaces.hpp ****             template<typename T> static inline void get_Ialpha_measured(T* obj, void* ptr) { new (p
 343:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_Ibeta_measured(T* obj) { return Property<co
 344:./autogen/interfaces.hpp ****             template<typename T> static inline void get_Ibeta_measured(T* obj, void* ptr) { new (pt
 345:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_Id_measured(T* obj) { return Property<const
 346:./autogen/interfaces.hpp ****             template<typename T> static inline void get_Id_measured(T* obj, void* ptr) { new (ptr) 
 347:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_Iq_measured(T* obj) { return Property<const
 348:./autogen/interfaces.hpp ****             template<typename T> static inline void get_Iq_measured(T* obj, void* ptr) { new (ptr) 
 349:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_power(T* obj) { return Property<const float
 350:./autogen/interfaces.hpp ****             template<typename T> static inline void get_power(T* obj, void* ptr) { new (ptr) Proper
 351:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_v_current_control_integral_d(T* obj) { retu
 352:./autogen/interfaces.hpp ****             template<typename T> static inline void get_v_current_control_integral_d(T* obj, void* 
 353:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_v_current_control_integral_q(T* obj) { retu
 354:./autogen/interfaces.hpp ****             template<typename T> static inline void get_v_current_control_integral_q(T* obj, void* 
 355:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_final_v_alpha(T* obj) { return Property<con
 356:./autogen/interfaces.hpp ****             template<typename T> static inline void get_final_v_alpha(T* obj, void* ptr) { new (ptr
 357:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_final_v_beta(T* obj) { return Property<cons
 358:./autogen/interfaces.hpp ****             template<typename T> static inline void get_final_v_beta(T* obj, void* ptr) { new (ptr)
 359:./autogen/interfaces.hpp ****         };
 360:./autogen/interfaces.hpp ****         class ConfigIntf {
 361:./autogen/interfaces.hpp ****         public:
 362:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_pre_calibrated(T* obj) { return Property<bo
 363:./autogen/interfaces.hpp ****             template<typename T> static inline void get_pre_calibrated(T* obj, void* ptr) { new (pt
 364:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_pole_pairs(T* obj) { return Property<int32_
 365:./autogen/interfaces.hpp ****             template<typename T> static inline void get_pole_pairs(T* obj, void* ptr) { new (ptr) P
 366:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_calibration_current(T* obj) { return Proper
 367:./autogen/interfaces.hpp ****             template<typename T> static inline void get_calibration_current(T* obj, void* ptr) { ne
 368:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_resistance_calib_max_voltage(T* obj) { retu
 369:./autogen/interfaces.hpp ****             template<typename T> static inline void get_resistance_calib_max_voltage(T* obj, void* 
 370:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_phase_inductance(T* obj) { return Property<
 371:./autogen/interfaces.hpp ****             template<typename T> static inline void get_phase_inductance(T* obj, void* ptr) { new (
 372:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_phase_resistance(T* obj) { return Property<
ARM GAS  /tmp/ccofeNgA.s 			page 86


 373:./autogen/interfaces.hpp ****             template<typename T> static inline void get_phase_resistance(T* obj, void* ptr) { new (
 374:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_torque_constant(T* obj) { return Property<f
 375:./autogen/interfaces.hpp ****             template<typename T> static inline void get_torque_constant(T* obj, void* ptr) { new (p
 376:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_motor_type(T* obj) { return Property<ODrive
 377:./autogen/interfaces.hpp ****             template<typename T> static inline void get_motor_type(T* obj, void* ptr) { new (ptr) P
 378:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_current_lim(T* obj) { return Property<float
 379:./autogen/interfaces.hpp ****             template<typename T> static inline void get_current_lim(T* obj, void* ptr) { new (ptr) 
 380:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_current_lim_margin(T* obj) { return Propert
 381:./autogen/interfaces.hpp ****             template<typename T> static inline void get_current_lim_margin(T* obj, void* ptr) { new
 382:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_torque_lim(T* obj) { return Property<float>
 383:./autogen/interfaces.hpp ****             template<typename T> static inline void get_torque_lim(T* obj, void* ptr) { new (ptr) P
 384:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_inverter_temp_limit_lower(T* obj) { return 
 385:./autogen/interfaces.hpp ****             template<typename T> static inline void get_inverter_temp_limit_lower(T* obj, void* ptr
 386:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_inverter_temp_limit_upper(T* obj) { return 
 387:./autogen/interfaces.hpp ****             template<typename T> static inline void get_inverter_temp_limit_upper(T* obj, void* ptr
 388:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_requested_current_range(T* obj) { return Pr
 389:./autogen/interfaces.hpp ****             template<typename T> static inline void get_requested_current_range(T* obj, void* ptr) 
 390:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_current_control_bandwidth(T* obj) { return 
 391:./autogen/interfaces.hpp ****             template<typename T> static inline void get_current_control_bandwidth(T* obj, void* ptr
 392:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_acim_gain_min_flux(T* obj) { return Propert
 393:./autogen/interfaces.hpp ****             template<typename T> static inline void get_acim_gain_min_flux(T* obj, void* ptr) { new
 394:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_acim_autoflux_min_Id(T* obj) { return Prope
 395:./autogen/interfaces.hpp ****             template<typename T> static inline void get_acim_autoflux_min_Id(T* obj, void* ptr) { n
 396:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_acim_autoflux_enable(T* obj) { return Prope
 397:./autogen/interfaces.hpp ****             template<typename T> static inline void get_acim_autoflux_enable(T* obj, void* ptr) { n
 398:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_acim_autoflux_attack_gain(T* obj) { return 
 399:./autogen/interfaces.hpp ****             template<typename T> static inline void get_acim_autoflux_attack_gain(T* obj, void* ptr
 400:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_acim_autoflux_decay_gain(T* obj) { return P
 401:./autogen/interfaces.hpp ****             template<typename T> static inline void get_acim_autoflux_decay_gain(T* obj, void* ptr)
 402:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_R_wL_FF_enable(T* obj) { return Property<bo
 403:./autogen/interfaces.hpp ****             template<typename T> static inline void get_R_wL_FF_enable(T* obj, void* ptr) { new (pt
 404:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_bEMF_FF_enable(T* obj) { return Property<bo
 405:./autogen/interfaces.hpp ****             template<typename T> static inline void get_bEMF_FF_enable(T* obj, void* ptr) { new (pt
 406:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_I_bus_hard_min(T* obj) { return Property<fl
 407:./autogen/interfaces.hpp ****             template<typename T> static inline void get_I_bus_hard_min(T* obj, void* ptr) { new (pt
 408:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_I_bus_hard_max(T* obj) { return Property<fl
 409:./autogen/interfaces.hpp ****             template<typename T> static inline void get_I_bus_hard_max(T* obj, void* ptr) { new (pt
 410:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_I_leak_max(T* obj) { return Property<float>
 411:./autogen/interfaces.hpp ****             template<typename T> static inline void get_I_leak_max(T* obj, void* ptr) { new (ptr) P
 412:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_dc_calib_tau(T* obj) { return Property<floa
 413:./autogen/interfaces.hpp ****             template<typename T> static inline void get_dc_calib_tau(T* obj, void* ptr) { new (ptr)
 414:./autogen/interfaces.hpp ****         };
 415:./autogen/interfaces.hpp ****         enum Error {
 416:./autogen/interfaces.hpp ****             ERROR_NONE                       = 0x00000000,
 417:./autogen/interfaces.hpp ****             ERROR_PHASE_RESISTANCE_OUT_OF_RANGE = 0x00000001,
 418:./autogen/interfaces.hpp ****             ERROR_PHASE_INDUCTANCE_OUT_OF_RANGE = 0x00000002,
 419:./autogen/interfaces.hpp ****             ERROR_DRV_FAULT                  = 0x00000008,
 420:./autogen/interfaces.hpp ****             ERROR_CONTROL_DEADLINE_MISSED    = 0x00000010,
 421:./autogen/interfaces.hpp ****             ERROR_MODULATION_MAGNITUDE       = 0x00000080,
 422:./autogen/interfaces.hpp ****             ERROR_CURRENT_SENSE_SATURATION   = 0x00000400,
 423:./autogen/interfaces.hpp ****             ERROR_CURRENT_LIMIT_VIOLATION    = 0x00001000,
 424:./autogen/interfaces.hpp ****             ERROR_MODULATION_IS_NAN          = 0x00010000,
 425:./autogen/interfaces.hpp ****             ERROR_MOTOR_THERMISTOR_OVER_TEMP = 0x00020000,
 426:./autogen/interfaces.hpp ****             ERROR_FET_THERMISTOR_OVER_TEMP   = 0x00040000,
 427:./autogen/interfaces.hpp ****             ERROR_TIMER_UPDATE_MISSED        = 0x00080000,
 428:./autogen/interfaces.hpp ****             ERROR_CURRENT_MEASUREMENT_UNAVAILABLE = 0x00100000,
 429:./autogen/interfaces.hpp ****             ERROR_CONTROLLER_FAILED          = 0x00200000,
ARM GAS  /tmp/ccofeNgA.s 			page 87


 430:./autogen/interfaces.hpp ****             ERROR_I_BUS_OUT_OF_RANGE         = 0x00400000,
 431:./autogen/interfaces.hpp ****             ERROR_BRAKE_RESISTOR_DISARMED    = 0x00800000,
 432:./autogen/interfaces.hpp ****             ERROR_SYSTEM_LEVEL               = 0x01000000,
 433:./autogen/interfaces.hpp ****             ERROR_BAD_TIMING                 = 0x02000000,
 434:./autogen/interfaces.hpp ****             ERROR_UNKNOWN_PHASE_ESTIMATE     = 0x04000000,
 435:./autogen/interfaces.hpp ****             ERROR_UNKNOWN_PHASE_VEL          = 0x08000000,
 436:./autogen/interfaces.hpp ****             ERROR_UNKNOWN_TORQUE             = 0x10000000,
 437:./autogen/interfaces.hpp ****             ERROR_UNKNOWN_CURRENT_COMMAND    = 0x20000000,
 438:./autogen/interfaces.hpp ****             ERROR_UNKNOWN_CURRENT_MEASUREMENT = 0x40000000,
 439:./autogen/interfaces.hpp ****             ERROR_UNKNOWN_VBUS_VOLTAGE       = 0x80000000,
 440:./autogen/interfaces.hpp ****             ERROR_UNKNOWN_VOLTAGE_COMMAND    = 0x100000000,
 441:./autogen/interfaces.hpp ****             ERROR_UNKNOWN_GAINS              = 0x200000000,
 442:./autogen/interfaces.hpp ****             ERROR_CONTROLLER_INITIALIZING    = 0x400000000,
 443:./autogen/interfaces.hpp ****             ERROR_UNBALANCED_PHASES          = 0x800000000,
 444:./autogen/interfaces.hpp ****         };
 445:./autogen/interfaces.hpp ****         enum MotorType {
 446:./autogen/interfaces.hpp ****             MOTOR_TYPE_HIGH_CURRENT          = 0,
 447:./autogen/interfaces.hpp ****             MOTOR_TYPE_GIMBAL                = 2,
 448:./autogen/interfaces.hpp ****             MOTOR_TYPE_ACIM                  = 3,
 449:./autogen/interfaces.hpp ****         };
 450:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_last_error_time(T* obj) { return Property<float
 451:./autogen/interfaces.hpp ****         template<typename T> static inline void get_last_error_time(T* obj, void* ptr) { new (ptr) 
 452:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_error(T* obj) { return Property<ODriveIntf::Mot
 453:./autogen/interfaces.hpp ****         template<typename T> static inline void get_error(T* obj, void* ptr) { new (ptr) Property<O
 454:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_is_armed(T* obj) { return Property<const bool>{
 455:./autogen/interfaces.hpp ****         template<typename T> static inline void get_is_armed(T* obj, void* ptr) { new (ptr) Propert
 456:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_is_calibrated(T* obj) { return Property<const b
 457:./autogen/interfaces.hpp ****         template<typename T> static inline void get_is_calibrated(T* obj, void* ptr) { new (ptr) Pr
 458:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_current_meas_phA(T* obj) { return Property<cons
 459:./autogen/interfaces.hpp ****         template<typename T> static inline void get_current_meas_phA(T* obj, void* ptr) { new (ptr)
 460:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_current_meas_phB(T* obj) { return Property<cons
 461:./autogen/interfaces.hpp ****         template<typename T> static inline void get_current_meas_phB(T* obj, void* ptr) { new (ptr)
 462:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_current_meas_phC(T* obj) { return Property<cons
 463:./autogen/interfaces.hpp ****         template<typename T> static inline void get_current_meas_phC(T* obj, void* ptr) { new (ptr)
 464:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_DC_calib_phA(T* obj) { return Property<float>{&
 465:./autogen/interfaces.hpp ****         template<typename T> static inline void get_DC_calib_phA(T* obj, void* ptr) { new (ptr) Pro
 466:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_DC_calib_phB(T* obj) { return Property<float>{&
 467:./autogen/interfaces.hpp ****         template<typename T> static inline void get_DC_calib_phB(T* obj, void* ptr) { new (ptr) Pro
 468:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_DC_calib_phC(T* obj) { return Property<float>{&
 469:./autogen/interfaces.hpp ****         template<typename T> static inline void get_DC_calib_phC(T* obj, void* ptr) { new (ptr) Pro
 470:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_I_bus(T* obj) { return Property<const float>{&o
 471:./autogen/interfaces.hpp ****         template<typename T> static inline void get_I_bus(T* obj, void* ptr) { new (ptr) Property<c
 472:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_phase_current_rev_gain(T* obj) { return Propert
 473:./autogen/interfaces.hpp ****         template<typename T> static inline void get_phase_current_rev_gain(T* obj, void* ptr) { new
 474:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_effective_current_lim(T* obj) { return Property
 475:./autogen/interfaces.hpp ****         template<typename T> static inline void get_effective_current_lim(T* obj, void* ptr) { new 
 476:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max_allowed_current(T* obj) { return Property<c
 477:./autogen/interfaces.hpp ****         template<typename T> static inline void get_max_allowed_current(T* obj, void* ptr) { new (p
 478:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max_dc_calib(T* obj) { return Property<const fl
 479:./autogen/interfaces.hpp ****         template<typename T> static inline void get_max_dc_calib(T* obj, void* ptr) { new (ptr) Pro
 480:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_fet_thermistor(T* obj) { return &obj->fet_therm
 481:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_motor_thermistor(T* obj) { return &obj->motor_t
 482:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_current_control(T* obj) { return &obj->current_
 483:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_n_evt_current_measurement(T* obj) { return Prop
 484:./autogen/interfaces.hpp ****         template<typename T> static inline void get_n_evt_current_measurement(T* obj, void* ptr) { 
 485:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_n_evt_pwm_update(T* obj) { return Property<cons
 486:./autogen/interfaces.hpp ****         template<typename T> static inline void get_n_evt_pwm_update(T* obj, void* ptr) { new (ptr)
ARM GAS  /tmp/ccofeNgA.s 			page 88


 487:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
 488:./autogen/interfaces.hpp ****     };
 489:./autogen/interfaces.hpp ****     class OscilloscopeIntf {
 490:./autogen/interfaces.hpp ****     public:
 491:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_size(T* obj) { return Property<const uint32_t>{
 492:./autogen/interfaces.hpp ****         template<typename T> static inline void get_size(T* obj, void* ptr) { new (ptr) Property<co
 493:./autogen/interfaces.hpp ****         virtual float get_val(uint32_t index) = 0;
 494:./autogen/interfaces.hpp ****         uint32_t get_val_in_index_; // for internal use by Fibre
 495:./autogen/interfaces.hpp ****         template<typename T> static auto get_get_val_in_index_(T* obj) { return Property<uint32_t>{
 496:./autogen/interfaces.hpp ****         template<typename T> static void get_get_val_in_index_(T* obj, void* ptr) { new (ptr) Prope
 497:./autogen/interfaces.hpp ****         float get_val_out_val_; // for internal use by Fibre
 498:./autogen/interfaces.hpp ****         template<typename T> static auto get_get_val_out_val_(T* obj) { return Property<const float
 499:./autogen/interfaces.hpp ****         template<typename T> static void get_get_val_out_val_(T* obj, void* ptr) { new (ptr) Proper
 500:./autogen/interfaces.hpp ****     };
 501:./autogen/interfaces.hpp ****     class AcimEstimatorIntf {
 502:./autogen/interfaces.hpp ****     public:
 503:./autogen/interfaces.hpp ****         class ConfigIntf {
 504:./autogen/interfaces.hpp ****         public:
 505:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_slip_velocity(T* obj) { return Property<flo
 506:./autogen/interfaces.hpp ****             template<typename T> static inline void get_slip_velocity(T* obj, void* ptr) { new (ptr
 507:./autogen/interfaces.hpp ****         };
 508:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_rotor_flux(T* obj) { return Property<const floa
 509:./autogen/interfaces.hpp ****         template<typename T> static inline void get_rotor_flux(T* obj, void* ptr) { new (ptr) Prope
 510:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_slip_vel(T* obj) { return Property<const float>
 511:./autogen/interfaces.hpp ****         template<typename T> static inline void get_slip_vel(T* obj, void* ptr) { new (ptr) Propert
 512:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_phase_offset(T* obj) { return Property<const fl
 513:./autogen/interfaces.hpp ****         template<typename T> static inline void get_phase_offset(T* obj, void* ptr) { new (ptr) Pro
 514:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_stator_phase_vel(T* obj) { return Property<cons
 515:./autogen/interfaces.hpp ****         template<typename T> static inline void get_stator_phase_vel(T* obj, void* ptr) { new (ptr)
 516:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_stator_phase(T* obj) { return Property<const fl
 517:./autogen/interfaces.hpp ****         template<typename T> static inline void get_stator_phase(T* obj, void* ptr) { new (ptr) Pro
 518:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
 519:./autogen/interfaces.hpp ****     };
 520:./autogen/interfaces.hpp ****     class ControllerIntf {
 521:./autogen/interfaces.hpp ****     public:
 522:./autogen/interfaces.hpp ****         class ConfigIntf {
 523:./autogen/interfaces.hpp ****         public:
 524:./autogen/interfaces.hpp ****             class AnticoggingIntf {
 525:./autogen/interfaces.hpp ****             public:
 526:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_index(T* obj) { return Property<const u
 527:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_index(T* obj, void* ptr) { new (ptr) Pr
 528:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_pre_calibrated(T* obj) { return Propert
 529:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_pre_calibrated(T* obj, void* ptr) { new
 530:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_calib_anticogging(T* obj) { return Prop
 531:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_calib_anticogging(T* obj, void* ptr) { 
 532:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_calib_pos_threshold(T* obj) { return Pr
 533:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_calib_pos_threshold(T* obj, void* ptr) 
 534:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_calib_vel_threshold(T* obj) { return Pr
 535:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_calib_vel_threshold(T* obj, void* ptr) 
 536:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_cogging_ratio(T* obj) { return Property
 537:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_cogging_ratio(T* obj, void* ptr) { new 
 538:./autogen/interfaces.hpp ****                 template<typename T> static inline auto get_anticogging_enabled(T* obj) { return Pr
 539:./autogen/interfaces.hpp ****                 template<typename T> static inline void get_anticogging_enabled(T* obj, void* ptr) 
 540:./autogen/interfaces.hpp ****             };
 541:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_gain_scheduling_width(T* obj) { return Prop
 542:./autogen/interfaces.hpp ****             template<typename T> static inline void get_gain_scheduling_width(T* obj, void* ptr) { 
 543:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_enable_vel_limit(T* obj) { return Property<
ARM GAS  /tmp/ccofeNgA.s 			page 89


 544:./autogen/interfaces.hpp ****             template<typename T> static inline void get_enable_vel_limit(T* obj, void* ptr) { new (
 545:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_enable_torque_mode_vel_limit(T* obj) { retu
 546:./autogen/interfaces.hpp ****             template<typename T> static inline void get_enable_torque_mode_vel_limit(T* obj, void* 
 547:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_enable_gain_scheduling(T* obj) { return Pro
 548:./autogen/interfaces.hpp ****             template<typename T> static inline void get_enable_gain_scheduling(T* obj, void* ptr) {
 549:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_enable_overspeed_error(T* obj) { return Pro
 550:./autogen/interfaces.hpp ****             template<typename T> static inline void get_enable_overspeed_error(T* obj, void* ptr) {
 551:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_control_mode(T* obj) { return Property<ODri
 552:./autogen/interfaces.hpp ****             template<typename T> static inline void get_control_mode(T* obj, void* ptr) { new (ptr)
 553:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_input_mode(T* obj) { return Property<ODrive
 554:./autogen/interfaces.hpp ****             template<typename T> static inline void get_input_mode(T* obj, void* ptr) { new (ptr) P
 555:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_pos_gain(T* obj) { return Property<float>{&
 556:./autogen/interfaces.hpp ****             template<typename T> static inline void get_pos_gain(T* obj, void* ptr) { new (ptr) Pro
 557:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_vel_gain(T* obj) { return Property<float>{&
 558:./autogen/interfaces.hpp ****             template<typename T> static inline void get_vel_gain(T* obj, void* ptr) { new (ptr) Pro
 559:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_vel_integrator_gain(T* obj) { return Proper
 560:./autogen/interfaces.hpp ****             template<typename T> static inline void get_vel_integrator_gain(T* obj, void* ptr) { ne
 561:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_vel_integrator_limit(T* obj) { return Prope
 562:./autogen/interfaces.hpp ****             template<typename T> static inline void get_vel_integrator_limit(T* obj, void* ptr) { n
 563:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_vel_limit(T* obj) { return Property<float>{
 564:./autogen/interfaces.hpp ****             template<typename T> static inline void get_vel_limit(T* obj, void* ptr) { new (ptr) Pr
 565:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_vel_limit_tolerance(T* obj) { return Proper
 566:./autogen/interfaces.hpp ****             template<typename T> static inline void get_vel_limit_tolerance(T* obj, void* ptr) { ne
 567:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_vel_ramp_rate(T* obj) { return Property<flo
 568:./autogen/interfaces.hpp ****             template<typename T> static inline void get_vel_ramp_rate(T* obj, void* ptr) { new (ptr
 569:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_torque_ramp_rate(T* obj) { return Property<
 570:./autogen/interfaces.hpp ****             template<typename T> static inline void get_torque_ramp_rate(T* obj, void* ptr) { new (
 571:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_circular_setpoints(T* obj) { return Propert
 572:./autogen/interfaces.hpp ****             template<typename T> static inline void get_circular_setpoints(T* obj, void* ptr) { new
 573:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_circular_setpoint_range(T* obj) { return Pr
 574:./autogen/interfaces.hpp ****             template<typename T> static inline void get_circular_setpoint_range(T* obj, void* ptr) 
 575:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_steps_per_circular_range(T* obj) { return P
 576:./autogen/interfaces.hpp ****             template<typename T> static inline void get_steps_per_circular_range(T* obj, void* ptr)
 577:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_homing_speed(T* obj) { return Property<floa
 578:./autogen/interfaces.hpp ****             template<typename T> static inline void get_homing_speed(T* obj, void* ptr) { new (ptr)
 579:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_inertia(T* obj) { return Property<float>{&o
 580:./autogen/interfaces.hpp ****             template<typename T> static inline void get_inertia(T* obj, void* ptr) { new (ptr) Prop
 581:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_axis_to_mirror(T* obj) { return Property<ui
 582:./autogen/interfaces.hpp ****             template<typename T> static inline void get_axis_to_mirror(T* obj, void* ptr) { new (pt
 583:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_mirror_ratio(T* obj) { return Property<floa
 584:./autogen/interfaces.hpp ****             template<typename T> static inline void get_mirror_ratio(T* obj, void* ptr) { new (ptr)
 585:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_torque_mirror_ratio(T* obj) { return Proper
 586:./autogen/interfaces.hpp ****             template<typename T> static inline void get_torque_mirror_ratio(T* obj, void* ptr) { ne
 587:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_load_encoder_axis(T* obj) { return Property
 588:./autogen/interfaces.hpp ****             template<typename T> static inline void get_load_encoder_axis(T* obj, void* ptr) { new 
 589:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_input_filter_bandwidth(T* obj) { return Pro
 590:./autogen/interfaces.hpp ****             template<typename T> static inline void get_input_filter_bandwidth(T* obj, void* ptr) {
 591:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_anticogging(T* obj) { return &obj->anticogg
 592:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_mechanical_power_bandwidth(T* obj) { return
 593:./autogen/interfaces.hpp ****             template<typename T> static inline void get_mechanical_power_bandwidth(T* obj, void* pt
 594:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_electrical_power_bandwidth(T* obj) { return
 595:./autogen/interfaces.hpp ****             template<typename T> static inline void get_electrical_power_bandwidth(T* obj, void* pt
 596:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_spinout_mechanical_power_threshold(T* obj) 
 597:./autogen/interfaces.hpp ****             template<typename T> static inline void get_spinout_mechanical_power_threshold(T* obj, 
 598:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_spinout_electrical_power_threshold(T* obj) 
 599:./autogen/interfaces.hpp ****             template<typename T> static inline void get_spinout_electrical_power_threshold(T* obj, 
 600:./autogen/interfaces.hpp ****         };
ARM GAS  /tmp/ccofeNgA.s 			page 90


 601:./autogen/interfaces.hpp ****         class AutotuningIntf {
 602:./autogen/interfaces.hpp ****         public:
 603:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_frequency(T* obj) { return Property<float>{
 604:./autogen/interfaces.hpp ****             template<typename T> static inline void get_frequency(T* obj, void* ptr) { new (ptr) Pr
 605:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_pos_amplitude(T* obj) { return Property<flo
 606:./autogen/interfaces.hpp ****             template<typename T> static inline void get_pos_amplitude(T* obj, void* ptr) { new (ptr
 607:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_vel_amplitude(T* obj) { return Property<flo
 608:./autogen/interfaces.hpp ****             template<typename T> static inline void get_vel_amplitude(T* obj, void* ptr) { new (ptr
 609:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_torque_amplitude(T* obj) { return Property<
 610:./autogen/interfaces.hpp ****             template<typename T> static inline void get_torque_amplitude(T* obj, void* ptr) { new (
 611:./autogen/interfaces.hpp ****         };
 612:./autogen/interfaces.hpp ****         enum Error {
 613:./autogen/interfaces.hpp ****             ERROR_NONE                       = 0x00000000,
 614:./autogen/interfaces.hpp ****             ERROR_OVERSPEED                  = 0x00000001,
 615:./autogen/interfaces.hpp ****             ERROR_INVALID_INPUT_MODE         = 0x00000002,
 616:./autogen/interfaces.hpp ****             ERROR_UNSTABLE_GAIN              = 0x00000004,
 617:./autogen/interfaces.hpp ****             ERROR_INVALID_MIRROR_AXIS        = 0x00000008,
 618:./autogen/interfaces.hpp ****             ERROR_INVALID_LOAD_ENCODER       = 0x00000010,
 619:./autogen/interfaces.hpp ****             ERROR_INVALID_ESTIMATE           = 0x00000020,
 620:./autogen/interfaces.hpp ****             ERROR_INVALID_CIRCULAR_RANGE     = 0x00000040,
 621:./autogen/interfaces.hpp ****             ERROR_SPINOUT_DETECTED           = 0x00000080,
 622:./autogen/interfaces.hpp ****         };
 623:./autogen/interfaces.hpp ****         enum ControlMode {
 624:./autogen/interfaces.hpp ****             CONTROL_MODE_VOLTAGE_CONTROL     = 0,
 625:./autogen/interfaces.hpp ****             CONTROL_MODE_TORQUE_CONTROL      = 1,
 626:./autogen/interfaces.hpp ****             CONTROL_MODE_VELOCITY_CONTROL    = 2,
 627:./autogen/interfaces.hpp ****             CONTROL_MODE_POSITION_CONTROL    = 3,
 628:./autogen/interfaces.hpp ****         };
 629:./autogen/interfaces.hpp ****         enum InputMode {
 630:./autogen/interfaces.hpp ****             INPUT_MODE_INACTIVE              = 0,
 631:./autogen/interfaces.hpp ****             INPUT_MODE_PASSTHROUGH           = 1,
 632:./autogen/interfaces.hpp ****             INPUT_MODE_VEL_RAMP              = 2,
 633:./autogen/interfaces.hpp ****             INPUT_MODE_POS_FILTER            = 3,
 634:./autogen/interfaces.hpp ****             INPUT_MODE_MIX_CHANNELS          = 4,
 635:./autogen/interfaces.hpp ****             INPUT_MODE_TRAP_TRAJ             = 5,
 636:./autogen/interfaces.hpp ****             INPUT_MODE_TORQUE_RAMP           = 6,
 637:./autogen/interfaces.hpp ****             INPUT_MODE_MIRROR                = 7,
 638:./autogen/interfaces.hpp ****             INPUT_MODE_TUNING                = 8,
 639:./autogen/interfaces.hpp ****         };
 640:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_error(T* obj) { return Property<ODriveIntf::Con
 641:./autogen/interfaces.hpp ****         template<typename T> static inline void get_error(T* obj, void* ptr) { new (ptr) Property<O
 642:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_last_error_time(T* obj) { return Property<float
 643:./autogen/interfaces.hpp ****         template<typename T> static inline void get_last_error_time(T* obj, void* ptr) { new (ptr) 
 644:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_input_pos(T* obj) { return Property<float>{obj,
 645:./autogen/interfaces.hpp ****         template<typename T> static inline void get_input_pos(T* obj, void* ptr) { new (ptr) Proper
 646:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_input_vel(T* obj) { return Property<float>{&obj
 647:./autogen/interfaces.hpp ****         template<typename T> static inline void get_input_vel(T* obj, void* ptr) { new (ptr) Proper
 648:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_input_torque(T* obj) { return Property<float>{&
 649:./autogen/interfaces.hpp ****         template<typename T> static inline void get_input_torque(T* obj, void* ptr) { new (ptr) Pro
 650:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_pos_setpoint(T* obj) { return Property<const fl
 651:./autogen/interfaces.hpp ****         template<typename T> static inline void get_pos_setpoint(T* obj, void* ptr) { new (ptr) Pro
 652:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_vel_setpoint(T* obj) { return Property<const fl
 653:./autogen/interfaces.hpp ****         template<typename T> static inline void get_vel_setpoint(T* obj, void* ptr) { new (ptr) Pro
 654:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_torque_setpoint(T* obj) { return Property<const
 655:./autogen/interfaces.hpp ****         template<typename T> static inline void get_torque_setpoint(T* obj, void* ptr) { new (ptr) 
 656:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_trajectory_done(T* obj) { return Property<const
 657:./autogen/interfaces.hpp ****         template<typename T> static inline void get_trajectory_done(T* obj, void* ptr) { new (ptr) 
ARM GAS  /tmp/ccofeNgA.s 			page 91


 658:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_vel_integrator_torque(T* obj) { return Property
 659:./autogen/interfaces.hpp ****         template<typename T> static inline void get_vel_integrator_torque(T* obj, void* ptr) { new 
 660:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_anticogging_valid(T* obj) { return Property<boo
 661:./autogen/interfaces.hpp ****         template<typename T> static inline void get_anticogging_valid(T* obj, void* ptr) { new (ptr
 662:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_autotuning_phase(T* obj) { return Property<floa
 663:./autogen/interfaces.hpp ****         template<typename T> static inline void get_autotuning_phase(T* obj, void* ptr) { new (ptr)
 664:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
 665:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_autotuning(T* obj) { return &obj->autotuning_; 
 666:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_mechanical_power(T* obj) { return Property<cons
 667:./autogen/interfaces.hpp ****         template<typename T> static inline void get_mechanical_power(T* obj, void* ptr) { new (ptr)
 668:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_electrical_power(T* obj) { return Property<cons
 669:./autogen/interfaces.hpp ****         template<typename T> static inline void get_electrical_power(T* obj, void* ptr) { new (ptr)
 670:./autogen/interfaces.hpp ****         virtual void move_incremental(float displacement, bool from_input_pos) = 0;
 671:./autogen/interfaces.hpp ****         virtual void start_anticogging_calibration() = 0;
 672:./autogen/interfaces.hpp ****         virtual float remove_anticogging_bias() = 0;
 673:./autogen/interfaces.hpp ****         virtual float get_anticogging_value(uint32_t index) = 0;
 674:./autogen/interfaces.hpp ****         float move_incremental_in_displacement_; // for internal use by Fibre
 675:./autogen/interfaces.hpp ****         template<typename T> static auto get_move_incremental_in_displacement_(T* obj) { return Pro
 676:./autogen/interfaces.hpp ****         template<typename T> static void get_move_incremental_in_displacement_(T* obj, void* ptr) {
 677:./autogen/interfaces.hpp ****         bool move_incremental_in_from_input_pos_; // for internal use by Fibre
 678:./autogen/interfaces.hpp ****         template<typename T> static auto get_move_incremental_in_from_input_pos_(T* obj) { return P
 679:./autogen/interfaces.hpp ****         template<typename T> static void get_move_incremental_in_from_input_pos_(T* obj, void* ptr)
 680:./autogen/interfaces.hpp ****         float remove_anticogging_bias_out_val_; // for internal use by Fibre
 681:./autogen/interfaces.hpp ****         template<typename T> static auto get_remove_anticogging_bias_out_val_(T* obj) { return Prop
 682:./autogen/interfaces.hpp ****         template<typename T> static void get_remove_anticogging_bias_out_val_(T* obj, void* ptr) { 
 683:./autogen/interfaces.hpp ****         uint32_t get_anticogging_value_in_index_; // for internal use by Fibre
 684:./autogen/interfaces.hpp ****         template<typename T> static auto get_get_anticogging_value_in_index_(T* obj) { return Prope
 685:./autogen/interfaces.hpp ****         template<typename T> static void get_get_anticogging_value_in_index_(T* obj, void* ptr) { n
 686:./autogen/interfaces.hpp ****         float get_anticogging_value_out_val_; // for internal use by Fibre
 687:./autogen/interfaces.hpp ****         template<typename T> static auto get_get_anticogging_value_out_val_(T* obj) { return Proper
 688:./autogen/interfaces.hpp ****         template<typename T> static void get_get_anticogging_value_out_val_(T* obj, void* ptr) { ne
 689:./autogen/interfaces.hpp ****     };
 690:./autogen/interfaces.hpp ****     class EncoderIntf {
 691:./autogen/interfaces.hpp ****     public:
 692:./autogen/interfaces.hpp ****         class ConfigIntf {
 693:./autogen/interfaces.hpp ****         public:
 694:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_mode(T* obj) { return Property<ODriveIntf::
 695:./autogen/interfaces.hpp ****             template<typename T> static inline void get_mode(T* obj, void* ptr) { new (ptr) Propert
 696:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_use_index(T* obj) { return Property<bool>{o
 697:./autogen/interfaces.hpp ****             template<typename T> static inline void get_use_index(T* obj, void* ptr) { new (ptr) Pr
 698:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_index_offset(T* obj) { return Property<floa
 699:./autogen/interfaces.hpp ****             template<typename T> static inline void get_index_offset(T* obj, void* ptr) { new (ptr)
 700:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_use_index_offset(T* obj) { return Property<
 701:./autogen/interfaces.hpp ****             template<typename T> static inline void get_use_index_offset(T* obj, void* ptr) { new (
 702:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_find_idx_on_lockin_only(T* obj) { return Pr
 703:./autogen/interfaces.hpp ****             template<typename T> static inline void get_find_idx_on_lockin_only(T* obj, void* ptr) 
 704:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_abs_spi_cs_gpio_pin(T* obj) { return Proper
 705:./autogen/interfaces.hpp ****             template<typename T> static inline void get_abs_spi_cs_gpio_pin(T* obj, void* ptr) { ne
 706:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_cpr(T* obj) { return Property<int32_t>{&obj
 707:./autogen/interfaces.hpp ****             template<typename T> static inline void get_cpr(T* obj, void* ptr) { new (ptr) Property
 708:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_phase_offset(T* obj) { return Property<int3
 709:./autogen/interfaces.hpp ****             template<typename T> static inline void get_phase_offset(T* obj, void* ptr) { new (ptr)
 710:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_phase_offset_float(T* obj) { return Propert
 711:./autogen/interfaces.hpp ****             template<typename T> static inline void get_phase_offset_float(T* obj, void* ptr) { new
 712:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_direction(T* obj) { return Property<int32_t
 713:./autogen/interfaces.hpp ****             template<typename T> static inline void get_direction(T* obj, void* ptr) { new (ptr) Pr
 714:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_pre_calibrated(T* obj) { return Property<bo
ARM GAS  /tmp/ccofeNgA.s 			page 92


 715:./autogen/interfaces.hpp ****             template<typename T> static inline void get_pre_calibrated(T* obj, void* ptr) { new (pt
 716:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_enable_phase_interpolation(T* obj) { return
 717:./autogen/interfaces.hpp ****             template<typename T> static inline void get_enable_phase_interpolation(T* obj, void* pt
 718:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_bandwidth(T* obj) { return Property<float>{
 719:./autogen/interfaces.hpp ****             template<typename T> static inline void get_bandwidth(T* obj, void* ptr) { new (ptr) Pr
 720:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_calib_range(T* obj) { return Property<float
 721:./autogen/interfaces.hpp ****             template<typename T> static inline void get_calib_range(T* obj, void* ptr) { new (ptr) 
 722:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_calib_scan_distance(T* obj) { return Proper
 723:./autogen/interfaces.hpp ****             template<typename T> static inline void get_calib_scan_distance(T* obj, void* ptr) { ne
 724:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_calib_scan_omega(T* obj) { return Property<
 725:./autogen/interfaces.hpp ****             template<typename T> static inline void get_calib_scan_omega(T* obj, void* ptr) { new (
 726:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_ignore_illegal_hall_state(T* obj) { return 
 727:./autogen/interfaces.hpp ****             template<typename T> static inline void get_ignore_illegal_hall_state(T* obj, void* ptr
 728:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_hall_polarity(T* obj) { return Property<uin
 729:./autogen/interfaces.hpp ****             template<typename T> static inline void get_hall_polarity(T* obj, void* ptr) { new (ptr
 730:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_hall_polarity_calibrated(T* obj) { return P
 731:./autogen/interfaces.hpp ****             template<typename T> static inline void get_hall_polarity_calibrated(T* obj, void* ptr)
 732:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_sincos_gpio_pin_sin(T* obj) { return Proper
 733:./autogen/interfaces.hpp ****             template<typename T> static inline void get_sincos_gpio_pin_sin(T* obj, void* ptr) { ne
 734:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_sincos_gpio_pin_cos(T* obj) { return Proper
 735:./autogen/interfaces.hpp ****             template<typename T> static inline void get_sincos_gpio_pin_cos(T* obj, void* ptr) { ne
 736:./autogen/interfaces.hpp ****         };
 737:./autogen/interfaces.hpp ****         enum Error {
 738:./autogen/interfaces.hpp ****             ERROR_NONE                       = 0x00000000,
 739:./autogen/interfaces.hpp ****             ERROR_UNSTABLE_GAIN              = 0x00000001,
 740:./autogen/interfaces.hpp ****             ERROR_CPR_POLEPAIRS_MISMATCH     = 0x00000002,
 741:./autogen/interfaces.hpp ****             ERROR_NO_RESPONSE                = 0x00000004,
 742:./autogen/interfaces.hpp ****             ERROR_UNSUPPORTED_ENCODER_MODE   = 0x00000008,
 743:./autogen/interfaces.hpp ****             ERROR_ILLEGAL_HALL_STATE         = 0x00000010,
 744:./autogen/interfaces.hpp ****             ERROR_INDEX_NOT_FOUND_YET        = 0x00000020,
 745:./autogen/interfaces.hpp ****             ERROR_ABS_SPI_TIMEOUT            = 0x00000040,
 746:./autogen/interfaces.hpp ****             ERROR_ABS_SPI_COM_FAIL           = 0x00000080,
 747:./autogen/interfaces.hpp ****             ERROR_ABS_SPI_NOT_READY          = 0x00000100,
 748:./autogen/interfaces.hpp ****             ERROR_HALL_NOT_CALIBRATED_YET    = 0x00000200,
 749:./autogen/interfaces.hpp ****         };
 750:./autogen/interfaces.hpp ****         enum Mode {
 751:./autogen/interfaces.hpp ****             MODE_INCREMENTAL                 = 0,
 752:./autogen/interfaces.hpp ****             MODE_HALL                        = 1,
 753:./autogen/interfaces.hpp ****             MODE_SINCOS                      = 2,
 754:./autogen/interfaces.hpp ****             MODE_SPI_ABS_CUI                 = 256,
 755:./autogen/interfaces.hpp ****             MODE_SPI_ABS_AMS                 = 257,
 756:./autogen/interfaces.hpp ****             MODE_SPI_ABS_AEAT                = 258,
 757:./autogen/interfaces.hpp ****             MODE_SPI_ABS_RLS                 = 259,
 758:./autogen/interfaces.hpp ****             MODE_SPI_ABS_MA732               = 260,
 759:./autogen/interfaces.hpp ****         };
 760:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_error(T* obj) { return Property<ODriveIntf::Enc
 761:./autogen/interfaces.hpp ****         template<typename T> static inline void get_error(T* obj, void* ptr) { new (ptr) Property<O
 762:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_is_ready(T* obj) { return Property<const bool>{
 763:./autogen/interfaces.hpp ****         template<typename T> static inline void get_is_ready(T* obj, void* ptr) { new (ptr) Propert
 764:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_index_found(T* obj) { return Property<const boo
 765:./autogen/interfaces.hpp ****         template<typename T> static inline void get_index_found(T* obj, void* ptr) { new (ptr) Prop
 766:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_shadow_count(T* obj) { return Property<const in
 767:./autogen/interfaces.hpp ****         template<typename T> static inline void get_shadow_count(T* obj, void* ptr) { new (ptr) Pro
 768:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_count_in_cpr(T* obj) { return Property<const in
 769:./autogen/interfaces.hpp ****         template<typename T> static inline void get_count_in_cpr(T* obj, void* ptr) { new (ptr) Pro
 770:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_interpolation(T* obj) { return Property<const f
 771:./autogen/interfaces.hpp ****         template<typename T> static inline void get_interpolation(T* obj, void* ptr) { new (ptr) Pr
ARM GAS  /tmp/ccofeNgA.s 			page 93


 772:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_phase(T* obj) { return Property<const float>{ob
 773:./autogen/interfaces.hpp ****         template<typename T> static inline void get_phase(T* obj, void* ptr) { new (ptr) Property<c
 774:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_pos_estimate(T* obj) { return Property<const fl
 775:./autogen/interfaces.hpp ****         template<typename T> static inline void get_pos_estimate(T* obj, void* ptr) { new (ptr) Pro
 776:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_pos_estimate_counts(T* obj) { return Property<c
 777:./autogen/interfaces.hpp ****         template<typename T> static inline void get_pos_estimate_counts(T* obj, void* ptr) { new (p
 778:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_pos_circular(T* obj) { return Property<const fl
 779:./autogen/interfaces.hpp ****         template<typename T> static inline void get_pos_circular(T* obj, void* ptr) { new (ptr) Pro
 780:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_pos_cpr_counts(T* obj) { return Property<const 
 781:./autogen/interfaces.hpp ****         template<typename T> static inline void get_pos_cpr_counts(T* obj, void* ptr) { new (ptr) P
 782:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_delta_pos_cpr_counts(T* obj) { return Property<
 783:./autogen/interfaces.hpp ****         template<typename T> static inline void get_delta_pos_cpr_counts(T* obj, void* ptr) { new (
 784:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_hall_state(T* obj) { return Property<const uint
 785:./autogen/interfaces.hpp ****         template<typename T> static inline void get_hall_state(T* obj, void* ptr) { new (ptr) Prope
 786:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_vel_estimate(T* obj) { return Property<const fl
 787:./autogen/interfaces.hpp ****         template<typename T> static inline void get_vel_estimate(T* obj, void* ptr) { new (ptr) Pro
 788:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_vel_estimate_counts(T* obj) { return Property<c
 789:./autogen/interfaces.hpp ****         template<typename T> static inline void get_vel_estimate_counts(T* obj, void* ptr) { new (p
 790:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_calib_scan_response(T* obj) { return Property<c
 791:./autogen/interfaces.hpp ****         template<typename T> static inline void get_calib_scan_response(T* obj, void* ptr) { new (p
 792:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_pos_abs(T* obj) { return Property<int32_t>{&obj
 793:./autogen/interfaces.hpp ****         template<typename T> static inline void get_pos_abs(T* obj, void* ptr) { new (ptr) Property
 794:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_spi_error_rate(T* obj) { return Property<const 
 795:./autogen/interfaces.hpp ****         template<typename T> static inline void get_spi_error_rate(T* obj, void* ptr) { new (ptr) P
 796:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
 797:./autogen/interfaces.hpp ****         virtual void set_linear_count(int32_t count) = 0;
 798:./autogen/interfaces.hpp ****         int32_t set_linear_count_in_count_; // for internal use by Fibre
 799:./autogen/interfaces.hpp ****         template<typename T> static auto get_set_linear_count_in_count_(T* obj) { return Property<i
 800:./autogen/interfaces.hpp ****         template<typename T> static void get_set_linear_count_in_count_(T* obj, void* ptr) { new (p
 801:./autogen/interfaces.hpp ****     };
 802:./autogen/interfaces.hpp ****     class SensorlessEstimatorIntf {
 803:./autogen/interfaces.hpp ****     public:
 804:./autogen/interfaces.hpp ****         class ConfigIntf {
 805:./autogen/interfaces.hpp ****         public:
 806:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_observer_gain(T* obj) { return Property<flo
 807:./autogen/interfaces.hpp ****             template<typename T> static inline void get_observer_gain(T* obj, void* ptr) { new (ptr
 808:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_pll_bandwidth(T* obj) { return Property<flo
 809:./autogen/interfaces.hpp ****             template<typename T> static inline void get_pll_bandwidth(T* obj, void* ptr) { new (ptr
 810:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_pm_flux_linkage(T* obj) { return Property<f
 811:./autogen/interfaces.hpp ****             template<typename T> static inline void get_pm_flux_linkage(T* obj, void* ptr) { new (p
 812:./autogen/interfaces.hpp ****         };
 813:./autogen/interfaces.hpp ****         enum Error {
 814:./autogen/interfaces.hpp ****             ERROR_NONE                       = 0x00000000,
 815:./autogen/interfaces.hpp ****             ERROR_UNSTABLE_GAIN              = 0x00000001,
 816:./autogen/interfaces.hpp ****             ERROR_UNKNOWN_CURRENT_MEASUREMENT = 0x00000002,
 817:./autogen/interfaces.hpp ****         };
 818:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_error(T* obj) { return Property<ODriveIntf::Sen
 819:./autogen/interfaces.hpp ****         template<typename T> static inline void get_error(T* obj, void* ptr) { new (ptr) Property<O
 820:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_phase(T* obj) { return Property<const float>{ob
 821:./autogen/interfaces.hpp ****         template<typename T> static inline void get_phase(T* obj, void* ptr) { new (ptr) Property<c
 822:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_pll_pos(T* obj) { return Property<const float>{
 823:./autogen/interfaces.hpp ****         template<typename T> static inline void get_pll_pos(T* obj, void* ptr) { new (ptr) Property
 824:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_phase_vel(T* obj) { return Property<const float
 825:./autogen/interfaces.hpp ****         template<typename T> static inline void get_phase_vel(T* obj, void* ptr) { new (ptr) Proper
 826:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_vel_estimate(T* obj) { return Property<const fl
 827:./autogen/interfaces.hpp ****         template<typename T> static inline void get_vel_estimate(T* obj, void* ptr) { new (ptr) Pro
 828:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
ARM GAS  /tmp/ccofeNgA.s 			page 94


 829:./autogen/interfaces.hpp ****     };
 830:./autogen/interfaces.hpp ****     class TrapezoidalTrajectoryIntf {
 831:./autogen/interfaces.hpp ****     public:
 832:./autogen/interfaces.hpp ****         class ConfigIntf {
 833:./autogen/interfaces.hpp ****         public:
 834:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_vel_limit(T* obj) { return Property<float>{
 835:./autogen/interfaces.hpp ****             template<typename T> static inline void get_vel_limit(T* obj, void* ptr) { new (ptr) Pr
 836:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_accel_limit(T* obj) { return Property<float
 837:./autogen/interfaces.hpp ****             template<typename T> static inline void get_accel_limit(T* obj, void* ptr) { new (ptr) 
 838:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_decel_limit(T* obj) { return Property<float
 839:./autogen/interfaces.hpp ****             template<typename T> static inline void get_decel_limit(T* obj, void* ptr) { new (ptr) 
 840:./autogen/interfaces.hpp ****         };
 841:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
 842:./autogen/interfaces.hpp ****     };
 843:./autogen/interfaces.hpp ****     class EndstopIntf {
 844:./autogen/interfaces.hpp ****     public:
 845:./autogen/interfaces.hpp ****         class ConfigIntf {
 846:./autogen/interfaces.hpp ****         public:
 847:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_gpio_num(T* obj) { return Property<uint16_t
 848:./autogen/interfaces.hpp ****             template<typename T> static inline void get_gpio_num(T* obj, void* ptr) { new (ptr) Pro
 849:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_enabled(T* obj) { return Property<bool>{obj
 850:./autogen/interfaces.hpp ****             template<typename T> static inline void get_enabled(T* obj, void* ptr) { new (ptr) Prop
 851:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_offset(T* obj) { return Property<float>{&ob
 852:./autogen/interfaces.hpp ****             template<typename T> static inline void get_offset(T* obj, void* ptr) { new (ptr) Prope
 853:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_is_active_high(T* obj) { return Property<bo
 854:./autogen/interfaces.hpp ****             template<typename T> static inline void get_is_active_high(T* obj, void* ptr) { new (pt
 855:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_debounce_ms(T* obj) { return Property<uint3
 856:./autogen/interfaces.hpp ****             template<typename T> static inline void get_debounce_ms(T* obj, void* ptr) { new (ptr) 
 857:./autogen/interfaces.hpp ****         };
 858:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_endstop_state(T* obj) { return Property<const b
 859:./autogen/interfaces.hpp ****         template<typename T> static inline void get_endstop_state(T* obj, void* ptr) { new (ptr) Pr
 860:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
 861:./autogen/interfaces.hpp ****     };
 862:./autogen/interfaces.hpp ****     class MechanicalBrakeIntf {
 863:./autogen/interfaces.hpp ****     public:
 864:./autogen/interfaces.hpp ****         class ConfigIntf {
 865:./autogen/interfaces.hpp ****         public:
 866:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_gpio_num(T* obj) { return Property<uint16_t
 867:./autogen/interfaces.hpp ****             template<typename T> static inline void get_gpio_num(T* obj, void* ptr) { new (ptr) Pro
 868:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_is_active_low(T* obj) { return Property<boo
 869:./autogen/interfaces.hpp ****             template<typename T> static inline void get_is_active_low(T* obj, void* ptr) { new (ptr
 870:./autogen/interfaces.hpp ****         };
 871:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
 872:./autogen/interfaces.hpp ****         virtual void engage() = 0;
 873:./autogen/interfaces.hpp ****         virtual void release() = 0;
 874:./autogen/interfaces.hpp ****     };
 875:./autogen/interfaces.hpp ****     class TaskTimerIntf {
 876:./autogen/interfaces.hpp ****     public:
 877:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_start_time(T* obj) { return Property<const uint
 878:./autogen/interfaces.hpp ****         template<typename T> static inline void get_start_time(T* obj, void* ptr) { new (ptr) Prope
 879:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_end_time(T* obj) { return Property<const uint32
 880:./autogen/interfaces.hpp ****         template<typename T> static inline void get_end_time(T* obj, void* ptr) { new (ptr) Propert
 881:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_length(T* obj) { return Property<const uint32_t
 882:./autogen/interfaces.hpp ****         template<typename T> static inline void get_length(T* obj, void* ptr) { new (ptr) Property<
 883:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max_length(T* obj) { return Property<uint32_t>{
 884:./autogen/interfaces.hpp ****         template<typename T> static inline void get_max_length(T* obj, void* ptr) { new (ptr) Prope
 885:./autogen/interfaces.hpp ****     };
ARM GAS  /tmp/ccofeNgA.s 			page 95


 886:./autogen/interfaces.hpp ****     class TaskTimesIntf {
 887:./autogen/interfaces.hpp ****     public:
 888:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_sampling(T* obj) { return &obj->sampling; }
 889:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_control_loop_misc(T* obj) { return &obj->contro
 890:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_control_loop_checks(T* obj) { return &obj->cont
 891:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_dc_calib_wait(T* obj) { return &obj->dc_calib_w
 892:./autogen/interfaces.hpp ****     };
 893:./autogen/interfaces.hpp ****     class SystemStatsIntf {
 894:./autogen/interfaces.hpp ****     public:
 895:./autogen/interfaces.hpp ****         class UsbIntf {
 896:./autogen/interfaces.hpp ****         public:
 897:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_rx_cnt(T* obj) { return Property<const uint
 898:./autogen/interfaces.hpp ****             template<typename T> static inline void get_rx_cnt(T* obj, void* ptr) { new (ptr) Prope
 899:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_tx_cnt(T* obj) { return Property<const uint
 900:./autogen/interfaces.hpp ****             template<typename T> static inline void get_tx_cnt(T* obj, void* ptr) { new (ptr) Prope
 901:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_tx_overrun_cnt(T* obj) { return Property<co
 902:./autogen/interfaces.hpp ****             template<typename T> static inline void get_tx_overrun_cnt(T* obj, void* ptr) { new (pt
 903:./autogen/interfaces.hpp ****         };
 904:./autogen/interfaces.hpp ****         class I2CIntf {
 905:./autogen/interfaces.hpp ****         public:
 906:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_addr(T* obj) { return Property<const uint8_
 907:./autogen/interfaces.hpp ****             template<typename T> static inline void get_addr(T* obj, void* ptr) { new (ptr) Propert
 908:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_addr_match_cnt(T* obj) { return Property<co
 909:./autogen/interfaces.hpp ****             template<typename T> static inline void get_addr_match_cnt(T* obj, void* ptr) { new (pt
 910:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_rx_cnt(T* obj) { return Property<const uint
 911:./autogen/interfaces.hpp ****             template<typename T> static inline void get_rx_cnt(T* obj, void* ptr) { new (ptr) Prope
 912:./autogen/interfaces.hpp ****             template<typename T> static inline auto get_error_cnt(T* obj) { return Property<const u
 913:./autogen/interfaces.hpp ****             template<typename T> static inline void get_error_cnt(T* obj, void* ptr) { new (ptr) Pr
 914:./autogen/interfaces.hpp ****         };
 915:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_uptime(T* obj) { return Property<const uint32_t
 916:./autogen/interfaces.hpp ****         template<typename T> static inline void get_uptime(T* obj, void* ptr) { new (ptr) Property<
 917:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_min_heap_space(T* obj) { return Property<const 
 918:./autogen/interfaces.hpp ****         template<typename T> static inline void get_min_heap_space(T* obj, void* ptr) { new (ptr) P
 919:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max_stack_usage_axis(T* obj) { return Property<
 920:./autogen/interfaces.hpp ****         template<typename T> static inline void get_max_stack_usage_axis(T* obj, void* ptr) { new (
 921:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max_stack_usage_usb(T* obj) { return Property<c
 922:./autogen/interfaces.hpp ****         template<typename T> static inline void get_max_stack_usage_usb(T* obj, void* ptr) { new (p
 923:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max_stack_usage_uart(T* obj) { return Property<
 924:./autogen/interfaces.hpp ****         template<typename T> static inline void get_max_stack_usage_uart(T* obj, void* ptr) { new (
 925:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max_stack_usage_can(T* obj) { return Property<c
 926:./autogen/interfaces.hpp ****         template<typename T> static inline void get_max_stack_usage_can(T* obj, void* ptr) { new (p
 927:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max_stack_usage_startup(T* obj) { return Proper
 928:./autogen/interfaces.hpp ****         template<typename T> static inline void get_max_stack_usage_startup(T* obj, void* ptr) { ne
 929:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_max_stack_usage_analog(T* obj) { return Propert
 930:./autogen/interfaces.hpp ****         template<typename T> static inline void get_max_stack_usage_analog(T* obj, void* ptr) { new
 931:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_stack_size_axis(T* obj) { return Property<const
 932:./autogen/interfaces.hpp ****         template<typename T> static inline void get_stack_size_axis(T* obj, void* ptr) { new (ptr) 
 933:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_stack_size_usb(T* obj) { return Property<const 
 934:./autogen/interfaces.hpp ****         template<typename T> static inline void get_stack_size_usb(T* obj, void* ptr) { new (ptr) P
 935:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_stack_size_uart(T* obj) { return Property<const
 936:./autogen/interfaces.hpp ****         template<typename T> static inline void get_stack_size_uart(T* obj, void* ptr) { new (ptr) 
 937:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_stack_size_startup(T* obj) { return Property<co
 938:./autogen/interfaces.hpp ****         template<typename T> static inline void get_stack_size_startup(T* obj, void* ptr) { new (pt
 939:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_stack_size_can(T* obj) { return Property<const 
 940:./autogen/interfaces.hpp ****         template<typename T> static inline void get_stack_size_can(T* obj, void* ptr) { new (ptr) P
 941:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_stack_size_analog(T* obj) { return Property<con
 942:./autogen/interfaces.hpp ****         template<typename T> static inline void get_stack_size_analog(T* obj, void* ptr) { new (ptr
ARM GAS  /tmp/ccofeNgA.s 			page 96


 943:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_prio_axis(T* obj) { return Property<const int32
 944:./autogen/interfaces.hpp ****         template<typename T> static inline void get_prio_axis(T* obj, void* ptr) { new (ptr) Proper
 945:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_prio_usb(T* obj) { return Property<const int32_
 946:./autogen/interfaces.hpp ****         template<typename T> static inline void get_prio_usb(T* obj, void* ptr) { new (ptr) Propert
 947:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_prio_uart(T* obj) { return Property<const int32
 948:./autogen/interfaces.hpp ****         template<typename T> static inline void get_prio_uart(T* obj, void* ptr) { new (ptr) Proper
 949:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_prio_startup(T* obj) { return Property<const in
 950:./autogen/interfaces.hpp ****         template<typename T> static inline void get_prio_startup(T* obj, void* ptr) { new (ptr) Pro
 951:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_prio_can(T* obj) { return Property<const int32_
 952:./autogen/interfaces.hpp ****         template<typename T> static inline void get_prio_can(T* obj, void* ptr) { new (ptr) Propert
 953:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_prio_analog(T* obj) { return Property<const int
 954:./autogen/interfaces.hpp ****         template<typename T> static inline void get_prio_analog(T* obj, void* ptr) { new (ptr) Prop
 955:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_usb(T* obj) { return &obj->usb; }
 956:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_i2c(T* obj) { return &obj->i2c; }
 957:./autogen/interfaces.hpp ****     };
 958:./autogen/interfaces.hpp ****     enum Error {
 959:./autogen/interfaces.hpp ****         ERROR_NONE                       = 0x00000000,
 960:./autogen/interfaces.hpp ****         ERROR_CONTROL_ITERATION_MISSED   = 0x00000001,
 961:./autogen/interfaces.hpp ****         ERROR_DC_BUS_UNDER_VOLTAGE       = 0x00000002,
 962:./autogen/interfaces.hpp ****         ERROR_DC_BUS_OVER_VOLTAGE        = 0x00000004,
 963:./autogen/interfaces.hpp ****         ERROR_DC_BUS_OVER_REGEN_CURRENT  = 0x00000008,
 964:./autogen/interfaces.hpp ****         ERROR_DC_BUS_OVER_CURRENT        = 0x00000010,
 965:./autogen/interfaces.hpp ****         ERROR_BRAKE_DEADTIME_VIOLATION   = 0x00000020,
 966:./autogen/interfaces.hpp ****         ERROR_BRAKE_DUTY_CYCLE_NAN       = 0x00000040,
 967:./autogen/interfaces.hpp ****         ERROR_INVALID_BRAKE_RESISTANCE   = 0x00000080,
 968:./autogen/interfaces.hpp ****     };
 969:./autogen/interfaces.hpp ****     enum GpioMode {
 970:./autogen/interfaces.hpp ****         GPIO_MODE_DIGITAL                = 0,
 971:./autogen/interfaces.hpp ****         GPIO_MODE_DIGITAL_PULL_UP        = 1,
 972:./autogen/interfaces.hpp ****         GPIO_MODE_DIGITAL_PULL_DOWN      = 2,
 973:./autogen/interfaces.hpp ****         GPIO_MODE_ANALOG_IN              = 3,
 974:./autogen/interfaces.hpp ****         GPIO_MODE_UART_A                 = 4,
 975:./autogen/interfaces.hpp ****         GPIO_MODE_UART_B                 = 5,
 976:./autogen/interfaces.hpp ****         GPIO_MODE_UART_C                 = 6,
 977:./autogen/interfaces.hpp ****         GPIO_MODE_CAN_A                  = 7,
 978:./autogen/interfaces.hpp ****         GPIO_MODE_I2C_A                  = 8,
 979:./autogen/interfaces.hpp ****         GPIO_MODE_SPI_A                  = 9,
 980:./autogen/interfaces.hpp ****         GPIO_MODE_PWM                    = 10,
 981:./autogen/interfaces.hpp ****         GPIO_MODE_ENC0                   = 11,
 982:./autogen/interfaces.hpp ****         GPIO_MODE_ENC1                   = 12,
 983:./autogen/interfaces.hpp ****         GPIO_MODE_ENC2                   = 13,
 984:./autogen/interfaces.hpp ****         GPIO_MODE_MECH_BRAKE             = 14,
 985:./autogen/interfaces.hpp ****         GPIO_MODE_STATUS                 = 15,
 986:./autogen/interfaces.hpp ****     };
 987:./autogen/interfaces.hpp ****     enum StreamProtocolType {
 988:./autogen/interfaces.hpp ****         STREAM_PROTOCOL_TYPE_FIBRE       = 0,
 989:./autogen/interfaces.hpp ****         STREAM_PROTOCOL_TYPE_ASCII       = 1,
 990:./autogen/interfaces.hpp ****         STREAM_PROTOCOL_TYPE_STDOUT      = 2,
 991:./autogen/interfaces.hpp ****         STREAM_PROTOCOL_TYPE_ASCII_AND_STDOUT = 3,
 992:./autogen/interfaces.hpp ****     };
 993:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_error(T* obj) { return Property<ODriveIntf::Error>{
 994:./autogen/interfaces.hpp ****     template<typename T> static inline void get_error(T* obj, void* ptr) { new (ptr) Property<ODriv
 995:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_vbus_voltage(T* obj) { return Property<const float>
 996:./autogen/interfaces.hpp ****     template<typename T> static inline void get_vbus_voltage(T* obj, void* ptr) { new (ptr) Propert
 997:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_ibus(T* obj) { return Property<const float>{&obj->i
 998:./autogen/interfaces.hpp ****     template<typename T> static inline void get_ibus(T* obj, void* ptr) { new (ptr) Property<const 
 999:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_ibus_report_filter_k(T* obj) { return Property<floa
ARM GAS  /tmp/ccofeNgA.s 			page 97


1000:./autogen/interfaces.hpp ****     template<typename T> static inline void get_ibus_report_filter_k(T* obj, void* ptr) { new (ptr)
1001:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_serial_number(T* obj) { return Property<const uint6
1002:./autogen/interfaces.hpp ****     template<typename T> static inline void get_serial_number(T* obj, void* ptr) { new (ptr) Proper
1003:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_hw_version_major(T* obj) { return Property<const ui
1004:./autogen/interfaces.hpp ****     template<typename T> static inline void get_hw_version_major(T* obj, void* ptr) { new (ptr) Pro
1005:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_hw_version_minor(T* obj) { return Property<const ui
1006:./autogen/interfaces.hpp ****     template<typename T> static inline void get_hw_version_minor(T* obj, void* ptr) { new (ptr) Pro
1007:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_hw_version_variant(T* obj) { return Property<const 
1008:./autogen/interfaces.hpp ****     template<typename T> static inline void get_hw_version_variant(T* obj, void* ptr) { new (ptr) P
1009:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_fw_version_major(T* obj) { return Property<const ui
1010:./autogen/interfaces.hpp ****     template<typename T> static inline void get_fw_version_major(T* obj, void* ptr) { new (ptr) Pro
1011:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_fw_version_minor(T* obj) { return Property<const ui
1012:./autogen/interfaces.hpp ****     template<typename T> static inline void get_fw_version_minor(T* obj, void* ptr) { new (ptr) Pro
1013:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_fw_version_revision(T* obj) { return Property<const
1014:./autogen/interfaces.hpp ****     template<typename T> static inline void get_fw_version_revision(T* obj, void* ptr) { new (ptr) 
1015:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_fw_version_unreleased(T* obj) { return Property<con
1016:./autogen/interfaces.hpp ****     template<typename T> static inline void get_fw_version_unreleased(T* obj, void* ptr) { new (ptr
1017:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_brake_resistor_armed(T* obj) { return Property<cons
1018:./autogen/interfaces.hpp ****     template<typename T> static inline void get_brake_resistor_armed(T* obj, void* ptr) { new (ptr)
1019:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_brake_resistor_saturated(T* obj) { return Property<
1020:./autogen/interfaces.hpp ****     template<typename T> static inline void get_brake_resistor_saturated(T* obj, void* ptr) { new (
1021:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_brake_resistor_current(T* obj) { return Property<co
1022:./autogen/interfaces.hpp ****     template<typename T> static inline void get_brake_resistor_current(T* obj, void* ptr) { new (pt
1023:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_n_evt_sampling(T* obj) { return Property<const uint
1024:./autogen/interfaces.hpp ****     template<typename T> static inline void get_n_evt_sampling(T* obj, void* ptr) { new (ptr) Prope
1025:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_n_evt_control_loop(T* obj) { return Property<const 
1026:./autogen/interfaces.hpp ****     template<typename T> static inline void get_n_evt_control_loop(T* obj, void* ptr) { new (ptr) P
1027:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_task_timers_armed(T* obj) { return Property<bool>{&
1028:./autogen/interfaces.hpp ****     template<typename T> static inline void get_task_timers_armed(T* obj, void* ptr) { new (ptr) Pr
1029:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_task_times(T* obj) { return &obj->task_times_; }
1030:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_system_stats(T* obj) { return &obj->system_stats_; 
1031:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_user_config_loaded(T* obj) { return Property<const 
1032:./autogen/interfaces.hpp ****     template<typename T> static inline void get_user_config_loaded(T* obj, void* ptr) { new (ptr) P
1033:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_misconfigured(T* obj) { return Property<const bool>
1034:./autogen/interfaces.hpp ****     template<typename T> static inline void get_misconfigured(T* obj, void* ptr) { new (ptr) Proper
1035:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_oscilloscope(T* obj) { return &obj->oscilloscope_; 
1036:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_can(T* obj) { return &obj->can_; }
1037:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_test_property(T* obj) { return Property<uint32_t>{&
1038:./autogen/interfaces.hpp ****     template<typename T> static inline void get_test_property(T* obj, void* ptr) { new (ptr) Proper
1039:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_otp_valid(T* obj) { return Property<const bool>{&ob
1040:./autogen/interfaces.hpp ****     template<typename T> static inline void get_otp_valid(T* obj, void* ptr) { new (ptr) Property<c
1041:./autogen/interfaces.hpp ****     virtual int32_t test_function(int32_t delta) = 0;
1042:./autogen/interfaces.hpp ****     virtual float get_adc_voltage(uint32_t gpio) = 0;
1043:./autogen/interfaces.hpp ****     virtual bool save_configuration() = 0;
1044:./autogen/interfaces.hpp ****     virtual void erase_configuration() = 0;
1045:./autogen/interfaces.hpp ****     virtual void reboot() = 0;
1046:./autogen/interfaces.hpp ****     virtual void enter_dfu_mode() = 0;
1047:./autogen/interfaces.hpp ****     virtual uint32_t get_interrupt_status(int32_t irqn) = 0;
1048:./autogen/interfaces.hpp ****     virtual uint32_t get_dma_status(uint8_t stream_num) = 0;
1049:./autogen/interfaces.hpp ****     virtual uint32_t get_gpio_states() = 0;
1050:./autogen/interfaces.hpp ****     virtual uint64_t get_drv_fault() = 0;
1051:./autogen/interfaces.hpp ****     virtual void clear_errors() = 0;
1052:./autogen/interfaces.hpp ****     int32_t test_function_in_delta_; // for internal use by Fibre
1053:./autogen/interfaces.hpp ****     template<typename T> static auto get_test_function_in_delta_(T* obj) { return Property<int32_t>
1054:./autogen/interfaces.hpp ****     template<typename T> static void get_test_function_in_delta_(T* obj, void* ptr) { new (ptr) Pro
1055:./autogen/interfaces.hpp ****     int32_t test_function_out_cnt_; // for internal use by Fibre
1056:./autogen/interfaces.hpp ****     template<typename T> static auto get_test_function_out_cnt_(T* obj) { return Property<const int
ARM GAS  /tmp/ccofeNgA.s 			page 98


1057:./autogen/interfaces.hpp ****     template<typename T> static void get_test_function_out_cnt_(T* obj, void* ptr) { new (ptr) Prop
1058:./autogen/interfaces.hpp ****     uint32_t get_adc_voltage_in_gpio_; // for internal use by Fibre
1059:./autogen/interfaces.hpp ****     template<typename T> static auto get_get_adc_voltage_in_gpio_(T* obj) { return Property<uint32_
1060:./autogen/interfaces.hpp ****     template<typename T> static void get_get_adc_voltage_in_gpio_(T* obj, void* ptr) { new (ptr) Pr
1061:./autogen/interfaces.hpp ****     float get_adc_voltage_out_voltage_; // for internal use by Fibre
1062:./autogen/interfaces.hpp ****     template<typename T> static auto get_get_adc_voltage_out_voltage_(T* obj) { return Property<con
1063:./autogen/interfaces.hpp ****     template<typename T> static void get_get_adc_voltage_out_voltage_(T* obj, void* ptr) { new (ptr
1064:./autogen/interfaces.hpp ****     bool save_configuration_out_success_; // for internal use by Fibre
1065:./autogen/interfaces.hpp ****     template<typename T> static auto get_save_configuration_out_success_(T* obj) { return Property<
1066:./autogen/interfaces.hpp ****     template<typename T> static void get_save_configuration_out_success_(T* obj, void* ptr) { new (
1067:./autogen/interfaces.hpp ****     int32_t get_interrupt_status_in_irqn_; // for internal use by Fibre
1068:./autogen/interfaces.hpp ****     template<typename T> static auto get_get_interrupt_status_in_irqn_(T* obj) { return Property<in
1069:./autogen/interfaces.hpp ****     template<typename T> static void get_get_interrupt_status_in_irqn_(T* obj, void* ptr) { new (pt
1070:./autogen/interfaces.hpp ****     uint32_t get_interrupt_status_out_status_; // for internal use by Fibre
1071:./autogen/interfaces.hpp ****     template<typename T> static auto get_get_interrupt_status_out_status_(T* obj) { return Property
1072:./autogen/interfaces.hpp ****     template<typename T> static void get_get_interrupt_status_out_status_(T* obj, void* ptr) { new 
1073:./autogen/interfaces.hpp ****     uint8_t get_dma_status_in_stream_num_; // for internal use by Fibre
1074:./autogen/interfaces.hpp ****     template<typename T> static auto get_get_dma_status_in_stream_num_(T* obj) { return Property<ui
1075:./autogen/interfaces.hpp ****     template<typename T> static void get_get_dma_status_in_stream_num_(T* obj, void* ptr) { new (pt
1076:./autogen/interfaces.hpp ****     uint32_t get_dma_status_out_status_; // for internal use by Fibre
1077:./autogen/interfaces.hpp ****     template<typename T> static auto get_get_dma_status_out_status_(T* obj) { return Property<const
1078:./autogen/interfaces.hpp ****     template<typename T> static void get_get_dma_status_out_status_(T* obj, void* ptr) { new (ptr) 
1079:./autogen/interfaces.hpp ****     uint32_t get_gpio_states_out_status_; // for internal use by Fibre
1080:./autogen/interfaces.hpp ****     template<typename T> static auto get_get_gpio_states_out_status_(T* obj) { return Property<cons
1081:./autogen/interfaces.hpp ****     template<typename T> static void get_get_gpio_states_out_status_(T* obj, void* ptr) { new (ptr)
1082:./autogen/interfaces.hpp ****     uint64_t get_drv_fault_out_drv_fault_; // for internal use by Fibre
1083:./autogen/interfaces.hpp ****     template<typename T> static auto get_get_drv_fault_out_drv_fault_(T* obj) { return Property<con
1084:./autogen/interfaces.hpp ****     template<typename T> static void get_get_drv_fault_out_drv_fault_(T* obj, void* ptr) { new (ptr
1085:./autogen/interfaces.hpp **** };
1086:./autogen/interfaces.hpp **** 
1087:./autogen/interfaces.hpp **** 
1088:./autogen/interfaces.hpp **** class ODrive3Intf : public ODriveIntf {
1089:./autogen/interfaces.hpp **** public:
1090:./autogen/interfaces.hpp ****     class ConfigIntf : public ODriveIntf::ConfigIntf {
1091:./autogen/interfaces.hpp ****     public:
1092:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio1_mode(T* obj) { return Property<ODriveIntf
1093:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio1_mode(T* obj, void* ptr) { new (ptr) Prope
1094:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio2_mode(T* obj) { return Property<ODriveIntf
1095:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio2_mode(T* obj, void* ptr) { new (ptr) Prope
1096:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio3_mode(T* obj) { return Property<ODriveIntf
1097:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio3_mode(T* obj, void* ptr) { new (ptr) Prope
1098:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio4_mode(T* obj) { return Property<ODriveIntf
1099:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio4_mode(T* obj, void* ptr) { new (ptr) Prope
1100:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio5_mode(T* obj) { return Property<ODriveIntf
1101:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio5_mode(T* obj, void* ptr) { new (ptr) Prope
1102:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio6_mode(T* obj) { return Property<ODriveIntf
1103:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio6_mode(T* obj, void* ptr) { new (ptr) Prope
1104:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio7_mode(T* obj) { return Property<ODriveIntf
1105:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio7_mode(T* obj, void* ptr) { new (ptr) Prope
1106:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio8_mode(T* obj) { return Property<ODriveIntf
1107:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio8_mode(T* obj, void* ptr) { new (ptr) Prope
1108:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio9_mode(T* obj) { return Property<ODriveIntf
1109:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio9_mode(T* obj, void* ptr) { new (ptr) Prope
1110:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio10_mode(T* obj) { return Property<ODriveInt
1111:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio10_mode(T* obj, void* ptr) { new (ptr) Prop
1112:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio11_mode(T* obj) { return Property<ODriveInt
1113:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio11_mode(T* obj, void* ptr) { new (ptr) Prop
ARM GAS  /tmp/ccofeNgA.s 			page 99


1114:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio12_mode(T* obj) { return Property<ODriveInt
1115:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio12_mode(T* obj, void* ptr) { new (ptr) Prop
1116:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio13_mode(T* obj) { return Property<ODriveInt
1117:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio13_mode(T* obj, void* ptr) { new (ptr) Prop
1118:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio14_mode(T* obj) { return Property<ODriveInt
1119:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio14_mode(T* obj, void* ptr) { new (ptr) Prop
1120:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio15_mode(T* obj) { return Property<ODriveInt
1121:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio15_mode(T* obj, void* ptr) { new (ptr) Prop
1122:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio16_mode(T* obj) { return Property<ODriveInt
1123:./autogen/interfaces.hpp ****         template<typename T> static inline void get_gpio16_mode(T* obj, void* ptr) { new (ptr) Prop
1124:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio1_pwm_mapping(T* obj) { return &obj->pwm_ma
1125:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio2_pwm_mapping(T* obj) { return &obj->pwm_ma
1126:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio3_pwm_mapping(T* obj) { return &obj->pwm_ma
1127:./autogen/interfaces.hpp ****         template<typename T> static inline auto get_gpio4_pwm_mapping(T* obj) { return &obj->pwm_ma
1128:./autogen/interfaces.hpp ****     };
1129:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_config(T* obj) { return &obj->config_; }
1130:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_axis0(T* obj) { return &obj->get_axis(0); }
1131:./autogen/interfaces.hpp ****     template<typename T> static inline auto get_axis1(T* obj) { return &obj->get_axis(1); }
1132:./autogen/interfaces.hpp **** };
1133:./autogen/interfaces.hpp **** 
1134:./autogen/interfaces.hpp **** // this is technically not thread-safe but practically it might be
1135:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Protocol operator | (ODriveIntf::CanIntf::Protocol a, ODriveIntf::CanIn
1136:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Protocol operator & (ODriveIntf::CanIntf::Protocol a, ODriveIntf::CanIn
1137:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Protocol operator ^ (ODriveIntf::CanIntf::Protocol a, ODriveIntf::CanIn
1138:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Protocol& operator |= (ODriveIntf::CanIntf::Protocol &a, ODriveIntf::Ca
1139:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Protocol& operator &= (ODriveIntf::CanIntf::Protocol &a, ODriveIntf::Ca
1140:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Protocol& operator ^= (ODriveIntf::CanIntf::Protocol &a, ODriveIntf::Ca
1141:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Protocol operator ~ (ODriveIntf::CanIntf::Protocol a) { return static_c
1142:./autogen/interfaces.hpp **** // this is technically not thread-safe but practically it might be
1143:./autogen/interfaces.hpp **** inline ODriveIntf::Error operator | (ODriveIntf::Error a, ODriveIntf::Error b) { return static_cast
1144:./autogen/interfaces.hpp **** inline ODriveIntf::Error operator & (ODriveIntf::Error a, ODriveIntf::Error b) { return static_cast
1145:./autogen/interfaces.hpp **** inline ODriveIntf::Error operator ^ (ODriveIntf::Error a, ODriveIntf::Error b) { return static_cast
1146:./autogen/interfaces.hpp **** inline ODriveIntf::Error& operator |= (ODriveIntf::Error &a, ODriveIntf::Error b) { return reinterp
1147:./autogen/interfaces.hpp **** inline ODriveIntf::Error& operator &= (ODriveIntf::Error &a, ODriveIntf::Error b) { return reinterp
1148:./autogen/interfaces.hpp **** inline ODriveIntf::Error& operator ^= (ODriveIntf::Error &a, ODriveIntf::Error b) { return reinterp
1149:./autogen/interfaces.hpp **** inline ODriveIntf::Error operator ~ (ODriveIntf::Error a) { return static_cast<ODriveIntf::Error>(~
1150:./autogen/interfaces.hpp **** // this is technically not thread-safe but practically it might be
1151:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Error operator | (ODriveIntf::CanIntf::Error a, ODriveIntf::CanIntf::Er
1152:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Error operator & (ODriveIntf::CanIntf::Error a, ODriveIntf::CanIntf::Er
1153:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Error operator ^ (ODriveIntf::CanIntf::Error a, ODriveIntf::CanIntf::Er
1154:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Error& operator |= (ODriveIntf::CanIntf::Error &a, ODriveIntf::CanIntf:
1155:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Error& operator &= (ODriveIntf::CanIntf::Error &a, ODriveIntf::CanIntf:
1156:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Error& operator ^= (ODriveIntf::CanIntf::Error &a, ODriveIntf::CanIntf:
1157:./autogen/interfaces.hpp **** inline ODriveIntf::CanIntf::Error operator ~ (ODriveIntf::CanIntf::Error a) { return static_cast<OD
1158:./autogen/interfaces.hpp **** // this is technically not thread-safe but practically it might be
1159:./autogen/interfaces.hpp **** inline ODriveIntf::AxisIntf::Error operator | (ODriveIntf::AxisIntf::Error a, ODriveIntf::AxisIntf:
1160:./autogen/interfaces.hpp **** inline ODriveIntf::AxisIntf::Error operator & (ODriveIntf::AxisIntf::Error a, ODriveIntf::AxisIntf:
1161:./autogen/interfaces.hpp **** inline ODriveIntf::AxisIntf::Error operator ^ (ODriveIntf::AxisIntf::Error a, ODriveIntf::AxisIntf:
1162:./autogen/interfaces.hpp **** inline ODriveIntf::AxisIntf::Error& operator |= (ODriveIntf::AxisIntf::Error &a, ODriveIntf::AxisIn
 1210              		.loc 9 1162 113 is_stmt 1 view -0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 0
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 1214              		@ link register save eliminated.
 1215              		.loc 9 1162 115 view .LVU277
 1216              		.loc 9 1162 243 is_stmt 0 view .LVU278
 1217 0000 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccofeNgA.s 			page 100


 1218 0002 1143     		orrs	r1, r1, r2
 1219              	.LVL79:
 1220              		.loc 9 1162 243 view .LVU279
 1221 0004 0160     		str	r1, [r0]
 1222              		.loc 9 1162 316 view .LVU280
 1223 0006 7047     		bx	lr
 1224              		.cfi_endproc
 1225              	.LFE4170:
 1226              		.cantunwind
 1227              		.fnend
 1229              		.section	.text._ZoRRN10ODriveIntf9MotorIntf5ErrorES1_,"axG",%progbits,_ZoRRN10ODriveIntf9MotorIntf
 1230              		.align	1
 1231              		.weak	_ZoRRN10ODriveIntf9MotorIntf5ErrorES1_
 1232              		.syntax unified
 1233              		.thumb
 1234              		.thumb_func
 1236              	_ZoRRN10ODriveIntf9MotorIntf5ErrorES1_:
 1237              		.fnstart
 1238              	.LVL80:
 1239              	.LFB4177:
1163:./autogen/interfaces.hpp **** inline ODriveIntf::AxisIntf::Error& operator &= (ODriveIntf::AxisIntf::Error &a, ODriveIntf::AxisIn
1164:./autogen/interfaces.hpp **** inline ODriveIntf::AxisIntf::Error& operator ^= (ODriveIntf::AxisIntf::Error &a, ODriveIntf::AxisIn
1165:./autogen/interfaces.hpp **** inline ODriveIntf::AxisIntf::Error operator ~ (ODriveIntf::AxisIntf::Error a) { return static_cast<
1166:./autogen/interfaces.hpp **** // this is technically not thread-safe but practically it might be
1167:./autogen/interfaces.hpp **** inline ODriveIntf::MotorIntf::Error operator | (ODriveIntf::MotorIntf::Error a, ODriveIntf::MotorIn
1168:./autogen/interfaces.hpp **** inline ODriveIntf::MotorIntf::Error operator & (ODriveIntf::MotorIntf::Error a, ODriveIntf::MotorIn
1169:./autogen/interfaces.hpp **** inline ODriveIntf::MotorIntf::Error operator ^ (ODriveIntf::MotorIntf::Error a, ODriveIntf::MotorIn
1170:./autogen/interfaces.hpp **** inline ODriveIntf::MotorIntf::Error& operator |= (ODriveIntf::MotorIntf::Error &a, ODriveIntf::Moto
 1240              		.loc 9 1170 116 is_stmt 1 view -0
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 0
 1243              		@ frame_needed = 0, uses_anonymous_args = 0
 1244              		.loc 9 1170 118 view .LVU282
 1245              		.loc 9 1170 116 is_stmt 0 view .LVU283
 1246 0000 30B5     		push	{r4, r5, lr}
 1247              	.LCFI20:
 1248              		.cfi_def_cfa_offset 12
 1249              		.cfi_offset 4, -12
 1250              		.cfi_offset 5, -8
 1251              		.cfi_offset 14, -4
 1252              		.loc 9 1170 248 view .LVU284
 1253 0002 D0E90054 		ldrd	r5, r4, [r0]
 1254 0006 2A43     		orrs	r2, r2, r5
 1255              	.LVL81:
 1256              		.loc 9 1170 248 view .LVU285
 1257 0008 2343     		orrs	r3, r3, r4
 1258 000a C0E90023 		strd	r2, r3, [r0]
 1259              		.loc 9 1170 322 view .LVU286
 1260 000e 30BD     		pop	{r4, r5, pc}
 1261              		.cfi_endproc
 1262              	.LFE4177:
 1263              		.cantunwind
 1264              		.fnend
 1266              		.section	.text._ZN9TaskTimer4stopEm,"axG",%progbits,_ZN9TaskTimer4stopEm,comdat
 1267              		.align	1
 1268              		.weak	_ZN9TaskTimer4stopEm
 1269              		.syntax unified
ARM GAS  /tmp/ccofeNgA.s 			page 101


 1270              		.thumb
 1271              		.thumb_func
 1273              	_ZN9TaskTimer4stopEm:
 1274              		.fnstart
 1275              	.LVL82:
 1276              	.LFB4299:
 1277              		.file 10 "MotorControl/task_timer.hpp"
   1:MotorControl/task_timer.hpp **** #ifndef __TASK_TIMER_HPP
   2:MotorControl/task_timer.hpp **** #define __TASK_TIMER_HPP
   3:MotorControl/task_timer.hpp **** 
   4:MotorControl/task_timer.hpp **** #include <stdint.h>
   5:MotorControl/task_timer.hpp **** #include <board.h>
   6:MotorControl/task_timer.hpp **** 
   7:MotorControl/task_timer.hpp **** #define MEASURE_START_TIME
   8:MotorControl/task_timer.hpp **** #define MEASURE_END_TIME
   9:MotorControl/task_timer.hpp **** #define MEASURE_LENGTH
  10:MotorControl/task_timer.hpp **** #define MEASURE_MAX_LENGTH
  11:MotorControl/task_timer.hpp **** 
  12:MotorControl/task_timer.hpp **** inline uint16_t sample_TIM13() {
  13:MotorControl/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
  14:MotorControl/task_timer.hpp ****     return clocks_per_cnt * TIM13->CNT;  // TODO: Use a hw_config
  15:MotorControl/task_timer.hpp **** }
  16:MotorControl/task_timer.hpp **** 
  17:MotorControl/task_timer.hpp **** struct TaskTimer {
  18:MotorControl/task_timer.hpp ****     uint32_t start_time_ = 0;
  19:MotorControl/task_timer.hpp ****     uint32_t end_time_ = 0;
  20:MotorControl/task_timer.hpp ****     uint32_t length_ = 0;
  21:MotorControl/task_timer.hpp ****     uint32_t max_length_ = 0;
  22:MotorControl/task_timer.hpp **** 
  23:MotorControl/task_timer.hpp ****     static bool enabled;
  24:MotorControl/task_timer.hpp **** 
  25:MotorControl/task_timer.hpp ****     uint32_t start() {
  26:MotorControl/task_timer.hpp ****         return sample_TIM13();
  27:MotorControl/task_timer.hpp ****     }
  28:MotorControl/task_timer.hpp **** 
  29:MotorControl/task_timer.hpp ****     void stop(uint32_t start_time) {
 1278              		.loc 10 29 10 is_stmt 1 view -0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 8
 1281              		@ frame_needed = 0, uses_anonymous_args = 0
 1282              		@ link register save eliminated.
 1283              		.loc 10 29 10 is_stmt 0 view .LVU288
 1284 0000 82B0     		sub	sp, sp, #8
 1285              	.LCFI21:
 1286              		.cfi_def_cfa_offset 8
  30:MotorControl/task_timer.hpp ****         uint32_t end_time = sample_TIM13();
 1287              		.loc 10 30 9 is_stmt 1 view .LVU289
 1288              	.LBB1608:
 1289              	.LBI1608:
  12:MotorControl/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 1290              		.loc 10 12 17 view .LVU290
 1291              	.LBB1609:
  13:MotorControl/task_timer.hpp ****     return clocks_per_cnt * TIM13->CNT;  // TODO: Use a hw_config
 1292              		.loc 10 13 5 view .LVU291
 1293              	.LVL83:
  14:MotorControl/task_timer.hpp **** }
 1294              		.loc 10 14 5 view .LVU292
ARM GAS  /tmp/ccofeNgA.s 			page 102


  14:MotorControl/task_timer.hpp **** }
 1295              		.loc 10 14 36 is_stmt 0 view .LVU293
 1296 0002 0C4B     		ldr	r3, .L66
 1297 0004 5B6A     		ldr	r3, [r3, #36]
 1298 0006 5B00     		lsls	r3, r3, #1
 1299 0008 9BB2     		uxth	r3, r3
 1300              	.LVL84:
  14:MotorControl/task_timer.hpp **** }
 1301              		.loc 10 14 36 view .LVU294
 1302              	.LBE1609:
 1303              	.LBE1608:
  31:MotorControl/task_timer.hpp ****         uint32_t length = end_time - start_time;
 1304              		.loc 10 31 9 is_stmt 1 view .LVU295
 1305              		.loc 10 31 36 is_stmt 0 view .LVU296
 1306 000a 5A1A     		subs	r2, r3, r1
 1307              		.loc 10 31 18 view .LVU297
 1308 000c 0192     		str	r2, [sp, #4]
  32:MotorControl/task_timer.hpp **** 
  33:MotorControl/task_timer.hpp ****         if (enabled) {
 1309              		.loc 10 33 9 is_stmt 1 view .LVU298
 1310 000e 0A4A     		ldr	r2, .L66+4
 1311 0010 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1312 0012 1AB1     		cbz	r2, .L61
  34:MotorControl/task_timer.hpp **** #ifdef MEASURE_START_TIME
  35:MotorControl/task_timer.hpp ****             start_time_ = start_time;
 1313              		.loc 10 35 13 view .LVU299
 1314              		.loc 10 35 25 is_stmt 0 view .LVU300
 1315 0014 0160     		str	r1, [r0]
  36:MotorControl/task_timer.hpp **** #endif
  37:MotorControl/task_timer.hpp **** #ifdef MEASURE_END_TIME
  38:MotorControl/task_timer.hpp ****             end_time_ = end_time;
 1316              		.loc 10 38 13 is_stmt 1 view .LVU301
 1317              		.loc 10 38 23 is_stmt 0 view .LVU302
 1318 0016 4360     		str	r3, [r0, #4]
  39:MotorControl/task_timer.hpp **** #endif
  40:MotorControl/task_timer.hpp **** #ifdef MEASURE_LENGTH
  41:MotorControl/task_timer.hpp ****             length_ = length;
 1319              		.loc 10 41 13 is_stmt 1 view .LVU303
 1320              		.loc 10 41 21 is_stmt 0 view .LVU304
 1321 0018 019B     		ldr	r3, [sp, #4]
 1322              	.LVL85:
 1323              		.loc 10 41 21 view .LVU305
 1324 001a 8360     		str	r3, [r0, #8]
 1325              	.LVL86:
 1326              	.L61:
  42:MotorControl/task_timer.hpp **** #endif
  43:MotorControl/task_timer.hpp ****         }
  44:MotorControl/task_timer.hpp **** #ifdef MEASURE_MAX_LENGTH
  45:MotorControl/task_timer.hpp ****         max_length_ = std::max(max_length_, length);
 1327              		.loc 10 45 9 is_stmt 1 view .LVU306
 1328              		.loc 10 45 32 is_stmt 0 view .LVU307
 1329 001c 00F10C03 		add	r3, r0, #12
 1330              	.LVL87:
 1331              	.LBB1610:
 1332              	.LBI1610:
 1333              		.file 11 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
ARM GAS  /tmp/ccofeNgA.s 			page 103


   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 104


  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
ARM GAS  /tmp/ccofeNgA.s 			page 105


 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
ARM GAS  /tmp/ccofeNgA.s 			page 106


 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
ARM GAS  /tmp/ccofeNgA.s 			page 107


 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 1334              		.loc 11 254 5 is_stmt 1 view .LVU308
 1335              	.LBB1611:
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 1336              		.loc 11 259 15 is_stmt 0 view .LVU309
 1337 0020 C168     		ldr	r1, [r0, #12]
 1338              	.LVL88:
 1339              		.loc 11 259 15 view .LVU310
 1340 0022 019A     		ldr	r2, [sp, #4]
 1341              		.loc 11 259 7 view .LVU311
 1342 0024 9142     		cmp	r1, r2
 1343 0026 03D3     		bcc	.L65
 1344              	.LVL89:
 1345              	.L62:
 1346              		.loc 11 259 7 view .LVU312
 1347              	.LBE1611:
 1348              	.LBE1610:
 1349              		.loc 10 45 31 view .LVU313
 1350 0028 1B68     		ldr	r3, [r3]
 1351              		.loc 10 45 21 view .LVU314
 1352 002a C360     		str	r3, [r0, #12]
  46:MotorControl/task_timer.hpp **** #endif
  47:MotorControl/task_timer.hpp ****     }
 1353              		.loc 10 47 5 view .LVU315
 1354 002c 02B0     		add	sp, sp, #8
 1355              	.LCFI22:
 1356              		.cfi_remember_state
 1357              		.cfi_def_cfa_offset 0
 1358              		@ sp needed
ARM GAS  /tmp/ccofeNgA.s 			page 108


 1359 002e 7047     		bx	lr
 1360              	.LVL90:
 1361              	.L65:
 1362              	.LCFI23:
 1363              		.cfi_restore_state
 1364              	.LBB1613:
 1365              	.LBB1612:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 1366              		.loc 11 260 9 view .LVU316
 1367 0030 01AB     		add	r3, sp, #4
 1368              	.LVL91:
 1369              		.loc 11 260 9 view .LVU317
 1370 0032 F9E7     		b	.L62
 1371              	.L67:
 1372              		.align	2
 1373              	.L66:
 1374 0034 001C0040 		.word	1073748992
 1375 0038 00000000 		.word	_ZN9TaskTimer7enabledE
 1376              	.LBE1612:
 1377              	.LBE1613:
 1378              		.cfi_endproc
 1379              	.LFE4299:
 1380              		.cantunwind
 1381              		.fnend
 1383              		.section	.text._ZN5Motor3armEP15PhaseControlLawILj3EE,"ax",%progbits
 1384              		.align	1
 1385              		.global	_ZN5Motor3armEP15PhaseControlLawILj3EE
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1390              	_ZN5Motor3armEP15PhaseControlLawILj3EE:
 1391              		.fnstart
 1392              	.LVL92:
 1393              	.LFB5294:
 128:MotorControl/motor.cpp **** 
 129:MotorControl/motor.cpp ****     float get_inductance() {
 130:MotorControl/motor.cpp ****         // Note: A more correct formula would also take into account that there is a finite timeste
 131:MotorControl/motor.cpp ****         // However, the discretisation in the current control loop inverts the same discrepancy
 132:MotorControl/motor.cpp ****         float dt = (float)(last_input_timestamp_ - start_timestamp_) / (float)TIM_1_8_CLOCK_HZ; // 
 133:MotorControl/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
 134:MotorControl/motor.cpp ****     }
 135:MotorControl/motor.cpp **** 
 136:MotorControl/motor.cpp ****     // Config
 137:MotorControl/motor.cpp ****     float test_voltage_ = 0.0f;
 138:MotorControl/motor.cpp **** 
 139:MotorControl/motor.cpp ****     // State
 140:MotorControl/motor.cpp ****     bool attached_ = false;
 141:MotorControl/motor.cpp ****     float sign_ = 0;
 142:MotorControl/motor.cpp **** 
 143:MotorControl/motor.cpp ****     // Outputs
 144:MotorControl/motor.cpp ****     uint32_t start_timestamp_ = 0;
 145:MotorControl/motor.cpp ****     float last_Ialpha_ = NAN;
 146:MotorControl/motor.cpp ****     uint32_t last_input_timestamp_ = 0;
 147:MotorControl/motor.cpp ****     float deltaI_ = 0.0f;
 148:MotorControl/motor.cpp **** };
 149:MotorControl/motor.cpp **** 
 150:MotorControl/motor.cpp **** 
ARM GAS  /tmp/ccofeNgA.s 			page 109


 151:MotorControl/motor.cpp **** Motor::Motor(TIM_HandleTypeDef* timer,
 152:MotorControl/motor.cpp ****              uint8_t current_sensor_mask,
 153:MotorControl/motor.cpp ****              float shunt_conductance,
 154:MotorControl/motor.cpp ****              TGateDriver& gate_driver,
 155:MotorControl/motor.cpp ****              TOpAmp& opamp,
 156:MotorControl/motor.cpp ****              OnboardThermistorCurrentLimiter& fet_thermistor,
 157:MotorControl/motor.cpp ****              OffboardThermistorCurrentLimiter& motor_thermistor) :
 158:MotorControl/motor.cpp ****         timer_(timer),
 159:MotorControl/motor.cpp ****         current_sensor_mask_(current_sensor_mask),
 160:MotorControl/motor.cpp ****         shunt_conductance_(shunt_conductance),
 161:MotorControl/motor.cpp ****         gate_driver_(gate_driver),
 162:MotorControl/motor.cpp ****         opamp_(opamp),
 163:MotorControl/motor.cpp ****         fet_thermistor_(fet_thermistor),
 164:MotorControl/motor.cpp ****         motor_thermistor_(motor_thermistor) {
 165:MotorControl/motor.cpp ****     apply_config();
 166:MotorControl/motor.cpp ****     fet_thermistor_.motor_ = this;
 167:MotorControl/motor.cpp ****     motor_thermistor_.motor_ = this;
 168:MotorControl/motor.cpp **** }
 169:MotorControl/motor.cpp **** 
 170:MotorControl/motor.cpp **** /**
 171:MotorControl/motor.cpp ****  * @brief Arms the PWM outputs that belong to this motor.
 172:MotorControl/motor.cpp ****  *
 173:MotorControl/motor.cpp ****  * Note that this does not activate the PWM outputs immediately, it just sets
 174:MotorControl/motor.cpp ****  * a flag so they will be enabled later.
 175:MotorControl/motor.cpp ****  * 
 176:MotorControl/motor.cpp ****  * The sequence goes like this:
 177:MotorControl/motor.cpp ****  *  - Motor::arm() sets the is_armed_ flag.
 178:MotorControl/motor.cpp ****  *  - On the next timer update event Motor::timer_update_cb() gets called in an
 179:MotorControl/motor.cpp ****  *    interrupt context
 180:MotorControl/motor.cpp ****  *  - Motor::timer_update_cb() runs specified control law to determine PWM values
 181:MotorControl/motor.cpp ****  *  - Motor::timer_update_cb() calls Motor::apply_pwm_timings()
 182:MotorControl/motor.cpp ****  *  - Motor::apply_pwm_timings() sets the output compare registers and the AOE
 183:MotorControl/motor.cpp ****  *    (automatic output enable) bit.
 184:MotorControl/motor.cpp ****  *  - On the next update event the timer latches the configured values into the
 185:MotorControl/motor.cpp ****  *    active shadow register and enables the outputs at the same time.
 186:MotorControl/motor.cpp ****  * 
 187:MotorControl/motor.cpp ****  * The sequence can be aborted at any time by calling Motor::disarm().
 188:MotorControl/motor.cpp ****  *
 189:MotorControl/motor.cpp ****  * @param control_law: An control law that is called at the frequency of current
 190:MotorControl/motor.cpp ****  *        measurements. The function must return as quickly as possible
 191:MotorControl/motor.cpp ****  *        such that the resulting PWM timings are available before the next
 192:MotorControl/motor.cpp ****  *        timer update event.
 193:MotorControl/motor.cpp ****  * @returns: True on success, false otherwise
 194:MotorControl/motor.cpp ****  */
 195:MotorControl/motor.cpp **** bool Motor::arm(PhaseControlLaw<3>* control_law) {
 1394              		.loc 2 195 50 is_stmt 1 view -0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 8
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 1398              		.loc 2 195 50 is_stmt 0 view .LVU319
 1399 0000 70B5     		push	{r4, r5, r6, lr}
 1400              		.save {r4, r5, r6, lr}
 1401              	.LCFI24:
 1402              		.cfi_def_cfa_offset 16
 1403              		.cfi_offset 4, -16
 1404              		.cfi_offset 5, -12
 1405              		.cfi_offset 6, -8
ARM GAS  /tmp/ccofeNgA.s 			page 110


 1406              		.cfi_offset 14, -4
 1407              		.pad #8
 1408 0002 82B0     		sub	sp, sp, #8
 1409              	.LCFI25:
 1410              		.cfi_def_cfa_offset 24
 1411 0004 0446     		mov	r4, r0
 1412 0006 0D46     		mov	r5, r1
 196:MotorControl/motor.cpp ****     axis_->mechanical_brake_.release();
 1413              		.loc 2 196 5 is_stmt 1 view .LVU320
 1414 0008 D0F88430 		ldr	r3, [r0, #132]
 1415              		.loc 2 196 12 is_stmt 0 view .LVU321
 1416 000c D3F86801 		ldr	r0, [r3, #360]
 1417              	.LVL93:
 1418              		.loc 2 196 38 view .LVU322
 1419 0010 0368     		ldr	r3, [r0]
 1420 0012 5B68     		ldr	r3, [r3, #4]
 1421              	.LEHB0:
 1422              		.loc 2 196 37 view .LVU323
 1423 0014 9847     		blx	r3
 1424              	.LVL94:
 1425              	.LEHE0:
 197:MotorControl/motor.cpp **** 
 198:MotorControl/motor.cpp ****     CRITICAL_SECTION() {
 1426              		.loc 2 198 5 is_stmt 1 view .LVU324
 1427              	.LBB1614:
 1428              	.LBB1615:
 1429              	.LBI1615:
 1430              		.file 12 "./Drivers/STM32/stm32_system.h"
   1:./Drivers/STM32/stm32_system.h **** #ifndef __STM32_SYSTEM_H
   2:./Drivers/STM32/stm32_system.h **** #define __STM32_SYSTEM_H
   3:./Drivers/STM32/stm32_system.h **** 
   4:./Drivers/STM32/stm32_system.h **** #if defined(STM32F405xx)
   5:./Drivers/STM32/stm32_system.h **** #include <stm32f405xx.h>
   6:./Drivers/STM32/stm32_system.h **** #elif defined(STM32F722xx)
   7:./Drivers/STM32/stm32_system.h **** #include <stm32f722xx.h>
   8:./Drivers/STM32/stm32_system.h **** #else
   9:./Drivers/STM32/stm32_system.h **** #error "unknown STM32 microcontroller"
  10:./Drivers/STM32/stm32_system.h **** #endif
  11:./Drivers/STM32/stm32_system.h **** 
  12:./Drivers/STM32/stm32_system.h **** // C/C++ definitions
  13:./Drivers/STM32/stm32_system.h **** 
  14:./Drivers/STM32/stm32_system.h **** #ifdef __cplusplus
  15:./Drivers/STM32/stm32_system.h **** extern "C" {
  16:./Drivers/STM32/stm32_system.h **** #endif
  17:./Drivers/STM32/stm32_system.h **** 
  18:./Drivers/STM32/stm32_system.h **** // Uncomment the following line to sacrifice 1kB of RAM for the ability to
  19:./Drivers/STM32/stm32_system.h **** // monitor the number of times each interrupt fires.
  20:./Drivers/STM32/stm32_system.h **** //#define ENABLE_IRQ_COUNTER
  21:./Drivers/STM32/stm32_system.h **** 
  22:./Drivers/STM32/stm32_system.h **** #ifdef ENABLE_IRQ_COUNTER
  23:./Drivers/STM32/stm32_system.h **** extern uint32_t irq_counters[];
  24:./Drivers/STM32/stm32_system.h **** #define COUNT_IRQ(irqn) (++irq_counters[irqn + 14])
  25:./Drivers/STM32/stm32_system.h **** #define GET_IRQ_COUNTER(irqn) irq_counters[irqn + 14]
  26:./Drivers/STM32/stm32_system.h **** #else
  27:./Drivers/STM32/stm32_system.h **** #define COUNT_IRQ(irqn) ((void)0)
  28:./Drivers/STM32/stm32_system.h **** #define GET_IRQ_COUNTER(irqn) 0
  29:./Drivers/STM32/stm32_system.h **** #endif
ARM GAS  /tmp/ccofeNgA.s 			page 111


  30:./Drivers/STM32/stm32_system.h **** 
  31:./Drivers/STM32/stm32_system.h **** static inline uint32_t cpu_enter_critical() {
  32:./Drivers/STM32/stm32_system.h ****     uint32_t primask = __get_PRIMASK();
  33:./Drivers/STM32/stm32_system.h ****     __disable_irq();
  34:./Drivers/STM32/stm32_system.h ****     return primask;
  35:./Drivers/STM32/stm32_system.h **** }
  36:./Drivers/STM32/stm32_system.h **** 
  37:./Drivers/STM32/stm32_system.h **** static inline void cpu_exit_critical(uint32_t priority_mask) {
  38:./Drivers/STM32/stm32_system.h ****     __set_PRIMASK(priority_mask);
  39:./Drivers/STM32/stm32_system.h **** }
  40:./Drivers/STM32/stm32_system.h **** 
  41:./Drivers/STM32/stm32_system.h **** #ifdef __cplusplus
  42:./Drivers/STM32/stm32_system.h **** }
  43:./Drivers/STM32/stm32_system.h **** #endif
  44:./Drivers/STM32/stm32_system.h **** 
  45:./Drivers/STM32/stm32_system.h **** 
  46:./Drivers/STM32/stm32_system.h **** // C++ only definitions
  47:./Drivers/STM32/stm32_system.h **** 
  48:./Drivers/STM32/stm32_system.h **** #ifdef __cplusplus
  49:./Drivers/STM32/stm32_system.h **** 
  50:./Drivers/STM32/stm32_system.h **** struct CriticalSectionContext {
  51:./Drivers/STM32/stm32_system.h ****     CriticalSectionContext(const CriticalSectionContext&) = delete;
  52:./Drivers/STM32/stm32_system.h ****     CriticalSectionContext(const CriticalSectionContext&&) = delete;
  53:./Drivers/STM32/stm32_system.h ****     void operator=(const CriticalSectionContext&) = delete;
  54:./Drivers/STM32/stm32_system.h ****     void operator=(const CriticalSectionContext&&) = delete;
  55:./Drivers/STM32/stm32_system.h ****     operator bool() { return true; };
  56:./Drivers/STM32/stm32_system.h ****     CriticalSectionContext() : mask_(cpu_enter_critical()) {}
 1431              		.loc 12 56 5 view .LVU325
 1432              	.LBB1616:
 1433              	.LBB1617:
 1434              	.LBB1618:
 1435              	.LBI1618:
  31:./Drivers/STM32/stm32_system.h ****     uint32_t primask = __get_PRIMASK();
 1436              		.loc 12 31 24 view .LVU326
 1437              	.LBB1619:
  32:./Drivers/STM32/stm32_system.h ****     __disable_irq();
 1438              		.loc 12 32 5 view .LVU327
 1439              	.LBB1620:
 1440              	.LBI1620:
 1441              		.file 13 "ThirdParty/CMSIS/Include/cmsis_gcc.h"
   1:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /*
   8:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  *
  10:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  *
  12:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  *
  16:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccofeNgA.s 			page 112


  18:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
  24:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
  25:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
  28:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
  34:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  38:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
  39:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  43:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  46:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  49:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  55:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  58:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  61:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  64:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  67:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  70:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
ARM GAS  /tmp/ccofeNgA.s 			page 113


  75:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  78:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  86:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
  94:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 102:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 110:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 113:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 116:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 117:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 118:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:ThirdParty/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   @{
 122:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 123:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 124:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 125:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:ThirdParty/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 129:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 131:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
ARM GAS  /tmp/ccofeNgA.s 			page 114


 132:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 133:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 134:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 135:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 136:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:ThirdParty/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 140:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 142:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 144:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 145:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 146:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 147:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 151:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 153:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 155:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 158:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 159:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 160:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 162:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 166:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 168:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 170:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 173:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 174:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 175:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 176:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 177:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 181:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 183:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 185:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 186:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 187:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccofeNgA.s 			page 115


 189:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 193:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 195:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 197:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 198:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 199:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 200:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 201:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 205:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 207:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 209:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 212:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 213:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 214:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 215:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 219:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 221:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 223:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 226:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 227:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 228:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 229:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 233:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 235:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 237:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 240:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 241:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 242:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 243:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
ARM GAS  /tmp/ccofeNgA.s 			page 116


 246:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 247:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 249:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 251:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 254:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 255:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 256:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 258:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 262:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 264:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 266:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 269:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 270:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 271:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 272:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 273:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 277:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 279:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 281:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 282:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 283:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 285:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 289:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 291:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 293:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 294:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 295:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 296:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 297:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 301:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccofeNgA.s 			page 117


 303:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 305:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 308:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 309:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 310:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 312:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 316:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 318:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 320:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 323:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 324:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 325:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 326:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 327:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 331:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 333:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 335:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 336:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 337:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 339:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 343:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 345:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 347:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 348:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 349:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 350:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 352:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 356:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 358:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 118


 360:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 363:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 364:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 365:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 366:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 370:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 372:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 374:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 375:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 376:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 377:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 378:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 382:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 1442              		.loc 13 382 31 view .LVU328
 1443              	.LBB1621:
 383:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 384:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 1444              		.loc 13 384 3 view .LVU329
 385:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 386:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 1445              		.loc 13 386 3 view .LVU330
 1446              		.syntax unified
 1447              	@ 386 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 1448 0016 EFF31086 		MRS r6, primask
 1449              	@ 0 "" 2
 1450              	.LVL95:
 387:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1451              		.loc 13 387 3 view .LVU331
 1452              		.loc 13 387 3 is_stmt 0 view .LVU332
 1453              		.thumb
 1454              		.syntax unified
 1455              	.LBE1621:
 1456              	.LBE1620:
  33:./Drivers/STM32/stm32_system.h ****     return primask;
 1457              		.loc 12 33 5 is_stmt 1 view .LVU333
 1458              	.LBB1622:
 1459              	.LBI1622:
 140:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 1460              		.loc 13 140 27 view .LVU334
 1461              	.LBB1623:
 142:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 1462              		.loc 13 142 3 view .LVU335
 1463              		.syntax unified
 1464              	@ 142 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 1465 001a 72B6     		cpsid i
 1466              	@ 0 "" 2
 1467              		.thumb
ARM GAS  /tmp/ccofeNgA.s 			page 119


 1468              		.syntax unified
 1469              	.LBE1623:
 1470              	.LBE1622:
  34:./Drivers/STM32/stm32_system.h **** }
 1471              		.loc 12 34 5 view .LVU336
 1472              	.LBE1619:
 1473              	.LBE1618:
 1474              		.loc 12 56 58 is_stmt 0 view .LVU337
 1475 001c 0096     		str	r6, [sp]
 1476 001e 0023     		movs	r3, #0
 1477 0020 8DF80430 		strb	r3, [sp, #4]
 1478              	.LVL96:
 1479              		.loc 12 56 58 view .LVU338
 1480              	.LBE1617:
 1481              	.LBE1616:
 1482              	.LBE1615:
 1483              	.LBE1614:
  55:./Drivers/STM32/stm32_system.h ****     CriticalSectionContext() : mask_(cpu_enter_critical()) {}
 1484              		.loc 12 55 23 is_stmt 1 view .LVU339
 1485              	.LBB1640:
 199:MotorControl/motor.cpp ****         control_law_ = control_law;
 1486              		.loc 2 199 9 view .LVU340
 1487              		.loc 2 199 22 is_stmt 0 view .LVU341
 1488 0024 C4F8A851 		str	r5, [r4, #424]
 200:MotorControl/motor.cpp **** 
 201:MotorControl/motor.cpp ****         // Reset controller states, integrators, setpoints, etc.
 202:MotorControl/motor.cpp ****         axis_->controller_.reset();
 1489              		.loc 2 202 9 is_stmt 1 view .LVU342
 1490 0028 D4F88430 		ldr	r3, [r4, #132]
 1491              		.loc 2 202 33 is_stmt 0 view .LVU343
 1492 002c D3F80001 		ldr	r0, [r3, #256]
 1493              	.LEHB1:
 1494 0030 FFF7FEFF 		bl	_ZN10Controller5resetEv
 1495              	.LVL97:
 203:MotorControl/motor.cpp ****         axis_->acim_estimator_.rotor_flux_ = 0.0f;
 1496              		.loc 2 203 9 is_stmt 1 view .LVU344
 1497 0034 D4F88430 		ldr	r3, [r4, #132]
 1498              		.loc 2 203 44 is_stmt 0 view .LVU345
 1499 0038 0022     		movs	r2, #0
 1500 003a C3F8DC20 		str	r2, [r3, #220]	@ float
 204:MotorControl/motor.cpp ****         if (control_law_) {
 1501              		.loc 2 204 9 is_stmt 1 view .LVU346
 1502              		.loc 2 204 13 is_stmt 0 view .LVU347
 1503 003e D4F8A801 		ldr	r0, [r4, #424]
 1504              		.loc 2 204 9 view .LVU348
 1505 0042 10B1     		cbz	r0, .L69
 205:MotorControl/motor.cpp ****             control_law_->reset();
 1506              		.loc 2 205 13 is_stmt 1 view .LVU349
 1507              		.loc 2 205 33 is_stmt 0 view .LVU350
 1508 0044 0368     		ldr	r3, [r0]
 1509 0046 1B68     		ldr	r3, [r3]
 1510              		.loc 2 205 32 view .LVU351
 1511 0048 9847     		blx	r3
 1512              	.LVL98:
 1513              	.LEHE1:
 1514              	.L69:
 206:MotorControl/motor.cpp ****         }
ARM GAS  /tmp/ccofeNgA.s 			page 120


 207:MotorControl/motor.cpp **** 
 208:MotorControl/motor.cpp ****         if (!odrv.config_.enable_brake_resistor || brake_resistor_armed) {
 1515              		.loc 2 208 9 is_stmt 1 view .LVU352
 1516              		.loc 2 208 27 is_stmt 0 view .LVU353
 1517 004a 0E4B     		ldr	r3, .L77
 1518 004c 93F8A831 		ldrb	r3, [r3, #424]	@ zero_extendqisi2
 1519              		.loc 2 208 9 view .LVU354
 1520 0050 13B1     		cbz	r3, .L70
 1521              		.loc 2 208 49 discriminator 1 view .LVU355
 1522 0052 0D4B     		ldr	r3, .L77+4
 1523 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1524 0056 4BB1     		cbz	r3, .L71
 1525              	.L70:
 209:MotorControl/motor.cpp ****             armed_state_ = 1;
 1526              		.loc 2 209 13 is_stmt 1 view .LVU356
 1527              		.loc 2 209 26 is_stmt 0 view .LVU357
 1528 0058 0123     		movs	r3, #1
 1529 005a 84F89D30 		strb	r3, [r4, #157]
 210:MotorControl/motor.cpp ****             is_armed_ = true;
 1530              		.loc 2 210 13 is_stmt 1 view .LVU358
 1531              		.loc 2 210 23 is_stmt 0 view .LVU359
 1532 005e 84F89C30 		strb	r3, [r4, #156]
 1533              	.L72:
 1534              	.LVL99:
 1535              	.LBB1624:
 1536              	.LBI1624:
  57:./Drivers/STM32/stm32_system.h ****     ~CriticalSectionContext() { cpu_exit_critical(mask_); }
 1537              		.loc 12 57 5 is_stmt 1 discriminator 1 view .LVU360
 1538              	.LBB1625:
 1539              		.loc 12 57 33 discriminator 1 view .LVU361
 1540              	.LBB1626:
 1541              	.LBI1626:
  37:./Drivers/STM32/stm32_system.h ****     __set_PRIMASK(priority_mask);
 1542              		.loc 12 37 20 discriminator 1 view .LVU362
 1543              	.LBE1626:
 1544              	.LBE1625:
 1545              	.LBE1624:
 1546              	.LBE1640:
  38:./Drivers/STM32/stm32_system.h **** }
 1547              		.loc 12 38 5 discriminator 1 view .LVU363
 1548              	.LBB1641:
 1549              	.LBB1631:
 1550              	.LBB1630:
 1551              	.LBB1629:
 1552              	.LBB1627:
 1553              	.LBI1627:
 388:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 389:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 390:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 391:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 393:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 397:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccofeNgA.s 			page 121


 399:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 401:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 404:ThirdParty/CMSIS/Include/cmsis_gcc.h **** #endif
 405:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 406:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 407:ThirdParty/CMSIS/Include/cmsis_gcc.h **** /**
 408:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:ThirdParty/CMSIS/Include/cmsis_gcc.h ****  */
 412:ThirdParty/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 1554              		.loc 13 412 27 discriminator 1 view .LVU364
 1555              	.LBB1628:
 413:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 414:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 1556              		.loc 13 414 3 discriminator 1 view .LVU365
 1557              		.syntax unified
 1558              	@ 414 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 1559 0062 86F31088 		MSR primask, r6
 1560              	@ 0 "" 2
 1561              	.LVL100:
 1562              		.loc 13 414 3 is_stmt 0 discriminator 1 view .LVU366
 1563              		.thumb
 1564              		.syntax unified
 1565              	.LBE1628:
 1566              	.LBE1627:
 1567              	.LBE1629:
 1568              	.LBE1630:
 1569              	.LBE1631:
 1570              	.LBE1641:
 211:MotorControl/motor.cpp ****         } else {
 212:MotorControl/motor.cpp ****             error_ |= Motor::ERROR_BRAKE_RESISTOR_DISARMED;
 213:MotorControl/motor.cpp ****         }
 214:MotorControl/motor.cpp ****     }
 215:MotorControl/motor.cpp **** 
 216:MotorControl/motor.cpp ****     return true;
 1571              		.loc 2 216 5 is_stmt 1 discriminator 1 view .LVU367
 217:MotorControl/motor.cpp **** }
 1572              		.loc 2 217 1 is_stmt 0 discriminator 1 view .LVU368
 1573 0066 0120     		movs	r0, #1
 1574 0068 02B0     		add	sp, sp, #8
 1575              	.LCFI26:
 1576              		.cfi_remember_state
 1577              		.cfi_def_cfa_offset 16
 1578              	.LVL101:
 1579              		.loc 2 217 1 discriminator 1 view .LVU369
 1580              		@ sp needed
 1581 006a 70BD     		pop	{r4, r5, r6, pc}
 1582              	.LVL102:
 1583              	.L71:
 1584              	.LCFI27:
 1585              		.cfi_restore_state
 1586              	.LBB1642:
 212:MotorControl/motor.cpp ****         }
ARM GAS  /tmp/ccofeNgA.s 			page 122


 1587              		.loc 2 212 13 is_stmt 1 view .LVU370
 212:MotorControl/motor.cpp ****         }
 1588              		.loc 2 212 30 is_stmt 0 view .LVU371
 1589 006c 4FF40002 		mov	r2, #8388608
 1590 0070 0023     		movs	r3, #0
 1591 0072 04F19000 		add	r0, r4, #144
 1592 0076 FFF7FEFF 		bl	_ZoRRN10ODriveIntf9MotorIntf5ErrorES1_
 1593              	.LVL103:
 1594 007a F2E7     		b	.L72
 1595              	.L74:
 1596              	.LVL104:
 1597              	.LBB1632:
 1598              	.LBI1632:
 1599              		.loc 12 57 5 is_stmt 1 view .LVU372
 1600              	.LBB1633:
 1601              		.loc 12 57 33 view .LVU373
 1602              	.LBB1634:
 1603              	.LBI1634:
  37:./Drivers/STM32/stm32_system.h ****     __set_PRIMASK(priority_mask);
 1604              		.loc 12 37 20 view .LVU374
 1605              	.LBE1634:
 1606              	.LBE1633:
 1607              	.LBE1632:
 1608              	.LBE1642:
  38:./Drivers/STM32/stm32_system.h **** }
 1609              		.loc 12 38 5 view .LVU375
 1610              	.LBB1643:
 1611              	.LBB1639:
 1612              	.LBB1638:
 1613              	.LBB1637:
 1614              	.LBB1635:
 1615              	.LBI1635:
 412:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 1616              		.loc 13 412 27 view .LVU376
 1617              	.LBB1636:
 1618              		.loc 13 414 3 view .LVU377
 1619              		.syntax unified
 1620              	@ 414 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 1621 007c 86F31088 		MSR primask, r6
 1622              	@ 0 "" 2
 1623              	.LVL105:
 1624              	.LEHB2:
 1625              		.loc 13 414 3 is_stmt 0 view .LVU378
 1626              		.thumb
 1627              		.syntax unified
 1628 0080 FFF7FEFF 		bl	__cxa_end_cleanup
 1629              	.LVL106:
 1630              	.LEHE2:
 1631              	.L78:
 1632              		.align	2
 1633              	.L77:
 1634 0084 00400000 		.word	odrv+16384
 1635 0088 00000000 		.word	brake_resistor_armed
 1636              	.LBE1636:
 1637              	.LBE1635:
 1638              	.LBE1637:
 1639              	.LBE1638:
ARM GAS  /tmp/ccofeNgA.s 			page 123


 1640              	.LBE1639:
 1641              	.LBE1643:
 1642              		.cfi_endproc
 1643              	.LFE5294:
 1644              		.global	__gxx_personality_v0
 1645              		.personality	__gxx_personality_v0
 1646              		.handlerdata
 1647              	.LLSDA5294:
 1648 0008 FF       		.byte	0xff
 1649 0009 FF       		.byte	0xff
 1650 000a 01       		.byte	0x1
 1651 000b 0D       		.uleb128 .LLSDACSE5294-.LLSDACSB5294
 1652              	.LLSDACSB5294:
 1653 000c 14       		.uleb128 .LEHB0-.LFB5294
 1654 000d 02       		.uleb128 .LEHE0-.LEHB0
 1655 000e 00       		.uleb128 0
 1656 000f 00       		.uleb128 0
 1657 0010 30       		.uleb128 .LEHB1-.LFB5294
 1658 0011 1A       		.uleb128 .LEHE1-.LEHB1
 1659 0012 7C       		.uleb128 .L74-.LFB5294
 1660 0013 00       		.uleb128 0
 1661 0014 8001     		.uleb128 .LEHB2-.LFB5294
 1662 0016 04       		.uleb128 .LEHE2-.LEHB2
 1663 0017 00       		.uleb128 0
 1664 0018 00       		.uleb128 0
 1665              	.LLSDACSE5294:
 1666              		.section	.text._ZN5Motor3armEP15PhaseControlLawILj3EE
 1667              		.fnend
 1669              		.section	.text._ZN5Motor6disarmEPb,"ax",%progbits
 1670              		.align	1
 1671              		.global	_ZN5Motor6disarmEPb
 1672              		.syntax unified
 1673              		.thumb
 1674              		.thumb_func
 1676              	_ZN5Motor6disarmEPb:
 1677              		.fnstart
 1678              	.LVL107:
 1679              	.LFB5296:
 218:MotorControl/motor.cpp **** 
 219:MotorControl/motor.cpp **** /**
 220:MotorControl/motor.cpp ****  * @brief Updates the phase PWM timings unless the motor is disarmed.
 221:MotorControl/motor.cpp ****  *
 222:MotorControl/motor.cpp ****  * If the motor is armed, the PWM timings come into effect at the next update
 223:MotorControl/motor.cpp ****  * event (and are enabled if they weren't already), unless the motor is disarmed
 224:MotorControl/motor.cpp ****  * prior to that.
 225:MotorControl/motor.cpp ****  * 
 226:MotorControl/motor.cpp ****  * @param tentative: If true, the update is not counted as "refresh".
 227:MotorControl/motor.cpp ****  */
 228:MotorControl/motor.cpp **** void Motor::apply_pwm_timings(uint16_t timings[3], bool tentative) {
 229:MotorControl/motor.cpp ****     CRITICAL_SECTION() {
 230:MotorControl/motor.cpp ****         if (odrv.config_.enable_brake_resistor && !brake_resistor_armed) {
 231:MotorControl/motor.cpp ****             disarm_with_error(ERROR_BRAKE_RESISTOR_DISARMED);
 232:MotorControl/motor.cpp ****         }
 233:MotorControl/motor.cpp **** 
 234:MotorControl/motor.cpp ****         TIM_HandleTypeDef* htim = timer_;
 235:MotorControl/motor.cpp ****         TIM_TypeDef* tim = htim->Instance;
 236:MotorControl/motor.cpp ****         tim->CCR1 = timings[0];
ARM GAS  /tmp/ccofeNgA.s 			page 124


 237:MotorControl/motor.cpp ****         tim->CCR2 = timings[1];
 238:MotorControl/motor.cpp ****         tim->CCR3 = timings[2];
 239:MotorControl/motor.cpp ****         
 240:MotorControl/motor.cpp ****         if (!tentative) {
 241:MotorControl/motor.cpp ****             if (is_armed_) {
 242:MotorControl/motor.cpp ****                 // Set the Automatic Output Enable so that the Master Output Enable
 243:MotorControl/motor.cpp ****                 // bit will be automatically enabled on the next update event.
 244:MotorControl/motor.cpp ****                 tim->BDTR |= TIM_BDTR_AOE;
 245:MotorControl/motor.cpp ****             }
 246:MotorControl/motor.cpp ****         }
 247:MotorControl/motor.cpp ****         
 248:MotorControl/motor.cpp ****         // If a timer update event occurred just now while we were updating the
 249:MotorControl/motor.cpp ****         // timings, we can't be sure what values the shadow registers now contain,
 250:MotorControl/motor.cpp ****         // so we must disarm the motor.
 251:MotorControl/motor.cpp ****         // (this also protects against the case where the update interrupt has too
 252:MotorControl/motor.cpp ****         // low priority, but that should not happen)
 253:MotorControl/motor.cpp ****         //if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE)) {
 254:MotorControl/motor.cpp ****         //    disarm_with_error(ERROR_CONTROL_DEADLINE_MISSED);
 255:MotorControl/motor.cpp ****         //}
 256:MotorControl/motor.cpp ****     }
 257:MotorControl/motor.cpp **** }
 258:MotorControl/motor.cpp **** 
 259:MotorControl/motor.cpp **** /**
 260:MotorControl/motor.cpp ****  * @brief Disarms the motor PWM.
 261:MotorControl/motor.cpp ****  * 
 262:MotorControl/motor.cpp ****  * After this function returns, it is guaranteed that all three
 263:MotorControl/motor.cpp ****  * motor phases are floating and will not be enabled again until
 264:MotorControl/motor.cpp ****  * arm() is called.
 265:MotorControl/motor.cpp ****  */
 266:MotorControl/motor.cpp **** bool Motor::disarm(bool* p_was_armed) {
 1680              		.loc 2 266 39 is_stmt 1 view -0
 1681              		.cfi_startproc
 1682              		@ args = 0, pretend = 0, frame = 8
 1683              		@ frame_needed = 0, uses_anonymous_args = 0
 1684              		.loc 2 266 39 is_stmt 0 view .LVU380
 1685 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1686              		.save {r4, r5, r6, r7, lr}
 1687              	.LCFI28:
 1688              		.cfi_def_cfa_offset 20
 1689              		.cfi_offset 4, -20
 1690              		.cfi_offset 5, -16
 1691              		.cfi_offset 6, -12
 1692              		.cfi_offset 7, -8
 1693              		.cfi_offset 14, -4
 1694              		.pad #12
 1695 0002 83B0     		sub	sp, sp, #12
 1696              	.LCFI29:
 1697              		.cfi_def_cfa_offset 32
 1698 0004 0C46     		mov	r4, r1
 267:MotorControl/motor.cpp ****     bool was_armed;
 1699              		.loc 2 267 5 is_stmt 1 view .LVU381
 268:MotorControl/motor.cpp ****     
 269:MotorControl/motor.cpp ****     CRITICAL_SECTION() {
 1700              		.loc 2 269 5 view .LVU382
 1701              	.LVL108:
 1702              	.LBB1644:
 1703              	.LBB1645:
ARM GAS  /tmp/ccofeNgA.s 			page 125


 1704              	.LBI1645:
  56:./Drivers/STM32/stm32_system.h ****     ~CriticalSectionContext() { cpu_exit_critical(mask_); }
 1705              		.loc 12 56 5 view .LVU383
 1706              	.LBB1646:
 1707              	.LBB1647:
 1708              	.LBB1648:
 1709              	.LBI1648:
  31:./Drivers/STM32/stm32_system.h ****     uint32_t primask = __get_PRIMASK();
 1710              		.loc 12 31 24 view .LVU384
 1711              	.LBB1649:
  32:./Drivers/STM32/stm32_system.h ****     __disable_irq();
 1712              		.loc 12 32 5 view .LVU385
 1713              	.LBB1650:
 1714              	.LBI1650:
 382:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 1715              		.loc 13 382 31 view .LVU386
 1716              	.LBB1651:
 384:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 1717              		.loc 13 384 3 view .LVU387
 386:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1718              		.loc 13 386 3 view .LVU388
 1719              		.syntax unified
 1720              	@ 386 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 1721 0006 EFF31081 		MRS r1, primask
 1722              	@ 0 "" 2
 1723              	.LVL109:
 387:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 1724              		.loc 13 387 3 view .LVU389
 387:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 1725              		.loc 13 387 3 is_stmt 0 view .LVU390
 1726              		.thumb
 1727              		.syntax unified
 1728              	.LBE1651:
 1729              	.LBE1650:
  33:./Drivers/STM32/stm32_system.h ****     return primask;
 1730              		.loc 12 33 5 is_stmt 1 view .LVU391
 1731              	.LBB1652:
 1732              	.LBI1652:
 140:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 1733              		.loc 13 140 27 view .LVU392
 1734              	.LBB1653:
 142:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 1735              		.loc 13 142 3 view .LVU393
 1736              		.syntax unified
 1737              	@ 142 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 1738 000a 72B6     		cpsid i
 1739              	@ 0 "" 2
 1740              		.thumb
 1741              		.syntax unified
 1742              	.LBE1653:
 1743              	.LBE1652:
  34:./Drivers/STM32/stm32_system.h **** }
 1744              		.loc 12 34 5 view .LVU394
 1745              	.LBE1649:
 1746              	.LBE1648:
  56:./Drivers/STM32/stm32_system.h ****     ~CriticalSectionContext() { cpu_exit_critical(mask_); }
 1747              		.loc 12 56 58 is_stmt 0 view .LVU395
ARM GAS  /tmp/ccofeNgA.s 			page 126


 1748 000c 0091     		str	r1, [sp]
 1749 000e 0023     		movs	r3, #0
 1750 0010 8DF80430 		strb	r3, [sp, #4]
 1751              	.LVL110:
  56:./Drivers/STM32/stm32_system.h ****     ~CriticalSectionContext() { cpu_exit_critical(mask_); }
 1752              		.loc 12 56 58 view .LVU396
 1753              	.LBE1647:
 1754              	.LBE1646:
 1755              	.LBE1645:
 1756              	.LBE1644:
  55:./Drivers/STM32/stm32_system.h ****     CriticalSectionContext() : mask_(cpu_enter_critical()) {}
 1757              		.loc 12 55 23 is_stmt 1 view .LVU397
 1758              	.LBB1663:
 1759              	.LBB1654:
 270:MotorControl/motor.cpp ****         was_armed = is_armed_;
 1760              		.loc 2 270 9 view .LVU398
 1761              		.loc 2 270 19 is_stmt 0 view .LVU399
 1762 0014 90F89C50 		ldrb	r5, [r0, #156]	@ zero_extendqisi2
 1763              	.LVL111:
 271:MotorControl/motor.cpp ****         if (is_armed_) {
 1764              		.loc 2 271 9 is_stmt 1 view .LVU400
 272:MotorControl/motor.cpp ****             gate_driver_.set_enabled(false);
 273:MotorControl/motor.cpp ****         }
 274:MotorControl/motor.cpp ****         is_armed_ = false;
 1765              		.loc 2 274 9 view .LVU401
 1766              		.loc 2 274 19 is_stmt 0 view .LVU402
 1767 0018 80F89C30 		strb	r3, [r0, #156]
 275:MotorControl/motor.cpp ****         armed_state_ = 0;
 1768              		.loc 2 275 9 is_stmt 1 view .LVU403
 1769              		.loc 2 275 22 is_stmt 0 view .LVU404
 1770 001c 80F89D30 		strb	r3, [r0, #157]
 276:MotorControl/motor.cpp ****         TIM_HandleTypeDef* timer = timer_;
 1771              		.loc 2 276 9 is_stmt 1 view .LVU405
 1772              		.loc 2 276 28 is_stmt 0 view .LVU406
 1773 0020 0668     		ldr	r6, [r0]
 1774              	.LVL112:
 277:MotorControl/motor.cpp ****         timer->Instance->BDTR &= ~TIM_BDTR_AOE; // prevent the PWMs from automatically enabling at 
 1775              		.loc 2 277 9 is_stmt 1 view .LVU407
 1776              		.loc 2 277 16 is_stmt 0 view .LVU408
 1777 0022 3768     		ldr	r7, [r6]
 1778              		.loc 2 277 31 view .LVU409
 1779 0024 7A6C     		ldr	r2, [r7, #68]
 1780 0026 22F48042 		bic	r2, r2, #16384
 1781 002a 7A64     		str	r2, [r7, #68]
 278:MotorControl/motor.cpp ****         __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(timer);
 1782              		.loc 2 278 9 is_stmt 1 view .LVU410
 1783 002c 3668     		ldr	r6, [r6]
 1784              	.LVL113:
 1785              		.loc 2 278 9 is_stmt 0 view .LVU411
 1786 002e 726C     		ldr	r2, [r6, #68]
 1787 0030 22F40042 		bic	r2, r2, #32768
 1788 0034 7264     		str	r2, [r6, #68]
 279:MotorControl/motor.cpp ****         control_law_ = nullptr;
 1789              		.loc 2 279 9 is_stmt 1 view .LVU412
 1790              		.loc 2 279 22 is_stmt 0 view .LVU413
 1791 0036 C0F8A831 		str	r3, [r0, #424]
 1792              	.LVL114:
ARM GAS  /tmp/ccofeNgA.s 			page 127


 1793              		.loc 2 279 22 view .LVU414
 1794              	.LBE1654:
 1795              	.LBB1655:
 1796              	.LBI1655:
 1797              		.loc 12 57 5 is_stmt 1 view .LVU415
 1798              	.LBB1656:
 1799              		.loc 12 57 33 view .LVU416
 1800              	.LBB1657:
 1801              	.LBI1657:
  37:./Drivers/STM32/stm32_system.h ****     __set_PRIMASK(priority_mask);
 1802              		.loc 12 37 20 view .LVU417
 1803              	.LBE1657:
 1804              	.LBE1656:
 1805              	.LBE1655:
 1806              	.LBE1663:
  38:./Drivers/STM32/stm32_system.h **** }
 1807              		.loc 12 38 5 view .LVU418
 1808              	.LBB1664:
 1809              	.LBB1662:
 1810              	.LBB1661:
 1811              	.LBB1660:
 1812              	.LBB1658:
 1813              	.LBI1658:
 412:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 1814              		.loc 13 412 27 view .LVU419
 1815              	.LBB1659:
 1816              		.loc 13 414 3 view .LVU420
 1817              		.syntax unified
 1818              	@ 414 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 1819 003a 81F31088 		MSR primask, r1
 1820              	@ 0 "" 2
 1821              	.LVL115:
 1822              		.loc 13 414 3 is_stmt 0 view .LVU421
 1823              		.thumb
 1824              		.syntax unified
 1825              	.LBE1659:
 1826              	.LBE1658:
 1827              	.LBE1660:
 1828              	.LBE1661:
 1829              	.LBE1662:
 1830              	.LBE1664:
 280:MotorControl/motor.cpp ****     }
 281:MotorControl/motor.cpp **** 
 282:MotorControl/motor.cpp ****     // Check necessary to prevent infinite recursion
 283:MotorControl/motor.cpp ****     if (was_armed) {
 1831              		.loc 2 283 5 is_stmt 1 view .LVU422
 1832 003e 25B9     		cbnz	r5, .L83
 1833              	.LVL116:
 1834              	.L80:
 284:MotorControl/motor.cpp ****         update_brake_current();
 285:MotorControl/motor.cpp ****     }
 286:MotorControl/motor.cpp **** 
 287:MotorControl/motor.cpp ****     if (p_was_armed) {
 1835              		.loc 2 287 5 view .LVU423
 1836 0040 04B1     		cbz	r4, .L81
 288:MotorControl/motor.cpp ****         *p_was_armed = was_armed;
 1837              		.loc 2 288 9 view .LVU424
ARM GAS  /tmp/ccofeNgA.s 			page 128


 1838              		.loc 2 288 22 is_stmt 0 view .LVU425
 1839 0042 2570     		strb	r5, [r4]
 1840              	.L81:
 289:MotorControl/motor.cpp ****     }
 290:MotorControl/motor.cpp **** 
 291:MotorControl/motor.cpp ****     return true;
 1841              		.loc 2 291 5 is_stmt 1 view .LVU426
 292:MotorControl/motor.cpp **** }
 1842              		.loc 2 292 1 is_stmt 0 view .LVU427
 1843 0044 0120     		movs	r0, #1
 1844 0046 03B0     		add	sp, sp, #12
 1845              	.LCFI30:
 1846              		.cfi_remember_state
 1847              		.cfi_def_cfa_offset 20
 1848              	.LVL117:
 1849              		.loc 2 292 1 view .LVU428
 1850              		@ sp needed
 1851 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 1852              	.LVL118:
 1853              	.L83:
 1854              	.LCFI31:
 1855              		.cfi_restore_state
 284:MotorControl/motor.cpp ****     }
 1856              		.loc 2 284 9 is_stmt 1 view .LVU429
 284:MotorControl/motor.cpp ****     }
 1857              		.loc 2 284 29 is_stmt 0 view .LVU430
 1858 004a FFF7FEFF 		bl	update_brake_current
 1859              	.LVL119:
 284:MotorControl/motor.cpp ****     }
 1860              		.loc 2 284 29 view .LVU431
 1861 004e F7E7     		b	.L80
 1862              		.cfi_endproc
 1863              	.LFE5296:
 1864              		.fnend
 1866              		.section	.text._ZN5Motor31update_current_controller_gainsEv,"ax",%progbits
 1867              		.align	1
 1868              		.global	_ZN5Motor31update_current_controller_gainsEv
 1869              		.syntax unified
 1870              		.thumb
 1871              		.thumb_func
 1873              	_ZN5Motor31update_current_controller_gainsEv:
 1874              		.fnstart
 1875              	.LVL120:
 1876              	.LFB5297:
 293:MotorControl/motor.cpp **** 
 294:MotorControl/motor.cpp **** // @brief Tune the current controller based on phase resistance and inductance
 295:MotorControl/motor.cpp **** // This should be invoked whenever one of these values changes.
 296:MotorControl/motor.cpp **** // TODO: allow update on user-request or update automatically via hooks
 297:MotorControl/motor.cpp **** void Motor::update_current_controller_gains() {
 1877              		.loc 2 297 47 is_stmt 1 view -0
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 8
 1880              		@ frame_needed = 0, uses_anonymous_args = 0
 1881              		@ link register save eliminated.
 1882              		.loc 2 297 47 is_stmt 0 view .LVU433
 1883 0000 82B0     		sub	sp, sp, #8
 1884              	.LCFI32:
ARM GAS  /tmp/ccofeNgA.s 			page 129


 1885              		.cfi_def_cfa_offset 8
 1886 0002 0346     		mov	r3, r0
 298:MotorControl/motor.cpp ****     // Calculate current control gains
 299:MotorControl/motor.cpp ****     float p_gain = config_.current_control_bandwidth * config_.phase_inductance;
 1887              		.loc 2 299 5 is_stmt 1 view .LVU434
 1888              		.loc 2 299 28 is_stmt 0 view .LVU435
 1889 0004 D0ED137A 		vldr.32	s15, [r0, #76]
 1890              		.loc 2 299 64 view .LVU436
 1891 0008 D0ED0B6A 		vldr.32	s13, [r0, #44]
 1892              		.loc 2 299 54 view .LVU437
 1893 000c 67EEA67A 		vmul.f32	s15, s15, s13
 1894              	.LVL121:
 300:MotorControl/motor.cpp ****     float plant_pole = config_.phase_resistance / config_.phase_inductance;
 1895              		.loc 2 300 5 is_stmt 1 view .LVU438
 1896              		.loc 2 300 32 is_stmt 0 view .LVU439
 1897 0010 90ED0C6A 		vldr.32	s12, [r0, #48]
 1898              		.loc 2 300 11 view .LVU440
 1899 0014 86EE267A 		vdiv.f32	s14, s12, s13
 1900              	.LVL122:
 301:MotorControl/motor.cpp ****     current_control_.pi_gains_ = {p_gain, plant_pole * p_gain};
 1901              		.loc 2 301 5 is_stmt 1 view .LVU441
 1902              		.loc 2 301 54 is_stmt 0 view .LVU442
 1903 0018 27EE877A 		vmul.f32	s14, s15, s14
 1904              	.LVL123:
 1905              	.LBB1665:
 1906              	.LBI1665:
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1907              		.loc 4 352 12 is_stmt 1 view .LVU443
 1908              	.LBB1666:
 1909              	.LBB1667:
 1910              	.LBB1668:
 1911              	.LBI1668:
 1912              		.loc 5 76 5 view .LVU444
 1913              		.loc 5 76 5 is_stmt 0 view .LVU445
 1914              	.LBE1668:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 1915              		.loc 4 353 64 view .LVU446
 1916 001c CDED007A 		vstr.32	s15, [sp]
 1917              	.LVL124:
 1918              	.LBB1669:
 1919              	.LBI1669:
 1920              		.loc 5 76 5 is_stmt 1 view .LVU447
 1921              		.loc 5 76 5 is_stmt 0 view .LVU448
 1922              	.LBE1669:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 1923              		.loc 4 353 64 view .LVU449
 1924 0020 8DED017A 		vstr.32	s14, [sp, #4]
 1925              	.LVL125:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 1926              		.loc 4 353 64 view .LVU450
 1927              	.LBE1667:
 1928              	.LBE1666:
 1929              	.LBE1665:
 1930              	.LBB1670:
 1931              	.LBI1670:
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 1932              		.loc 3 788 2 is_stmt 1 view .LVU451
ARM GAS  /tmp/ccofeNgA.s 			page 130


 1933              	.LBB1671:
 1934              	.LBB1672:
 1935              	.LBI1672:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 1936              		.loc 3 433 22 view .LVU452
 1937              	.LBB1673:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1938              		.loc 3 434 58 is_stmt 0 view .LVU453
 1939 0024 90F8D820 		ldrb	r2, [r0, #216]	@ zero_extendqisi2
 1940              	.LVL126:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 1941              		.loc 3 434 58 view .LVU454
 1942              	.LBE1673:
 1943              	.LBE1672:
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 1944              		.loc 3 790 4 view .LVU455
 1945 0028 2AB1     		cbz	r2, .L85
 1946              	.LVL127:
 1947              	.LBB1674:
 1948              	.LBI1674:
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 1949              		.loc 4 401 7 is_stmt 1 view .LVU456
 1950              	.LBB1675:
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 1951              		.loc 4 408 8 is_stmt 0 view .LVU457
 1952 002a C0ED347A 		vstr.32	s15, [r0, #208]
 1953              		.loc 4 409 9 view .LVU458
 1954 002e 80ED357A 		vstr.32	s14, [r0, #212]
 1955              	.LVL128:
 1956              	.L84:
 1957              		.loc 4 409 9 view .LVU459
 1958              	.LBE1675:
 1959              	.LBE1674:
 1960              	.LBE1671:
 1961              	.LBE1670:
 302:MotorControl/motor.cpp **** }
 1962              		.loc 2 302 1 view .LVU460
 1963 0032 02B0     		add	sp, sp, #8
 1964              	.LCFI33:
 1965              		.cfi_remember_state
 1966              		.cfi_def_cfa_offset 0
 1967              		@ sp needed
 1968 0034 7047     		bx	lr
 1969              	.LVL129:
 1970              	.L85:
 1971              	.LCFI34:
 1972              		.cfi_restore_state
 1973              	.LBB1681:
 1974              	.LBB1679:
 1975              	.LBB1676:
 1976              	.LBI1676:
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1977              		.loc 3 415 2 is_stmt 1 view .LVU461
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 1978              		.loc 3 415 2 is_stmt 0 view .LVU462
 1979              	.LBE1676:
 1980              	.LBE1679:
ARM GAS  /tmp/ccofeNgA.s 			page 131


 1981              	.LBE1681:
 1982              		.loc 6 175 3 is_stmt 1 view .LVU463
 1983              	.LBB1682:
 1984              	.LBB1680:
 1985              	.LBB1678:
 1986              	.LBB1677:
 1987              		.loc 6 175 3 is_stmt 0 view .LVU464
 1988 0036 00F1D002 		add	r2, r0, #208
 1989 003a 02A9     		add	r1, sp, #8
 1990 003c 11E90300 		ldmdb	r1, {r0, r1}
 1991              	.LVL130:
 1992              		.loc 6 175 3 view .LVU465
 1993 0040 82E80300 		stm	r2, {r0, r1}
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 1994              		.loc 3 421 51 view .LVU466
 1995 0044 0122     		movs	r2, #1
 1996 0046 83F8D820 		strb	r2, [r3, #216]
 1997              	.LVL131:
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 1998              		.loc 3 421 51 view .LVU467
 1999              	.LBE1677:
 2000              	.LBE1678:
 2001              	.LBE1680:
 2002              	.LBE1682:
 2003              		.loc 2 302 1 view .LVU468
 2004 004a F2E7     		b	.L84
 2005              		.cfi_endproc
 2006              	.LFE5297:
 2007              		.cantunwind
 2008              		.fnend
 2010              		.section	.text._ZN5Motor12apply_configEv,"ax",%progbits
 2011              		.align	1
 2012              		.global	_ZN5Motor12apply_configEv
 2013              		.syntax unified
 2014              		.thumb
 2015              		.thumb_func
 2017              	_ZN5Motor12apply_configEv:
 2018              		.fnstart
 2019              	.LVL132:
 2020              	.LFB5298:
 303:MotorControl/motor.cpp **** 
 304:MotorControl/motor.cpp **** bool Motor::apply_config() {
 2021              		.loc 2 304 28 is_stmt 1 view -0
 2022              		.cfi_startproc
 2023              		@ args = 0, pretend = 0, frame = 0
 2024              		@ frame_needed = 0, uses_anonymous_args = 0
 2025              		.loc 2 304 28 is_stmt 0 view .LVU470
 2026 0000 08B5     		push	{r3, lr}
 2027              	.LCFI35:
 2028              		.cfi_def_cfa_offset 8
 2029              		.cfi_offset 3, -8
 2030              		.cfi_offset 14, -4
 305:MotorControl/motor.cpp ****     config_.parent = this;
 2031              		.loc 2 305 5 is_stmt 1 view .LVU471
 2032              		.loc 2 305 20 is_stmt 0 view .LVU472
 2033 0002 C0F88000 		str	r0, [r0, #128]
 306:MotorControl/motor.cpp ****     is_calibrated_ = config_.pre_calibrated;
ARM GAS  /tmp/ccofeNgA.s 			page 132


 2034              		.loc 2 306 5 is_stmt 1 view .LVU473
 2035              		.loc 2 306 30 is_stmt 0 view .LVU474
 2036 0006 027F     		ldrb	r2, [r0, #28]	@ zero_extendqisi2
 2037              		.loc 2 306 20 view .LVU475
 2038 0008 80F89E20 		strb	r2, [r0, #158]
 307:MotorControl/motor.cpp ****     update_current_controller_gains();
 2039              		.loc 2 307 5 is_stmt 1 view .LVU476
 2040              		.loc 2 307 36 is_stmt 0 view .LVU477
 2041 000c FFF7FEFF 		bl	_ZN5Motor31update_current_controller_gainsEv
 2042              	.LVL133:
 308:MotorControl/motor.cpp ****     return true;
 2043              		.loc 2 308 5 is_stmt 1 view .LVU478
 309:MotorControl/motor.cpp **** }
 2044              		.loc 2 309 1 is_stmt 0 view .LVU479
 2045 0010 0120     		movs	r0, #1
 2046 0012 08BD     		pop	{r3, pc}
 2047              		.cfi_endproc
 2048              	.LFE5298:
 2049              		.cantunwind
 2050              		.fnend
 2052              		.section	.text._ZN5MotorC2EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32
 2053              		.align	1
 2054              		.global	_ZN5MotorC2EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32Offboar
 2055              		.syntax unified
 2056              		.thumb
 2057              		.thumb_func
 2059              	_ZN5MotorC2EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32OffboardThermist
 2060              		.fnstart
 2061              	.LVL134:
 2062              	.LFB5292:
 151:MotorControl/motor.cpp ****              uint8_t current_sensor_mask,
 2063              		.loc 2 151 1 is_stmt 1 view -0
 2064              		.cfi_startproc
 2065              		@ args = 12, pretend = 0, frame = 24
 2066              		@ frame_needed = 0, uses_anonymous_args = 0
 151:MotorControl/motor.cpp ****              uint8_t current_sensor_mask,
 2067              		.loc 2 151 1 is_stmt 0 view .LVU481
 2068 0000 30B5     		push	{r4, r5, lr}
 2069              	.LCFI36:
 2070              		.cfi_def_cfa_offset 12
 2071              		.cfi_offset 4, -12
 2072              		.cfi_offset 5, -8
 2073              		.cfi_offset 14, -4
 2074 0002 87B0     		sub	sp, sp, #28
 2075              	.LCFI37:
 2076              		.cfi_def_cfa_offset 40
 2077 0004 0446     		mov	r4, r0
 2078              	.LBB1952:
 164:MotorControl/motor.cpp ****     apply_config();
 2079              		.loc 2 164 43 view .LVU482
 2080 0006 0160     		str	r1, [r0]
 2081 0008 0271     		strb	r2, [r0, #4]
 2082 000a 80ED020A 		vstr.32	s0, [r0, #8]
 2083 000e C360     		str	r3, [r0, #12]
 2084 0010 0A9B     		ldr	r3, [sp, #40]
 2085              	.LVL135:
 164:MotorControl/motor.cpp ****     apply_config();
ARM GAS  /tmp/ccofeNgA.s 			page 133


 2086              		.loc 2 164 43 view .LVU483
 2087 0012 0361     		str	r3, [r0, #16]
 2088 0014 0B9B     		ldr	r3, [sp, #44]
 2089 0016 4361     		str	r3, [r0, #20]
 2090 0018 0C9B     		ldr	r3, [sp, #48]
 2091 001a 8361     		str	r3, [r0, #24]
 2092 001c 00F11C01 		add	r1, r0, #28
 2093              	.LVL136:
 2094              	.LBB1953:
 2095              	.LBI1953:
 2096              		.file 14 "MotorControl/motor.hpp"
   1:MotorControl/motor.hpp **** #ifndef __MOTOR_HPP
   2:MotorControl/motor.hpp **** #define __MOTOR_HPP
   3:MotorControl/motor.hpp **** 
   4:MotorControl/motor.hpp **** class Axis; // declared in axis.hpp
   5:MotorControl/motor.hpp **** class Motor;
   6:MotorControl/motor.hpp **** 
   7:MotorControl/motor.hpp **** #include <board.h>
   8:MotorControl/motor.hpp **** #include <autogen/interfaces.hpp>
   9:MotorControl/motor.hpp **** #include "foc.hpp"
  10:MotorControl/motor.hpp **** 
  11:MotorControl/motor.hpp **** class Motor : public ODriveIntf::MotorIntf {
  12:MotorControl/motor.hpp **** public:
  13:MotorControl/motor.hpp **** 
  14:MotorControl/motor.hpp ****     // NOTE: for gimbal motors, all units of Nm are instead V.
  15:MotorControl/motor.hpp ****     // example: vel_gain is [V/(turn/s)] instead of [Nm/(turn/s)]
  16:MotorControl/motor.hpp ****     // example: current_lim and calibration_current will instead determine the maximum voltage appl
  17:MotorControl/motor.hpp ****     struct Config_t {
 2097              		.loc 14 17 12 is_stmt 1 view .LVU484
 2098              	.LBB1954:
 2099 0020 0022     		movs	r2, #0
 2100              	.LVL137:
 2101              		.loc 14 17 12 is_stmt 0 view .LVU485
 2102 0022 0277     		strb	r2, [r0, #28]
 2103 0024 0723     		movs	r3, #7
 2104 0026 4B60     		str	r3, [r1, #4]
 2105 0028 6B48     		ldr	r0, .L92+8
 2106              	.LVL138:
 2107              		.loc 14 17 12 view .LVU486
 2108 002a 8860     		str	r0, [r1, #8]	@ float
 2109 002c 4FF08043 		mov	r3, #1073741824
 2110 0030 CB60     		str	r3, [r1, #12]	@ float
 2111 0032 0023     		movs	r3, #0
 2112 0034 0B61     		str	r3, [r1, #16]	@ float
 2113 0036 4B61     		str	r3, [r1, #20]	@ float
 2114 0038 684D     		ldr	r5, .L92+12
 2115 003a 8D61     		str	r5, [r1, #24]	@ float
 2116 003c 0A77     		strb	r2, [r1, #28]
 2117 003e 0862     		str	r0, [r1, #32]	@ float
 2118 0040 4FF08245 		mov	r5, #1090519040
 2119 0044 4D62     		str	r5, [r1, #36]	@ float
 2120 0046 4FF0FF45 		mov	r5, #2139095040
 2121 004a 8D62     		str	r5, [r1, #40]	@ float
 2122 004c DFF8A8C1 		ldr	ip, .L92+40
 2123 0050 C1F82CC0 		str	ip, [r1, #44]	@ float
 2124 0054 DFF8A4C1 		ldr	ip, .L92+44
 2125 0058 C1F830C0 		str	ip, [r1, #48]	@ float
ARM GAS  /tmp/ccofeNgA.s 			page 134


 2126 005c DFF8A0C1 		ldr	ip, .L92+48
 2127 0060 C1F834C0 		str	ip, [r1, #52]	@ float
 2128 0064 DFF89CC1 		ldr	ip, .L92+52
 2129 0068 C1F838C0 		str	ip, [r1, #56]	@ float
 2130 006c C863     		str	r0, [r1, #60]	@ float
 2131 006e 0864     		str	r0, [r1, #64]	@ float
 2132 0070 81F84420 		strb	r2, [r1, #68]
 2133 0074 8864     		str	r0, [r1, #72]	@ float
 2134 0076 4FF07E5C 		mov	ip, #1065353216
 2135 007a C1F84CC0 		str	ip, [r1, #76]	@ float
 2136 007e 81F85020 		strb	r2, [r1, #80]
 2137 0082 81F85120 		strb	r2, [r1, #81]
 2138 0086 DFF880E1 		ldr	lr, .L92+56
 2139 008a C1F854E0 		str	lr, [r1, #84]	@ float
 2140 008e 8D65     		str	r5, [r1, #88]	@ float
 2141 0090 534D     		ldr	r5, .L92+16
 2142 0092 CD65     		str	r5, [r1, #92]	@ float
 2143 0094 534D     		ldr	r5, .L92+20
 2144 0096 0D66     		str	r5, [r1, #96]	@ float
 2145 0098 4A66     		str	r2, [r1, #100]
 2146              	.LVL139:
 2147              		.loc 14 17 12 view .LVU487
 2148              	.LBE1954:
 2149              	.LBE1953:
 164:MotorControl/motor.cpp ****     apply_config();
 2150              		.loc 2 164 43 view .LVU488
 2151 009a C4F88420 		str	r2, [r4, #132]
 2152 009e C4F88820 		str	r2, [r4, #136]
 2153 00a2 C4F88C20 		str	r2, [r4, #140]
 2154 00a6 9FED4A7B 		vldr.64	d7, .L92	@ int
 2155 00aa 84ED247B 		vstr.64	d7, [r4, #144]	@ int
 2156 00ae C4F89830 		str	r3, [r4, #152]	@ float
 2157 00b2 84F89C20 		strb	r2, [r4, #156]
 2158 00b6 84F89D20 		strb	r2, [r4, #157]
 2159 00ba 84F89E20 		strb	r2, [r4, #158]
 2160              	.LVL140:
 2161              	.LBB1955:
 2162              	.LBI1955:
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2163              		.loc 3 690 17 is_stmt 1 view .LVU489
 2164              	.LBB1956:
 2165              	.LBI1956:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2166              		.loc 3 602 17 view .LVU490
 2167              	.LBB1957:
 2168              	.LBI1957:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 2169              		.loc 3 302 7 view .LVU491
 2170              	.LBB1958:
 2171              	.LBI1958:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2172              		.loc 3 110 7 view .LVU492
 2173              	.LBB1959:
 2174              	.LBB1960:
 2175              	.LBI1960:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2176              		.loc 3 199 14 view .LVU493
ARM GAS  /tmp/ccofeNgA.s 			page 135


 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2177              		.loc 3 199 14 is_stmt 0 view .LVU494
 2178              	.LBE1960:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2179              		.loc 3 110 7 view .LVU495
 2180 00be 84F8AC20 		strb	r2, [r4, #172]
 2181              	.LVL141:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2182              		.loc 3 110 7 view .LVU496
 2183              	.LBE1959:
 2184              	.LBE1958:
 2185              	.LBE1957:
 2186              	.LBE1956:
 2187              	.LBE1955:
 164:MotorControl/motor.cpp ****     apply_config();
 2188              		.loc 2 164 43 view .LVU497
 2189 00c2 C4F8B030 		str	r3, [r4, #176]	@ float
 2190 00c6 C4F8B430 		str	r3, [r4, #180]	@ float
 2191 00ca C4F8B830 		str	r3, [r4, #184]	@ float
 2192 00ce C4F8BC30 		str	r3, [r4, #188]	@ float
 2193 00d2 C4F8C030 		str	r3, [r4, #192]	@ float
 2194 00d6 C4F8C430 		str	r3, [r4, #196]	@ float
 2195 00da 04F1C801 		add	r1, r4, #200
 2196              	.LVL142:
 2197              	.LBB1961:
 2198              	.LBI1961:
 2199              		.file 15 "MotorControl/foc.hpp"
   1:MotorControl/foc.hpp **** #ifndef __FOC_HPP
   2:MotorControl/foc.hpp **** #define __FOC_HPP
   3:MotorControl/foc.hpp **** 
   4:MotorControl/foc.hpp **** #include "phase_control_law.hpp"
   5:MotorControl/foc.hpp **** #include "component.hpp"
   6:MotorControl/foc.hpp **** 
   7:MotorControl/foc.hpp **** /**
   8:MotorControl/foc.hpp ****  * @brief Field oriented controller.
   9:MotorControl/foc.hpp ****  * 
  10:MotorControl/foc.hpp ****  * This controller can run in either current control mode or voltage control
  11:MotorControl/foc.hpp ****  * mode.
  12:MotorControl/foc.hpp ****  */
  13:MotorControl/foc.hpp **** class FieldOrientedController : public AlphaBetaFrameController, public ComponentBase {
 2200              		.loc 15 13 7 is_stmt 1 view .LVU498
 2201              	.LBB1962:
 2202              	.LBB1963:
 2203              	.LBI1963:
 2204              		.file 16 "MotorControl/phase_control_law.hpp"
   1:MotorControl/phase_control_law.hpp **** #ifndef __PHASE_CONTROL_LAW_HPP
   2:MotorControl/phase_control_law.hpp **** #define __PHASE_CONTROL_LAW_HPP
   3:MotorControl/phase_control_law.hpp **** 
   4:MotorControl/phase_control_law.hpp **** #include <autogen/interfaces.hpp>
   5:MotorControl/phase_control_law.hpp **** #include <variant>
   6:MotorControl/phase_control_law.hpp **** 
   7:MotorControl/phase_control_law.hpp **** template<size_t N_PHASES>
   8:MotorControl/phase_control_law.hpp **** class PhaseControlLaw {
   9:MotorControl/phase_control_law.hpp **** public:
  10:MotorControl/phase_control_law.hpp ****     /**
  11:MotorControl/phase_control_law.hpp ****      * @brief Called when this controller becomes the active controller.
  12:MotorControl/phase_control_law.hpp ****      */
ARM GAS  /tmp/ccofeNgA.s 			page 136


  13:MotorControl/phase_control_law.hpp ****     virtual void reset() = 0;
  14:MotorControl/phase_control_law.hpp **** 
  15:MotorControl/phase_control_law.hpp ****     /**
  16:MotorControl/phase_control_law.hpp ****      * @brief Informs the control law about a new set of measurements.
  17:MotorControl/phase_control_law.hpp ****      *
  18:MotorControl/phase_control_law.hpp ****      * This function gets called in a high priority interrupt context and should
  19:MotorControl/phase_control_law.hpp ****      * run fast.
  20:MotorControl/phase_control_law.hpp ****      *
  21:MotorControl/phase_control_law.hpp ****      * Beware that all inputs can be NAN.
  22:MotorControl/phase_control_law.hpp ****      *
  23:MotorControl/phase_control_law.hpp ****      * @param vbus_voltage: The most recently measured DC link voltage. Can be
  24:MotorControl/phase_control_law.hpp ****      *        std::nullopt if the measurement is not available or valid for any
  25:MotorControl/phase_control_law.hpp ****      *        reason.
  26:MotorControl/phase_control_law.hpp ****      * @param currents: The most recently measured (or inferred) phase currents
  27:MotorControl/phase_control_law.hpp ****      *        in Amps. Can be std::nullopt if no valid measurements are available
  28:MotorControl/phase_control_law.hpp ****      *        (e.g. because the opamp isn't started or because the sensors were
  29:MotorControl/phase_control_law.hpp ****      *        saturated).
  30:MotorControl/phase_control_law.hpp ****      * @param input_timestamp: The timestamp (in HCLK ticks) corresponding to
  31:MotorControl/phase_control_law.hpp ****      *        the vbus_voltage and current measurement.
  32:MotorControl/phase_control_law.hpp ****      */
  33:MotorControl/phase_control_law.hpp ****     virtual ODriveIntf::MotorIntf::Error on_measurement(
  34:MotorControl/phase_control_law.hpp ****             std::optional<float> vbus_voltage,
  35:MotorControl/phase_control_law.hpp ****             std::optional<std::array<float, N_PHASES>> currents,
  36:MotorControl/phase_control_law.hpp ****             uint32_t input_timestamp) = 0;
  37:MotorControl/phase_control_law.hpp **** 
  38:MotorControl/phase_control_law.hpp ****     /**
  39:MotorControl/phase_control_law.hpp ****      * @brief Shall calculate the PWM timings for the specified target time.
  40:MotorControl/phase_control_law.hpp ****      *
  41:MotorControl/phase_control_law.hpp ****      * This function gets called in a high priority interrupt context and should
  42:MotorControl/phase_control_law.hpp ****      * run fast.
  43:MotorControl/phase_control_law.hpp ****      *
  44:MotorControl/phase_control_law.hpp ****      * Beware that this function can be called before a call to on_measurement().
  45:MotorControl/phase_control_law.hpp ****      * 
  46:MotorControl/phase_control_law.hpp ****      * @param output_timestamp: The timestamp (in HCLK ticks) corresponding to
  47:MotorControl/phase_control_law.hpp ****      *        the middle of the time span during which the output will be
  48:MotorControl/phase_control_law.hpp ****      *        active.
  49:MotorControl/phase_control_law.hpp ****      * @param pwm_timings: This array referenced by this argument shall be
  50:MotorControl/phase_control_law.hpp ****      *        filled with the desired PWM timings. Each item corresponds to one
  51:MotorControl/phase_control_law.hpp ****      *        phase and must lie in [0.0f, 1.0f].
  52:MotorControl/phase_control_law.hpp ****      *        The function is not required to return valid PWM timings in case
  53:MotorControl/phase_control_law.hpp ****      *        of an error.
  54:MotorControl/phase_control_law.hpp ****      * @param ibus: The variable pointed to by this argument is set to the
  55:MotorControl/phase_control_law.hpp ****      *        estimated DC current around the output timestamp when the desired
  56:MotorControl/phase_control_law.hpp ****      *        PWM timings get applied.
  57:MotorControl/phase_control_law.hpp ****      *        The function is not required to return a valid I_bus estimate in
  58:MotorControl/phase_control_law.hpp ****      *        case of an error.
  59:MotorControl/phase_control_law.hpp ****      * 
  60:MotorControl/phase_control_law.hpp ****      * @returns: An error code or ERROR_NONE. If the function returns an error
  61:MotorControl/phase_control_law.hpp ****      *           the motor gets disarmed with one exception: If the controller
  62:MotorControl/phase_control_law.hpp ****      *           never returned valid PWM timings since it became active then it
  63:MotorControl/phase_control_law.hpp ****      *           is allowed to return ERROR_CONTROLLER_INITIALIZING without
  64:MotorControl/phase_control_law.hpp ****      *           triggering a motor disarm. In this phase the PWMs will not yet
  65:MotorControl/phase_control_law.hpp ****      *           be truly active.
  66:MotorControl/phase_control_law.hpp ****      */
  67:MotorControl/phase_control_law.hpp ****     virtual ODriveIntf::MotorIntf::Error get_output(
  68:MotorControl/phase_control_law.hpp ****             uint32_t output_timestamp,
  69:MotorControl/phase_control_law.hpp ****             float (&pwm_timings)[N_PHASES],
ARM GAS  /tmp/ccofeNgA.s 			page 137


  70:MotorControl/phase_control_law.hpp ****             std::optional<float>* ibus) = 0;
  71:MotorControl/phase_control_law.hpp **** };
  72:MotorControl/phase_control_law.hpp **** 
  73:MotorControl/phase_control_law.hpp **** class AlphaBetaFrameController : public PhaseControlLaw<3> {
 2205              		.loc 16 73 7 view .LVU499
 2206              	.LBB1964:
 2207              	.LBB1965:
 2208              	.LBI1965:
   8:MotorControl/phase_control_law.hpp **** public:
 2209              		.loc 16 8 7 view .LVU500
 2210              	.LBB1966:
 2211 00de 424D     		ldr	r5, .L92+24
 2212 00e0 C4F8C850 		str	r5, [r4, #200]
 2213              	.LVL143:
   8:MotorControl/phase_control_law.hpp **** public:
 2214              		.loc 16 8 7 is_stmt 0 view .LVU501
 2215              	.LBE1966:
 2216              	.LBE1965:
 2217              		.loc 16 73 7 view .LVU502
 2218 00e4 414D     		ldr	r5, .L92+28
 2219 00e6 C4F8C850 		str	r5, [r4, #200]
 2220              	.LVL144:
 2221              		.loc 16 73 7 view .LVU503
 2222              	.LBE1964:
 2223              	.LBE1963:
 2224              	.LBB1967:
 2225              	.LBI1967:
 2226              		.file 17 "./MotorControl/component.hpp"
   1:./MotorControl/component.hpp **** #ifndef __COMPONENT_HPP
   2:./MotorControl/component.hpp **** #define __COMPONENT_HPP
   3:./MotorControl/component.hpp **** 
   4:./MotorControl/component.hpp **** #include <stdint.h>
   5:./MotorControl/component.hpp **** #include <optional>
   6:./MotorControl/component.hpp **** #include <variant>
   7:./MotorControl/component.hpp **** 
   8:./MotorControl/component.hpp **** class ComponentBase {
 2227              		.loc 17 8 7 is_stmt 1 view .LVU504
 2228              	.LBB1968:
 2229 00ea 414D     		ldr	r5, .L92+32
 2230 00ec 4D60     		str	r5, [r1, #4]
 2231              	.LVL145:
 2232              		.loc 17 8 7 is_stmt 0 view .LVU505
 2233              	.LBE1968:
 2234              	.LBE1967:
 2235              		.loc 15 13 7 view .LVU506
 2236 00ee 414D     		ldr	r5, .L92+36
 2237 00f0 C4F8C850 		str	r5, [r4, #200]
 2238 00f4 2035     		adds	r5, r5, #32
 2239 00f6 4D60     		str	r5, [r1, #4]
 2240              	.LVL146:
 2241              	.LBB1969:
 2242              	.LBI1969:
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2243              		.loc 3 690 17 is_stmt 1 view .LVU507
 2244              	.LBB1970:
 2245              	.LBI1970:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
ARM GAS  /tmp/ccofeNgA.s 			page 138


 2246              		.loc 3 602 17 view .LVU508
 2247              	.LBB1971:
 2248              	.LBI1971:
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 2249              		.loc 3 360 7 view .LVU509
 2250              	.LBB1972:
 2251              	.LBI1972:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2252              		.loc 3 110 7 view .LVU510
 2253              	.LBB1973:
 2254              	.LBB1974:
 2255              	.LBI1974:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2256              		.loc 3 199 14 view .LVU511
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2257              		.loc 3 199 14 is_stmt 0 view .LVU512
 2258              	.LBE1974:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2259              		.loc 3 110 7 view .LVU513
 2260 00f8 0A74     		strb	r2, [r1, #16]
 2261              	.LVL147:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2262              		.loc 3 110 7 view .LVU514
 2263              	.LBE1973:
 2264              	.LBE1972:
 2265              	.LBE1971:
 2266              	.LBE1970:
 2267              	.LBE1969:
 2268              		.loc 15 13 7 view .LVU515
 2269 00fa C1F814C0 		str	ip, [r1, #20]	@ float
 2270 00fe 0A76     		strb	r2, [r1, #24]
 2271              	.LVL148:
 2272              	.LBB1975:
 2273              	.LBI1975:
   9:./MotorControl/component.hpp **** public:
  10:./MotorControl/component.hpp ****     /**
  11:./MotorControl/component.hpp ****      * @brief Shall run the update action of this component.
  12:./MotorControl/component.hpp ****      * 
  13:./MotorControl/component.hpp ****      * This function gets called in a low priority interrupt context and is
  14:./MotorControl/component.hpp ****      * allowed to call CMSIS functions.
  15:./MotorControl/component.hpp ****      * 
  16:./MotorControl/component.hpp ****      * @param timestamp: The timestamp (in HCLK ticks) for which this update
  17:./MotorControl/component.hpp ****      * is run.
  18:./MotorControl/component.hpp ****      */
  19:./MotorControl/component.hpp ****     virtual void update(uint32_t timestamp) = 0;
  20:./MotorControl/component.hpp **** };
  21:./MotorControl/component.hpp **** 
  22:./MotorControl/component.hpp **** 
  23:./MotorControl/component.hpp **** template<typename T>
  24:./MotorControl/component.hpp **** class InputPort;
  25:./MotorControl/component.hpp **** 
  26:./MotorControl/component.hpp **** /**
  27:./MotorControl/component.hpp ****  * @brief An output port stores a value for consumption by a connecting input
  28:./MotorControl/component.hpp ****  * port.
  29:./MotorControl/component.hpp ****  * 
  30:./MotorControl/component.hpp ****  * Output ports are supposed to be reset at the beginning of a control loop
  31:./MotorControl/component.hpp ****  * iteration. This ensures that connecting input ports don't use an outdated
ARM GAS  /tmp/ccofeNgA.s 			page 139


  32:./MotorControl/component.hpp ****  * value and, more importantly, ensures proper handling if the producer of the
  33:./MotorControl/component.hpp ****  * value is incapable of producing the value for any reason.
  34:./MotorControl/component.hpp ****  * 
  35:./MotorControl/component.hpp ****  * Member functions of this class are not thread-safe unless noted otherwise.
  36:./MotorControl/component.hpp ****  */
  37:./MotorControl/component.hpp **** template<typename T>
  38:./MotorControl/component.hpp **** class OutputPort {
  39:./MotorControl/component.hpp **** public:
  40:./MotorControl/component.hpp ****     /**
  41:./MotorControl/component.hpp ****      * @brief Initializes the output port with the specified value.
  42:./MotorControl/component.hpp ****      * 
  43:./MotorControl/component.hpp ****      * An initialization value is required for any() to work properly.
  44:./MotorControl/component.hpp ****      * present() and previous() cannot be used to fetch the
  45:./MotorControl/component.hpp ****      * initialization value.
  46:./MotorControl/component.hpp ****      */
  47:./MotorControl/component.hpp ****     OutputPort(T val) : content_(val) {}
  48:./MotorControl/component.hpp ****     
  49:./MotorControl/component.hpp ****     /**
  50:./MotorControl/component.hpp ****      * @brief Updates the underlying value of this output port.
  51:./MotorControl/component.hpp ****      */
  52:./MotorControl/component.hpp ****     void operator=(T value) {
  53:./MotorControl/component.hpp ****         content_ = value;
  54:./MotorControl/component.hpp ****         age_ = 0;
  55:./MotorControl/component.hpp ****     }
  56:./MotorControl/component.hpp **** 
  57:./MotorControl/component.hpp ****     /**
  58:./MotorControl/component.hpp ****      * @brief Marks the contained value as outdated. The value is not actually
  59:./MotorControl/component.hpp ****      * deleted and can still be accessed through some of the member functions
  60:./MotorControl/component.hpp ****      * of this class.
  61:./MotorControl/component.hpp ****      */
  62:./MotorControl/component.hpp ****     void reset() {
  63:./MotorControl/component.hpp ****         // This will eventually overflow to 0 so present() could
  64:./MotorControl/component.hpp ****         // theoretically return a very old value however it is very likely that
  65:./MotorControl/component.hpp ****         // the motor will be long disarmed by then.
  66:./MotorControl/component.hpp ****         age_++;
  67:./MotorControl/component.hpp ****     }
  68:./MotorControl/component.hpp **** 
  69:./MotorControl/component.hpp ****     /**
  70:./MotorControl/component.hpp ****      * @brief Returns the value from this control loop iteration or std::nullopt
  71:./MotorControl/component.hpp ****      * if the value was not yet set during this control loop iteration.
  72:./MotorControl/component.hpp ****      */
  73:./MotorControl/component.hpp ****     std::optional<T> present() {
  74:./MotorControl/component.hpp ****         if (age_ == 0) {
  75:./MotorControl/component.hpp ****             return content_;
  76:./MotorControl/component.hpp ****         } else {
  77:./MotorControl/component.hpp ****             return std::nullopt;
  78:./MotorControl/component.hpp ****         }
  79:./MotorControl/component.hpp ****     }
  80:./MotorControl/component.hpp **** 
  81:./MotorControl/component.hpp ****     /**
  82:./MotorControl/component.hpp ****      * @brief Returns the value from exactly the previous control loop iteration.
  83:./MotorControl/component.hpp ****      * 
  84:./MotorControl/component.hpp ****      * If during the last iteration no value was set or the value was already
  85:./MotorControl/component.hpp ****      * overwritten during this control loop iteration then this function returns
  86:./MotorControl/component.hpp ****      * std::nullopt.
  87:./MotorControl/component.hpp ****      */
  88:./MotorControl/component.hpp ****     std::optional<T> previous() {
ARM GAS  /tmp/ccofeNgA.s 			page 140


  89:./MotorControl/component.hpp ****         if (age_ == 1) {
  90:./MotorControl/component.hpp ****             return content_;
  91:./MotorControl/component.hpp ****         } else {
  92:./MotorControl/component.hpp ****             return std::nullopt;
  93:./MotorControl/component.hpp ****         }
  94:./MotorControl/component.hpp ****     }
  95:./MotorControl/component.hpp **** 
  96:./MotorControl/component.hpp ****     /**
  97:./MotorControl/component.hpp ****      * @brief Returns the value contained in this output port with disregard of
  98:./MotorControl/component.hpp ****      * when the value was set.
  99:./MotorControl/component.hpp ****      * 
 100:./MotorControl/component.hpp ****      * This function is thread-safe if load/store operations of T are atomic.
 101:./MotorControl/component.hpp ****      */
 102:./MotorControl/component.hpp ****     std::optional<T> any() {
 103:./MotorControl/component.hpp ****         return content_;
 104:./MotorControl/component.hpp ****     }
 105:./MotorControl/component.hpp ****     
 106:./MotorControl/component.hpp **** private:
 107:./MotorControl/component.hpp ****     uint32_t age_ = 2; // Age in number of control loop iterations
 108:./MotorControl/component.hpp ****     T content_;
 109:./MotorControl/component.hpp **** };
 110:./MotorControl/component.hpp **** 
 111:./MotorControl/component.hpp **** /**
 112:./MotorControl/component.hpp ****  * @brief An input port provides a value from the source to which it's configured.
 113:./MotorControl/component.hpp ****  * 
 114:./MotorControl/component.hpp ****  * The source can be one of:
 115:./MotorControl/component.hpp ****  *  - an internally stored value
 116:./MotorControl/component.hpp ****  *  - an externally stored value (referenced by a pointer)
 117:./MotorControl/component.hpp ****  *  - an external OutputPort (referenced by a pointer)
 118:./MotorControl/component.hpp ****  *  - none (all queries will return std::nullopt)
 119:./MotorControl/component.hpp ****  * 
 120:./MotorControl/component.hpp ****  * Member functions of this class are not thread-safe unless otherwise noted.
 121:./MotorControl/component.hpp ****  */
 122:./MotorControl/component.hpp **** template<typename T>
 123:./MotorControl/component.hpp **** class InputPort {
 2274              		.loc 17 123 7 is_stmt 1 view .LVU516
 2275              	.LBB1976:
 2276              	.LBI1976:
1285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   inline void
1287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   __throw_bad_variant_access(bool __valueless)
1288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
1289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     if (__valueless) [[__unlikely__]]
1290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
1291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     else
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __throw_bad_variant_access("std::get: wrong index for variant");
1293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
1294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<typename... _Types>
1296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     class variant
1297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     : private __detail::__variant::_Variant_base<_Types...>,
1298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       private _Enable_default_constructor<
1299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_default_ctor,
1300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  variant<_Types...>>,
1301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       private _Enable_copy_move<
1302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_ctor,
1303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_copy_assign,
ARM GAS  /tmp/ccofeNgA.s 			page 141


1304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_ctor,
1305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::_Traits<_Types...>::_S_move_assign,
1306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant<_Types...>>
1307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     private:
1309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template <typename... _UTypes, typename _Tp>
1310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	friend decltype(auto) __variant_cast(_Tp&&);
1311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename _Variant, typename... _Args>
1312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	friend void __variant_construct_by_index(_Variant& __v,
1313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 						 _Args&&... __args);
1314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(sizeof...(_Types) > 0,
1316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "variant must have at least one alternative");
1317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!(std::is_reference_v<_Types> || ...),
1318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "variant must have no reference alternative");
1319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(!(std::is_void_v<_Types> || ...),
1320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "variant must have no void alternative");
1321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base = __detail::__variant::_Variant_base<_Types...>;
1323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Default_ctor_enabler =
1324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Enable_default_constructor<
1325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __detail::__variant::_Traits<_Types...>::_S_default_ctor,
1326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    variant<_Types...>>;
1327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr bool __not_self
1330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  = !is_same_v<__remove_cvref_t<_Tp>, variant>;
1331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr bool
1334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;
1335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr size_t __accepted_index
1338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  = __detail::__variant::__accepted_index<_Tp, variant>::value;
1339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>
1341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	using __to_type = variant_alternative_t<_Np, variant>;
1342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>
1344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	using __accepted_type = __to_type<__accepted_index<_Tp>>;
1345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr size_t __index_of =
1348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  __detail::__variant::__index_of_v<_Tp, _Types...>;
1349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Traits = __detail::__variant::_Traits<_Types...>;
1351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __is_in_place_tag : false_type { };
1354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __is_in_place_tag<in_place_type_t<_Tp>> : true_type { };
1356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np>
1357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	struct __is_in_place_tag<in_place_index_t<_Np>> : true_type { };
1358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	static constexpr bool __not_in_place_tag
ARM GAS  /tmp/ccofeNgA.s 			page 142


1361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  = !__is_in_place_tag<__remove_cvref_t<_Tp>>::value;
1362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     public:
1364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       variant() = default;
 2277              		.loc 1 1364 7 view .LVU517
 2278              	.LBB1977:
 2279              	.LBB1978:
 2280              	.LBI1978:
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 2281              		.loc 1 697 7 view .LVU518
 2282              	.LBB1979:
 2283              	.LBB1980:
 2284              	.LBI1980:
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 2285              		.loc 1 703 2 view .LVU519
 2286              	.LBB1981:
 2287              	.LBB1982:
 2288              	.LBI1982:
 652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 2289              		.loc 1 652 20 view .LVU520
 2290              	.LBB1983:
 2291              	.LBB1984:
 2292              	.LBI1984:
 594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 2293              		.loc 1 594 20 view .LVU521
 2294              	.LBB1985:
 2295              	.LBB1986:
 2296              	.LBI1986:
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 2297              		.loc 1 567 20 view .LVU522
 2298              	.LBB1987:
 2299              	.LBB1988:
 2300              	.LBI1988:
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2301              		.loc 1 523 20 view .LVU523
 2302              	.LBB1989:
 2303              	.LBB1990:
 2304              	.LBI1990:
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 2305              		.loc 1 446 2 view .LVU524
 2306              	.LBB1991:
 2307              	.LBB1992:
 2308              	.LBI1992:
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 2309              		.loc 1 335 12 view .LVU525
 2310              	.LBB1993:
 2311              	.LBB1994:
 2312              	.LBI1994:
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 2313              		.loc 1 215 2 view .LVU526
 2314              	.LBB1995:
 2315              	.LBI1995:
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(), second() { }
 2316              		.loc 4 232 26 view .LVU527
 2317              	.LBB1996:
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 2318              		.loc 4 233 25 is_stmt 0 view .LVU528
ARM GAS  /tmp/ccofeNgA.s 			page 143


 2319 0100 C4F8E430 		str	r3, [r4, #228]	@ float
 2320 0104 C4F8E830 		str	r3, [r4, #232]	@ float
 2321              	.LVL149:
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 2322              		.loc 4 233 25 view .LVU529
 2323              	.LBE1996:
 2324              	.LBE1995:
 2325              	.LBE1994:
 2326              	.LBE1993:
 2327              	.LBE1992:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2328              		.loc 1 448 14 view .LVU530
 2329 0108 84F8EC20 		strb	r2, [r4, #236]
 2330              	.LVL150:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2331              		.loc 1 448 14 view .LVU531
 2332              	.LBE1991:
 2333              	.LBE1990:
 2334              	.LBE1989:
 2335              	.LBE1988:
 2336              	.LBE1987:
 2337              	.LBE1986:
 2338              	.LBE1985:
 2339              	.LBE1984:
 2340              	.LBE1983:
 2341              	.LBE1982:
 2342              	.LBE1981:
 2343              	.LBE1980:
 2344              	.LBE1979:
 2345              	.LBE1978:
 2346              	.LBE1977:
 2347              	.LBE1976:
 2348              	.LBE1975:
 2349              	.LBB1997:
 2350              	.LBI1997:
 2351              		.loc 17 123 7 is_stmt 1 view .LVU532
 2352              	.LBB1998:
 2353              	.LBI1998:
 2354              		.loc 1 1364 7 view .LVU533
 2355              	.LBB1999:
 2356              	.LBB2000:
 2357              	.LBI2000:
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 2358              		.loc 1 697 7 view .LVU534
 2359              	.LBB2001:
 2360              	.LBB2002:
 2361              	.LBI2002:
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 2362              		.loc 1 703 2 view .LVU535
 2363              	.LBB2003:
 2364              	.LBB2004:
 2365              	.LBI2004:
 652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 2366              		.loc 1 652 20 view .LVU536
 2367              	.LBB2005:
 2368              	.LBB2006:
 2369              	.LBI2006:
ARM GAS  /tmp/ccofeNgA.s 			page 144


 594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 2370              		.loc 1 594 20 view .LVU537
 2371              	.LBB2007:
 2372              	.LBB2008:
 2373              	.LBI2008:
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 2374              		.loc 1 567 20 view .LVU538
 2375              	.LBB2009:
 2376              	.LBB2010:
 2377              	.LBI2010:
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2378              		.loc 1 523 20 view .LVU539
 2379              	.LBB2011:
 2380              	.LBB2012:
 2381              	.LBI2012:
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 2382              		.loc 1 446 2 view .LVU540
 2383              	.LBB2013:
 2384              	.LBB2014:
 2385              	.LBI2014:
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 2386              		.loc 1 335 12 view .LVU541
 2387              	.LBB2015:
 2388              	.LBB2016:
 2389              	.LBI2016:
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 2390              		.loc 1 215 2 view .LVU542
 2391              	.LBB2017:
 2392              	.LBI2017:
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h ****       : first(), second() { }
 2393              		.loc 4 232 26 view .LVU543
 2394              	.LBB2018:
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 2395              		.loc 4 233 25 is_stmt 0 view .LVU544
 2396 010c C4F8F030 		str	r3, [r4, #240]	@ float
 2397 0110 C4F8F430 		str	r3, [r4, #244]	@ float
 2398              	.LVL151:
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 2399              		.loc 4 233 25 view .LVU545
 2400              	.LBE2018:
 2401              	.LBE2017:
 2402              	.LBE2016:
 2403              	.LBE2015:
 2404              	.LBE2014:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2405              		.loc 1 448 14 view .LVU546
 2406 0114 84F8F820 		strb	r2, [r4, #248]
 2407              	.LVL152:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2408              		.loc 1 448 14 view .LVU547
 2409              	.LBE2013:
 2410              	.LBE2012:
 2411              	.LBE2011:
 2412              	.LBE2010:
 2413              	.LBE2009:
 2414              	.LBE2008:
 2415              	.LBE2007:
ARM GAS  /tmp/ccofeNgA.s 			page 145


 2416              	.LBE2006:
 2417              	.LBE2005:
 2418              	.LBE2004:
 2419              	.LBE2003:
 2420              	.LBE2002:
 2421              	.LBE2001:
 2422              	.LBE2000:
 2423              	.LBE1999:
 2424              	.LBE1998:
 2425              	.LBE1997:
 2426              	.LBB2019:
 2427              	.LBI2019:
 2428              		.loc 17 123 7 is_stmt 1 view .LVU548
 2429              	.LBB2020:
 2430              	.LBI2020:
 2431              		.loc 1 1364 7 view .LVU549
 2432              	.LBB2021:
 2433              	.LBB2022:
 2434              	.LBI2022:
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 2435              		.loc 1 697 7 view .LVU550
 2436              	.LBB2023:
 2437              	.LBB2024:
 2438              	.LBI2024:
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 2439              		.loc 1 703 2 view .LVU551
 2440              	.LBB2025:
 2441              	.LBB2026:
 2442              	.LBI2026:
 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2443              		.loc 1 684 20 view .LVU552
 2444              	.LBB2027:
 2445              	.LBB2028:
 2446              	.LBI2028:
 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2447              		.loc 1 641 20 view .LVU553
 2448              	.LBB2029:
 2449              	.LBB2030:
 2450              	.LBI2030:
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 2451              		.loc 1 567 20 view .LVU554
 2452              	.LBB2031:
 2453              	.LBB2032:
 2454              	.LBI2032:
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2455              		.loc 1 523 20 view .LVU555
 2456              	.LBB2033:
 2457              	.LBB2034:
 2458              	.LBI2034:
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 2459              		.loc 1 446 2 view .LVU556
 2460              	.LBB2035:
 2461              	.LBB2036:
 2462              	.LBI2036:
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 2463              		.loc 1 335 12 view .LVU557
 2464              	.LBB2037:
ARM GAS  /tmp/ccofeNgA.s 			page 146


 2465              	.LBB2038:
 2466              	.LBI2038:
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 2467              		.loc 1 215 2 view .LVU558
 2468              	.LBB2039:
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2469              		.loc 1 216 45 is_stmt 0 view .LVU559
 2470 0118 C4F8FC30 		str	r3, [r4, #252]	@ float
 2471              	.LVL153:
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2472              		.loc 1 216 45 view .LVU560
 2473              	.LBE2039:
 2474              	.LBE2038:
 2475              	.LBE2037:
 2476              	.LBE2036:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2477              		.loc 1 448 14 view .LVU561
 2478 011c 84F80021 		strb	r2, [r4, #256]
 2479              	.LVL154:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2480              		.loc 1 448 14 view .LVU562
 2481              	.LBE2035:
 2482              	.LBE2034:
 2483              	.LBE2033:
 2484              	.LBE2032:
 2485              	.LBE2031:
 2486              	.LBE2030:
 2487              	.LBE2029:
 2488              	.LBE2028:
 2489              	.LBE2027:
 2490              	.LBE2026:
 2491              	.LBE2025:
 2492              	.LBE2024:
 2493              	.LBE2023:
 2494              	.LBE2022:
 2495              	.LBE2021:
 2496              	.LBE2020:
 2497              	.LBE2019:
 2498              	.LBB2040:
 2499              	.LBI2040:
 2500              		.loc 17 123 7 is_stmt 1 view .LVU563
 2501              	.LBB2041:
 2502              	.LBI2041:
 2503              		.loc 1 1364 7 view .LVU564
 2504              	.LBB2042:
 2505              	.LBB2043:
 2506              	.LBI2043:
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 2507              		.loc 1 697 7 view .LVU565
 2508              	.LBB2044:
 2509              	.LBB2045:
 2510              	.LBI2045:
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 2511              		.loc 1 703 2 view .LVU566
 2512              	.LBB2046:
 2513              	.LBB2047:
 2514              	.LBI2047:
ARM GAS  /tmp/ccofeNgA.s 			page 147


 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2515              		.loc 1 684 20 view .LVU567
 2516              	.LBB2048:
 2517              	.LBB2049:
 2518              	.LBI2049:
 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2519              		.loc 1 641 20 view .LVU568
 2520              	.LBB2050:
 2521              	.LBB2051:
 2522              	.LBI2051:
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 2523              		.loc 1 567 20 view .LVU569
 2524              	.LBB2052:
 2525              	.LBB2053:
 2526              	.LBI2053:
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2527              		.loc 1 523 20 view .LVU570
 2528              	.LBB2054:
 2529              	.LBB2055:
 2530              	.LBI2055:
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 2531              		.loc 1 446 2 view .LVU571
 2532              	.LBB2056:
 2533              	.LBB2057:
 2534              	.LBI2057:
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 2535              		.loc 1 335 12 view .LVU572
 2536              	.LBB2058:
 2537              	.LBB2059:
 2538              	.LBI2059:
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 2539              		.loc 1 215 2 view .LVU573
 2540              	.LBB2060:
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2541              		.loc 1 216 45 is_stmt 0 view .LVU574
 2542 0120 C4F80431 		str	r3, [r4, #260]	@ float
 2543              	.LVL155:
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2544              		.loc 1 216 45 view .LVU575
 2545              	.LBE2060:
 2546              	.LBE2059:
 2547              	.LBE2058:
 2548              	.LBE2057:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2549              		.loc 1 448 14 view .LVU576
 2550 0124 84F80821 		strb	r2, [r4, #264]
 2551              	.LVL156:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2552              		.loc 1 448 14 view .LVU577
 2553              	.LBE2056:
 2554              	.LBE2055:
 2555              	.LBE2054:
 2556              	.LBE2053:
 2557              	.LBE2052:
 2558              	.LBE2051:
 2559              	.LBE2050:
 2560              	.LBE2049:
ARM GAS  /tmp/ccofeNgA.s 			page 148


 2561              	.LBE2048:
 2562              	.LBE2047:
 2563              	.LBE2046:
 2564              	.LBE2045:
 2565              	.LBE2044:
 2566              	.LBE2043:
 2567              	.LBE2042:
 2568              	.LBE2041:
 2569              	.LBE2040:
 2570              		.loc 15 13 7 view .LVU578
 2571 0128 81F84820 		strb	r2, [r1, #72]
 2572              	.LVL157:
 2573              	.LBB2061:
 2574              	.LBI2061:
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2575              		.loc 3 690 17 is_stmt 1 view .LVU579
 2576              	.LBB2062:
 2577              	.LBI2062:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2578              		.loc 3 602 17 view .LVU580
 2579              	.LBB2063:
 2580              	.LBI2063:
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 2581              		.loc 3 360 7 view .LVU581
 2582              	.LBB2064:
 2583              	.LBI2064:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2584              		.loc 3 110 7 view .LVU582
 2585              	.LBB2065:
 2586              	.LBB2066:
 2587              	.LBI2066:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2588              		.loc 3 199 14 view .LVU583
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2589              		.loc 3 199 14 is_stmt 0 view .LVU584
 2590              	.LBE2066:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2591              		.loc 3 110 7 view .LVU585
 2592 012c 81F85420 		strb	r2, [r1, #84]
 2593              	.LVL158:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2594              		.loc 3 110 7 view .LVU586
 2595              	.LBE2065:
 2596              	.LBE2064:
 2597              	.LBE2063:
 2598              	.LBE2062:
 2599              	.LBE2061:
 2600              	.LBB2067:
 2601              	.LBI2067:
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2602              		.loc 3 690 17 is_stmt 1 view .LVU587
 2603              	.LBB2068:
 2604              	.LBI2068:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2605              		.loc 3 602 17 view .LVU588
 2606              	.LBB2069:
 2607              	.LBI2069:
ARM GAS  /tmp/ccofeNgA.s 			page 149


 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 2608              		.loc 3 360 7 view .LVU589
 2609              	.LBB2070:
 2610              	.LBI2070:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2611              		.loc 3 110 7 view .LVU590
 2612              	.LBB2071:
 2613              	.LBB2072:
 2614              	.LBI2072:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2615              		.loc 3 199 14 view .LVU591
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2616              		.loc 3 199 14 is_stmt 0 view .LVU592
 2617              	.LBE2072:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2618              		.loc 3 110 7 view .LVU593
 2619 0130 81F86020 		strb	r2, [r1, #96]
 2620              	.LVL159:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2621              		.loc 3 110 7 view .LVU594
 2622              	.LBE2071:
 2623              	.LBE2070:
 2624              	.LBE2069:
 2625              	.LBE2068:
 2626              	.LBE2067:
 2627              	.LBB2073:
 2628              	.LBI2073:
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2629              		.loc 3 690 17 is_stmt 1 view .LVU595
 2630              	.LBB2074:
 2631              	.LBI2074:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2632              		.loc 3 602 17 view .LVU596
 2633              	.LBB2075:
 2634              	.LBI2075:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 2635              		.loc 3 302 7 view .LVU597
 2636              	.LBB2076:
 2637              	.LBI2076:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2638              		.loc 3 110 7 view .LVU598
 2639              	.LBB2077:
 2640              	.LBB2078:
 2641              	.LBI2078:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2642              		.loc 3 199 14 view .LVU599
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2643              		.loc 3 199 14 is_stmt 0 view .LVU600
 2644              	.LBE2078:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2645              		.loc 3 110 7 view .LVU601
 2646 0134 81F86820 		strb	r2, [r1, #104]
 2647              	.LVL160:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2648              		.loc 3 110 7 view .LVU602
 2649              	.LBE2077:
 2650              	.LBE2076:
ARM GAS  /tmp/ccofeNgA.s 			page 150


 2651              	.LBE2075:
 2652              	.LBE2074:
 2653              	.LBE2073:
 2654              	.LBB2079:
 2655              	.LBI2079:
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2656              		.loc 3 690 17 is_stmt 1 view .LVU603
 2657              	.LBB2080:
 2658              	.LBI2080:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2659              		.loc 3 602 17 view .LVU604
 2660              	.LBB2081:
 2661              	.LBI2081:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 2662              		.loc 3 302 7 view .LVU605
 2663              	.LBB2082:
 2664              	.LBI2082:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2665              		.loc 3 110 7 view .LVU606
 2666              	.LBB2083:
 2667              	.LBB2084:
 2668              	.LBI2084:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2669              		.loc 3 199 14 view .LVU607
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2670              		.loc 3 199 14 is_stmt 0 view .LVU608
 2671              	.LBE2084:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2672              		.loc 3 110 7 view .LVU609
 2673 0138 81F87020 		strb	r2, [r1, #112]
 2674              	.LVL161:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2675              		.loc 3 110 7 view .LVU610
 2676              	.LBE2083:
 2677              	.LBE2082:
 2678              	.LBE2081:
 2679              	.LBE2080:
 2680              	.LBE2079:
 2681              	.LBB2085:
 2682              	.LBI2085:
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2683              		.loc 3 690 17 is_stmt 1 view .LVU611
 2684              	.LBB2086:
 2685              	.LBI2086:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2686              		.loc 3 602 17 view .LVU612
 2687              	.LBB2087:
 2688              	.LBI2087:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 2689              		.loc 3 302 7 view .LVU613
 2690              	.LBB2088:
 2691              	.LBI2088:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2692              		.loc 3 110 7 view .LVU614
 2693              	.LBB2089:
 2694              	.LBB2090:
 2695              	.LBI2090:
ARM GAS  /tmp/ccofeNgA.s 			page 151


 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2696              		.loc 3 199 14 view .LVU615
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2697              		.loc 3 199 14 is_stmt 0 view .LVU616
 2698              	.LBE2090:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2699              		.loc 3 110 7 view .LVU617
 2700 013c 81F87C20 		strb	r2, [r1, #124]
 2701              	.LVL162:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2702              		.loc 3 110 7 view .LVU618
 2703              	.LBE2089:
 2704              	.LBE2088:
 2705              	.LBE2087:
 2706              	.LBE2086:
 2707              	.LBE2085:
 2708              	.LBB2091:
 2709              	.LBI2091:
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2710              		.loc 3 690 17 is_stmt 1 view .LVU619
 2711              	.LBB2092:
 2712              	.LBI2092:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2713              		.loc 3 602 17 view .LVU620
 2714              	.LBB2093:
 2715              	.LBI2093:
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 2716              		.loc 3 360 7 view .LVU621
 2717              	.LBB2094:
 2718              	.LBI2094:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2719              		.loc 3 110 7 view .LVU622
 2720              	.LBB2095:
 2721              	.LBB2096:
 2722              	.LBI2096:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2723              		.loc 3 199 14 view .LVU623
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 2724              		.loc 3 199 14 is_stmt 0 view .LVU624
 2725              	.LBE2096:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2726              		.loc 3 110 7 view .LVU625
 2727 0140 81F88820 		strb	r2, [r1, #136]
 2728              	.LVL163:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 2729              		.loc 3 110 7 view .LVU626
 2730              	.LBE2095:
 2731              	.LBE2094:
 2732              	.LBE2093:
 2733              	.LBE2092:
 2734              	.LBE2091:
 2735              		.loc 15 13 7 view .LVU627
 2736 0144 C1F89430 		str	r3, [r1, #148]	@ float
 2737 0148 C1F89830 		str	r3, [r1, #152]	@ float
 2738 014c C1F89C30 		str	r3, [r1, #156]	@ float
 2739 0150 C1F8A030 		str	r3, [r1, #160]	@ float
 2740 0154 C1F8A430 		str	r3, [r1, #164]	@ float
ARM GAS  /tmp/ccofeNgA.s 			page 152


 2741              	.LVL164:
 2742              		.loc 15 13 7 view .LVU628
 2743              	.LBE1962:
 2744              	.LBE1961:
 164:MotorControl/motor.cpp ****     apply_config();
 2745              		.loc 2 164 43 view .LVU629
 2746 0158 C4F87001 		str	r0, [r4, #368]	@ float
 2747 015c C4F87431 		str	r3, [r4, #372]	@ float
 2748 0160 C4F87831 		str	r3, [r4, #376]	@ float
 2749              	.LVL165:
 2750              	.LBB2097:
 2751              	.LBI2097:
 2752              		.loc 17 123 7 is_stmt 1 view .LVU630
 2753              	.LBB2098:
 2754              	.LBI2098:
 2755              		.loc 1 1364 7 view .LVU631
 2756              	.LBB2099:
 2757              	.LBB2100:
 2758              	.LBI2100:
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 2759              		.loc 1 697 7 view .LVU632
 2760              	.LBB2101:
 2761              	.LBB2102:
 2762              	.LBI2102:
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 2763              		.loc 1 703 2 view .LVU633
 2764              	.LBB2103:
 2765              	.LBB2104:
 2766              	.LBI2104:
 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2767              		.loc 1 684 20 view .LVU634
 2768              	.LBB2105:
 2769              	.LBB2106:
 2770              	.LBI2106:
 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2771              		.loc 1 641 20 view .LVU635
 2772              	.LBB2107:
 2773              	.LBB2108:
 2774              	.LBI2108:
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 2775              		.loc 1 567 20 view .LVU636
 2776              	.LBB2109:
 2777              	.LBB2110:
 2778              	.LBI2110:
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2779              		.loc 1 523 20 view .LVU637
 2780              	.LBB2111:
 2781              	.LBB2112:
 2782              	.LBI2112:
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 2783              		.loc 1 446 2 view .LVU638
 2784              	.LBB2113:
 2785              	.LBB2114:
 2786              	.LBI2114:
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 2787              		.loc 1 335 12 view .LVU639
 2788              	.LBB2115:
ARM GAS  /tmp/ccofeNgA.s 			page 153


 2789              	.LBB2116:
 2790              	.LBI2116:
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 2791              		.loc 1 215 2 view .LVU640
 2792              	.LBB2117:
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2793              		.loc 1 216 45 is_stmt 0 view .LVU641
 2794 0164 C4F87C31 		str	r3, [r4, #380]	@ float
 2795              	.LVL166:
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2796              		.loc 1 216 45 view .LVU642
 2797              	.LBE2117:
 2798              	.LBE2116:
 2799              	.LBE2115:
 2800              	.LBE2114:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2801              		.loc 1 448 14 view .LVU643
 2802 0168 84F88021 		strb	r2, [r4, #384]
 2803              	.LVL167:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2804              		.loc 1 448 14 view .LVU644
 2805              	.LBE2113:
 2806              	.LBE2112:
 2807              	.LBE2111:
 2808              	.LBE2110:
 2809              	.LBE2109:
 2810              	.LBE2108:
 2811              	.LBE2107:
 2812              	.LBE2106:
 2813              	.LBE2105:
 2814              	.LBE2104:
 2815              	.LBE2103:
 2816              	.LBE2102:
 2817              	.LBE2101:
 2818              	.LBE2100:
 2819              	.LBE2099:
 2820              	.LBE2098:
 2821              	.LBE2097:
 2822              	.LBB2118:
 2823              	.LBI2118:
 2824              		.loc 17 123 7 is_stmt 1 view .LVU645
 2825              	.LBB2119:
 2826              	.LBI2119:
 2827              		.loc 1 1364 7 view .LVU646
 2828              	.LBB2120:
 2829              	.LBB2121:
 2830              	.LBI2121:
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
 2831              		.loc 1 697 7 view .LVU647
 2832              	.LBB2122:
 2833              	.LBB2123:
 2834              	.LBI2123:
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(__i, std::forward<_Args>(__args)...)
 2835              		.loc 1 703 2 view .LVU648
 2836              	.LBB2124:
 2837              	.LBB2125:
 2838              	.LBI2125:
ARM GAS  /tmp/ccofeNgA.s 			page 154


 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2839              		.loc 1 684 20 view .LVU649
 2840              	.LBB2126:
 2841              	.LBB2127:
 2842              	.LBI2127:
 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2843              		.loc 1 641 20 view .LVU650
 2844              	.LBB2128:
 2845              	.LBB2129:
 2846              	.LBI2129:
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
 2847              		.loc 1 567 20 view .LVU651
 2848              	.LBB2130:
 2849              	.LBB2131:
 2850              	.LBI2131:
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
 2851              		.loc 1 523 20 view .LVU652
 2852              	.LBB2132:
 2853              	.LBB2133:
 2854              	.LBI2133:
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
 2855              		.loc 1 446 2 view .LVU653
 2856              	.LBB2134:
 2857              	.LBB2135:
 2858              	.LBI2135:
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 2859              		.loc 1 335 12 view .LVU654
 2860              	.LBB2136:
 2861              	.LBB2137:
 2862              	.LBI2137:
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _M_storage(std::forward<_Args>(__args)...)
 2863              		.loc 1 215 2 view .LVU655
 2864              	.LBB2138:
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2865              		.loc 1 216 45 is_stmt 0 view .LVU656
 2866 016c C4F88431 		str	r3, [r4, #388]	@ float
 2867              	.LVL168:
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2868              		.loc 1 216 45 view .LVU657
 2869              	.LBE2138:
 2870              	.LBE2137:
 2871              	.LBE2136:
 2872              	.LBE2135:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2873              		.loc 1 448 14 view .LVU658
 2874 0170 84F88821 		strb	r2, [r4, #392]
 2875              	.LVL169:
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
 2876              		.loc 1 448 14 view .LVU659
 2877              	.LBE2134:
 2878              	.LBE2133:
 2879              	.LBE2132:
 2880              	.LBE2131:
 2881              	.LBE2130:
 2882              	.LBE2129:
 2883              	.LBE2128:
 2884              	.LBE2127:
ARM GAS  /tmp/ccofeNgA.s 			page 155


 2885              	.LBE2126:
 2886              	.LBE2125:
 2887              	.LBE2124:
 2888              	.LBE2123:
 2889              	.LBE2122:
 2890              	.LBE2121:
 2891              	.LBE2120:
 2892              	.LBE2119:
 2893              	.LBE2118:
 164:MotorControl/motor.cpp ****     apply_config();
 2894              		.loc 2 164 43 view .LVU660
 2895 0174 C4F88C31 		str	r3, [r4, #396]	@ float
 2896              	.LVL170:
 2897              	.LBB2139:
 2898              	.LBI2139:
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 2899              		.loc 4 352 12 is_stmt 1 view .LVU661
 2900              	.LBB2140:
 2901              	.LBB2141:
 2902              	.LBB2142:
 2903              	.LBI2142:
 2904              		.loc 5 76 5 view .LVU662
 2905              		.loc 5 76 5 is_stmt 0 view .LVU663
 2906              	.LBE2142:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 2907              		.loc 4 353 64 view .LVU664
 2908 0178 0293     		str	r3, [sp, #8]	@ float
 2909              	.LVL171:
 2910              	.LBB2143:
 2911              	.LBI2143:
 2912              		.loc 5 76 5 is_stmt 1 view .LVU665
 2913              		.loc 5 76 5 is_stmt 0 view .LVU666
 2914              	.LBE2143:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 2915              		.loc 4 353 64 view .LVU667
 2916 017a 0393     		str	r3, [sp, #12]	@ float
 2917              	.LVL172:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 2918              		.loc 4 353 64 view .LVU668
 2919 017c 6A46     		mov	r2, sp
 2920 017e 02A9     		add	r1, sp, #8
 2921 0180 03C9     		ldm	r1, {r0, r1}
 2922 0182 82E80300 		stm	r2, {r0, r1}
 2923              	.LVL173:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 2924              		.loc 4 353 64 view .LVU669
 2925              	.LBE2141:
 2926              	.LBE2140:
 2927              	.LBE2139:
 2928              	.LBB2144:
 2929              	.LBI2144:
  47:./MotorControl/component.hpp ****     
 2930              		.loc 17 47 5 is_stmt 1 view .LVU670
 2931              	.LBB2145:
  47:./MotorControl/component.hpp ****     
 2932              		.loc 17 47 37 is_stmt 0 view .LVU671
 2933 0186 0225     		movs	r5, #2
ARM GAS  /tmp/ccofeNgA.s 			page 156


 2934 0188 C4F89051 		str	r5, [r4, #400]
 2935 018c 04F5CA7C 		add	ip, r4, #404
 2936 0190 92E80300 		ldm	r2, {r0, r1}
 2937 0194 8CE80300 		stm	ip, {r0, r1}
 2938              	.LVL174:
  47:./MotorControl/component.hpp ****     
 2939              		.loc 17 47 37 view .LVU672
 2940              	.LBE2145:
 2941              	.LBE2144:
 2942              	.LBB2146:
 2943              	.LBI2146:
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 2944              		.loc 4 352 12 is_stmt 1 view .LVU673
 2945              	.LBB2147:
 2946              	.LBB2148:
 2947              	.LBB2149:
 2948              	.LBI2149:
 2949              		.loc 5 76 5 view .LVU674
 2950              		.loc 5 76 5 is_stmt 0 view .LVU675
 2951              	.LBE2149:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 2952              		.loc 4 353 64 view .LVU676
 2953 0198 0493     		str	r3, [sp, #16]	@ float
 2954              	.LVL175:
 2955              	.LBB2150:
 2956              	.LBI2150:
 2957              		.loc 5 76 5 is_stmt 1 view .LVU677
 2958              		.loc 5 76 5 is_stmt 0 view .LVU678
 2959              	.LBE2150:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 2960              		.loc 4 353 64 view .LVU679
 2961 019a 0593     		str	r3, [sp, #20]	@ float
 2962              	.LVL176:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 2963              		.loc 4 353 64 view .LVU680
 2964 019c 06AB     		add	r3, sp, #24
 2965 019e 13E90300 		ldmdb	r3, {r0, r1}
 2966 01a2 82E80300 		stm	r2, {r0, r1}
 2967              	.LBE2148:
 2968              	.LBE2147:
 2969              	.LBE2146:
 2970              	.LBB2151:
 2971              	.LBI2151:
  47:./MotorControl/component.hpp ****     
 2972              		.loc 17 47 5 is_stmt 1 view .LVU681
 2973              	.LBB2152:
  47:./MotorControl/component.hpp ****     
 2974              		.loc 17 47 37 is_stmt 0 view .LVU682
 2975 01a6 C4F89C51 		str	r5, [r4, #412]
 2976 01aa 04F5D073 		add	r3, r4, #416
 2977 01ae 92E80300 		ldm	r2, {r0, r1}
 2978 01b2 83E80300 		stm	r3, {r0, r1}
 2979              	.LVL177:
  47:./MotorControl/component.hpp ****     
 2980              		.loc 17 47 37 view .LVU683
 2981              	.LBE2152:
 2982              	.LBE2151:
ARM GAS  /tmp/ccofeNgA.s 			page 157


 165:MotorControl/motor.cpp ****     fet_thermistor_.motor_ = this;
 2983              		.loc 2 165 5 is_stmt 1 view .LVU684
 165:MotorControl/motor.cpp ****     fet_thermistor_.motor_ = this;
 2984              		.loc 2 165 17 is_stmt 0 view .LVU685
 2985 01b6 2046     		mov	r0, r4
 2986 01b8 FFF7FEFF 		bl	_ZN5Motor12apply_configEv
 2987              	.LVL178:
 166:MotorControl/motor.cpp ****     motor_thermistor_.motor_ = this;
 2988              		.loc 2 166 5 is_stmt 1 view .LVU686
 2989 01bc 6369     		ldr	r3, [r4, #20]
 166:MotorControl/motor.cpp ****     motor_thermistor_.motor_ = this;
 2990              		.loc 2 166 28 is_stmt 0 view .LVU687
 2991 01be 1C62     		str	r4, [r3, #32]
 167:MotorControl/motor.cpp **** }
 2992              		.loc 2 167 5 is_stmt 1 view .LVU688
 2993 01c0 A369     		ldr	r3, [r4, #24]
 167:MotorControl/motor.cpp **** }
 2994              		.loc 2 167 30 is_stmt 0 view .LVU689
 2995 01c2 1C62     		str	r4, [r3, #32]
 2996              	.LBE1952:
 168:MotorControl/motor.cpp **** 
 2997              		.loc 2 168 1 view .LVU690
 2998 01c4 2046     		mov	r0, r4
 2999 01c6 07B0     		add	sp, sp, #28
 3000              	.LCFI38:
 3001              		.cfi_def_cfa_offset 12
 3002              		@ sp needed
 3003 01c8 30BD     		pop	{r4, r5, pc}
 3004              	.LVL179:
 3005              	.L93:
 168:MotorControl/motor.cpp **** 
 3006              		.loc 2 168 1 view .LVU691
 3007 01ca 00BFAFF3 		.align	3
 3007      0080
 3008              	.L92:
 3009 01d0 00000000 		.word	0
 3010 01d4 00000000 		.word	0
 3011 01d8 00002041 		.word	1092616192
 3012 01dc 0AD7233D 		.word	1025758986
 3013 01e0 CDCCCC3D 		.word	1036831949
 3014 01e4 CDCC4C3E 		.word	1045220557
 3015 01e8 08000000 		.word	_ZTV15PhaseControlLawILj3EE+8
 3016 01ec 08000000 		.word	_ZTV24AlphaBetaFrameController+8
 3017 01f0 08000000 		.word	_ZTV13ComponentBase+8
 3018 01f4 08000000 		.word	_ZTV23FieldOrientedController+8
 3019 01f8 00007042 		.word	1114636288
 3020 01fc 00007A44 		.word	1148846080
 3021 0200 0000C842 		.word	1120403456
 3022 0204 0000F042 		.word	1123024896
 3023 0208 000080FF 		.word	-8388608
 3024              		.cfi_endproc
 3025              	.LFE5292:
 3026              		.cantunwind
 3027              		.fnend
 3029              		.global	_ZN5MotorC1EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32Offboar
 3030              		.thumb_set _ZN5MotorC1EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32Offb
 3031              		.section	.text._ZN5Motor5setupEv,"ax",%progbits
ARM GAS  /tmp/ccofeNgA.s 			page 158


 3032              		.align	1
 3033              		.global	_ZN5Motor5setupEv
 3034              		.syntax unified
 3035              		.thumb
 3036              		.thumb_func
 3038              	_ZN5Motor5setupEv:
 3039              		.fnstart
 3040              	.LVL180:
 3041              	.LFB5299:
 310:MotorControl/motor.cpp **** 
 311:MotorControl/motor.cpp **** // @brief Set up the gate drivers
 312:MotorControl/motor.cpp **** bool Motor::setup() {
 3042              		.loc 2 312 21 is_stmt 1 view -0
 3043              		.cfi_startproc
 3044              		@ args = 0, pretend = 0, frame = 8
 3045              		@ frame_needed = 0, uses_anonymous_args = 0
 3046              		.loc 2 312 21 is_stmt 0 view .LVU693
 3047 0000 10B5     		push	{r4, lr}
 3048              		.save {r4, lr}
 3049              	.LCFI39:
 3050              		.cfi_def_cfa_offset 8
 3051              		.cfi_offset 4, -8
 3052              		.cfi_offset 14, -4
 3053 0002 2DED028B 		vpush.64	{d8}
 3054              		.vsave {d8}
 3055              	.LCFI40:
 3056              		.cfi_def_cfa_offset 16
 3057              		.cfi_offset 80, -16
 3058              		.cfi_offset 81, -12
 3059              		.pad #8
 3060 0006 82B0     		sub	sp, sp, #8
 3061              	.LCFI41:
 3062              		.cfi_def_cfa_offset 24
 3063 0008 0446     		mov	r4, r0
 313:MotorControl/motor.cpp ****     fet_thermistor_.update();
 3064              		.loc 2 313 5 is_stmt 1 view .LVU694
 3065              		.loc 2 313 27 is_stmt 0 view .LVU695
 3066 000a 4069     		ldr	r0, [r0, #20]
 3067              	.LVL181:
 3068              		.loc 2 313 27 view .LVU696
 3069 000c FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiter6updateEv
 3070              	.LVL182:
 314:MotorControl/motor.cpp ****     motor_thermistor_.update();
 3071              		.loc 2 314 5 is_stmt 1 view .LVU697
 3072              		.loc 2 314 29 is_stmt 0 view .LVU698
 3073 0010 A069     		ldr	r0, [r4, #24]
 3074 0012 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiter6updateEv
 3075              	.LVL183:
 315:MotorControl/motor.cpp **** 
 316:MotorControl/motor.cpp ****     // Solve for exact gain, then snap down to have equal or larger range as requested
 317:MotorControl/motor.cpp ****     // or largest possible range otherwise
 318:MotorControl/motor.cpp ****     constexpr float kMargin = 0.90f;
 3076              		.loc 2 318 5 is_stmt 1 view .LVU699
 319:MotorControl/motor.cpp ****     constexpr float max_output_swing = 1.35f; // [V] out of amplifier
 3077              		.loc 2 319 5 view .LVU700
 320:MotorControl/motor.cpp ****     float max_unity_gain_current = kMargin * max_output_swing * shunt_conductance_; // [A]
 3078              		.loc 2 320 5 view .LVU701
ARM GAS  /tmp/ccofeNgA.s 			page 159


 3079              		.loc 2 320 65 is_stmt 0 view .LVU702
 3080 0016 94ED028A 		vldr.32	s16, [r4, #8]
 3081              		.loc 2 320 11 view .LVU703
 3082 001a DFED137A 		vldr.32	s15, .L98
 3083 001e 28EE278A 		vmul.f32	s16, s16, s15
 3084              	.LVL184:
 321:MotorControl/motor.cpp ****     float requested_gain = max_unity_gain_current / config_.requested_current_range; // [V/V]
 3085              		.loc 2 321 5 is_stmt 1 view .LVU704
 3086              		.loc 2 321 61 is_stmt 0 view .LVU705
 3087 0022 94ED120A 		vldr.32	s0, [r4, #72]
 3088              	.LVL185:
 322:MotorControl/motor.cpp ****     
 323:MotorControl/motor.cpp ****     float actual_gain;
 3089              		.loc 2 323 5 is_stmt 1 view .LVU706
 324:MotorControl/motor.cpp ****     if (!gate_driver_.config(requested_gain, &actual_gain))
 3090              		.loc 2 324 5 view .LVU707
 3091              		.loc 2 324 29 is_stmt 0 view .LVU708
 3092 0026 01A9     		add	r1, sp, #4
 3093 0028 88EE000A 		vdiv.f32	s0, s16, s0
 3094              	.LVL186:
 3095              		.loc 2 324 29 view .LVU709
 3096 002c E068     		ldr	r0, [r4, #12]
 3097 002e FFF7FEFF 		bl	_ZN7Drv83016configEfPf
 3098              	.LVL187:
 3099              		.loc 2 324 5 view .LVU710
 3100 0032 18B9     		cbnz	r0, .L97
 3101              	.LVL188:
 3102              	.L95:
 325:MotorControl/motor.cpp ****         return false;
 326:MotorControl/motor.cpp **** 
 327:MotorControl/motor.cpp ****     // Values for current controller
 328:MotorControl/motor.cpp ****     phase_current_rev_gain_ = 1.0f / actual_gain;
 329:MotorControl/motor.cpp ****     // Clip all current control to actual usable range
 330:MotorControl/motor.cpp ****     max_allowed_current_ = max_unity_gain_current * phase_current_rev_gain_;
 331:MotorControl/motor.cpp **** 
 332:MotorControl/motor.cpp ****     max_dc_calib_ = 0.1f * max_allowed_current_;
 333:MotorControl/motor.cpp **** 
 334:MotorControl/motor.cpp ****     if (!gate_driver_.init())
 335:MotorControl/motor.cpp ****         return false;
 336:MotorControl/motor.cpp **** 
 337:MotorControl/motor.cpp ****     return true;
 338:MotorControl/motor.cpp **** }
 3103              		.loc 2 338 1 view .LVU711
 3104 0034 02B0     		add	sp, sp, #8
 3105              	.LCFI42:
 3106              		.cfi_remember_state
 3107              		.cfi_def_cfa_offset 16
 3108              		@ sp needed
 3109 0036 BDEC028B 		vldm	sp!, {d8}
 3110              	.LCFI43:
 3111              		.cfi_restore 80
 3112              		.cfi_restore 81
 3113              		.cfi_def_cfa_offset 8
 3114 003a 10BD     		pop	{r4, pc}
 3115              	.LVL189:
 3116              	.L97:
 3117              	.LCFI44:
ARM GAS  /tmp/ccofeNgA.s 			page 160


 3118              		.cfi_restore_state
 328:MotorControl/motor.cpp ****     // Clip all current control to actual usable range
 3119              		.loc 2 328 5 is_stmt 1 view .LVU712
 328:MotorControl/motor.cpp ****     // Clip all current control to actual usable range
 3120              		.loc 2 328 36 is_stmt 0 view .LVU713
 3121 003c F7EE006A 		vmov.f32	s13, #1.0e+0
 3122 0040 9DED017A 		vldr.32	s14, [sp, #4]
 3123 0044 C6EE877A 		vdiv.f32	s15, s13, s14
 328:MotorControl/motor.cpp ****     // Clip all current control to actual usable range
 3124              		.loc 2 328 29 view .LVU714
 3125 0048 C4ED317A 		vstr.32	s15, [r4, #196]
 330:MotorControl/motor.cpp **** 
 3126              		.loc 2 330 5 is_stmt 1 view .LVU715
 330:MotorControl/motor.cpp **** 
 3127              		.loc 2 330 51 is_stmt 0 view .LVU716
 3128 004c 27EE888A 		vmul.f32	s16, s15, s16
 3129              	.LVL190:
 330:MotorControl/motor.cpp **** 
 3130              		.loc 2 330 26 view .LVU717
 3131 0050 84ED5D8A 		vstr.32	s16, [r4, #372]
 332:MotorControl/motor.cpp **** 
 3132              		.loc 2 332 5 is_stmt 1 view .LVU718
 332:MotorControl/motor.cpp **** 
 3133              		.loc 2 332 26 is_stmt 0 view .LVU719
 3134 0054 DFED057A 		vldr.32	s15, .L98+4
 3135 0058 28EE278A 		vmul.f32	s16, s16, s15
 332:MotorControl/motor.cpp **** 
 3136              		.loc 2 332 19 view .LVU720
 3137 005c 84ED5E8A 		vstr.32	s16, [r4, #376]
 334:MotorControl/motor.cpp ****         return false;
 3138              		.loc 2 334 5 is_stmt 1 view .LVU721
 334:MotorControl/motor.cpp ****         return false;
 3139              		.loc 2 334 27 is_stmt 0 view .LVU722
 3140 0060 E068     		ldr	r0, [r4, #12]
 3141 0062 FFF7FEFF 		bl	_ZN7Drv83014initEv
 3142              	.LVL191:
 3143 0066 E5E7     		b	.L95
 3144              	.L99:
 3145              		.align	2
 3146              	.L98:
 3147 0068 1F859B3F 		.word	1067156767
 3148 006c CDCCCC3D 		.word	1036831949
 3149              		.cfi_endproc
 3150              	.LFE5299:
 3151              		.fnend
 3153              		.section	.text._ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE,"ax",%progbits
 3154              		.align	1
 3155              		.global	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 3156              		.syntax unified
 3157              		.thumb
 3158              		.thumb_func
 3160              	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE:
 3161              		.fnstart
 3162              	.LVL192:
 3163              	.LFB5300:
 339:MotorControl/motor.cpp **** 
 340:MotorControl/motor.cpp **** void Motor::disarm_with_error(Motor::Error error){
ARM GAS  /tmp/ccofeNgA.s 			page 161


 3164              		.loc 2 340 50 is_stmt 1 view -0
 3165              		.cfi_startproc
 3166              		@ args = 0, pretend = 0, frame = 0
 3167              		@ frame_needed = 0, uses_anonymous_args = 0
 3168              		.loc 2 340 50 is_stmt 0 view .LVU724
 3169 0000 10B5     		push	{r4, lr}
 3170              		.save {r4, lr}
 3171              	.LCFI45:
 3172              		.cfi_def_cfa_offset 8
 3173              		.cfi_offset 4, -8
 3174              		.cfi_offset 14, -4
 3175 0002 0446     		mov	r4, r0
 341:MotorControl/motor.cpp ****     error_ |= error;
 3176              		.loc 2 341 5 is_stmt 1 view .LVU725
 3177              		.loc 2 341 15 is_stmt 0 view .LVU726
 3178 0004 9030     		adds	r0, r0, #144
 3179              	.LVL193:
 3180              		.loc 2 341 15 view .LVU727
 3181 0006 FFF7FEFF 		bl	_ZoRRN10ODriveIntf9MotorIntf5ErrorES1_
 3182              	.LVL194:
 342:MotorControl/motor.cpp ****     axis_->error_ |= Axis::ERROR_MOTOR_FAILED;
 3183              		.loc 2 342 5 is_stmt 1 view .LVU728
 3184 000a D4F88400 		ldr	r0, [r4, #132]
 3185              		.loc 2 342 28 is_stmt 0 view .LVU729
 3186 000e 4021     		movs	r1, #64
 3187 0010 00F51270 		add	r0, r0, #584
 3188 0014 FFF7FEFF 		bl	_ZoRRN10ODriveIntf8AxisIntf5ErrorES1_
 3189              	.LVL195:
 343:MotorControl/motor.cpp ****     last_error_time_ = odrv.n_evt_control_loop_ * current_meas_period;
 3190              		.loc 2 343 5 is_stmt 1 view .LVU730
 3191              		.loc 2 343 29 is_stmt 0 view .LVU731
 3192 0018 074B     		ldr	r3, .L102
 3193 001a D3EDB77A 		vldr.32	s15, [r3, #732]	@ int
 3194              		.loc 2 343 49 view .LVU732
 3195 001e F8EE677A 		vcvt.f32.u32	s15, s15
 3196 0022 9FED067A 		vldr.32	s14, .L102+4
 3197 0026 67EE877A 		vmul.f32	s15, s15, s14
 3198              		.loc 2 343 22 view .LVU733
 3199 002a C4ED267A 		vstr.32	s15, [r4, #152]
 344:MotorControl/motor.cpp ****     disarm();
 3200              		.loc 2 344 5 is_stmt 1 view .LVU734
 3201              		.loc 2 344 11 is_stmt 0 view .LVU735
 3202 002e 0021     		movs	r1, #0
 3203 0030 2046     		mov	r0, r4
 3204 0032 FFF7FEFF 		bl	_ZN5Motor6disarmEPb
 3205              	.LVL196:
 345:MotorControl/motor.cpp **** }
 3206              		.loc 2 345 1 view .LVU736
 3207 0036 10BD     		pop	{r4, pc}
 3208              	.LVL197:
 3209              	.L103:
 3210              		.loc 2 345 1 view .LVU737
 3211              		.align	2
 3212              	.L102:
 3213 0038 00400000 		.word	odrv+16384
 3214 003c 6F120339 		.word	956502639
 3215              		.cfi_endproc
ARM GAS  /tmp/ccofeNgA.s 			page 162


 3216              	.LFE5300:
 3217              		.fnend
 3219              		.section	.text._ZN5Motor17apply_pwm_timingsEPtb,"ax",%progbits
 3220              		.align	1
 3221              		.global	_ZN5Motor17apply_pwm_timingsEPtb
 3222              		.syntax unified
 3223              		.thumb
 3224              		.thumb_func
 3226              	_ZN5Motor17apply_pwm_timingsEPtb:
 3227              		.fnstart
 3228              	.LVL198:
 3229              	.LFB5295:
 228:MotorControl/motor.cpp ****     CRITICAL_SECTION() {
 3230              		.loc 2 228 68 is_stmt 1 view -0
 3231              		.cfi_startproc
 3232              		@ args = 0, pretend = 0, frame = 8
 3233              		@ frame_needed = 0, uses_anonymous_args = 0
 228:MotorControl/motor.cpp ****     CRITICAL_SECTION() {
 3234              		.loc 2 228 68 is_stmt 0 view .LVU739
 3235 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 3236              		.save {r4, r5, r6, r7, lr}
 3237              	.LCFI46:
 3238              		.cfi_def_cfa_offset 20
 3239              		.cfi_offset 4, -20
 3240              		.cfi_offset 5, -16
 3241              		.cfi_offset 6, -12
 3242              		.cfi_offset 7, -8
 3243              		.cfi_offset 14, -4
 3244              		.pad #12
 3245 0002 83B0     		sub	sp, sp, #12
 3246              	.LCFI47:
 3247              		.cfi_def_cfa_offset 32
 3248 0004 0546     		mov	r5, r0
 3249 0006 0C46     		mov	r4, r1
 3250 0008 1646     		mov	r6, r2
 229:MotorControl/motor.cpp ****         if (odrv.config_.enable_brake_resistor && !brake_resistor_armed) {
 3251              		.loc 2 229 5 is_stmt 1 view .LVU740
 3252              	.LVL199:
 3253              	.LBB2153:
 3254              	.LBB2154:
 3255              	.LBI2154:
  56:./Drivers/STM32/stm32_system.h ****     ~CriticalSectionContext() { cpu_exit_critical(mask_); }
 3256              		.loc 12 56 5 view .LVU741
 3257              	.LBB2155:
 3258              	.LBB2156:
 3259              	.LBB2157:
 3260              	.LBI2157:
  31:./Drivers/STM32/stm32_system.h ****     uint32_t primask = __get_PRIMASK();
 3261              		.loc 12 31 24 view .LVU742
 3262              	.LBB2158:
  32:./Drivers/STM32/stm32_system.h ****     __disable_irq();
 3263              		.loc 12 32 5 view .LVU743
 3264              	.LBB2159:
 3265              	.LBI2159:
 382:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 3266              		.loc 13 382 31 view .LVU744
 3267              	.LBB2160:
ARM GAS  /tmp/ccofeNgA.s 			page 163


 384:ThirdParty/CMSIS/Include/cmsis_gcc.h **** 
 3268              		.loc 13 384 3 view .LVU745
 386:ThirdParty/CMSIS/Include/cmsis_gcc.h ****   return(result);
 3269              		.loc 13 386 3 view .LVU746
 3270              		.syntax unified
 3271              	@ 386 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 3272 000a EFF31087 		MRS r7, primask
 3273              	@ 0 "" 2
 3274              	.LVL200:
 387:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 3275              		.loc 13 387 3 view .LVU747
 387:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 3276              		.loc 13 387 3 is_stmt 0 view .LVU748
 3277              		.thumb
 3278              		.syntax unified
 3279              	.LBE2160:
 3280              	.LBE2159:
  33:./Drivers/STM32/stm32_system.h ****     return primask;
 3281              		.loc 12 33 5 is_stmt 1 view .LVU749
 3282              	.LBB2161:
 3283              	.LBI2161:
 140:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 3284              		.loc 13 140 27 view .LVU750
 3285              	.LBB2162:
 142:ThirdParty/CMSIS/Include/cmsis_gcc.h **** }
 3286              		.loc 13 142 3 view .LVU751
 3287              		.syntax unified
 3288              	@ 142 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 3289 000e 72B6     		cpsid i
 3290              	@ 0 "" 2
 3291              		.thumb
 3292              		.syntax unified
 3293              	.LBE2162:
 3294              	.LBE2161:
  34:./Drivers/STM32/stm32_system.h **** }
 3295              		.loc 12 34 5 view .LVU752
 3296              	.LBE2158:
 3297              	.LBE2157:
  56:./Drivers/STM32/stm32_system.h ****     ~CriticalSectionContext() { cpu_exit_critical(mask_); }
 3298              		.loc 12 56 58 is_stmt 0 view .LVU753
 3299 0010 0097     		str	r7, [sp]
 3300 0012 0023     		movs	r3, #0
 3301 0014 8DF80430 		strb	r3, [sp, #4]
 3302              	.LVL201:
  56:./Drivers/STM32/stm32_system.h ****     ~CriticalSectionContext() { cpu_exit_critical(mask_); }
 3303              		.loc 12 56 58 view .LVU754
 3304              	.LBE2156:
 3305              	.LBE2155:
 3306              	.LBE2154:
 3307              	.LBE2153:
  55:./Drivers/STM32/stm32_system.h ****     CriticalSectionContext() : mask_(cpu_enter_critical()) {}
 3308              		.loc 12 55 23 is_stmt 1 view .LVU755
 3309              	.LBB2181:
 3310              	.LBB2163:
 230:MotorControl/motor.cpp ****             disarm_with_error(ERROR_BRAKE_RESISTOR_DISARMED);
 3311              		.loc 2 230 9 view .LVU756
 230:MotorControl/motor.cpp ****             disarm_with_error(ERROR_BRAKE_RESISTOR_DISARMED);
ARM GAS  /tmp/ccofeNgA.s 			page 164


 3312              		.loc 2 230 26 is_stmt 0 view .LVU757
 3313 0018 124B     		ldr	r3, .L112
 3314 001a 93F8A831 		ldrb	r3, [r3, #424]	@ zero_extendqisi2
 230:MotorControl/motor.cpp ****             disarm_with_error(ERROR_BRAKE_RESISTOR_DISARMED);
 3315              		.loc 2 230 9 view .LVU758
 3316 001e 13B1     		cbz	r3, .L105
 230:MotorControl/motor.cpp ****             disarm_with_error(ERROR_BRAKE_RESISTOR_DISARMED);
 3317              		.loc 2 230 51 discriminator 1 view .LVU759
 3318 0020 114B     		ldr	r3, .L112+4
 3319 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 230:MotorControl/motor.cpp ****             disarm_with_error(ERROR_BRAKE_RESISTOR_DISARMED);
 3320              		.loc 2 230 48 discriminator 1 view .LVU760
 3321 0024 9BB1     		cbz	r3, .L111
 3322              	.LVL202:
 3323              	.L105:
 234:MotorControl/motor.cpp ****         TIM_TypeDef* tim = htim->Instance;
 3324              		.loc 2 234 9 is_stmt 1 view .LVU761
 234:MotorControl/motor.cpp ****         TIM_TypeDef* tim = htim->Instance;
 3325              		.loc 2 234 28 is_stmt 0 view .LVU762
 3326 0026 2B68     		ldr	r3, [r5]
 3327              	.LVL203:
 235:MotorControl/motor.cpp ****         tim->CCR1 = timings[0];
 3328              		.loc 2 235 9 is_stmt 1 view .LVU763
 235:MotorControl/motor.cpp ****         tim->CCR1 = timings[0];
 3329              		.loc 2 235 22 is_stmt 0 view .LVU764
 3330 0028 1B68     		ldr	r3, [r3]
 3331              	.LVL204:
 236:MotorControl/motor.cpp ****         tim->CCR2 = timings[1];
 3332              		.loc 2 236 9 is_stmt 1 view .LVU765
 236:MotorControl/motor.cpp ****         tim->CCR2 = timings[1];
 3333              		.loc 2 236 30 is_stmt 0 view .LVU766
 3334 002a 2288     		ldrh	r2, [r4]
 236:MotorControl/motor.cpp ****         tim->CCR2 = timings[1];
 3335              		.loc 2 236 19 view .LVU767
 3336 002c 5A63     		str	r2, [r3, #52]
 3337              	.LVL205:
 237:MotorControl/motor.cpp ****         tim->CCR3 = timings[2];
 3338              		.loc 2 237 9 is_stmt 1 view .LVU768
 237:MotorControl/motor.cpp ****         tim->CCR3 = timings[2];
 3339              		.loc 2 237 30 is_stmt 0 view .LVU769
 3340 002e 6288     		ldrh	r2, [r4, #2]
 237:MotorControl/motor.cpp ****         tim->CCR3 = timings[2];
 3341              		.loc 2 237 19 view .LVU770
 3342 0030 9A63     		str	r2, [r3, #56]
 238:MotorControl/motor.cpp ****         
 3343              		.loc 2 238 9 is_stmt 1 view .LVU771
 238:MotorControl/motor.cpp ****         
 3344              		.loc 2 238 30 is_stmt 0 view .LVU772
 3345 0032 A288     		ldrh	r2, [r4, #4]
 238:MotorControl/motor.cpp ****         
 3346              		.loc 2 238 19 view .LVU773
 3347 0034 DA63     		str	r2, [r3, #60]
 240:MotorControl/motor.cpp ****             if (is_armed_) {
 3348              		.loc 2 240 9 is_stmt 1 view .LVU774
 3349 0036 36B9     		cbnz	r6, .L106
 241:MotorControl/motor.cpp ****                 // Set the Automatic Output Enable so that the Master Output Enable
 3350              		.loc 2 241 13 view .LVU775
ARM GAS  /tmp/ccofeNgA.s 			page 165


 241:MotorControl/motor.cpp ****                 // Set the Automatic Output Enable so that the Master Output Enable
 3351              		.loc 2 241 17 is_stmt 0 view .LVU776
 3352 0038 95F89C20 		ldrb	r2, [r5, #156]	@ zero_extendqisi2
 241:MotorControl/motor.cpp ****                 // Set the Automatic Output Enable so that the Master Output Enable
 3353              		.loc 2 241 13 view .LVU777
 3354 003c 1AB1     		cbz	r2, .L106
 244:MotorControl/motor.cpp ****             }
 3355              		.loc 2 244 17 is_stmt 1 view .LVU778
 244:MotorControl/motor.cpp ****             }
 3356              		.loc 2 244 27 is_stmt 0 view .LVU779
 3357 003e 5A6C     		ldr	r2, [r3, #68]
 3358 0040 42F48042 		orr	r2, r2, #16384
 3359 0044 5A64     		str	r2, [r3, #68]
 3360              	.L106:
 3361              	.LVL206:
 244:MotorControl/motor.cpp ****             }
 3362              		.loc 2 244 27 view .LVU780
 3363              	.LBE2163:
 3364              	.LBB2164:
 3365              	.LBI2164:
 3366              		.loc 12 57 5 is_stmt 1 discriminator 1 view .LVU781
 3367              	.LBB2165:
 3368              		.loc 12 57 33 discriminator 1 view .LVU782
 3369              	.LBB2166:
 3370              	.LBI2166:
  37:./Drivers/STM32/stm32_system.h ****     __set_PRIMASK(priority_mask);
 3371              		.loc 12 37 20 discriminator 1 view .LVU783
 3372              	.LBE2166:
 3373              	.LBE2165:
 3374              	.LBE2164:
 3375              	.LBE2181:
  38:./Drivers/STM32/stm32_system.h **** }
 3376              		.loc 12 38 5 discriminator 1 view .LVU784
 3377              	.LBB2182:
 3378              	.LBB2171:
 3379              	.LBB2170:
 3380              	.LBB2169:
 3381              	.LBB2167:
 3382              	.LBI2167:
 412:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 3383              		.loc 13 412 27 discriminator 1 view .LVU785
 3384              	.LBB2168:
 3385              		.loc 13 414 3 discriminator 1 view .LVU786
 3386              		.syntax unified
 3387              	@ 414 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 3388 0046 87F31088 		MSR primask, r7
 3389              	@ 0 "" 2
 3390              	.LVL207:
 3391              		.loc 13 414 3 is_stmt 0 discriminator 1 view .LVU787
 3392              		.thumb
 3393              		.syntax unified
 3394              	.LBE2168:
 3395              	.LBE2167:
 3396              	.LBE2169:
 3397              	.LBE2170:
 3398              	.LBE2171:
 3399              	.LBE2182:
ARM GAS  /tmp/ccofeNgA.s 			page 166


 257:MotorControl/motor.cpp **** 
 3400              		.loc 2 257 1 discriminator 1 view .LVU788
 3401 004a 03B0     		add	sp, sp, #12
 3402              	.LCFI48:
 3403              		.cfi_remember_state
 3404              		.cfi_def_cfa_offset 20
 3405              	.LVL208:
 257:MotorControl/motor.cpp **** 
 3406              		.loc 2 257 1 discriminator 1 view .LVU789
 3407              		@ sp needed
 3408 004c F0BD     		pop	{r4, r5, r6, r7, pc}
 3409              	.LVL209:
 3410              	.L111:
 3411              	.LCFI49:
 3412              		.cfi_restore_state
 3413              	.LBB2183:
 3414              	.LBB2172:
 231:MotorControl/motor.cpp ****         }
 3415              		.loc 2 231 13 is_stmt 1 view .LVU790
 231:MotorControl/motor.cpp ****         }
 3416              		.loc 2 231 30 is_stmt 0 view .LVU791
 3417 004e 4FF40002 		mov	r2, #8388608
 3418              	.LVL210:
 231:MotorControl/motor.cpp ****         }
 3419              		.loc 2 231 30 view .LVU792
 3420 0052 0023     		movs	r3, #0
 3421              	.LEHB3:
 3422 0054 FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 3423              	.LVL211:
 3424              	.LEHE3:
 231:MotorControl/motor.cpp ****         }
 3425              		.loc 2 231 30 view .LVU793
 3426 0058 E5E7     		b	.L105
 3427              	.L108:
 3428              	.LVL212:
 231:MotorControl/motor.cpp ****         }
 3429              		.loc 2 231 30 view .LVU794
 3430              	.LBE2172:
 3431              	.LBB2173:
 3432              	.LBI2173:
 3433              		.loc 12 57 5 is_stmt 1 view .LVU795
 3434              	.LBB2174:
 3435              		.loc 12 57 33 view .LVU796
 3436              	.LBB2175:
 3437              	.LBI2175:
  37:./Drivers/STM32/stm32_system.h ****     __set_PRIMASK(priority_mask);
 3438              		.loc 12 37 20 view .LVU797
 3439              	.LBE2175:
 3440              	.LBE2174:
 3441              	.LBE2173:
 3442              	.LBE2183:
  38:./Drivers/STM32/stm32_system.h **** }
 3443              		.loc 12 38 5 view .LVU798
 3444              	.LBB2184:
 3445              	.LBB2180:
 3446              	.LBB2179:
 3447              	.LBB2178:
ARM GAS  /tmp/ccofeNgA.s 			page 167


 3448              	.LBB2176:
 3449              	.LBI2176:
 412:ThirdParty/CMSIS/Include/cmsis_gcc.h **** {
 3450              		.loc 13 412 27 view .LVU799
 3451              	.LBB2177:
 3452              		.loc 13 414 3 view .LVU800
 3453              		.syntax unified
 3454              	@ 414 "ThirdParty/CMSIS/Include/cmsis_gcc.h" 1
 3455 005a 87F31088 		MSR primask, r7
 3456              	@ 0 "" 2
 3457              	.LVL213:
 3458              	.LEHB4:
 3459              		.loc 13 414 3 is_stmt 0 view .LVU801
 3460              		.thumb
 3461              		.syntax unified
 3462 005e FFF7FEFF 		bl	__cxa_end_cleanup
 3463              	.LVL214:
 3464              	.LEHE4:
 3465              	.L113:
 3466 0062 00BF     		.align	2
 3467              	.L112:
 3468 0064 00400000 		.word	odrv+16384
 3469 0068 00000000 		.word	brake_resistor_armed
 3470              	.LBE2177:
 3471              	.LBE2176:
 3472              	.LBE2178:
 3473              	.LBE2179:
 3474              	.LBE2180:
 3475              	.LBE2184:
 3476              		.cfi_endproc
 3477              	.LFE5295:
 3478              		.personality	__gxx_personality_v0
 3479              		.handlerdata
 3480              	.LLSDA5295:
 3481 0008 FF       		.byte	0xff
 3482 0009 FF       		.byte	0xff
 3483 000a 01       		.byte	0x1
 3484 000b 08       		.uleb128 .LLSDACSE5295-.LLSDACSB5295
 3485              	.LLSDACSB5295:
 3486 000c 54       		.uleb128 .LEHB3-.LFB5295
 3487 000d 04       		.uleb128 .LEHE3-.LEHB3
 3488 000e 5A       		.uleb128 .L108-.LFB5295
 3489 000f 00       		.uleb128 0
 3490 0010 5E       		.uleb128 .LEHB4-.LFB5295
 3491 0011 04       		.uleb128 .LEHE4-.LEHB4
 3492 0012 00       		.uleb128 0
 3493 0013 00       		.uleb128 0
 3494              	.LLSDACSE5295:
 3495              		.section	.text._ZN5Motor17apply_pwm_timingsEPtb
 3496              		.fnend
 3498              		.section	.text._ZN5Motor21effective_current_limEv,"ax",%progbits
 3499              		.align	1
 3500              		.global	_ZN5Motor21effective_current_limEv
 3501              		.syntax unified
 3502              		.thumb
 3503              		.thumb_func
 3505              	_ZN5Motor21effective_current_limEv:
ARM GAS  /tmp/ccofeNgA.s 			page 168


 3506              		.fnstart
 3507              	.LVL215:
 3508              	.LFB5302:
 346:MotorControl/motor.cpp **** 
 347:MotorControl/motor.cpp **** bool Motor::do_checks(uint32_t timestamp) {
 348:MotorControl/motor.cpp ****     gate_driver_.do_checks();
 349:MotorControl/motor.cpp **** 
 350:MotorControl/motor.cpp ****     if (!gate_driver_.is_ready()) {
 351:MotorControl/motor.cpp ****         disarm_with_error(ERROR_DRV_FAULT);
 352:MotorControl/motor.cpp ****         return false;
 353:MotorControl/motor.cpp ****     }
 354:MotorControl/motor.cpp ****     if (!motor_thermistor_.do_checks()) {
 355:MotorControl/motor.cpp ****         disarm_with_error(ERROR_MOTOR_THERMISTOR_OVER_TEMP);
 356:MotorControl/motor.cpp ****         return false;
 357:MotorControl/motor.cpp ****     }
 358:MotorControl/motor.cpp ****     if (!fet_thermistor_.do_checks()) {
 359:MotorControl/motor.cpp ****         disarm_with_error(ERROR_FET_THERMISTOR_OVER_TEMP);
 360:MotorControl/motor.cpp ****         return false;
 361:MotorControl/motor.cpp ****     }
 362:MotorControl/motor.cpp ****     return true;
 363:MotorControl/motor.cpp **** }
 364:MotorControl/motor.cpp **** 
 365:MotorControl/motor.cpp **** float Motor::effective_current_lim() {
 3509              		.loc 2 365 38 is_stmt 1 view -0
 3510              		.cfi_startproc
 3511              		@ args = 0, pretend = 0, frame = 16
 3512              		@ frame_needed = 0, uses_anonymous_args = 0
 3513              		.loc 2 365 38 is_stmt 0 view .LVU803
 3514 0000 10B5     		push	{r4, lr}
 3515              		.save {r4, lr}
 3516              	.LCFI50:
 3517              		.cfi_def_cfa_offset 8
 3518              		.cfi_offset 4, -8
 3519              		.cfi_offset 14, -4
 3520              		.pad #16
 3521 0002 84B0     		sub	sp, sp, #16
 3522              	.LCFI51:
 3523              		.cfi_def_cfa_offset 24
 3524 0004 0446     		mov	r4, r0
 366:MotorControl/motor.cpp ****     // Configured limit
 367:MotorControl/motor.cpp ****     float current_lim = config_.current_lim;
 3525              		.loc 2 367 5 is_stmt 1 view .LVU804
 3526              		.loc 2 367 33 is_stmt 0 view .LVU805
 3527 0006 90ED0F0A 		vldr.32	s0, [r0, #60]
 3528              		.loc 2 367 11 view .LVU806
 3529 000a 8DED000A 		vstr.32	s0, [sp]
 368:MotorControl/motor.cpp ****     // Hardware limit
 369:MotorControl/motor.cpp ****     if (axis_->motor_.config_.motor_type == Motor::MOTOR_TYPE_GIMBAL) {
 3530              		.loc 2 369 5 is_stmt 1 view .LVU807
 3531              		.loc 2 369 9 is_stmt 0 view .LVU808
 3532 000e D0F88430 		ldr	r3, [r0, #132]
 3533              		.loc 2 369 16 view .LVU809
 3534 0012 D3F85831 		ldr	r3, [r3, #344]
 3535              		.loc 2 369 31 view .LVU810
 3536 0016 93F83820 		ldrb	r2, [r3, #56]	@ zero_extendqisi2
 3537              		.loc 2 369 5 view .LVU811
 3538 001a 022A     		cmp	r2, #2
ARM GAS  /tmp/ccofeNgA.s 			page 169


 3539 001c 33D0     		beq	.L125
 370:MotorControl/motor.cpp ****         current_lim = std::min(current_lim, 0.98f*one_by_sqrt3*vbus_voltage); //gimbal motor is vol
 371:MotorControl/motor.cpp ****     } else {
 372:MotorControl/motor.cpp ****         current_lim = std::min(current_lim, axis_->motor_.max_allowed_current_);
 3540              		.loc 2 372 9 is_stmt 1 view .LVU812
 3541              		.loc 2 372 59 is_stmt 0 view .LVU813
 3542 001e 03F5BA72 		add	r2, r3, #372
 3543              	.LVL216:
 3544              	.LBB2185:
 3545              	.LBI2185:
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 3546              		.loc 11 230 5 is_stmt 1 view .LVU814
 3547              	.LBB2186:
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 3548              		.loc 11 235 15 is_stmt 0 view .LVU815
 3549 0022 D3ED5D7A 		vldr.32	s15, [r3, #372]
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 3550              		.loc 11 235 7 view .LVU816
 3551 0026 B4EEE70A 		vcmpe.f32	s0, s15
 3552 002a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3553 002e 00DC     		bgt	.L118
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 3554              		.loc 11 237 14 view .LVU817
 3555 0030 6A46     		mov	r2, sp
 3556              	.LVL217:
 3557              	.L118:
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 3558              		.loc 11 237 14 view .LVU818
 3559              	.LBE2186:
 3560              	.LBE2185:
 3561              		.loc 2 372 31 view .LVU819
 3562 0032 1368     		ldr	r3, [r2]	@ float
 3563              		.loc 2 372 21 view .LVU820
 3564 0034 0093     		str	r3, [sp]	@ float
 3565              	.L117:
 373:MotorControl/motor.cpp ****     }
 374:MotorControl/motor.cpp **** 
 375:MotorControl/motor.cpp ****     // Apply thermistor current limiters
 376:MotorControl/motor.cpp ****     current_lim = std::min(current_lim, motor_thermistor_.get_current_limit(config_.current_lim));
 3566              		.loc 2 376 5 is_stmt 1 view .LVU821
 3567              		.loc 2 376 41 is_stmt 0 view .LVU822
 3568 0036 A069     		ldr	r0, [r4, #24]
 3569              	.LVL218:
 3570              		.loc 2 376 96 view .LVU823
 3571 0038 0368     		ldr	r3, [r0]
 3572 003a 9B68     		ldr	r3, [r3, #8]
 3573              		.loc 2 376 76 view .LVU824
 3574 003c 9847     		blx	r3
 3575              	.LVL219:
 3576 003e 8DED020A 		vstr.32	s0, [sp, #8]
 3577              	.LVL220:
 3578              	.LBB2187:
 3579              	.LBI2187:
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 3580              		.loc 11 230 5 is_stmt 1 view .LVU825
 3581              	.LBB2188:
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
ARM GAS  /tmp/ccofeNgA.s 			page 170


 3582              		.loc 11 235 15 is_stmt 0 view .LVU826
 3583 0042 DDED007A 		vldr.32	s15, [sp]
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 3584              		.loc 11 235 7 view .LVU827
 3585 0046 B4EEE70A 		vcmpe.f32	s0, s15
 3586 004a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3587 004e 2ED4     		bmi	.L122
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 3588              		.loc 11 237 14 view .LVU828
 3589 0050 6B46     		mov	r3, sp
 3590              	.L119:
 3591              	.LVL221:
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 3592              		.loc 11 237 14 view .LVU829
 3593              	.LBE2188:
 3594              	.LBE2187:
 3595              		.loc 2 376 27 view .LVU830
 3596 0052 1B68     		ldr	r3, [r3]	@ float
 3597              		.loc 2 376 17 view .LVU831
 3598 0054 0093     		str	r3, [sp]	@ float
 377:MotorControl/motor.cpp ****     current_lim = std::min(current_lim, fet_thermistor_.get_current_limit(config_.current_lim));
 3599              		.loc 2 377 5 is_stmt 1 view .LVU832
 3600              		.loc 2 377 41 is_stmt 0 view .LVU833
 3601 0056 6069     		ldr	r0, [r4, #20]
 3602              		.loc 2 377 94 view .LVU834
 3603 0058 0368     		ldr	r3, [r0]
 3604 005a 9B68     		ldr	r3, [r3, #8]
 3605              		.loc 2 377 74 view .LVU835
 3606 005c 94ED0F0A 		vldr.32	s0, [r4, #60]
 3607 0060 9847     		blx	r3
 3608              	.LVL222:
 3609 0062 8DED030A 		vstr.32	s0, [sp, #12]
 3610              	.LVL223:
 3611              	.LBB2190:
 3612              	.LBI2190:
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 3613              		.loc 11 230 5 is_stmt 1 view .LVU836
 3614              	.LBB2191:
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 3615              		.loc 11 235 15 is_stmt 0 view .LVU837
 3616 0066 DDED007A 		vldr.32	s15, [sp]
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 3617              		.loc 11 235 7 view .LVU838
 3618 006a B4EEE70A 		vcmpe.f32	s0, s15
 3619 006e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3620 0072 1ED4     		bmi	.L123
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 3621              		.loc 11 237 14 view .LVU839
 3622 0074 6B46     		mov	r3, sp
 3623              	.L120:
 3624              	.LVL224:
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 3625              		.loc 11 237 14 view .LVU840
 3626              	.LBE2191:
 3627              	.LBE2190:
 3628              		.loc 2 377 27 view .LVU841
 3629 0076 93ED000A 		vldr.32	s0, [r3]
ARM GAS  /tmp/ccofeNgA.s 			page 171


 3630              		.loc 2 377 17 view .LVU842
 3631 007a 8DED000A 		vstr.32	s0, [sp]
 378:MotorControl/motor.cpp ****     effective_current_lim_ = current_lim;
 3632              		.loc 2 378 5 is_stmt 1 view .LVU843
 3633              		.loc 2 378 28 is_stmt 0 view .LVU844
 3634 007e 84ED5C0A 		vstr.32	s0, [r4, #368]
 379:MotorControl/motor.cpp **** 
 380:MotorControl/motor.cpp ****     return effective_current_lim_;
 3635              		.loc 2 380 5 is_stmt 1 view .LVU845
 381:MotorControl/motor.cpp **** }
 3636              		.loc 2 381 1 is_stmt 0 view .LVU846
 3637 0082 04B0     		add	sp, sp, #16
 3638              	.LCFI52:
 3639              		.cfi_remember_state
 3640              		.cfi_def_cfa_offset 8
 3641              		@ sp needed
 3642 0084 10BD     		pop	{r4, pc}
 3643              	.LVL225:
 3644              	.L125:
 3645              	.LCFI53:
 3646              		.cfi_restore_state
 370:MotorControl/motor.cpp ****     } else {
 3647              		.loc 2 370 9 is_stmt 1 view .LVU847
 370:MotorControl/motor.cpp ****     } else {
 3648              		.loc 2 370 63 is_stmt 0 view .LVU848
 3649 0086 0C4B     		ldr	r3, .L126
 3650 0088 D3ED007A 		vldr.32	s15, [r3]
 3651 008c 9FED0B7A 		vldr.32	s14, .L126+4
 3652 0090 67EE877A 		vmul.f32	s15, s15, s14
 3653 0094 CDED017A 		vstr.32	s15, [sp, #4]
 3654              	.LVL226:
 3655              	.LBB2193:
 3656              	.LBI2193:
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 3657              		.loc 11 230 5 is_stmt 1 view .LVU849
 3658              	.LBB2194:
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 3659              		.loc 11 235 7 is_stmt 0 view .LVU850
 3660 0098 B4EEE70A 		vcmpe.f32	s0, s15
 3661 009c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3662 00a0 03DC     		bgt	.L121
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 3663              		.loc 11 237 14 view .LVU851
 3664 00a2 6B46     		mov	r3, sp
 3665              	.L116:
 3666              	.LVL227:
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 3667              		.loc 11 237 14 view .LVU852
 3668              	.LBE2194:
 3669              	.LBE2193:
 370:MotorControl/motor.cpp ****     } else {
 3670              		.loc 2 370 31 view .LVU853
 3671 00a4 1B68     		ldr	r3, [r3]	@ float
 370:MotorControl/motor.cpp ****     } else {
 3672              		.loc 2 370 21 view .LVU854
 3673 00a6 0093     		str	r3, [sp]	@ float
 3674 00a8 C5E7     		b	.L117
ARM GAS  /tmp/ccofeNgA.s 			page 172


 3675              	.LVL228:
 3676              	.L121:
 3677              	.LBB2196:
 3678              	.LBB2195:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 3679              		.loc 11 236 9 view .LVU855
 3680 00aa 01AB     		add	r3, sp, #4
 3681              	.LVL229:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 3682              		.loc 11 236 9 view .LVU856
 3683 00ac FAE7     		b	.L116
 3684              	.LVL230:
 3685              	.L122:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 3686              		.loc 11 236 9 view .LVU857
 3687              	.LBE2195:
 3688              	.LBE2196:
 3689              	.LBB2197:
 3690              	.LBB2189:
 3691 00ae 02AB     		add	r3, sp, #8
 3692              	.LVL231:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 3693              		.loc 11 236 9 view .LVU858
 3694 00b0 CFE7     		b	.L119
 3695              	.LVL232:
 3696              	.L123:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 3697              		.loc 11 236 9 view .LVU859
 3698              	.LBE2189:
 3699              	.LBE2197:
 3700              	.LBB2198:
 3701              	.LBB2192:
 3702 00b2 03AB     		add	r3, sp, #12
 3703              	.LVL233:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 3704              		.loc 11 236 9 view .LVU860
 3705 00b4 DFE7     		b	.L120
 3706              	.L127:
 3707 00b6 00BF     		.align	2
 3708              	.L126:
 3709 00b8 00000000 		.word	vbus_voltage
 3710 00bc 7CD8103F 		.word	1058068604
 3711              	.LBE2192:
 3712              	.LBE2198:
 3713              		.cfi_endproc
 3714              	.LFE5302:
 3715              		.fnend
 3717              		.section	.text._ZN5Motor20max_available_torqueEv,"ax",%progbits
 3718              		.align	1
 3719              		.global	_ZN5Motor20max_available_torqueEv
 3720              		.syntax unified
 3721              		.thumb
 3722              		.thumb_func
 3724              	_ZN5Motor20max_available_torqueEv:
 3725              		.fnstart
 3726              	.LVL234:
 3727              	.LFB5303:
ARM GAS  /tmp/ccofeNgA.s 			page 173


 382:MotorControl/motor.cpp **** 
 383:MotorControl/motor.cpp **** //return the maximum available torque for the motor.
 384:MotorControl/motor.cpp **** //Note - for ACIM motors, available torque is allowed to be 0.
 385:MotorControl/motor.cpp **** float Motor::max_available_torque() {
 3728              		.loc 2 385 37 is_stmt 1 view -0
 3729              		.cfi_startproc
 3730              		@ args = 0, pretend = 0, frame = 16
 3731              		@ frame_needed = 0, uses_anonymous_args = 0
 3732              		@ link register save eliminated.
 3733              		.loc 2 385 37 is_stmt 0 view .LVU862
 3734 0000 84B0     		sub	sp, sp, #16
 3735              	.LCFI54:
 3736              		.cfi_def_cfa_offset 16
 386:MotorControl/motor.cpp ****     if (config_.motor_type == Motor::MOTOR_TYPE_ACIM) {
 3737              		.loc 2 386 5 is_stmt 1 view .LVU863
 3738              	.LBB2199:
 3739              		.loc 2 386 17 is_stmt 0 view .LVU864
 3740 0002 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 3741              		.loc 2 386 5 view .LVU865
 3742 0006 032B     		cmp	r3, #3
 3743 0008 19D0     		beq	.L142
 3744              	.LBB2200:
 387:MotorControl/motor.cpp ****         float max_torque = effective_current_lim_ * config_.torque_constant * axis_->acim_estimator
 388:MotorControl/motor.cpp ****         max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
 389:MotorControl/motor.cpp ****         return max_torque;
 390:MotorControl/motor.cpp ****     } else {
 391:MotorControl/motor.cpp ****         float max_torque = effective_current_lim_ * config_.torque_constant;
 3745              		.loc 2 391 9 is_stmt 1 view .LVU866
 3746              		.loc 2 391 28 is_stmt 0 view .LVU867
 3747 000a D0ED5C7A 		vldr.32	s15, [r0, #368]
 3748              		.loc 2 391 61 view .LVU868
 3749 000e 90ED0D7A 		vldr.32	s14, [r0, #52]
 3750              		.loc 2 391 51 view .LVU869
 3751 0012 67EE877A 		vmul.f32	s15, s15, s14
 3752              		.loc 2 391 15 view .LVU870
 3753 0016 CDED017A 		vstr.32	s15, [sp, #4]
 392:MotorControl/motor.cpp ****         max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
 3754              		.loc 2 392 9 is_stmt 1 view .LVU871
 3755              		.loc 2 392 45 is_stmt 0 view .LVU872
 3756 001a 0023     		movs	r3, #0
 3757 001c 0393     		str	r3, [sp, #12]	@ float
 3758              		.loc 2 392 59 view .LVU873
 3759 001e 00F14403 		add	r3, r0, #68
 3760              	.LVL235:
 3761              	.LBB2201:
 3762              	.LBI2201:
 3763              		.file 18 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // Algorithm implementation -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 174


  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** /*
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  *
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  *
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  *
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  *
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * Copyright (c) 1996
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  *
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  */
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** /** @file bits/stl_algo.h
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  */
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #ifndef _STL_ALGO_H
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #define _STL_ALGO_H 1
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #include <cstdlib>	     // for rand
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #include <bits/algorithmfwd.h>
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #include <bits/stl_heap.h>
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #include <bits/stl_tempbuf.h>  // for _Temporary_buffer
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #include <bits/predefined_ops.h>
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #include <bits/uniform_int_dist.h>
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #endif
ARM GAS  /tmp/ccofeNgA.s 			page 175


  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** // See concept_check.h for the __glibcxx_*_requires macros.
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** namespace std _GLIBCXX_VISIBILITY(default)
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** {
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// Swaps the median value of *__a, *__b and *__c under __comp to *__result
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _Iterator, typename _Compare>
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   _Iterator __c, _Compare __comp)
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__comp(__a, __b))
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp(__b, __c))
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    std::iter_swap(__result, __b);
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else if (__comp(__a, __c))
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    std::iter_swap(__result, __c);
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    std::iter_swap(__result, __a);
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else if (__comp(__a, __c))
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::iter_swap(__result, __a);
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else if (__comp(__b, __c))
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::iter_swap(__result, __c);
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::iter_swap(__result, __b);
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// Provided for stable_partition to use.
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _InputIterator
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __find_if_not(_InputIterator __first, _InputIterator __last,
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _Predicate __pred)
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__find_if(__first, __last,
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			    __gnu_cxx::__ops::__negate(__pred),
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			    std::__iterator_category(__first));
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// Like find_if_not(), but uses and updates a count of the
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// remaining range length instead of comparing against an end
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// iterator.
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate, typename _Distance>
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _InputIterator
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (; __len; --__len,  (void) ++__first)
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (!__pred(__first))
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  break;
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __first;
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 176


 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // set_difference
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // set_intersection
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // set_symmetric_difference
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // set_union
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // for_each
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // find
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // find_if
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // find_first_of
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // adjacent_find
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // count
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // count_if
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // search
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator1
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _BinaryPredicate  __predicate)
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // Test for empty ranges
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first1 == __last1 || __first2 == __last2)
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __first1;
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // Test for a pattern of length 1.
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator2 __p1(__first2);
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (++__p1 == __last2)
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return std::__find_if(__first1, __last1,
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // General case.
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator1 __current = __first1;
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (;;)
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __first1 =
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    std::__find_if(__first1, __last1,
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__first1 == __last1)
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return __last1;
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _ForwardIterator2 __p = __p1;
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __current = __first1;
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (++__current == __last1)
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return __last1;
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  while (__predicate(__current, __p))
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (++__p == __last2)
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		return __first1;
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (++__current == __last1)
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		return __last1;
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first1;
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
ARM GAS  /tmp/ccofeNgA.s 			page 177


 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __first1;
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // search_n
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for forward iterators.
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   std::forward_iterator_tag)
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __unary_pred);
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first != __last)
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::difference_type
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    __n = __count;
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _ForwardIterator __i = __first;
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__i;
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  while (__i != __last && __n != 1 && __unary_pred(__i))
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      ++__i;
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      --__n;
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__n == 1)
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return __first;
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__i == __last)
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return __last;
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __first = std::__find_if(++__i, __last, __unary_pred);
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __last;
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This is an helper function for search_n overloaded for random access
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  iterators.
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIter, typename _Integer,
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _RandomAccessIter
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _Integer __count, _UnaryPredicate __unary_pred,
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   std::random_access_iterator_tag)
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_DistanceType;
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _DistanceType __tailSize = __last - __first;
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _DistanceType __remainder = __count;
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__remainder <= __tailSize) // the main loop...
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
ARM GAS  /tmp/ccofeNgA.s 			page 178


 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __first += __remainder;
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __tailSize -= __remainder;
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  // __first here is always pointing to one past the last element of
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  // next possible match.
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _RandomAccessIter __backTrack = __first; 
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  while (__unary_pred(--__backTrack))
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (--__remainder == 0)
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		return (__first - __count); // Success
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __remainder = __count + 1 - (__first - __backTrack);
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __last; // Failure
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Integer,
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _UnaryPredicate>
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __search_n(_ForwardIterator __first, _ForwardIterator __last,
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       _Integer __count,
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       _UnaryPredicate __unary_pred)
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__count <= 0)
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __first;
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__count == 1)
 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return std::__find_if(__first, __last, __unary_pred);
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__search_n_aux(__first, __last, __count, __unary_pred,
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				 std::__iterator_category(__first));
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // find_end for forward iterators.
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator1
 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       forward_iterator_tag, forward_iterator_tag,
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first2 == __last2)
 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __last1;
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator1 __result = __last1;
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (1)
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _ForwardIterator1 __new_result
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    = std::__search(__first1, __last1, __first2, __last2, __comp);
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__new_result == __last1)
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return __result;
 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __result = __new_result;
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __first1 = __new_result;
ARM GAS  /tmp/ccofeNgA.s 			page 179


 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      ++__first1;
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // find_end for bidirectional iterators (much faster).
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _BidirectionalIterator1
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __find_end(_BidirectionalIterator1 __first1,
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       _BidirectionalIterator1 __last1,
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       _BidirectionalIterator2 __first2,
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       _BidirectionalIterator2 __last2,
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       bidirectional_iterator_tag, bidirectional_iterator_tag,
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       _BinaryPredicate __comp)
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _BidirectionalIterator1>)
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _BidirectionalIterator2>)
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _RevIterator1 __rlast1(__first1);
 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _RevIterator2 __rlast2(__first2);
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					      _RevIterator2(__last2), __rlast2,
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					      __comp);
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__rresult == __rlast1)
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __last1;
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else
 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _BidirectionalIterator1 __result = __rresult.base();
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::advance(__result, -std::distance(__first2, __last2));
 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return __result;
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence.
 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   The last iterator @c i in the range
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p [__first1,__last1-(__last2-__first2)) such that @c *(i+N) ==
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p *(__first2+N) for each @c N in the range @p
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [0,__last2-__first2), or @p __last1 if no such iterator exists.
 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first2,__last2) and returns an iterator to the __first
ARM GAS  /tmp/ccofeNgA.s 			page 180


 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  element of the sub-sequence, or @p __last1 if the sub-sequence
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  is not found.  The sub-sequence will be the last such
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  subsequence contained in [__first1,__last1).
 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator1
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_equal_to_iter());
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Find last matching subsequence in a sequence using a predicate.
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first1  Start of range to search.
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last1   End of range to search.
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence to match.
 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence to match.
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp    The predicate to use.
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return The last iterator @c i in the range @p
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2)) such that @c
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  predicate(*(i+N), @p (__first2+N)) is true for each @c N in the
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  range @p [0,__last2-__first2), or @p __last1 if no such iterator
 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  exists.
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Searches the range @p [__first1,__last1) for a sub-sequence that
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  compares equal value-by-value with the sequence given by @p
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first2,__last2) using comp as a predicate and returns an
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  iterator to the first element of the sub-sequence, or @p __last1
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  if the sub-sequence is not found.  The sub-sequence will be the
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  last such subsequence contained in [__first,__last1).
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Because the sub-sequence must lie completely within the range @p
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first1,__last1) it must start at a position less than @p
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  __last1-(__last2-__first2) where @p __last2-__first2 is the
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  length of the sub-sequence.  This means that the returned
ARM GAS  /tmp/ccofeNgA.s 			page 181


 410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  iterator @c i will be in the range @p
 411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first1,__last1-(__last2-__first2))
 412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
 414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator1
 417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
 419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _BinaryPredicate __comp)
 420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
 423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
 424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
 425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
 426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
 427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
 429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__find_end(__first1, __last1, __first2, __last2,
 431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     std::__iterator_category(__first1),
 432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     std::__iterator_category(__first2),
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_iter(__comp));
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
 437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Checks that a predicate is true for all the elements
 439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          of a sequence.
 440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Returns true if @p __pred is true for each element in the range
 447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
 452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     { return __last == std::find_if_not(__first, __last, __pred); }
 454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Checks that a predicate is false for all the elements
 457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          of a sequence.
 458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Returns true if @p __pred is false for each element in the range
 465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p [__first,__last), and false otherwise.
 466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
ARM GAS  /tmp/ccofeNgA.s 			page 182


 467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
 470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     { return __last == _GLIBCXX_STD_A::find_if(__first, __last, __pred); }
 472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Checks that a predicate is true for at least one element
 475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          of a sequence.
 476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  True if the check is true, false otherwise.
 481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Returns true if an element exists in the range @p
 483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first,__last) such that @p __pred is true, and false
 484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  otherwise.
 485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
 489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
 490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     { return !std::none_of(__first, __last, __pred); }
 491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Find the first element in a sequence for which a
 494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          predicate is false.
 495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
 496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   The first iterator @c i in the range @p [__first,__last)
 500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  such that @p __pred(*i) is false, or @p __last if no such iterator exists.
 501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _InputIterator
 505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     find_if_not(_InputIterator __first, _InputIterator __last,
 506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		_Predicate __pred)
 507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      typename iterator_traits<_InputIterator>::value_type>)
 512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__find_if_not(__first, __last,
 514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__pred_iter(__pred));
 515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Checks whether the sequence is partitioned.
 519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  True if the range @p [__first,__last) is partioned by @p __pred,
ARM GAS  /tmp/ccofeNgA.s 			page 183


 524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  i.e. if all elements that satisfy @p __pred appear before those that
 525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  do not.
 526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Predicate>
 528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
 530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     is_partitioned(_InputIterator __first, _InputIterator __last,
 531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _Predicate __pred)
 532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __first = std::find_if_not(__first, __last, __pred);
 534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last)
 535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return true;
 536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       ++__first;
 537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::none_of(__first, __last, __pred);
 538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Find the partition point of a partitioned range.
 542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
 544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
 545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  An iterator @p mid such that @p all_of(__first, mid, __pred)
 547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           and @p none_of(mid, __last, __pred) are both true.
 548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
 552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     partition_point(_ForwardIterator __first, _ForwardIterator __last,
 553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		    _Predicate __pred)
 554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
 557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      typename iterator_traits<_ForwardIterator>::value_type>)
 559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // A specific debug-mode test will be necessary...
 561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
 564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_DistanceType;
 565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__len > 0)
 569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
 570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
 571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
 572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::advance(__middle, __half);
 573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__pred(*__middle))
 574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
 575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __first = __middle;
 576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      ++__first;
 577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __len = __len - __half - 1;
 578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
 579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
 580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    __len = __half;
ARM GAS  /tmp/ccofeNgA.s 			page 184


 581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
 582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __first;
 583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #endif
 585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Predicate>
 588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _OutputIterator
 590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __remove_copy_if(_InputIterator __first, _InputIterator __last,
 591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _OutputIterator __result, _Predicate __pred)
 592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (!__pred(__first))
 595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  {
 596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    *__result = *__first;
 597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    ++__result;
 598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  }
 599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __result;
 600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements of a given value.
 604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __value   The value to be removed.
 609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) not equal
 612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  to @p __value to the range beginning at @p __result.
 613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  remove_copy() is stable, so the relative order of elements that
 614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  are copied is unchanged.
 615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator, typename _Tp>
 617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _OutputIterator
 619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     remove_copy(_InputIterator __first, _InputIterator __last,
 620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		_OutputIterator __result, const _Tp& __value)
 621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
 628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	__gnu_cxx::__ops::__iter_equals_val(__value));
 632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Copy a sequence, removing elements for which a predicate is true.
 636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
ARM GAS  /tmp/ccofeNgA.s 			page 185


 638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p __pred returns false to the range beginning at @p __result.
 645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  remove_copy_if() is stable, so the relative order of elements that are
 647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  copied is unchanged.
 648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Predicate>
 651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _OutputIterator
 653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     remove_copy_if(_InputIterator __first, _InputIterator __last,
 654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _OutputIterator __result, _Predicate __pred)
 655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__remove_copy_if(__first, __last, __result,
 665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__pred_iter(__pred));
 666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 667:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 668:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
 669:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 670:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence for which a predicate is true.
 671:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 672:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 673:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 674:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
 675:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 676:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 677:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 678:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 679:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p __result.
 680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 681:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  copy_if() is stable, so the relative order of elements that are
 682:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  copied is unchanged.
 683:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
 685:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Predicate>
 686:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 687:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _OutputIterator
 688:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     copy_if(_InputIterator __first, _InputIterator __last,
 689:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    _OutputIterator __result, _Predicate __pred)
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 691:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 693:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 694:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
ARM GAS  /tmp/ccofeNgA.s 			page 186


 695:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 696:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 698:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 699:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (__pred(*__first))
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  {
 702:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    *__result = *__first;
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    ++__result;
 704:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  }
 705:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __result;
 706:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 707:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 708:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 709:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 710:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _OutputIterator
 711:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result)
 712:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 713:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__n > 0)
 714:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
 715:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  while (true)
 716:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
 717:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      *__result = *__first;
 718:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      ++__result;
 719:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (--__n > 0)
 720:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		++__first;
 721:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      else
 722:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		break;
 723:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
 724:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
 725:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __result;
 726:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 727:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****  
 728:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _CharT, typename _Size>
 729:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __enable_if_t<__is_char<_CharT>::__value, _CharT*>
 730:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT>>,
 731:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       _Size, _CharT*);
 732:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 733:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 734:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 735:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _OutputIterator
 736:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __copy_n(_InputIterator __first, _Size __n,
 737:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _OutputIterator __result, input_iterator_tag)
 738:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 739:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__niter_wrap(__result,
 740:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			       __copy_n_a(__first, __n,
 741:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					  std::__niter_base(__result)));
 742:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 743:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 744:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size,
 745:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _OutputIterator>
 746:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 747:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _OutputIterator
 748:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __copy_n(_RandomAccessIterator __first, _Size __n,
 749:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _OutputIterator __result, random_access_iterator_tag)
 750:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     { return std::copy(__first, __first + __n, __result); }
 751:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 187


 752:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 753:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Copies the range [first,first+n) into [result,result+n).
 754:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 755:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 756:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __n      The number of elements to copy.
 757:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result An output iterator.
 758:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  result+n.
 759:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 760:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This inline function will boil down to a call to @c memmove whenever
 761:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 762:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  loop count will be known (and therefore a candidate for compiler
 763:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  optimizations such as unrolling).
 764:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 765:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 766:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 767:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _OutputIterator
 768:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
 769:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 770:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 771:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 772:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
 773:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 774:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       const auto __n2 = std::__size_to_integer(__n);
 776:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__n2 <= 0)
 777:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __result;
 778:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 779:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_can_increment(__first, __n2);
 780:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_can_increment(__result, __n2);
 781:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 782:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__copy_n(__first, __n2, __result,
 783:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   std::__iterator_category(__first));
 784:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 785:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 786:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 787:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Copy the elements of a sequence to separate output sequences
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *         depending on the truth value of a predicate.
 789:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    An input iterator.
 792:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __out_true   An output iterator.
 793:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __out_false  An output iterator.
 794:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred    A predicate.
 795:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   A pair designating the ends of the resulting sequences.
 796:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 797:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) for which
 798:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p __pred returns true to the range beginning at @p out_true
 799:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  and each element for which @p __pred returns false to @p __out_false.
 800:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 801:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator1,
 802:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _OutputIterator2, typename _Predicate>
 803:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 804:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     pair<_OutputIterator1, _OutputIterator2>
 805:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     partition_copy(_InputIterator __first, _InputIterator __last,
 806:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _OutputIterator1 __out_true, _OutputIterator2 __out_false,
 807:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _Predicate __pred)
 808:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
ARM GAS  /tmp/ccofeNgA.s 			page 188


 809:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 810:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
 811:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator1,
 812:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 813:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator2,
 814:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 815:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 816:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
 817:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 818:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       
 819:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 820:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (__pred(*__first))
 821:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  {
 822:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    *__out_true = *__first;
 823:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    ++__out_true;
 824:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  }
 825:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	else
 826:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  {
 827:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    *__out_false = *__first;
 828:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    ++__out_false;
 829:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  }
 830:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 831:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
 832:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 833:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #endif // C++11
 834:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 835:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 836:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 837:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
 838:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __remove_if(_ForwardIterator __first, _ForwardIterator __last,
 839:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		_Predicate __pred)
 840:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 841:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __first = std::__find_if(__first, __last, __pred);
 842:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last)
 843:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __first;
 844:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __result = __first;
 845:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       ++__first;
 846:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (; __first != __last; ++__first)
 847:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (!__pred(__first))
 848:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  {
 849:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    *__result = _GLIBCXX_MOVE(*__first);
 850:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    ++__result;
 851:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  }
 852:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __result;
 853:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 854:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 855:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 856:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Remove elements from a sequence.
 857:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 858:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  An input iterator.
 859:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   An input iterator.
 860:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __value  The value to be removed.
 861:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 862:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 863:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  All elements equal to @p __value are removed from the range
 864:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p [__first,__last).
 865:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
ARM GAS  /tmp/ccofeNgA.s 			page 189


 866:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  remove() is stable, so the relative order of elements that are
 867:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  not removed is unchanged.
 868:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 869:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 870:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 871:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
 873:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 874:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator
 875:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     remove(_ForwardIterator __first, _ForwardIterator __last,
 876:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   const _Tp& __value)
 877:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 878:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 879:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 880:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _ForwardIterator>)
 881:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
 882:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
 883:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 884:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 885:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 886:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_equals_val(__value));
 887:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 888:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 889:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 890:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Remove elements from a sequence using a predicate.
 891:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 892:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 893:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 894:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred   A predicate.
 895:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
 896:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 897:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  All elements for which @p __pred returns true are removed from the range
 898:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p [__first,__last).
 899:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 900:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  remove_if() is stable, so the relative order of elements that are
 901:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  not removed is unchanged.
 902:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 903:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 904:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 905:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 906:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
 907:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 908:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator
 909:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     remove_if(_ForwardIterator __first, _ForwardIterator __last,
 910:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      _Predicate __pred)
 911:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 912:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 913:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 914:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _ForwardIterator>)
 915:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
 917:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 918:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 919:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__remove_if(__first, __last,
 920:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			      __gnu_cxx::__ops::__pred_iter(__pred));
 921:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 922:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 190


 923:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 924:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 925:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
 926:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
 927:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		    _BinaryPredicate __binary_pred)
 928:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 929:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last)
 930:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __last;
 931:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
 932:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (++__next != __last)
 933:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
 934:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__binary_pred(__first, __next))
 935:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return __first;
 936:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __first = __next;
 937:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
 938:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __last;
 939:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 940:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 941:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
 942:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 943:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
 944:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __unique(_ForwardIterator __first, _ForwardIterator __last,
 945:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _BinaryPredicate __binary_pred)
 946:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 947:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // Skip the beginning, if already unique.
 948:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __first = std::__adjacent_find(__first, __last, __binary_pred);
 949:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last)
 950:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __last;
 951:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 952:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // Do the real copy work.
 953:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __dest = __first;
 954:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       ++__first;
 955:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (++__first != __last)
 956:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (!__binary_pred(__dest, __first))
 957:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  *++__dest = _GLIBCXX_MOVE(*__first);
 958:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return ++__dest;
 959:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 960:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 961:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 962:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Remove consecutive duplicate values from a sequence.
 963:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 964:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  A forward iterator.
 965:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   A forward iterator.
 966:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
 967:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 968:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
 969:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  values that compare equal.
 970:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  not removed is unchanged.
 972:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
 973:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
 974:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
 975:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
 976:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
 977:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator
 978:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last)
 979:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
ARM GAS  /tmp/ccofeNgA.s 			page 191


 980:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
 981:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 982:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _ForwardIterator>)
 983:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualityComparableConcept<
 984:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     typename iterator_traits<_ForwardIterator>::value_type>)
 985:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
 986:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 987:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__unique(__first, __last,
 988:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_equal_to_iter());
 989:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
 990:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
 991:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
 992:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Remove consecutive values from a sequence using a predicate.
 993:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
 994:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first        A forward iterator.
 995:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last         A forward iterator.
 996:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __binary_pred  A binary predicate.
 997:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
 998:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
 999:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Removes all but the first element from each group of consecutive
1000:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  values for which @p __binary_pred returns true.
1001:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  unique() is stable, so the relative order of elements that are
1002:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  not removed is unchanged.
1003:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Elements between the end of the resulting sequence and @p __last
1004:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  are still present, but their value is unspecified.
1005:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1006:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _BinaryPredicate>
1007:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1008:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator
1009:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     unique(_ForwardIterator __first, _ForwardIterator __last,
1010:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   _BinaryPredicate __binary_pred)
1011:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1012:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
1013:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1014:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _ForwardIterator>)
1015:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1016:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type,
1017:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
1018:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1019:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1020:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__unique(__first, __last,
1021:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
1022:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1023:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1024:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1025:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This is an uglified
1026:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1027:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *              _BinaryPredicate)
1028:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  overloaded for forward iterators and output iterator as result.
1029:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1030:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator,
1031:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1032:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1033:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _OutputIterator
1034:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
1035:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1036:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  forward_iterator_tag, output_iterator_tag)
ARM GAS  /tmp/ccofeNgA.s 			page 192


1037:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1038:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1039:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1040:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1041:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type>)
1042:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1043:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1044:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       *__result = *__first;
1045:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (++__next != __last)
1046:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (!__binary_pred(__first, __next))
1047:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  {
1048:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    __first = __next;
1049:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    *++__result = *__first;
1050:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  }
1051:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return ++__result;
1052:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1053:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1054:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1055:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This is an uglified
1056:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1057:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *              _BinaryPredicate)
1058:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  overloaded for input iterators and output iterator as result.
1059:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1060:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
1061:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1062:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1063:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _OutputIterator
1064:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1065:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _OutputIterator __result, _BinaryPredicate __binary_pred,
1066:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  input_iterator_tag, output_iterator_tag)
1067:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1068:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1069:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1070:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type,
1071:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1072:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1073:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typename iterator_traits<_InputIterator>::value_type __value = *__first;
1074:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
1075:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	__rebound_pred
1076:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	= __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
1077:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       *__result = __value;
1078:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (++__first != __last)
1079:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (!__rebound_pred(__first, __value))
1080:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  {
1081:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    __value = *__first;
1082:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    *++__result = __value;
1083:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  }
1084:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return ++__result;
1085:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1086:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1087:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1088:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This is an uglified
1089:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  unique_copy(_InputIterator, _InputIterator, _OutputIterator,
1090:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *              _BinaryPredicate)
1091:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  overloaded for input iterators and forward iterator as result.
1092:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1093:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _ForwardIterator,
ARM GAS  /tmp/ccofeNgA.s 			page 193


1094:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
1095:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1096:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
1097:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __unique_copy(_InputIterator __first, _InputIterator __last,
1098:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _ForwardIterator __result, _BinaryPredicate __binary_pred,
1099:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  input_iterator_tag, forward_iterator_tag)
1100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements -- iterators already checked
1102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
1103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  typename iterator_traits<_ForwardIterator>::value_type,
1104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  typename iterator_traits<_InputIterator>::value_type>)
1105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       *__result = *__first;
1106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (++__first != __last)
1107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (!__binary_pred(__result, __first))
1108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  *++__result = *__first;
1109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return ++__result;
1110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  overloaded for bidirectional iterators.
1116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
1120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
1121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (true)
1124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (__first == __last || __first == --__last)
1125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return;
1126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	else
1127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  {
1128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    std::iter_swap(__first, __last);
1129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    ++__first;
1130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  }
1131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This is an uglified reverse(_BidirectionalIterator,
1135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *                              _BidirectionalIterator)
1136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  overloaded for random access iterators.
1137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
1141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
1142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      random_access_iterator_tag)
1143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last)
1145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return;
1146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       --__last;
1147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first < __last)
1148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first;
ARM GAS  /tmp/ccofeNgA.s 			page 194


1151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  --__last;
1152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Reverse a sequence.
1157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  A bidirectional iterator.
1159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   A bidirectional iterator.
1160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   reverse() returns no value.
1161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
1162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Reverses the order of the elements in the range @p [__first,__last),
1163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  so that the first element becomes the last etc.
1164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  For every @c i such that @p 0<=i<=(__last-__first)/2), @p reverse()
1165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  swaps @p *(__first+i) and @p *(__last-(i+1))
1166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline void
1170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
1171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
1173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__reverse(__first, __last, std::__iterator_category(__first));
1177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Copy a sequence, reversing its elements.
1181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   A bidirectional iterator.
1183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    A bidirectional iterator.
1184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  An iterator designating the end of the resulting sequence.
1186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
1187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Copies the elements in the range @p [__first,__last) to the
1188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  range @p [__result,__result+(__last-__first)) such that the
1189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  order of the elements is reversed.  For every @c i such that @p
1190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  0<=i<=(__last-__first), @p reverse_copy() performs the
1191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  assignment @p *(__result+(__last-__first)-1-i) = *(__first+i).
1192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  The ranges @p [__first,__last) and @p
1193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__result,__result+(__last-__first)) must not overlap.
1194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _OutputIterator>
1196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _OutputIterator
1198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
1199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		 _OutputIterator __result)
1200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
1202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
1203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		typename iterator_traits<_BidirectionalIterator>::value_type>)
1206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 195


1208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first != __last)
1209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  --__last;
1211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  *__result = *__last;
1212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__result;
1213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __result;
1215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This is a helper function for the rotate algorithm specialized on RAIs.
1219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  It returns the greatest common divisor of two integer values.
1220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _EuclideanRingElement>
1222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _EuclideanRingElement
1224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
1225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__n != 0)
1227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _EuclideanRingElement __t = __m % __n;
1229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __m = __n;
1230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __n = __t;
1231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __m;
1233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   inline namespace _V2
1236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   {
1237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
1240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
1242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __rotate(_ForwardIterator __first,
1243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _ForwardIterator __middle,
1244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _ForwardIterator __last,
1245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     forward_iterator_tag)
1246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __middle)
1248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __last;
1249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else if (__last == __middle)
1250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __first;
1251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __first2 = __middle;
1253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       do
1254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first;
1257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first2;
1258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__first == __middle)
1259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    __middle = __first2;
1260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first2 != __last);
1262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __ret = __first;
1264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 196


1265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __first2 = __middle;
1266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first2 != __last)
1268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __first2);
1270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first;
1271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first2;
1272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__first == __middle)
1273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    __middle = __first2;
1274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else if (__first2 == __last)
1275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    __first2 = __middle;
1276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __ret;
1278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    /// This is a helper function for the rotate algorithm.
1281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
1282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _BidirectionalIterator
1284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __rotate(_BidirectionalIterator __first,
1285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _BidirectionalIterator __middle,
1286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _BidirectionalIterator __last,
1287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      bidirectional_iterator_tag)
1288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
1290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
1291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __middle)
1294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __last;
1295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else if (__last == __middle)
1296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __first;
1297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__reverse(__first,  __middle, bidirectional_iterator_tag());
1299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first != __middle && __middle != __last)
1302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::iter_swap(__first, --__last);
1304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first;
1305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __middle)
1308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__reverse(__middle, __last,   bidirectional_iterator_tag());
1310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return __last;
1311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else
1313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__reverse(__first,  __middle, bidirectional_iterator_tag());
1315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return __first;
1316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the rotate algorithm.
1320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator>
1321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  /tmp/ccofeNgA.s 			page 197


1322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _RandomAccessIterator
1323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __rotate(_RandomAccessIterator __first,
1324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _RandomAccessIterator __middle,
1325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _RandomAccessIterator __last,
1326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     random_access_iterator_tag)
1327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
1329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __middle)
1333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __last;
1334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else if (__last == __middle)
1335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __first;
1336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
1338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_Distance;
1339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_ValueType;
1341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _Distance __n = __last   - __first;
1343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _Distance __k = __middle - __first;
1344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__k == __n - __k)
1346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::swap_ranges(__first, __middle, __middle);
1348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return __middle;
1349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _RandomAccessIterator __p = __first;
1352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _RandomAccessIterator __ret = __first + (__last - __middle);
1353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (;;)
1355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__k < __n - __k)
1357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
1358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		{
1360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*__p);
1361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _GLIBCXX_MOVE3(__p + 1, __p + __n, __p);
1362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  *(__p + __n - 1) = _GLIBCXX_MOVE(__t);
1363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  return __ret;
1364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		}
1365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __k;
1366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		{
1368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  ++__p;
1370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  ++__q;
1371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		}
1372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __n %= __k;
1373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (__n == 0)
1374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		return __ret;
1375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::swap(__n, __k);
1376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __k = __n - __k;
1377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
1378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
ARM GAS  /tmp/ccofeNgA.s 			page 198


1379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
1380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __k = __n - __k;
1381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (__is_pod(_ValueType) && __k == 1)
1382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		{
1383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _ValueType __t = _GLIBCXX_MOVE(*(__p + __n - 1));
1384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _GLIBCXX_MOVE_BACKWARD3(__p, __p + __n - 1, __p + __n);
1385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  *__p = _GLIBCXX_MOVE(__t);
1386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  return __ret;
1387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		}
1388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      _RandomAccessIterator __q = __p + __n;
1389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __p = __q - __k;
1390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      for (_Distance __i = 0; __i < __n - __k; ++ __i)
1391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		{
1392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  --__p;
1393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  --__q;
1394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  std::iter_swap(__p, __q);
1395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		}
1396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __n %= __k;
1397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (__n == 0)
1398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		return __ret;
1399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::swap(__n, __k);
1400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
1401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
1405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    // DR 488. rotate throws away useful information
1406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Rotate the elements of a sequence.
1408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  first + (last - middle).
1413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
1414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Rotates the elements of the range @p [__first,__last) by 
1415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p (__middle - __first) positions so that the element at @p __middle
1416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  is moved to @p __first, the element at @p __middle+1 is moved to
1417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p __first+1 and so on for each element in the range
1418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p [__first,__last).
1419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
1420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This effectively swaps the ranges @p [__first,__middle) and
1421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p [__middle,__last).
1422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
1423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Performs
1424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *   @p *(__first+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
1428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator
1430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     rotate(_ForwardIterator __first, _ForwardIterator __middle,
1431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   _ForwardIterator __last)
1432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
1434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _ForwardIterator>)
ARM GAS  /tmp/ccofeNgA.s 			page 199


1436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__rotate(__first, __middle, __last,
1440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   std::__iterator_category(__first));
1441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   } // namespace _V2
1444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Copy a sequence, rotating its elements.
1447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __middle  A forward iterator.
1450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result  An output iterator.
1452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   An iterator designating the end of the resulting sequence.
1453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
1454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Copies the elements of the range @p [__first,__last) to the
1455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  range beginning at @result, rotating the copied elements by 
1456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p (__middle-__first) positions so that the element at @p __middle
1457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  is moved to @p __result, the element at @p __middle+1 is moved
1458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  to @p __result+1 and so on for each element in the range @p
1459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first,__last).
1460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
1461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Performs 
1462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p *(__result+(n+(__last-__middle))%(__last-__first))=*(__first+n)
1463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  for each @p n in the range @p [0,__last-__first).
1464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _OutputIterator>
1466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _OutputIterator
1468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
1469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		_ForwardIterator __last, _OutputIterator __result)
1470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
1472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
1473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
1474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		typename iterator_traits<_ForwardIterator>::value_type>)
1475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __middle);
1476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__middle, __last);
1477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::copy(__first, __middle,
1479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		       std::copy(__middle, __last, __result));
1480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function...
1483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
1486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __partition(_ForwardIterator __first, _ForwardIterator __last,
1487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		_Predicate __pred, forward_iterator_tag)
1488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last)
1490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __first;
1491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__pred(*__first))
ARM GAS  /tmp/ccofeNgA.s 			page 200


1493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (++__first == __last)
1494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return __first;
1495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
1497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (++__next != __last)
1499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (__pred(*__next))
1500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  {
1501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    std::iter_swap(__first, __next);
1502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    ++__first;
1503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  }
1504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __first;
1506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function...
1509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Predicate>
1510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _BidirectionalIterator
1512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
1513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		_Predicate __pred, bidirectional_iterator_tag)
1514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (true)
1516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  while (true)
1518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    if (__first == __last)
1519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      return __first;
1520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    else if (__pred(*__first))
1521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      ++__first;
1522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    else
1523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      break;
1524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  --__last;
1525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  while (true)
1526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    if (__first == __last)
1527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      return __first;
1528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    else if (!bool(__pred(*__last)))
1529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      --__last;
1530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    else
1531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      break;
1532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first;
1534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // partition
1538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function...
1540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// Requires __first != __last and !__pred(__first)
1541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// and __len == distance(__first, __last).
1542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   ///
1543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// !__pred(__first) allows us to guarantee that we don't
1544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// move-assign an element onto itself.
1545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
1546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Distance>
1547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
1548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __stable_partition_adaptive(_ForwardIterator __first,
1549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				_ForwardIterator __last,
ARM GAS  /tmp/ccofeNgA.s 			page 201


1550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				_Predicate __pred, _Distance __len,
1551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				_Pointer __buffer,
1552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				_Distance __buffer_size)
1553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__len == 1)
1555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __first;
1556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__len <= __buffer_size)
1558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _ForwardIterator __result1 = __first;
1560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _Pointer __result2 = __buffer;
1561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  // The precondition guarantees that !__pred(__first), so
1563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  // move that element to the buffer before starting the loop.
1564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  // This ensures that we only call __pred once per element.
1565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  *__result2 = _GLIBCXX_MOVE(*__first);
1566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__result2;
1567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first;
1568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  for (; __first != __last; ++__first)
1569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    if (__pred(__first))
1570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      {
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		*__result1 = _GLIBCXX_MOVE(*__first);
1572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		++__result1;
1573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      }
1574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    else
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      {
1576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		*__result2 = _GLIBCXX_MOVE(*__first);
1577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		++__result2;
1578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      }
1579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _GLIBCXX_MOVE3(__buffer, __result2, __result1);
1581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return __result1;
1582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __middle = __first;
1585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::advance(__middle, __len / 2);
1586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __left_split =
1587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __middle, __pred,
1588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					 __len / 2, __buffer,
1589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					 __buffer_size);
1590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // Advance past true-predicate values to satisfy this
1592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // function's preconditions.
1593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _Distance __right_len = __len - __len / 2;
1594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __right_split =
1595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::__find_if_not_n(__middle, __right_len, __pred);
1596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__right_len)
1598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	__right_split =
1599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__stable_partition_adaptive(__right_split, __last, __pred,
1600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					   __right_len,
1601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					   __buffer, __buffer_size);
1602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::rotate(__left_split, __middle, __right_split);
1604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
ARM GAS  /tmp/ccofeNgA.s 			page 202


1607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
1608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		       _Predicate __pred)
1610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __first = std::__find_if_not(__first, __last, __pred);
1612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last)
1614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __first;
1615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
1617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_ValueType;
1618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
1619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_DistanceType;
1620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _Temporary_buffer<_ForwardIterator, _ValueType>
1622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	__buf(__first, std::distance(__first, __last));
1623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return
1624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::__stable_partition_adaptive(__first, __last, __pred,
1625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					 _DistanceType(__buf.requested_size()),
1626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					 __buf.begin(),
1627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					 _DistanceType(__buf.size()));
1628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Move elements for which a predicate is true to the beginning
1632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *         of a sequence, preserving relative ordering.
1633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
1634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   A forward iterator.
1635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    A forward iterator.
1636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred    A predicate functor.
1637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  An iterator @p middle such that @p __pred(i) is true for each
1638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  iterator @p i in the range @p [first,middle) and false for each @p i
1639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  in the range @p [middle,last).
1640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
1641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Performs the same function as @p partition() with the additional
1642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  guarantee that the relative ordering of elements in each group is
1643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  preserved, so any two elements @p x and @p y in the range
1644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p [__first,__last) such that @p __pred(x)==__pred(y) will have the same
1645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  relative ordering after calling @p stable_partition().
1646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Predicate>
1648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator
1649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     stable_partition(_ForwardIterator __first, _ForwardIterator __last,
1650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _Predicate __pred)
1651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
1653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
1654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _ForwardIterator>)
1655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
1656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
1657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__stable_partition(__first, __last,
1660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__pred_iter(__pred));
1661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the sort routines.
ARM GAS  /tmp/ccofeNgA.s 			page 203


1664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
1667:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __heap_select(_RandomAccessIterator __first,
1668:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _RandomAccessIterator __middle,
1669:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _RandomAccessIterator __last, _Compare __comp)
1670:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1671:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__make_heap(__first, __middle, __comp);
1672:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
1673:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (__comp(__i, __first))
1674:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__pop_heap(__first, __middle, __i, __comp);
1675:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1676:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1677:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // partial_sort
1678:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1679:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Compare>
1681:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1682:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _RandomAccessIterator
1683:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __partial_sort_copy(_InputIterator __first, _InputIterator __last,
1684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			_RandomAccessIterator __result_first,
1685:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			_RandomAccessIterator __result_last,
1686:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			_Compare __comp)
1687:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1688:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1689:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_InputValueType;
1690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef iterator_traits<_RandomAccessIterator> _RItTraits;
1691:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename _RItTraits::difference_type _DistanceType;
1692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1693:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__result_first == __result_last)
1694:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __result_last;
1695:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _RandomAccessIterator __result_real_last = __result_first;
1696:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first != __last && __result_real_last != __result_last)
1697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1698:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  *__result_real_last = *__first;
1699:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__result_real_last;
1700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first;
1701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1702:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       
1703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__make_heap(__result_first, __result_real_last, __comp);
1704:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first != __last)
1705:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1706:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp(__first, __result_first))
1707:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    std::__adjust_heap(__result_first, _DistanceType(0),
1708:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			       _DistanceType(__result_real_last
1709:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					     - __result_first),
1710:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			       _InputValueType(*__first), __comp);
1711:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first;
1712:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1713:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__sort_heap(__result_first, __result_real_last, __comp);
1714:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __result_real_last;
1715:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1716:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1717:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1718:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence.
1719:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1720:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
ARM GAS  /tmp/ccofeNgA.s 			page 204


1721:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
1722:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1723:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1724:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1725:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
1726:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1727:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  to the range beginning at @p __result_first, where the number of
1728:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
1729:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1730:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1731:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1732:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  *j<*i is false.
1733:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1734:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1735:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator>
1736:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1737:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _RandomAccessIterator
1738:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1739:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1740:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last)
1741:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1742:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1743:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1744:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_InputValueType;
1745:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1746:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_OutputValueType;
1747:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #endif
1748:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1749:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
1750:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1751:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1752:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _OutputValueType>)
1753:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<_InputValueType,
1754:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 						     _OutputValueType>)
1755:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_OutputValueType>)
1756:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1757:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
1758:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
1759:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1760:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1761:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				      __result_first, __result_last,
1762:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				      __gnu_cxx::__ops::__iter_less_iter());
1763:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1764:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1765:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1766:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Copy the smallest elements of a sequence using a predicate for
1767:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *         comparison.
1768:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
1769:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An input iterator.
1770:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another input iterator.
1771:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result_first   A random-access iterator.
1772:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result_last    Another random-access iterator.
1773:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
1774:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   An iterator indicating the end of the resulting sequence.
1775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
1776:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Copies and sorts the smallest N values from the range @p [__first,__last)
1777:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  to the range beginning at @p result_first, where the number of
ARM GAS  /tmp/ccofeNgA.s 			page 205


1778:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  elements to be copied, @p N, is the smaller of @p (__last-__first) and
1779:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p (__result_last-__result_first).
1780:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  After the sort if @e i and @e j are iterators in the range
1781:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p [__result_first,__result_first+N) such that i precedes j then
1782:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p __comp(*j,*i) is false.
1783:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  The value returned is @p __result_first+N.
1784:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1785:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _RandomAccessIterator,
1786:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Compare>
1787:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _RandomAccessIterator
1789:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     partial_sort_copy(_InputIterator __first, _InputIterator __last,
1790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_first,
1791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _RandomAccessIterator __result_last,
1792:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _Compare __comp)
1793:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1794:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
1795:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1796:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_InputValueType;
1797:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::value_type
1798:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_OutputValueType;
1799:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #endif
1800:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1801:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
1802:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
1803:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
1804:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _RandomAccessIterator>)
1805:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ConvertibleConcept<_InputValueType,
1806:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _OutputValueType>)
1807:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1808:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _InputValueType, _OutputValueType>)
1809:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
1810:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _OutputValueType, _OutputValueType>)
1811:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
1812:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
1813:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__result_first, __result_last);
1814:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1815:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__partial_sort_copy(__first, __last,
1816:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				      __result_first, __result_last,
1817:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_iter(__comp));
1818:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1819:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1820:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1821:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1822:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1823:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
1824:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __unguarded_linear_insert(_RandomAccessIterator __last,
1825:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			      _Compare __comp)
1826:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1827:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typename iterator_traits<_RandomAccessIterator>::value_type
1828:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	__val = _GLIBCXX_MOVE(*__last);
1829:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _RandomAccessIterator __next = __last;
1830:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       --__next;
1831:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__comp(__val, __next))
1832:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1833:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  *__last = _GLIBCXX_MOVE(*__next);
1834:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __last = __next;
ARM GAS  /tmp/ccofeNgA.s 			page 206


1835:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  --__next;
1836:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1837:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       *__last = _GLIBCXX_MOVE(__val);
1838:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1839:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1840:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1841:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1842:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1843:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
1844:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __insertion_sort(_RandomAccessIterator __first,
1845:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _RandomAccessIterator __last, _Compare __comp)
1846:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1847:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last) return;
1848:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1849:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
1850:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1851:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp(__i, __first))
1852:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
1853:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      typename iterator_traits<_RandomAccessIterator>::value_type
1854:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		__val = _GLIBCXX_MOVE(*__i);
1855:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
1856:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      *__first = _GLIBCXX_MOVE(__val);
1857:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
1858:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
1859:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    std::__unguarded_linear_insert(__i,
1860:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
1861:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1862:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1863:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1864:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1865:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1866:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1867:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline void
1868:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __unguarded_insertion_sort(_RandomAccessIterator __first,
1869:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			       _RandomAccessIterator __last, _Compare __comp)
1870:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1871:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
1872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::__unguarded_linear_insert(__i,
1873:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
1874:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1875:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1876:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
1877:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @doctodo
1878:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This controls some aspect of the sort routines.
1879:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
1880:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   enum { _S_threshold = 16 };
1881:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1882:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1883:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1884:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1885:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
1886:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __final_insertion_sort(_RandomAccessIterator __first,
1887:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   _RandomAccessIterator __last, _Compare __comp)
1888:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1889:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__last - __first > int(_S_threshold))
1890:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1891:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
ARM GAS  /tmp/ccofeNgA.s 			page 207


1892:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
1893:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					  __comp);
1894:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1895:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else
1896:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::__insertion_sort(__first, __last, __comp);
1897:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1898:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1899:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function...
1900:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1901:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1902:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _RandomAccessIterator
1903:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __unguarded_partition(_RandomAccessIterator __first,
1904:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			  _RandomAccessIterator __last,
1905:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			  _RandomAccessIterator __pivot, _Compare __comp)
1906:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1907:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (true)
1908:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1909:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  while (__comp(__first, __pivot))
1910:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    ++__first;
1911:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  --__last;
1912:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  while (__comp(__pivot, __last))
1913:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    --__last;
1914:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (!(__first < __last))
1915:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return __first;
1916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::iter_swap(__first, __last);
1917:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first;
1918:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1919:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1920:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1921:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function...
1922:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1923:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1924:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _RandomAccessIterator
1925:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __unguarded_partition_pivot(_RandomAccessIterator __first,
1926:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				_RandomAccessIterator __last, _Compare __comp)
1927:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1928:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _RandomAccessIterator __mid = __first + (__last - __first) / 2;
1929:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
1930:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  __comp);
1931:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__unguarded_partition(__first + 1, __last, __first, __comp);
1932:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1933:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1934:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1935:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1936:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline void
1937:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __partial_sort(_RandomAccessIterator __first,
1938:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _RandomAccessIterator __middle,
1939:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _RandomAccessIterator __last,
1940:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _Compare __comp)
1941:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1942:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__heap_select(__first, __middle, __last, __comp);
1943:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__sort_heap(__first, __middle, __comp);
1944:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1945:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1946:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the sort routine.
1947:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size, typename _Compare>
1948:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  /tmp/ccofeNgA.s 			page 208


1949:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
1950:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __introsort_loop(_RandomAccessIterator __first,
1951:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _RandomAccessIterator __last,
1952:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _Size __depth_limit, _Compare __comp)
1953:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1954:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__last - __first > int(_S_threshold))
1955:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1956:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__depth_limit == 0)
1957:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
1958:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::__partial_sort(__first, __last, __last, __comp);
1959:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      return;
1960:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
1961:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  --__depth_limit;
1962:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _RandomAccessIterator __cut =
1963:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    std::__unguarded_partition_pivot(__first, __last, __comp);
1964:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
1965:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __last = __cut;
1966:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1967:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1968:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1969:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // sort
1970:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
1972:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1973:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline void
1974:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
1975:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   _Compare __comp)
1976:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1977:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first != __last)
1978:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1979:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__introsort_loop(__first, __last,
1980:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				std::__lg(__last - __first) * 2,
1981:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__comp);
1982:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__final_insertion_sort(__first, __last, __comp);
1983:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
1984:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
1985:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
1986:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Size, typename _Compare>
1987:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
1988:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
1989:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
1990:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _RandomAccessIterator __last, _Size __depth_limit,
1991:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _Compare __comp)
1992:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
1993:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__last - __first > 3)
1994:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
1995:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__depth_limit == 0)
1996:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
1997:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::__heap_select(__first, __nth + 1, __last, __comp);
1998:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      // Place the nth largest element in its final position.
1999:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::iter_swap(__first, __nth);
2000:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      return;
2001:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2002:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  --__depth_limit;
2003:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _RandomAccessIterator __cut =
2004:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    std::__unguarded_partition_pivot(__first, __last, __comp);
2005:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__cut <= __nth)
ARM GAS  /tmp/ccofeNgA.s 			page 209


2006:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    __first = __cut;
2007:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
2008:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    __last = __cut;
2009:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2010:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__insertion_sort(__first, __last, __comp);
2011:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2012:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2013:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // nth_element
2014:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2015:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // lower_bound moved to stl_algobase.h
2016:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2017:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2018:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Finds the first position in which @p __val could be inserted
2019:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *         without changing the ordering.
2020:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2021:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2022:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2023:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2024:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2025:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return An iterator pointing to the first element <em>not less
2026:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           than</em> @p __val, or end() if every element is less
2027:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           than @p __val.
2028:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2029:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2030:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2031:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2032:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
2033:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2034:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2035:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator
2036:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     lower_bound(_ForwardIterator __first, _ForwardIterator __last,
2037:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2038:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2039:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2040:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2041:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2042:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2043:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2044:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 						__val, __comp);
2045:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2046:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__lower_bound(__first, __last, __val,
2047:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_val(__comp));
2048:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2049:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2050:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2051:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2052:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
2053:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2054:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  const _Tp& __val, _Compare __comp)
2055:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2056:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
2057:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_DistanceType;
2058:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2059:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
2060:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2061:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__len > 0)
2062:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
ARM GAS  /tmp/ccofeNgA.s 			page 210


2063:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
2064:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
2065:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::advance(__middle, __half);
2066:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp(__val, __middle))
2067:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    __len = __half;
2068:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
2069:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2070:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __first = __middle;
2071:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      ++__first;
2072:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __len = __len - __half - 1;
2073:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2074:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2075:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __first;
2076:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2077:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2078:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2079:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Finds the last position in which @p __val could be inserted
2080:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *         without changing the ordering.
2081:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2082:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2083:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2084:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2085:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the first element greater than @p __val,
2086:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           or end() if no elements are greater than @p __val.
2087:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2088:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
2089:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2090:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2091:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator
2092:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2093:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		const _Tp& __val)
2094:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2095:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2096:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2097:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2098:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2099:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__upper_bound(__first, __last, __val,
2102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_less_iter());
2103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Finds the last position in which @p __val could be inserted
2107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *         without changing the ordering.
2108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the first element greater than @p __val,
2114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           or end() if no elements are greater than @p __val.
2115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
ARM GAS  /tmp/ccofeNgA.s 			page 211


2120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator
2123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     upper_bound(_ForwardIterator __first, _ForwardIterator __last,
2124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 						__val, __comp);
2132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__upper_bound(__first, __last, __val,
2134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
2135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp,
2138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _CompareItTp, typename _CompareTpIt>
2139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     pair<_ForwardIterator, _ForwardIterator>
2141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __equal_range(_ForwardIterator __first, _ForwardIterator __last,
2142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  const _Tp& __val,
2143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
2144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_ForwardIterator>::difference_type
2146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_DistanceType;
2147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _DistanceType __len = std::distance(__first, __last);
2149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__len > 0)
2151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _DistanceType __half = __len >> 1;
2153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _ForwardIterator __middle = __first;
2154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::advance(__middle, __half);
2155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp_it_val(__middle, __val))
2156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __first = __middle;
2158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      ++__first;
2159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __len = __len - __half - 1;
2160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else if (__comp_val_it(__val, __middle))
2162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    __len = __half;
2163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
2164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      _ForwardIterator __left
2166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		= std::__lower_bound(__first, __middle, __val, __comp_it_val);
2167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::advance(__first, __len);
2168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      _ForwardIterator __right
2169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		= std::__upper_bound(++__middle, __first, __val, __comp_val_it);
2170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
2171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
2174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
ARM GAS  /tmp/ccofeNgA.s 			page 212


2177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Finds the largest subrange in which @p __val could be inserted
2178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *         at any place in it without changing the ordering.
2179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  An pair of iterators defining the subrange.
2184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This is equivalent to
2187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @code
2188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *    std::make_pair(lower_bound(__first, __last, __val),
2189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *                   upper_bound(__first, __last, __val))
2190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @endcode
2191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  but does not actually call those functions.
2192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
2193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
2196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     equal_range(_ForwardIterator __first, _ForwardIterator __last,
2197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		const _Tp& __val)
2198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower(__first, __last, __val);
2206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__equal_range(__first, __last, __val,
2209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_less_val(),
2210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_less_iter());
2211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Finds the largest subrange in which @p __val could be inserted
2215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *         at any place in it without changing the ordering.
2216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  An pair of iterators defining the subrange.
2221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This is equivalent to
2224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @code
2225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *    std::make_pair(lower_bound(__first, __last, __val, __comp),
2226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *                   upper_bound(__first, __last, __val, __comp))
2227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @endcode
2228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  but does not actually call those functions.
2229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
2230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
2233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     equal_range(_ForwardIterator __first, _ForwardIterator __last,
ARM GAS  /tmp/ccofeNgA.s 			page 213


2234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		const _Tp& __val, _Compare __comp)
2235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	typename iterator_traits<_ForwardIterator>::value_type, _Tp>)
2240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 						__val, __comp);
2244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 						__val, __comp);
2246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__equal_range(__first, __last, __val,
2248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_val(__comp),
2249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__val_comp_iter(__comp));
2250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Determines whether an element exists in a range.
2254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return True if @p __val (or its equivalent) is in [@p
2259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  __first,@p __last ].
2260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Note that this does not actually return an iterator to @p __val.  For
2262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  that, use std::find or a container's specialized find member functions.
2263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
2264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp>
2265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     bool
2267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     binary_search(_ForwardIterator __first, _ForwardIterator __last,
2268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  const _Tp& __val)
2269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower(__first, __last, __val);
2275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper(__first, __last, __val);
2276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __i
2278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	= std::__lower_bound(__first, __last, __val,
2279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_less_val());
2280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __i != __last && !(__val < *__i);
2281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Determines whether an element exists in a range.
2285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup binary_search_algorithms
2286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __val     The search term.
2289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  True if @p __val (or its equivalent) is in @p [__first,__last].
ARM GAS  /tmp/ccofeNgA.s 			page 214


2291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Note that this does not actually return an iterator to @p __val.  For
2293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  that, use std::find or a container's specialized find member functions.
2294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
2298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Tp, typename _Compare>
2299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     bool
2301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     binary_search(_ForwardIterator __first, _ForwardIterator __last,
2302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  const _Tp& __val, _Compare __comp)
2303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
2306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_Tp, typename iterator_traits<_ForwardIterator>::value_type>)
2308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_lower_pred(__first, __last,
2309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 						__val, __comp);
2310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_partitioned_upper_pred(__first, __last,
2311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 						__val, __comp);
2312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __i
2314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	= std::__lower_bound(__first, __last, __val,
2315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_val(__comp));
2316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __i != __last && !bool(__comp(__val, *__i));
2317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // merge
2320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the __merge_adaptive routines.
2322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _OutputIterator, typename _Compare>
2324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
2325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
2326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			  _InputIterator2 __first2, _InputIterator2 __last2,
2327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			  _OutputIterator __result, _Compare __comp)
2328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp(__first2, __first1))
2332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first2);
2334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      ++__first2;
2335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
2337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first1);
2339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      ++__first1;
2340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__result;
2342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first1 != __last1)
2344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_GLIBCXX_MOVE3(__first1, __last1, __result);
2345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the __merge_adaptive routines.
ARM GAS  /tmp/ccofeNgA.s 			page 215


2348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
2349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _BidirectionalIterator3, typename _Compare>
2350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
2351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
2352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				   _BidirectionalIterator1 __last1,
2353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				   _BidirectionalIterator2 __first2,
2354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				   _BidirectionalIterator2 __last2,
2355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				   _BidirectionalIterator3 __result,
2356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				   _Compare __comp)
2357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first1 == __last1)
2359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _GLIBCXX_MOVE_BACKWARD3(__first2, __last2, __result);
2361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return;
2362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else if (__first2 == __last2)
2364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return;
2365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       --__last1;
2367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       --__last2;
2368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (true)
2369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp(__last2, __last1))
2371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      *--__result = _GLIBCXX_MOVE(*__last1);
2373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (__first1 == __last1)
2374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		{
2375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _GLIBCXX_MOVE_BACKWARD3(__first2, ++__last2, __result);
2376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  return;
2377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		}
2378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      --__last1;
2379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
2381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      *--__result = _GLIBCXX_MOVE(*__last2);
2383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (__first2 == __last2)
2384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		return;
2385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      --__last2;
2386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
2392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Distance>
2393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _BidirectionalIterator1
2394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __rotate_adaptive(_BidirectionalIterator1 __first,
2395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _BidirectionalIterator1 __middle,
2396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _BidirectionalIterator1 __last,
2397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _Distance __len1, _Distance __len2,
2398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _BidirectionalIterator2 __buffer,
2399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _Distance __buffer_size)
2400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _BidirectionalIterator2 __buffer_end;
2402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__len1 > __len2 && __len2 <= __buffer_size)
2403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__len2)
ARM GAS  /tmp/ccofeNgA.s 			page 216


2405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);
2407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      _GLIBCXX_MOVE_BACKWARD3(__first, __middle, __last);
2408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      return _GLIBCXX_MOVE3(__buffer, __buffer_end, __first);
2409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
2411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return __first;
2412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else if (__len1 <= __buffer_size)
2414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__len1)
2416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);
2418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      _GLIBCXX_MOVE3(__middle, __last, __first);
2419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      return _GLIBCXX_MOVE_BACKWARD3(__buffer, __buffer_end, __last);
2420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
2422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return __last;
2423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else
2425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return std::rotate(__first, __middle, __last);
2426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Distance, 
2430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Pointer, typename _Compare>
2431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
2432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __merge_adaptive(_BidirectionalIterator __first,
2433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _BidirectionalIterator __middle,
2434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last,
2435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _Distance __len1, _Distance __len2,
2436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _Pointer __buffer, _Distance __buffer_size,
2437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _Compare __comp)
2438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__len1 <= __len2 && __len1 <= __buffer_size)
2440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__first, __middle, __buffer);
2442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
2443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				     __first, __comp);
2444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else if (__len2 <= __buffer_size)
2446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _Pointer __buffer_end = _GLIBCXX_MOVE3(__middle, __last, __buffer);
2448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__move_merge_adaptive_backward(__first, __middle, __buffer,
2449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					      __buffer_end, __last, __comp);
2450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else
2452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _BidirectionalIterator __first_cut = __first;
2454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _BidirectionalIterator __second_cut = __middle;
2455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _Distance __len11 = 0;
2456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _Distance __len22 = 0;
2457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__len1 > __len2)
2458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __len11 = __len1 / 2;
2460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::advance(__first_cut, __len11);
2461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __second_cut
ARM GAS  /tmp/ccofeNgA.s 			page 217


2462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		= std::__lower_bound(__middle, __last, *__first_cut,
2463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__iter_comp_val(__comp));
2464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __len22 = std::distance(__middle, __second_cut);
2465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
2467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __len22 = __len2 / 2;
2469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::advance(__second_cut, __len22);
2470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __first_cut
2471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		= std::__upper_bound(__first, __middle, *__second_cut,
2472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__val_comp_iter(__comp));
2473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      __len11 = std::distance(__first, __first_cut);
2474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _BidirectionalIterator __new_middle
2477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
2478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				     __len1 - __len11, __len22, __buffer,
2479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				     __buffer_size);
2480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
2481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__len22, __buffer, __buffer_size, __comp);
2482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__merge_adaptive(__new_middle, __second_cut, __last,
2483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__len1 - __len11,
2484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__len2 - __len22, __buffer,
2485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__buffer_size, __comp);
2486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the merge routines.
2490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Distance,
2491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Compare>
2492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
2493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __merge_without_buffer(_BidirectionalIterator __first,
2494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   _BidirectionalIterator __middle,
2495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   _BidirectionalIterator __last,
2496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   _Distance __len1, _Distance __len2,
2497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   _Compare __comp)
2498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__len1 == 0 || __len2 == 0)
2500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return;
2501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__len1 + __len2 == 2)
2503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp(__middle, __first))
2505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    std::iter_swap(__first, __middle);
2506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return;
2507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _BidirectionalIterator __first_cut = __first;
2510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _BidirectionalIterator __second_cut = __middle;
2511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _Distance __len11 = 0;
2512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _Distance __len22 = 0;
2513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__len1 > __len2)
2514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __len11 = __len1 / 2;
2516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::advance(__first_cut, __len11);
2517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __second_cut
2518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    = std::__lower_bound(__middle, __last, *__first_cut,
ARM GAS  /tmp/ccofeNgA.s 			page 218


2519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				 __gnu_cxx::__ops::__iter_comp_val(__comp));
2520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __len22 = std::distance(__middle, __second_cut);
2521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else
2523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __len22 = __len2 / 2;
2525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::advance(__second_cut, __len22);
2526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __first_cut
2527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    = std::__upper_bound(__first, __middle, *__second_cut,
2528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				 __gnu_cxx::__ops::__val_comp_iter(__comp));
2529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __len11 = std::distance(__first, __first_cut);
2530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _BidirectionalIterator __new_middle
2533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	= std::rotate(__first_cut, __middle, __second_cut);
2534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__merge_without_buffer(__first, __first_cut, __new_middle,
2535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  __len11, __len22, __comp);
2536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__merge_without_buffer(__new_middle, __second_cut, __last,
2537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  __len1 - __len11, __len2 - __len22, __comp);
2538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
2542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __inplace_merge(_BidirectionalIterator __first,
2543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		    _BidirectionalIterator __middle,
2544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		    _BidirectionalIterator __last,
2545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		    _Compare __comp)
2546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_BidirectionalIterator>::value_type
2548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _ValueType;
2549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_BidirectionalIterator>::difference_type
2550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _DistanceType;
2551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __middle || __middle == __last)
2553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return;
2554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       const _DistanceType __len1 = std::distance(__first, __middle);
2556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       const _DistanceType __len2 = std::distance(__middle, __last);
2557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
2559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _TmpBuf __buf(__first, __len1 + __len2);
2560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__buf.begin() == 0)
2562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::__merge_without_buffer
2563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  (__first, __middle, __last, __len1, __len2, __comp);
2564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else
2565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::__merge_adaptive
2566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  (__first, __middle, __last, __len1, __len2, __buf.begin(),
2567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   _DistanceType(__buf.size()), __comp);
2568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Merges two sorted ranges in place.
2572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __middle  Another iterator.
2575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
ARM GAS  /tmp/ccofeNgA.s 			page 219


2576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  Nothing.
2577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Merges two sorted and consecutive ranges, [__first,__middle) and
2579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__middle,__last), and puts the result in [__first,__last).  The
2580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  output will be sorted.  The sort is @e stable, that is, for
2581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  equivalent elements in the two ranges, elements from the first
2582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  range will always come before elements from the second.
2583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  If enough additional memory is available, this takes (__last-__first)-1
2585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  comparisons.  Otherwise an NlogN algorithm is used, where N is
2586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  distance(__first,__last).
2587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
2588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
2589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline void
2590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inplace_merge(_BidirectionalIterator __first,
2591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _BidirectionalIterator __middle,
2592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _BidirectionalIterator __last)
2593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
2596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    _BidirectionalIterator>)
2597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
2598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_sorted(__first, __middle);
2600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_sorted(__middle, __last);
2601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
2602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__inplace_merge(__first, __middle, __last,
2604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_less_iter());
2605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Merges two sorted ranges in place.
2609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
2611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __middle  Another iterator.
2612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
2613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp    A functor to use for comparisons.
2614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  Nothing.
2615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Merges two sorted and consecutive ranges, [__first,__middle) and
2617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [middle,last), and puts the result in [__first,__last).  The output will
2618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  be sorted.  The sort is @e stable, that is, for equivalent
2619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  elements in the two ranges, elements from the first range will always
2620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  come before elements from the second.
2621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  If enough additional memory is available, this takes (__last-__first)-1
2623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  comparisons.  Otherwise an NlogN algorithm is used, where N is
2624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  distance(__first,__last).
2625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  The comparison function should have the same effects on ordering as
2627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  the function used for the initial sort.
2628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
2629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline void
2631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inplace_merge(_BidirectionalIterator __first,
2632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _BidirectionalIterator __middle,
ARM GAS  /tmp/ccofeNgA.s 			page 220


2633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _BidirectionalIterator __last,
2634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		  _Compare __comp)
2635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<
2638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    _BidirectionalIterator>)
2639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
2641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_pred(__first, __middle, __comp);
2643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_pred(__middle, __last, __comp);
2644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
2645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__inplace_merge(__first, __middle, __last,
2647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   __gnu_cxx::__ops::__iter_comp_iter(__comp));
2648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the __merge_sort_loop routines.
2652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
2653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Compare>
2654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _OutputIterator
2655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __move_merge(_InputIterator __first1, _InputIterator __last1,
2656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		 _InputIterator __first2, _InputIterator __last2,
2657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		 _OutputIterator __result, _Compare __comp)
2658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp(__first2, __first1))
2662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first2);
2664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      ++__first2;
2665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
2667:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2668:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      *__result = _GLIBCXX_MOVE(*__first1);
2669:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      ++__first1;
2670:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2671:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__result;
2672:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2673:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return _GLIBCXX_MOVE3(__first2, __last2,
2674:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			    _GLIBCXX_MOVE3(__first1, __last1,
2675:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					   __result));
2676:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2677:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2678:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
2679:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Distance, typename _Compare>
2680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
2681:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __merge_sort_loop(_RandomAccessIterator1 __first,
2682:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _RandomAccessIterator1 __last,
2683:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _RandomAccessIterator2 __result, _Distance __step_size,
2684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _Compare __comp)
2685:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2686:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       const _Distance __two_step = 2 * __step_size;
2687:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2688:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__last - __first >= __two_step)
2689:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
ARM GAS  /tmp/ccofeNgA.s 			page 221


2690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __result = std::__move_merge(__first, __first + __step_size,
2691:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				       __first + __step_size,
2692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				       __first + __two_step,
2693:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				       __result, __comp);
2694:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __first += __two_step;
2695:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2696:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __step_size = std::min(_Distance(__last - __first), __step_size);
2697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2698:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__move_merge(__first, __first + __step_size,
2699:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			__first + __step_size, __last, __result, __comp);
2700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2702:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Distance,
2703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Compare>
2704:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2705:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
2706:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __chunk_insertion_sort(_RandomAccessIterator __first,
2707:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   _RandomAccessIterator __last,
2708:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   _Distance __chunk_size, _Compare __comp)
2709:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2710:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__last - __first >= __chunk_size)
2711:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2712:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __first + __chunk_size, __comp);
2713:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __first += __chunk_size;
2714:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2715:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__insertion_sort(__first, __last, __comp);
2716:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2717:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2718:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   enum { _S_chunk_size = 7 };
2719:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2720:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
2721:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
2722:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __merge_sort_with_buffer(_RandomAccessIterator __first,
2723:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     _RandomAccessIterator __last,
2724:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     _Pointer __buffer, _Compare __comp)
2725:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2726:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       typedef typename iterator_traits<_RandomAccessIterator>::difference_type
2727:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	_Distance;
2728:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2729:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       const _Distance __len = __last - __first;
2730:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       const _Pointer __buffer_last = __buffer + __len;
2731:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2732:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _Distance __step_size = _S_chunk_size;
2733:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__chunk_insertion_sort(__first, __last, __step_size, __comp);
2734:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2735:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__step_size < __len)
2736:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2737:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__merge_sort_loop(__first, __last, __buffer,
2738:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				 __step_size, __comp);
2739:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __step_size *= 2;
2740:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__merge_sort_loop(__buffer, __buffer_last, __first,
2741:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				 __step_size, __comp);
2742:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __step_size *= 2;
2743:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2744:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2745:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2746:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Pointer,
ARM GAS  /tmp/ccofeNgA.s 			page 222


2747:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Distance, typename _Compare>
2748:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
2749:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __stable_sort_adaptive(_RandomAccessIterator __first,
2750:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   _RandomAccessIterator __last,
2751:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   _Pointer __buffer, _Distance __buffer_size,
2752:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			   _Compare __comp)
2753:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2754:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       const _Distance __len = (__last - __first + 1) / 2;
2755:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       const _RandomAccessIterator __middle = __first + __len;
2756:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__len > __buffer_size)
2757:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2758:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__stable_sort_adaptive(__first, __middle, __buffer,
2759:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				      __buffer_size, __comp);
2760:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__stable_sort_adaptive(__middle, __last, __buffer,
2761:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				      __buffer_size, __comp);
2762:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2763:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else
2764:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2765:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
2766:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
2767:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2768:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__merge_adaptive(__first, __middle, __last,
2769:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			    _Distance(__middle - __first),
2770:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			    _Distance(__last - __middle),
2771:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			    __buffer, __buffer_size,
2772:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			    __comp);
2773:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2774:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /// This is a helper function for the stable sorting routines.
2776:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _RandomAccessIterator, typename _Compare>
2777:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     void
2778:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __inplace_stable_sort(_RandomAccessIterator __first,
2779:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			  _RandomAccessIterator __last, _Compare __comp)
2780:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2781:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__last - __first < 15)
2782:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2783:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  std::__insertion_sort(__first, __last, __comp);
2784:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return;
2785:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2786:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _RandomAccessIterator __middle = __first + (__last - __first) / 2;
2787:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__inplace_stable_sort(__first, __middle, __comp);
2788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__inplace_stable_sort(__middle, __last, __comp);
2789:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       std::__merge_without_buffer(__first, __middle, __last,
2790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  __middle - __first,
2791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  __last - __middle,
2792:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  __comp);
2793:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2794:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2795:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // stable_sort
2796:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2797:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // Set algorithms: includes, set_union, set_intersection, set_difference,
2798:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // set_symmetric_difference.  All of these algorithms have the precondition
2799:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // that their input ranges are sorted and the postcondition that their output
2800:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // ranges are sorted.
2801:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2802:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2803:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Compare>
ARM GAS  /tmp/ccofeNgA.s 			page 223


2804:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2805:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     bool
2806:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __includes(_InputIterator1 __first1, _InputIterator1 __last1,
2807:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       _InputIterator2 __first2, _InputIterator2 __last2,
2808:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	       _Compare __comp)
2809:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2810:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first1 != __last1 && __first2 != __last2)
2811:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (__comp(__first2, __first1))
2812:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return false;
2813:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	else if (__comp(__first1, __first2))
2814:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first1;
2815:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	else
2816:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  {
2817:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    ++__first1;
2818:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    ++__first2;
2819:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  }
2820:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2821:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __first2 == __last2;
2822:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2823:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2824:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2825:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Determines whether all elements of a sequence exists in a range.
2826:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first1  Start of search range.
2827:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last1   End of search range.
2828:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence
2829:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence.
2830:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  True if each element in [__first2,__last2) is contained in order
2831:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  within [__first1,__last1).  False otherwise.
2832:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup set_algorithms
2833:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2834:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This operation expects both [__first1,__last1) and
2835:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first2,__last2) to be sorted.  Searches for the presence of
2836:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  each element in [__first2,__last2) within [__first1,__last1).
2837:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  The iterators over each range only move forward, so this is a
2838:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  linear algorithm.  If an element in [__first2,__last2) is not
2839:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  found before the search iterator reaches @p __last2, false is
2840:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  returned.
2841:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
2842:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2>
2843:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2844:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
2845:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     includes(_InputIterator1 __first1, _InputIterator1 __last1,
2846:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _InputIterator2 __first2, _InputIterator2 __last2)
2847:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2848:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2849:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
2850:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
2851:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2852:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type,
2853:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type>)
2854:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanOpConcept<
2855:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type,
2856:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type>)
2857:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set(__first1, __last1, __first2);
2858:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set(__first2, __last2, __first1);
2859:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive2(__first1, __last1);
2860:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive2(__first2, __last2);
ARM GAS  /tmp/ccofeNgA.s 			page 224


2861:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2862:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__includes(__first1, __last1, __first2, __last2,
2863:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_less_iter());
2864:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2865:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2866:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2867:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Determines whether all elements of a sequence exists in a range
2868:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  using comparison.
2869:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup set_algorithms
2870:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first1  Start of search range.
2871:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last1   End of search range.
2872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first2  Start of sequence
2873:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last2   End of sequence.
2874:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp    Comparison function to use.
2875:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return True if each element in [__first2,__last2) is contained
2876:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  in order within [__first1,__last1) according to comp.  False
2877:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  otherwise.  @ingroup set_algorithms
2878:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2879:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  This operation expects both [__first1,__last1) and
2880:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first2,__last2) to be sorted.  Searches for the presence of
2881:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  each element in [__first2,__last2) within [__first1,__last1),
2882:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  using comp to decide.  The iterators over each range only move
2883:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  forward, so this is a linear algorithm.  If an element in
2884:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  [__first2,__last2) is not found before the search iterator
2885:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  reaches @p __last2, false is returned.
2886:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
2887:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator1, typename _InputIterator2,
2888:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Compare>
2889:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2890:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
2891:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     includes(_InputIterator1 __first1, _InputIterator1 __last1,
2892:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _InputIterator2 __first2, _InputIterator2 __last2,
2893:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	     _Compare __comp)
2894:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2895:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2896:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator1>)
2897:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator2>)
2898:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2899:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type,
2900:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type>)
2901:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
2902:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator2>::value_type,
2903:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator1>::value_type>)
2904:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set_pred(__first1, __last1, __first2, __comp);
2905:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_sorted_set_pred(__first2, __last2, __first1, __comp);
2906:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred2(__first1, __last1, __comp);
2907:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred2(__first2, __last2, __comp);
2908:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2909:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__includes(__first1, __last1, __first2, __last2,
2910:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     __gnu_cxx::__ops::__iter_comp_iter(__comp));
2911:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2912:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2913:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // nth_element
2914:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // merge
2915:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // set_difference
2916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // set_intersection
2917:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // set_union
ARM GAS  /tmp/ccofeNgA.s 			page 225


2918:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // stable_sort
2919:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // set_symmetric_difference
2920:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // min_element
2921:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // max_element
2922:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2923:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
2924:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
2925:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     bool
2926:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __next_permutation(_BidirectionalIterator __first,
2927:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		       _BidirectionalIterator __last, _Compare __comp)
2928:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2929:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last)
2930:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return false;
2931:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _BidirectionalIterator __i = __first;
2932:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       ++__i;
2933:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__i == __last)
2934:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return false;
2935:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __i = __last;
2936:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       --__i;
2937:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2938:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for(;;)
2939:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
2940:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _BidirectionalIterator __ii = __i;
2941:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  --__i;
2942:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp(__i, __ii))
2943:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2944:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      _BidirectionalIterator __j = __last;
2945:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      while (!__comp(__i, --__j))
2946:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		{}
2947:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::iter_swap(__i, __j);
2948:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::__reverse(__ii, __last,
2949:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
2950:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      return true;
2951:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2952:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__i == __first)
2953:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
2954:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::__reverse(__first, __last,
2955:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
2956:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      return false;
2957:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
2958:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
2959:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2960:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2961:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2962:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Permute range into the next @e dictionary ordering.
2963:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2964:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
2965:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   End of range.
2966:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  False if wrapped to first permutation, true otherwise.
2967:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
2968:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Treats all permutations of the range as a set of @e dictionary sorted
2969:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  sequences.  Permutes the current sequence into the next one of this set.
2970:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Returns true if there are more sequences to generate.  If the sequence
2971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  is the largest of the set, the smallest is generated and false returned.
2972:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
2973:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
2974:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  /tmp/ccofeNgA.s 			page 226


2975:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
2976:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     next_permutation(_BidirectionalIterator __first,
2977:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last)
2978:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
2979:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
2980:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
2981:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
2982:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
2983:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
2984:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
2985:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
2986:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2987:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__next_permutation
2988:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
2989:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
2990:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
2991:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
2992:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Permute range into the next @e dictionary ordering using
2993:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          comparison functor.
2994:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
2995:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
2996:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   End of range.
2997:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp   A comparison functor.
2998:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  False if wrapped to first permutation, true otherwise.
2999:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
3000:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Treats all permutations of the range [__first,__last) as a set of
3001:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
3002:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  sequence into the next one of this set.  Returns true if there are more
3003:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  sequences to generate.  If the sequence is the largest of the set, the
3004:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  smallest is generated and false returned.
3005:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3006:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3007:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3008:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
3009:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     next_permutation(_BidirectionalIterator __first,
3010:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last, _Compare __comp)
3011:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3012:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
3013:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3014:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3015:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3016:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
3017:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3018:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3019:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3020:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3021:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__next_permutation
3022:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
3023:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3024:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3025:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3026:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3027:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     bool
3028:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __prev_permutation(_BidirectionalIterator __first,
3029:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		       _BidirectionalIterator __last, _Compare __comp)
3030:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3031:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last)
ARM GAS  /tmp/ccofeNgA.s 			page 227


3032:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return false;
3033:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _BidirectionalIterator __i = __first;
3034:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       ++__i;
3035:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__i == __last)
3036:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return false;
3037:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __i = __last;
3038:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       --__i;
3039:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3040:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for(;;)
3041:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
3042:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  _BidirectionalIterator __ii = __i;
3043:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  --__i;
3044:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp(__ii, __i))
3045:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
3046:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      _BidirectionalIterator __j = __last;
3047:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      while (!__comp(--__j, __i))
3048:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		{}
3049:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::iter_swap(__i, __j);
3050:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::__reverse(__ii, __last,
3051:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
3052:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      return true;
3053:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
3054:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__i == __first)
3055:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
3056:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      std::__reverse(__first, __last,
3057:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			     std::__iterator_category(__first));
3058:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      return false;
3059:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
3060:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
3061:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3062:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3063:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3064:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Permute range into the previous @e dictionary ordering.
3065:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3066:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3067:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   End of range.
3068:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  False if wrapped to last permutation, true otherwise.
3069:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
3070:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Treats all permutations of the range as a set of @e dictionary sorted
3071:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  sequences.  Permutes the current sequence into the previous one of this
3072:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  set.  Returns true if there are more sequences to generate.  If the
3073:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  sequence is the smallest of the set, the largest is generated and false
3074:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  returned.
3075:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3076:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator>
3077:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3078:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
3079:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     prev_permutation(_BidirectionalIterator __first,
3080:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last)
3081:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3082:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
3083:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3084:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3085:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3086:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3087:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3088:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
ARM GAS  /tmp/ccofeNgA.s 			page 228


3089:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3090:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__prev_permutation(__first, __last,
3091:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				     __gnu_cxx::__ops::__iter_less_iter());
3092:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3093:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3094:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3095:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Permute range into the previous @e dictionary ordering using
3096:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          comparison functor.
3097:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3098:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3099:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   End of range.
3100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp   A comparison functor.
3101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  False if wrapped to last permutation, true otherwise.
3102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
3103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Treats all permutations of the range [__first,__last) as a set of
3104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @e dictionary sorted sequences ordered by @p __comp.  Permutes the current
3105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  sequence into the previous one of this set.  Returns true if there are
3106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  more sequences to generate.  If the sequence is the smallest of the set,
3107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  the largest is generated and false returned.
3108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _BidirectionalIterator, typename _Compare>
3110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
3112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     prev_permutation(_BidirectionalIterator __first,
3113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _BidirectionalIterator __last, _Compare __comp)
3114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
3116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<
3117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				  _BidirectionalIterator>)
3118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type,
3120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_BidirectionalIterator>::value_type>)
3121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__prev_permutation(__first, __last,
3125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__iter_comp_iter(__comp));
3126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // replace
3129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // replace_if
3130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
3132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Predicate, typename _Tp>
3133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _OutputIterator
3135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __replace_copy_if(_InputIterator __first, _InputIterator __last,
3136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _OutputIterator __result,
3137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _Predicate __pred, const _Tp& __new_value)
3138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (; __first != __last; ++__first, (void)++__result)
3140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (__pred(__first))
3141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  *__result = __new_value;
3142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	else
3143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  *__result = *__first;
3144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __result;
3145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
ARM GAS  /tmp/ccofeNgA.s 			page 229


3146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Copy a sequence, replacing each element of one value with another
3149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *         value.
3150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first      An input iterator.
3151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last       An input iterator.
3152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result     An output iterator.
3153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __old_value  The value to be replaced.
3154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __new_value  The replacement value.
3155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   The end of the output sequence, @p result+(last-first).
3156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
3157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Copies each element in the input range @p [__first,__last) to the
3158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  output range @p [__result,__result+(__last-__first)) replacing elements
3159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  equal to @p __old_value with @p __new_value.
3160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator, typename _Tp>
3162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _OutputIterator
3164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     replace_copy(_InputIterator __first, _InputIterator __last,
3165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		 _OutputIterator __result,
3166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		 const _Tp& __old_value, const _Tp& __new_value)
3167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
3169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
3171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_EqualOpConcept<
3173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type, _Tp>)
3174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__replace_copy_if(__first, __last, __result,
3177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_equals_val(__old_value),
3178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					      __new_value);
3179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief Copy a sequence, replacing each value for which a predicate
3183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *         returns true with another value.
3184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup mutating_algorithms
3185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first      An input iterator.
3186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last       An input iterator.
3187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __result     An output iterator.
3188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred       A predicate.
3189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __new_value  The replacement value.
3190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return   The end of the output sequence, @p __result+(__last-__first).
3191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *
3192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  Copies each element in the range @p [__first,__last) to the range
3193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p [__result,__result+(__last-__first)) replacing elements for which
3194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @p __pred returns true with @p __new_value.
3195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _InputIterator, typename _OutputIterator,
3197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _Predicate, typename _Tp>
3198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _OutputIterator
3200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     replace_copy_if(_InputIterator __first, _InputIterator __last,
3201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		    _OutputIterator __result,
3202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		    _Predicate __pred, const _Tp& __new_value)
ARM GAS  /tmp/ccofeNgA.s 			page 230


3203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
3205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
3206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OutputIterator,
3207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_UnaryPredicateConcept<_Predicate,
3209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_InputIterator>::value_type>)
3210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__replace_copy_if(__first, __last, __result,
3213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				__gnu_cxx::__ops::__pred_iter(__pred),
3214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 					      __new_value);
3215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #if __cplusplus >= 201103L
3218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Determines whether the elements of a sequence are sorted.
3220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  True if the elements are sorted, false otherwise.
3224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
3226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
3228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     is_sorted(_ForwardIterator __first, _ForwardIterator __last)
3229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     { return std::is_sorted_until(__first, __last) == __last; }
3230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Determines whether the elements of a sequence are sorted
3233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          according to a comparison functor.
3234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
3238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  True if the elements are sorted, false otherwise.
3239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
3243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     is_sorted(_ForwardIterator __first, _ForwardIterator __last,
3244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      _Compare __comp)
3245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     { return std::is_sorted_until(__first, __last, __comp) == __last; }
3246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _ForwardIterator
3250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
3251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		      _Compare __comp)
3252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last)
3254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return __last;
3255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
3257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (++__next; __next != __last; __first = __next, (void)++__next)
3258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (__comp(__next, __first))
3259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  return __next;
ARM GAS  /tmp/ccofeNgA.s 			page 231


3260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __next;
3261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Determines the end of a sorted sequence.
3265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the last iterator i in [__first, __last)
3269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           for which the range [__first, i) is sorted.
3270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
3272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator
3274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
3275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
3277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
3279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__is_sorted_until(__first, __last,
3284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				    __gnu_cxx::__ops::__iter_less_iter());
3285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Determines the end of a sorted sequence using comparison functor.
3289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first   An iterator.
3291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last    Another iterator.
3292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp    A comparison functor.
3293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  An iterator pointing to the last iterator i in [__first, __last)
3294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           for which the range [__first, i) is sorted.
3295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _ForwardIterator
3299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
3300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		    _Compare __comp)
3301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
3303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type,
3306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__is_sorted_until(__first, __last,
3311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				    __gnu_cxx::__ops::__iter_comp_iter(__comp));
3312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Determines min and max at once as an ordered pair.
3316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
ARM GAS  /tmp/ccofeNgA.s 			page 232


3317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __a  A thing of arbitrary type.
3318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __b  Another thing of arbitrary type.
3319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
3320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  __b) otherwise.
3321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _Tp>
3323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline pair<const _Tp&, const _Tp&>
3325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     minmax(const _Tp& __a, const _Tp& __b)
3326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
3328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
3329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
3331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		       : pair<const _Tp&, const _Tp&>(__a, __b);
3332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Determines min and max at once as an ordered pair.
3336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __a  A thing of arbitrary type.
3338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __b  Another thing of arbitrary type.
3339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp  A @link comparison_functors comparison functor @endlink.
3340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return A pair(__b, __a) if __b is smaller than __a, pair(__a,
3341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  __b) otherwise.
3342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline pair<const _Tp&, const _Tp&>
3346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
3347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
3349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			      : pair<const _Tp&, const _Tp&>(__a, __b);
3350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     pair<_ForwardIterator, _ForwardIterator>
3355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
3356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _Compare __comp)
3357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __next = __first;
3359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__first == __last
3360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  || ++__next == __last)
3361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	return std::make_pair(__first, __first);
3362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       _ForwardIterator __min{}, __max{};
3364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__comp(__next, __first))
3365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
3366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __min = __next;
3367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __max = __first;
3368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
3369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else
3370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
3371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __min = __first;
3372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __max = __next;
3373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
ARM GAS  /tmp/ccofeNgA.s 			page 233


3374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __first = __next;
3376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       ++__first;
3377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       while (__first != __last)
3379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
3380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __next = __first;
3381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (++__next == __last)
3382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
3383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (__comp(__first, __min))
3384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		__min = __first;
3385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      else if (!__comp(__first, __max))
3386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		__max = __first;
3387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      break;
3388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
3389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__comp(__next, __first))
3391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
3392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (__comp(__next, __min))
3393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		__min = __next;
3394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (!__comp(__first, __max))
3395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		__max = __first;
3396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
3397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  else
3398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    {
3399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (__comp(__first, __min))
3400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		__min = __first;
3401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      if (!__comp(__next, __max))
3402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		__max = __next;
3403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    }
3404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  __first = __next;
3406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first;
3407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
3408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::make_pair(__min, __max);
3410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Return a pair of iterators pointing to the minimum and maximum
3414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          elements in a range.
3415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   End of range.
3418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  make_pair(m, M), where m is the first iterator i in 
3419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           [__first, __last) such that no other element in the range is
3420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           smaller, and where M is the last iterator i in [__first, __last)
3421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           such that no other element in the range is larger.
3422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator>
3424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
3426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     minmax_element(_ForwardIterator __first, _ForwardIterator __last)
3427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
3429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_LessThanComparableConcept<
ARM GAS  /tmp/ccofeNgA.s 			page 234


3431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive(__first, __last);
3434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__minmax_element(__first, __last,
3436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_less_iter());
3437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Return a pair of iterators pointing to the minimum and maximum
3441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          elements in a range.
3442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first  Start of range.
3444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last   End of range.
3445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __comp   Comparison functor.
3446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return  make_pair(m, M), where m is the first iterator i in 
3447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           [__first, __last) such that no other element in the range is
3448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           smaller, and where M is the last iterator i in [__first, __last)
3449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *           such that no other element in the range is larger.
3450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator, typename _Compare>
3452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline pair<_ForwardIterator, _ForwardIterator>
3454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     minmax_element(_ForwardIterator __first, _ForwardIterator __last,
3455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _Compare __comp)
3456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
3458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator>)
3459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_Compare,
3460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type,
3461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator>::value_type>)
3462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first, __last);
3463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_irreflexive_pred(__first, __last, __comp);
3464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__minmax_element(__first, __last,
3466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__comp));
3467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   // N2722 + DR 915.
3470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _Tp>
3471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _Tp
3473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     min(initializer_list<_Tp> __l)
3474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     { return *std::min_element(__l.begin(), __l.end()); }
3475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _Tp
3479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     min(initializer_list<_Tp> __l, _Compare __comp)
3480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     { return *std::min_element(__l.begin(), __l.end(), __comp); }
3481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _Tp>
3483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _Tp
3485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     max(initializer_list<_Tp> __l)
3486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     { return *std::max_element(__l.begin(), __l.end()); }
3487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 235


3488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline _Tp
3491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     max(initializer_list<_Tp> __l, _Compare __comp)
3492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     { return *std::max_element(__l.begin(), __l.end(), __comp); }
3493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _Tp>
3495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline pair<_Tp, _Tp>
3497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     minmax(initializer_list<_Tp> __l)
3498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       pair<const _Tp*, const _Tp*> __p =
3500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::minmax_element(__l.begin(), __l.end());
3501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::make_pair(*__p.first, *__p.second);
3502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _Tp, typename _Compare>
3505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX14_CONSTEXPR
3506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline pair<_Tp, _Tp>
3507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     minmax(initializer_list<_Tp> __l, _Compare __comp)
3508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       pair<const _Tp*, const _Tp*> __p =
3510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::minmax_element(__l.begin(), __l.end(), __comp);
3511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::make_pair(*__p.first, *__p.second);
3512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          to the first sequence.
3517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred    A binary predicate.
3522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in
3523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          the range [__first2, __first2 + (__last1 - __first1)),
3524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          beginning with ForwardIterator2 begin, such that
3525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          equal(__first1, __last1, __begin, __pred) returns true;
3526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          otherwise, returns false.
3527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
3532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _BinaryPredicate __pred)
3534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // concept requirements
3536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator1>)
3537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_ForwardIteratorConcept<_ForwardIterator2>)
3538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_function_requires(_BinaryPredicateConcept<_BinaryPredicate,
3539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator1>::value_type,
3540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    typename iterator_traits<_ForwardIterator2>::value_type>)
3541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2,
3544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__pred));
ARM GAS  /tmp/ccofeNgA.s 			page 236


3545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #if __cplusplus > 201103L
3548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     bool
3552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
3554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		     _BinaryPredicate __pred)
3555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       using _Cat1
3557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	= typename iterator_traits<_ForwardIterator1>::iterator_category;
3558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       using _Cat2
3559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	= typename iterator_traits<_ForwardIterator2>::iterator_category;
3560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
3561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
3562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       constexpr bool __ra_iters = _It1_is_RA() && _It2_is_RA();
3563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__ra_iters)
3564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
3565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  auto __d1 = std::distance(__first1, __last1);
3566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  auto __d2 = std::distance(__first2, __last2);
3567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__d1 != __d2)
3568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return false;
3569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
3570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // Efficiently compare identical prefixes:  O(N) if sequences
3572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       // have the same elements in the same order.
3573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (; __first1 != __last1 && __first2 != __last2;
3574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  ++__first1, (void)++__first2)
3575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	if (!__pred(__first1, __first2))
3576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  break;
3577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       if (__ra_iters)
3579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
3580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__first1 == __last1)
3581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return true;
3582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
3583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       else
3584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
3585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  auto __d1 = std::distance(__first1, __last1);
3586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  auto __d2 = std::distance(__first2, __last2);
3587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__d1 == 0 && __d2 == 0)
3588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return true;
3589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__d1 != __d2)
3590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return false;
3591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
3592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
3594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	{
3595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (__scan != std::__find_if(__first1, __scan,
3596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
3597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    continue; // We've seen this one before.
3598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  auto __matches = std::__count_if(__first2, __last2,
3600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
3601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	  if (0 == __matches
ARM GAS  /tmp/ccofeNgA.s 			page 237


3602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      || std::__count_if(__scan, __last1,
3603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			__gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
3604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	      != __matches)
3605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	    return false;
3606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	}
3607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return true;
3608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Checks whether a permutaion of the second sequence is equal
3612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          to the first sequence.
3613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last2   End of first range.
3618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          [__first2, __last2), beginning with ForwardIterator2 begin,
3620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          such that equal(__first1, __last1, begin) returns true;
3621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          otherwise, returns false.
3622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
3624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
3626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _ForwardIterator2 __last2)
3628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
3631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return
3633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	std::__is_permutation(__first1, __last1, __first2, __last2,
3634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 			      __gnu_cxx::__ops::__iter_equal_to_iter());
3635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Checks whether a permutation of the second sequence is equal
3639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          to the first sequence.
3640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup non_mutating_algorithms
3641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first1  Start of first range.
3642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last1   End of first range.
3643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __first2  Start of second range.
3644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __last2   End of first range.
3645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __pred    A binary predicate.
3646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return true if there exists a permutation of the elements in the range
3647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          [__first2, __last2), beginning with ForwardIterator2 begin,
3648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          such that equal(__first1, __last1, __begin, __pred) returns true;
3649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *          otherwise, returns false.
3650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   */
3651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2,
3652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 	   typename _BinaryPredicate>
3653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     _GLIBCXX20_CONSTEXPR
3654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     inline bool
3655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
3656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _ForwardIterator2 __first2, _ForwardIterator2 __last2,
3657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 		   _BinaryPredicate __pred)
3658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
ARM GAS  /tmp/ccofeNgA.s 			page 238


3659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first1, __last1);
3660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_requires_valid_range(__first2, __last2);
3661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return std::__is_permutation(__first1, __last1, __first2, __last2,
3663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 				   __gnu_cxx::__ops::__iter_comp_iter(__pred));
3664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     }
3665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #if __cplusplus > 201402L
3667:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3668:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** #define __cpp_lib_clamp 201603
3669:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h **** 
3670:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   /**
3671:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @brief  Returns the value clamped between lo and hi.
3672:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @ingroup sorting_algorithms
3673:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __val  A value of arbitrary type.
3674:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __lo   A lower limit of arbitrary type.
3675:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @param  __hi   An upper limit of arbitrary type.
3676:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    *  @return max(__val, __lo) if __val < __hi or min(__val, __hi) otherwise.
3677:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****    */
3678:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****   template<typename _Tp>
3679:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     constexpr const _Tp&
3680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
 3764              		.loc 18 3680 5 is_stmt 1 view .LVU874
 3765              	.LBB2202:
3681:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
3682:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       __glibcxx_assert(!(__hi < __lo));
3683:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****       return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
 3766              		.loc 18 3683 29 is_stmt 0 view .LVU875
 3767 0022 F5EEC07A 		vcmpe.f32	s15, #0
 3768 0026 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3769 002a 2ED4     		bmi	.L137
 3770              		.loc 18 3683 44 view .LVU876
 3771 002c 90ED117A 		vldr.32	s14, [r0, #68]
 3772              		.loc 18 3683 29 view .LVU877
 3773 0030 F4EEC77A 		vcmpe.f32	s15, s14
 3774 0034 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3775 0038 28DC     		bgt	.L133
 3776 003a 01AB     		add	r3, sp, #4
 3777              	.LVL236:
 3778              		.loc 18 3683 29 view .LVU878
 3779 003c 26E0     		b	.L133
 3780              	.LVL237:
 3781              	.L142:
 3782              		.loc 18 3683 29 view .LVU879
 3783              	.LBE2202:
 3784              	.LBE2201:
 3785              	.LBE2200:
 3786              	.LBB2205:
 387:MotorControl/motor.cpp ****         max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
 3787              		.loc 2 387 9 is_stmt 1 view .LVU880
 387:MotorControl/motor.cpp ****         max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
 3788              		.loc 2 387 28 is_stmt 0 view .LVU881
 3789 003e D0ED5C7A 		vldr.32	s15, [r0, #368]
 387:MotorControl/motor.cpp ****         max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
 3790              		.loc 2 387 61 view .LVU882
 3791 0042 90ED0D7A 		vldr.32	s14, [r0, #52]
 387:MotorControl/motor.cpp ****         max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
ARM GAS  /tmp/ccofeNgA.s 			page 239


 3792              		.loc 2 387 51 view .LVU883
 3793 0046 67EE877A 		vmul.f32	s15, s15, s14
 387:MotorControl/motor.cpp ****         max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
 3794              		.loc 2 387 79 view .LVU884
 3795 004a D0F88430 		ldr	r3, [r0, #132]
 387:MotorControl/motor.cpp ****         max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
 3796              		.loc 2 387 102 view .LVU885
 3797 004e 93ED377A 		vldr.32	s14, [r3, #220]
 387:MotorControl/motor.cpp ****         max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
 3798              		.loc 2 387 77 view .LVU886
 3799 0052 67EE877A 		vmul.f32	s15, s15, s14
 387:MotorControl/motor.cpp ****         max_torque = std::clamp(max_torque, 0.0f, config_.torque_lim);
 3800              		.loc 2 387 15 view .LVU887
 3801 0056 CDED017A 		vstr.32	s15, [sp, #4]
 388:MotorControl/motor.cpp ****         return max_torque;
 3802              		.loc 2 388 9 is_stmt 1 view .LVU888
 388:MotorControl/motor.cpp ****         return max_torque;
 3803              		.loc 2 388 45 is_stmt 0 view .LVU889
 3804 005a 0023     		movs	r3, #0
 3805 005c 0293     		str	r3, [sp, #8]	@ float
 388:MotorControl/motor.cpp ****         return max_torque;
 3806              		.loc 2 388 59 view .LVU890
 3807 005e 00F14403 		add	r3, r0, #68
 3808              	.LVL238:
 3809              	.LBB2206:
 3810              	.LBI2206:
3680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 3811              		.loc 18 3680 5 is_stmt 1 view .LVU891
 3812              	.LBB2207:
 3813              		.loc 18 3683 29 is_stmt 0 view .LVU892
 3814 0062 F5EEC07A 		vcmpe.f32	s15, #0
 3815 0066 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3816 006a 08D4     		bmi	.L135
 3817              		.loc 18 3683 44 view .LVU893
 3818 006c 90ED117A 		vldr.32	s14, [r0, #68]
 3819              		.loc 18 3683 29 view .LVU894
 3820 0070 F4EEC77A 		vcmpe.f32	s15, s14
 3821 0074 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3822 0078 02DC     		bgt	.L130
 3823 007a 01AB     		add	r3, sp, #4
 3824              	.LVL239:
 3825              		.loc 18 3683 29 view .LVU895
 3826 007c 00E0     		b	.L130
 3827              	.LVL240:
 3828              	.L135:
 3829              		.loc 18 3683 29 view .LVU896
 3830 007e 02AB     		add	r3, sp, #8
 3831              	.LVL241:
 3832              	.L130:
 3833              		.loc 18 3683 29 view .LVU897
 3834              	.LBE2207:
 3835              	.LBE2206:
 388:MotorControl/motor.cpp ****         return max_torque;
 3836              		.loc 2 388 32 view .LVU898
 3837 0080 93ED000A 		vldr.32	s0, [r3]
 388:MotorControl/motor.cpp ****         return max_torque;
 3838              		.loc 2 388 20 view .LVU899
ARM GAS  /tmp/ccofeNgA.s 			page 240


 3839 0084 8DED010A 		vstr.32	s0, [sp, #4]
 389:MotorControl/motor.cpp ****     } else {
 3840              		.loc 2 389 9 is_stmt 1 view .LVU900
 3841 0088 04E0     		b	.L128
 3842              	.LVL242:
 3843              	.L137:
 389:MotorControl/motor.cpp ****     } else {
 3844              		.loc 2 389 9 is_stmt 0 view .LVU901
 3845              	.LBE2205:
 3846              	.LBB2208:
 3847              	.LBB2204:
 3848              	.LBB2203:
 3849              		.loc 18 3683 29 view .LVU902
 3850 008a 03AB     		add	r3, sp, #12
 3851              	.LVL243:
 3852              	.L133:
 3853              		.loc 18 3683 29 view .LVU903
 3854              	.LBE2203:
 3855              	.LBE2204:
 3856              		.loc 2 392 32 view .LVU904
 3857 008c 93ED000A 		vldr.32	s0, [r3]
 3858              		.loc 2 392 20 view .LVU905
 3859 0090 8DED010A 		vstr.32	s0, [sp, #4]
 393:MotorControl/motor.cpp ****         return max_torque;
 3860              		.loc 2 393 9 is_stmt 1 view .LVU906
 3861              	.L128:
 3862              	.LBE2208:
 3863              	.LBE2199:
 394:MotorControl/motor.cpp ****     }
 395:MotorControl/motor.cpp **** }
 3864              		.loc 2 395 1 is_stmt 0 view .LVU907
 3865 0094 04B0     		add	sp, sp, #16
 3866              	.LCFI55:
 3867              		.cfi_def_cfa_offset 0
 3868              		@ sp needed
 3869 0096 7047     		bx	lr
 3870              		.cfi_endproc
 3871              	.LFE5303:
 3872              		.cantunwind
 3873              		.fnend
 3875              		.section	.text._ZN5Motor25phase_current_from_adcvalEm,"ax",%progbits
 3876              		.align	1
 3877              		.global	_ZN5Motor25phase_current_from_adcvalEm
 3878              		.syntax unified
 3879              		.thumb
 3880              		.thumb_func
 3882              	_ZN5Motor25phase_current_from_adcvalEm:
 3883              		.fnstart
 3884              	.LVL244:
 3885              	.LFB5304:
 396:MotorControl/motor.cpp **** 
 397:MotorControl/motor.cpp **** std::optional<float> Motor::phase_current_from_adcval(uint32_t ADCValue) {
 3886              		.loc 2 397 74 is_stmt 1 view -0
 3887              		.cfi_startproc
 3888              		@ args = 0, pretend = 0, frame = 0
 3889              		@ frame_needed = 0, uses_anonymous_args = 0
 3890              		.loc 2 397 74 is_stmt 0 view .LVU909
ARM GAS  /tmp/ccofeNgA.s 			page 241


 3891 0000 10B5     		push	{r4, lr}
 3892              	.LCFI56:
 3893              		.cfi_def_cfa_offset 8
 3894              		.cfi_offset 4, -8
 3895              		.cfi_offset 14, -4
 3896 0002 0446     		mov	r4, r0
 398:MotorControl/motor.cpp ****     // Make sure the measurements don't come too close to the current sensor's hardware limitations
 399:MotorControl/motor.cpp ****     if (ADCValue < CURRENT_ADC_LOWER_BOUND || ADCValue > CURRENT_ADC_UPPER_BOUND) {
 3897              		.loc 2 399 5 is_stmt 1 view .LVU910
 3898              		.loc 2 399 44 is_stmt 0 view .LVU911
 3899 0004 A2F5BA70 		sub	r0, r2, #372
 3900              	.LVL245:
 3901              		.loc 2 399 5 view .LVU912
 3902 0008 40F61753 		movw	r3, #3351
 3903 000c 9842     		cmp	r0, r3
 3904 000e 0AD9     		bls	.L144
 400:MotorControl/motor.cpp ****         error_ |= ERROR_CURRENT_SENSE_SATURATION;
 3905              		.loc 2 400 9 is_stmt 1 view .LVU913
 3906              		.loc 2 400 19 is_stmt 0 view .LVU914
 3907 0010 4FF48062 		mov	r2, #1024
 3908              	.LVL246:
 3909              		.loc 2 400 19 view .LVU915
 3910 0014 0023     		movs	r3, #0
 3911 0016 01F19000 		add	r0, r1, #144
 3912              	.LVL247:
 3913              		.loc 2 400 19 view .LVU916
 3914 001a FFF7FEFF 		bl	_ZoRRN10ODriveIntf9MotorIntf5ErrorES1_
 3915              	.LVL248:
 401:MotorControl/motor.cpp ****         return std::nullopt;
 3916              		.loc 2 401 9 is_stmt 1 view .LVU917
 3917              	.LBB2236:
 3918              	.LBI2236:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3919              		.loc 3 692 17 view .LVU918
 3920              	.LBB2237:
 3921              	.LBB2238:
 3922              	.LBI2238:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3923              		.loc 3 602 17 view .LVU919
 3924              	.LBB2239:
 3925              	.LBI2239:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 3926              		.loc 3 302 7 view .LVU920
 3927              	.LBB2240:
 3928              	.LBI2240:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3929              		.loc 3 110 7 view .LVU921
 3930              	.LBB2241:
 3931              	.LBB2242:
 3932              	.LBI2242:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3933              		.loc 3 199 14 view .LVU922
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 3934              		.loc 3 199 14 is_stmt 0 view .LVU923
 3935              	.LBE2242:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3936              		.loc 3 110 7 view .LVU924
ARM GAS  /tmp/ccofeNgA.s 			page 242


 3937 001e 0023     		movs	r3, #0
 3938 0020 2371     		strb	r3, [r4, #4]
 3939              	.LVL249:
 3940              	.L143:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 3941              		.loc 3 110 7 view .LVU925
 3942              	.LBE2241:
 3943              	.LBE2240:
 3944              	.LBE2239:
 3945              	.LBE2238:
 3946              	.LBE2237:
 3947              	.LBE2236:
 402:MotorControl/motor.cpp ****     }
 403:MotorControl/motor.cpp **** 
 404:MotorControl/motor.cpp ****     int adcval_bal = (int)ADCValue - (1 << 11);
 405:MotorControl/motor.cpp ****     float amp_out_volt = (3.3f / (float)(1 << 12)) * (float)adcval_bal;
 406:MotorControl/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
 407:MotorControl/motor.cpp ****     float current = shunt_volt * shunt_conductance_;
 408:MotorControl/motor.cpp ****     return current;
 409:MotorControl/motor.cpp **** }
 3948              		.loc 2 409 1 view .LVU926
 3949 0022 2046     		mov	r0, r4
 3950 0024 10BD     		pop	{r4, pc}
 3951              	.LVL250:
 3952              	.L144:
 404:MotorControl/motor.cpp ****     float amp_out_volt = (3.3f / (float)(1 << 12)) * (float)adcval_bal;
 3953              		.loc 2 404 5 is_stmt 1 view .LVU927
 404:MotorControl/motor.cpp ****     float amp_out_volt = (3.3f / (float)(1 << 12)) * (float)adcval_bal;
 3954              		.loc 2 404 9 is_stmt 0 view .LVU928
 3955 0026 A2F50063 		sub	r3, r2, #2048
 3956 002a 07EE903A 		vmov	s15, r3	@ int
 3957              	.LVL251:
 405:MotorControl/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
 3958              		.loc 2 405 5 is_stmt 1 view .LVU929
 405:MotorControl/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
 3959              		.loc 2 405 54 is_stmt 0 view .LVU930
 3960 002e F8EEE77A 		vcvt.f32.s32	s15, s15
 405:MotorControl/motor.cpp ****     float shunt_volt = amp_out_volt * phase_current_rev_gain_;
 3961              		.loc 2 405 11 view .LVU931
 3962 0032 9FED087A 		vldr.32	s14, .L147
 3963 0036 67EE877A 		vmul.f32	s15, s15, s14
 3964              	.LVL252:
 406:MotorControl/motor.cpp ****     float current = shunt_volt * shunt_conductance_;
 3965              		.loc 2 406 5 is_stmt 1 view .LVU932
 406:MotorControl/motor.cpp ****     float current = shunt_volt * shunt_conductance_;
 3966              		.loc 2 406 39 is_stmt 0 view .LVU933
 3967 003a 91ED317A 		vldr.32	s14, [r1, #196]
 406:MotorControl/motor.cpp ****     float current = shunt_volt * shunt_conductance_;
 3968              		.loc 2 406 11 view .LVU934
 3969 003e 27EE277A 		vmul.f32	s14, s14, s15
 3970              	.LVL253:
 407:MotorControl/motor.cpp ****     return current;
 3971              		.loc 2 407 5 is_stmt 1 view .LVU935
 407:MotorControl/motor.cpp ****     return current;
 3972              		.loc 2 407 34 is_stmt 0 view .LVU936
 3973 0042 D1ED027A 		vldr.32	s15, [r1, #8]
 3974              	.LVL254:
ARM GAS  /tmp/ccofeNgA.s 			page 243


 407:MotorControl/motor.cpp ****     return current;
 3975              		.loc 2 407 32 view .LVU937
 3976 0046 67EE877A 		vmul.f32	s15, s15, s14
 3977              	.LVL255:
 408:MotorControl/motor.cpp **** }
 3978              		.loc 2 408 5 is_stmt 1 view .LVU938
 3979              	.LBB2243:
 3980              	.LBI2243:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 3981              		.loc 3 700 2 view .LVU939
 3982              	.LBB2244:
 3983              	.LBB2245:
 3984              	.LBB2246:
 3985              	.LBI2246:
 3986              		.loc 5 76 5 view .LVU940
 3987              		.loc 5 76 5 is_stmt 0 view .LVU941
 3988              	.LBE2246:
 3989              	.LBB2247:
 3990              	.LBI2247:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 3991              		.loc 3 607 28 is_stmt 1 view .LVU942
 3992              	.LBB2248:
 3993              	.LBB2249:
 3994              	.LBB2250:
 3995              	.LBI2250:
 3996              		.loc 5 76 5 view .LVU943
 3997              		.loc 5 76 5 is_stmt 0 view .LVU944
 3998              	.LBE2250:
 3999              	.LBB2251:
 4000              	.LBI2251:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4001              		.loc 3 300 42 is_stmt 1 view .LVU945
 4002              	.LBB2252:
 4003              	.LBB2253:
 4004              	.LBB2254:
 4005              	.LBI2254:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 4006              		.loc 3 115 2 view .LVU946
 4007              	.LBB2255:
 4008              	.LBB2256:
 4009              	.LBB2257:
 4010              	.LBI2257:
 4011              		.loc 5 76 5 view .LVU947
 4012              		.loc 5 76 5 is_stmt 0 view .LVU948
 4013              	.LBE2257:
 4014              	.LBB2258:
 4015              	.LBI2258:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 4016              		.loc 3 203 6 is_stmt 1 view .LVU949
 4017              	.LBB2259:
 4018              	.LBB2260:
 4019              	.LBB2261:
 4020              	.LBI2261:
 4021              		.loc 5 76 5 view .LVU950
 4022              		.loc 5 76 5 is_stmt 0 view .LVU951
 4023              	.LBE2261:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
ARM GAS  /tmp/ccofeNgA.s 			page 244


 4024              		.loc 3 204 47 view .LVU952
 4025 004a C4ED007A 		vstr.32	s15, [r4]
 4026              	.LVL256:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 4027              		.loc 3 204 47 view .LVU953
 4028              	.LBE2260:
 4029              	.LBE2259:
 4030              	.LBE2258:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 4031              		.loc 3 117 19 view .LVU954
 4032 004e 0123     		movs	r3, #1
 4033              	.LVL257:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 4034              		.loc 3 117 19 view .LVU955
 4035 0050 2371     		strb	r3, [r4, #4]
 4036              	.LVL258:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 4037              		.loc 3 117 19 view .LVU956
 4038              	.LBE2256:
 4039              	.LBE2255:
 4040              	.LBE2254:
 4041              	.LBE2253:
 4042              	.LBE2252:
 4043              	.LBE2251:
 4044              	.LBE2249:
 4045              	.LBE2248:
 4046              	.LBE2247:
 4047              	.LBE2245:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4048              		.loc 3 701 51 view .LVU957
 4049 0052 E6E7     		b	.L143
 4050              	.L148:
 4051              		.align	2
 4052              	.L147:
 4053 0054 3333533A 		.word	978531123
 4054              	.LBE2244:
 4055              	.LBE2243:
 4056              		.cfi_endproc
 4057              	.LFE5304:
 4058              		.cantunwind
 4059              		.fnend
 4061              		.section	.text._ZN5Motor24measure_phase_resistanceEff,"ax",%progbits
 4062              		.align	1
 4063              		.global	_ZN5Motor24measure_phase_resistanceEff
 4064              		.syntax unified
 4065              		.thumb
 4066              		.thumb_func
 4068              	_ZN5Motor24measure_phase_resistanceEff:
 4069              		.fnstart
 4070              	.LVL259:
 4071              	.LFB5305:
 410:MotorControl/motor.cpp **** 
 411:MotorControl/motor.cpp **** //--------------------------------
 412:MotorControl/motor.cpp **** // Measurement and calibration
 413:MotorControl/motor.cpp **** //--------------------------------
 414:MotorControl/motor.cpp **** 
 415:MotorControl/motor.cpp **** // TODO check Ibeta balance to verify good motor connection
ARM GAS  /tmp/ccofeNgA.s 			page 245


 416:MotorControl/motor.cpp **** bool Motor::measure_phase_resistance(float test_current, float max_voltage) {
 4072              		.loc 2 416 77 is_stmt 1 view -0
 4073              		.cfi_startproc
 4074              		@ args = 0, pretend = 0, frame = 40
 4075              		@ frame_needed = 0, uses_anonymous_args = 0
 4076              		.loc 2 416 77 is_stmt 0 view .LVU959
 4077 0000 30B5     		push	{r4, r5, lr}
 4078              		.save {r4, r5, lr}
 4079              	.LCFI57:
 4080              		.cfi_def_cfa_offset 12
 4081              		.cfi_offset 4, -12
 4082              		.cfi_offset 5, -8
 4083              		.cfi_offset 14, -4
 4084 0002 2DED028B 		vpush.64	{d8}
 4085              		.vsave {d8}
 4086              	.LCFI58:
 4087              		.cfi_def_cfa_offset 20
 4088              		.cfi_offset 80, -20
 4089              		.cfi_offset 81, -16
 4090              		.pad #44
 4091 0006 8BB0     		sub	sp, sp, #44
 4092              	.LCFI59:
 4093              		.cfi_def_cfa_offset 64
 4094 0008 0546     		mov	r5, r0
 4095 000a B0EE408A 		vmov.f32	s16, s0
 4096 000e 10EE904A 		vmov	r4, s1
 417:MotorControl/motor.cpp ****     ResistanceMeasurementControlLaw control_law;
 4097              		.loc 2 417 5 is_stmt 1 view .LVU960
 4098              		.loc 2 417 37 is_stmt 0 view .LVU961
 4099 0012 2822     		movs	r2, #40
 4100 0014 0021     		movs	r1, #0
 4101 0016 6846     		mov	r0, sp
 4102              	.LVL260:
 4103              		.loc 2 417 37 view .LVU962
 4104 0018 FFF7FEFF 		bl	memset
 4105              	.LVL261:
 4106              		.loc 2 417 37 view .LVU963
 4107 001c 2E4B     		ldr	r3, .L158
 4108 001e 0093     		str	r3, [sp]
 4109 0020 4FF07E53 		mov	r3, #1065353216
 4110 0024 0193     		str	r3, [sp, #4]	@ float
 4111 0026 2D4B     		ldr	r3, .L158+4
 4112 0028 0293     		str	r3, [sp, #8]	@ float
 4113 002a 2D4B     		ldr	r3, .L158+8
 4114 002c 0893     		str	r3, [sp, #32]	@ float
 4115 002e 0123     		movs	r3, #1
 4116 0030 8DF82430 		strb	r3, [sp, #36]
 418:MotorControl/motor.cpp ****     control_law.target_current_ = test_current;
 4117              		.loc 2 418 5 is_stmt 1 view .LVU964
 4118              		.loc 2 418 33 is_stmt 0 view .LVU965
 4119 0034 8DED058A 		vstr.32	s16, [sp, #20]
 419:MotorControl/motor.cpp ****     control_law.max_voltage_ = max_voltage;
 4120              		.loc 2 419 5 is_stmt 1 view .LVU966
 4121              		.loc 2 419 30 is_stmt 0 view .LVU967
 4122 0038 0394     		str	r4, [sp, #12]	@ float
 420:MotorControl/motor.cpp **** 
 421:MotorControl/motor.cpp ****     arm(&control_law);
ARM GAS  /tmp/ccofeNgA.s 			page 246


 4123              		.loc 2 421 5 is_stmt 1 view .LVU968
 4124              		.loc 2 421 8 is_stmt 0 view .LVU969
 4125 003a 6946     		mov	r1, sp
 4126 003c 2846     		mov	r0, r5
 4127 003e FFF7FEFF 		bl	_ZN5Motor3armEP15PhaseControlLawILj3EE
 4128              	.LVL262:
 4129              	.LBB2262:
 422:MotorControl/motor.cpp **** 
 423:MotorControl/motor.cpp ****     for (size_t i = 0; i < 3000; ++i) {
 4130              		.loc 2 423 17 view .LVU970
 4131 0042 0024     		movs	r4, #0
 4132              	.LVL263:
 4133              	.L151:
 4134              		.loc 2 423 26 is_stmt 1 discriminator 1 view .LVU971
 4135 0044 40F6B733 		movw	r3, #2999
 4136 0048 9C42     		cmp	r4, r3
 4137 004a 0ED8     		bhi	.L150
 424:MotorControl/motor.cpp ****         if (!((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_)) 
 4138              		.loc 2 424 9 view .LVU972
 4139              		.loc 2 424 16 is_stmt 0 view .LVU973
 4140 004c D5F88430 		ldr	r3, [r5, #132]
 4141              		.loc 2 424 23 view .LVU974
 4142 0050 93F86C22 		ldrb	r2, [r3, #620]	@ zero_extendqisi2
 4143              		.loc 2 424 9 view .LVU975
 4144 0054 4AB9     		cbnz	r2, .L150
 4145              		.loc 2 424 81 discriminator 1 view .LVU976
 4146 0056 D3F85831 		ldr	r3, [r3, #344]
 4147              		.loc 2 424 88 discriminator 1 view .LVU977
 4148 005a 93F89C30 		ldrb	r3, [r3, #156]	@ zero_extendqisi2
 4149              		.loc 2 424 13 discriminator 1 view .LVU978
 4150 005e 23B1     		cbz	r3, .L150
 425:MotorControl/motor.cpp ****             break;
 426:MotorControl/motor.cpp ****         }
 427:MotorControl/motor.cpp ****         osDelay(1);
 4151              		.loc 2 427 9 is_stmt 1 view .LVU979
 4152              		.loc 2 427 16 is_stmt 0 view .LVU980
 4153 0060 0120     		movs	r0, #1
 4154 0062 FFF7FEFF 		bl	osDelay
 4155              	.LVL264:
 423:MotorControl/motor.cpp ****         if (!((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_)) 
 4156              		.loc 2 423 5 is_stmt 1 view .LVU981
 4157 0066 0134     		adds	r4, r4, #1
 4158              	.LVL265:
 423:MotorControl/motor.cpp ****         if (!((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_)) 
 4159              		.loc 2 423 5 is_stmt 0 view .LVU982
 4160 0068 ECE7     		b	.L151
 4161              	.L150:
 423:MotorControl/motor.cpp ****         if (!((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_)) 
 4162              		.loc 2 423 5 view .LVU983
 4163              	.LBE2262:
 428:MotorControl/motor.cpp ****     }
 429:MotorControl/motor.cpp **** 
 430:MotorControl/motor.cpp ****     bool success = is_armed_;
 4164              		.loc 2 430 5 is_stmt 1 view .LVU984
 4165              		.loc 2 430 10 is_stmt 0 view .LVU985
 4166 006a 95F89C40 		ldrb	r4, [r5, #156]	@ zero_extendqisi2
 4167              	.LVL266:
ARM GAS  /tmp/ccofeNgA.s 			page 247


 431:MotorControl/motor.cpp **** 
 432:MotorControl/motor.cpp ****     //// De-energize motor
 433:MotorControl/motor.cpp ****     //if (!enqueue_voltage_timings(motor, 0.0f, 0.0f))
 434:MotorControl/motor.cpp ****     //    return false; // error set inside enqueue_voltage_timings
 435:MotorControl/motor.cpp **** 
 436:MotorControl/motor.cpp ****     disarm();
 4168              		.loc 2 436 5 is_stmt 1 view .LVU986
 4169              		.loc 2 436 11 is_stmt 0 view .LVU987
 4170 006e 0021     		movs	r1, #0
 4171 0070 2846     		mov	r0, r5
 4172 0072 FFF7FEFF 		bl	_ZN5Motor6disarmEPb
 4173              	.LVL267:
 437:MotorControl/motor.cpp **** 
 438:MotorControl/motor.cpp ****     config_.phase_resistance = control_law.get_resistance();
 4174              		.loc 2 438 5 is_stmt 1 view .LVU988
 4175              	.LBB2263:
 4176              	.LBI2263:
  63:MotorControl/motor.cpp ****         return test_voltage_ / target_current_;
 4177              		.loc 2 63 11 view .LVU989
 4178              	.LBB2264:
  64:MotorControl/motor.cpp ****     }
 4179              		.loc 2 64 9 view .LVU990
  64:MotorControl/motor.cpp ****     }
 4180              		.loc 2 64 32 is_stmt 0 view .LVU991
 4181 0076 DDED066A 		vldr.32	s13, [sp, #24]
 4182 007a 9DED057A 		vldr.32	s14, [sp, #20]
 4183 007e C6EE877A 		vdiv.f32	s15, s13, s14
 4184              	.LVL268:
  64:MotorControl/motor.cpp ****     }
 4185              		.loc 2 64 32 view .LVU992
 4186              	.LBE2264:
 4187              	.LBE2263:
 4188              		.loc 2 438 30 view .LVU993
 4189 0082 C5ED0C7A 		vstr.32	s15, [r5, #48]
 439:MotorControl/motor.cpp ****     if (is_nan(config_.phase_resistance)) {
 4190              		.loc 2 439 5 is_stmt 1 view .LVU994
 4191              	.LVL269:
 4192              		.file 19 "./MotorControl/utils.hpp"
   1:./MotorControl/utils.hpp **** #pragma once
   2:./MotorControl/utils.hpp **** 
   3:./MotorControl/utils.hpp **** #include <stdint.h>
   4:./MotorControl/utils.hpp **** #include <limits>
   5:./MotorControl/utils.hpp **** #include <algorithm>
   6:./MotorControl/utils.hpp **** #include <array>
   7:./MotorControl/utils.hpp **** #include <tuple>
   8:./MotorControl/utils.hpp **** #include <cmath>
   9:./MotorControl/utils.hpp **** 
  10:./MotorControl/utils.hpp **** /**
  11:./MotorControl/utils.hpp ****  * @brief Flash size register address
  12:./MotorControl/utils.hpp ****  */
  13:./MotorControl/utils.hpp **** #define ID_FLASH_ADDRESS (0x1FFF7A22)
  14:./MotorControl/utils.hpp **** 
  15:./MotorControl/utils.hpp **** /**
  16:./MotorControl/utils.hpp ****  * @brief Device ID register address
  17:./MotorControl/utils.hpp ****  */
  18:./MotorControl/utils.hpp **** #define ID_DBGMCU_IDCODE (0xE0042000)
  19:./MotorControl/utils.hpp **** 
ARM GAS  /tmp/ccofeNgA.s 			page 248


  20:./MotorControl/utils.hpp **** /**
  21:./MotorControl/utils.hpp ****  * "Returns" the device signature
  22:./MotorControl/utils.hpp ****  *
  23:./MotorControl/utils.hpp ****  * Possible returns:
  24:./MotorControl/utils.hpp ****  *    - 0x0413: STM32F405xx/07xx and STM32F415xx/17xx)
  25:./MotorControl/utils.hpp ****  *    - 0x0419: STM32F42xxx and STM32F43xxx
  26:./MotorControl/utils.hpp ****  *    - 0x0423: STM32F401xB/C
  27:./MotorControl/utils.hpp ****  *    - 0x0433: STM32F401xD/E
  28:./MotorControl/utils.hpp ****  *    - 0x0431: STM32F411xC/E
  29:./MotorControl/utils.hpp ****  *
  30:./MotorControl/utils.hpp ****  * Returned data is in 16-bit mode, but only bits 11:0 are valid, bits 15:12 are always 0.
  31:./MotorControl/utils.hpp ****  * Defined as macro
  32:./MotorControl/utils.hpp ****  */
  33:./MotorControl/utils.hpp **** #define STM_ID_GetSignature() ((*(uint16_t *)(ID_DBGMCU_IDCODE)) & 0x0FFF)
  34:./MotorControl/utils.hpp **** 
  35:./MotorControl/utils.hpp **** /**
  36:./MotorControl/utils.hpp ****  * "Returns" the device revision
  37:./MotorControl/utils.hpp ****  *
  38:./MotorControl/utils.hpp ****  * Revisions possible:
  39:./MotorControl/utils.hpp ****  *    - 0x1000: Revision A
  40:./MotorControl/utils.hpp ****  *    - 0x1001: Revision Z
  41:./MotorControl/utils.hpp ****  *    - 0x1003: Revision Y
  42:./MotorControl/utils.hpp ****  *    - 0x1007: Revision 1
  43:./MotorControl/utils.hpp ****  *    - 0x2001: Revision 3
  44:./MotorControl/utils.hpp ****  *
  45:./MotorControl/utils.hpp ****  * Returned data is in 16-bit mode.
  46:./MotorControl/utils.hpp ****  */
  47:./MotorControl/utils.hpp **** #define STM_ID_GetRevision() (*(uint16_t *)(ID_DBGMCU_IDCODE + 2))
  48:./MotorControl/utils.hpp **** 
  49:./MotorControl/utils.hpp **** /**
  50:./MotorControl/utils.hpp **** * "Returns" the Flash size
  51:./MotorControl/utils.hpp **** *
  52:./MotorControl/utils.hpp **** * Returned data is in 16-bit mode, returned value is flash size in kB (kilo bytes).
  53:./MotorControl/utils.hpp **** */
  54:./MotorControl/utils.hpp **** #define STM_ID_GetFlashSize() (*(uint16_t *)(ID_FLASH_ADDRESS))
  55:./MotorControl/utils.hpp **** 
  56:./MotorControl/utils.hpp **** #ifdef M_PI
  57:./MotorControl/utils.hpp **** #undef M_PI
  58:./MotorControl/utils.hpp **** #endif
  59:./MotorControl/utils.hpp **** 
  60:./MotorControl/utils.hpp **** // Math Constants
  61:./MotorControl/utils.hpp **** constexpr float M_PI = 3.14159265358979323846f;
  62:./MotorControl/utils.hpp **** constexpr float one_by_sqrt3 = 0.57735026919f;
  63:./MotorControl/utils.hpp **** constexpr float two_by_sqrt3 = 1.15470053838f;
  64:./MotorControl/utils.hpp **** constexpr float sqrt3_by_2 = 0.86602540378f;
  65:./MotorControl/utils.hpp **** 
  66:./MotorControl/utils.hpp **** // Function prototypes for implementations in utils.cpp
  67:./MotorControl/utils.hpp **** std::tuple<float, float, float, bool> SVM(float alpha, float beta);
  68:./MotorControl/utils.hpp **** float fast_atan2(float y, float x);
  69:./MotorControl/utils.hpp **** uint32_t deadline_to_timeout(uint32_t deadline_ms);
  70:./MotorControl/utils.hpp **** uint32_t timeout_to_deadline(uint32_t timeout_ms);
  71:./MotorControl/utils.hpp **** int is_in_the_future(uint32_t time_ms);
  72:./MotorControl/utils.hpp **** uint32_t micros(void);
  73:./MotorControl/utils.hpp **** void delay_us(uint32_t us);
  74:./MotorControl/utils.hpp **** 
  75:./MotorControl/utils.hpp **** extern "C" {
  76:./MotorControl/utils.hpp **** float our_arm_sin_f32(float x);
ARM GAS  /tmp/ccofeNgA.s 			page 249


  77:./MotorControl/utils.hpp **** float our_arm_cos_f32(float x);
  78:./MotorControl/utils.hpp **** }
  79:./MotorControl/utils.hpp **** 
  80:./MotorControl/utils.hpp **** // ----------------
  81:./MotorControl/utils.hpp **** // Inline functions
  82:./MotorControl/utils.hpp **** 
  83:./MotorControl/utils.hpp **** template<typename T>
  84:./MotorControl/utils.hpp **** constexpr T SQ(const T& x){
  85:./MotorControl/utils.hpp ****     return x * x;
  86:./MotorControl/utils.hpp **** }
  87:./MotorControl/utils.hpp **** 
  88:./MotorControl/utils.hpp **** /**
  89:./MotorControl/utils.hpp ****  * @brief Small helper to make array with known size
  90:./MotorControl/utils.hpp ****  * in contrast to initializer lists the number of arguments
  91:./MotorControl/utils.hpp ****  * has to match exactly. Whereas initializer lists allow
  92:./MotorControl/utils.hpp ****  * less arguments.
  93:./MotorControl/utils.hpp ****  */
  94:./MotorControl/utils.hpp **** template <class T, class... Tail>
  95:./MotorControl/utils.hpp **** std::array<T, 1 + sizeof...(Tail)> make_array(T head, Tail... tail) {
  96:./MotorControl/utils.hpp ****     return std::array<T, 1 + sizeof...(Tail)>({head, tail...});
  97:./MotorControl/utils.hpp **** }
  98:./MotorControl/utils.hpp **** 
  99:./MotorControl/utils.hpp **** // To allow use of -ffast-math we need to have a special check for nan
 100:./MotorControl/utils.hpp **** // that bypasses the "ignore nan" flag
 101:./MotorControl/utils.hpp **** __attribute__((optimize("-fno-finite-math-only")))
 102:./MotorControl/utils.hpp **** inline bool is_nan(float x) {
 103:./MotorControl/utils.hpp ****     return __builtin_isnan(x);
 4193              		.loc 19 103 5 view .LVU995
 4194              		.loc 2 439 5 is_stmt 0 view .LVU996
 4195 0086 F4EE677A 		vcmp.f32	s15, s15
 4196 008a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4197 008e 1CD6     		bvs	.L157
 4198              	.LVL270:
 4199              	.L152:
 440:MotorControl/motor.cpp ****         // TODO: the motor is already disarmed at this stage. This is an error
 441:MotorControl/motor.cpp ****         // that only pretains to the measurement and its result so it should
 442:MotorControl/motor.cpp ****         // just be a return value of this function.
 443:MotorControl/motor.cpp ****         disarm_with_error(ERROR_PHASE_RESISTANCE_OUT_OF_RANGE);
 444:MotorControl/motor.cpp ****         success = false;
 445:MotorControl/motor.cpp ****     }
 446:MotorControl/motor.cpp **** 
 447:MotorControl/motor.cpp ****     float I_beta = control_law.get_Ibeta();
 4200              		.loc 2 447 5 is_stmt 1 view .LVU997
 4201              	.LBB2265:
 4202              	.LBI2265:
  67:MotorControl/motor.cpp ****         return I_beta_;
 4203              		.loc 2 67 11 view .LVU998
 4204              	.LBB2266:
  68:MotorControl/motor.cpp ****     }
 4205              		.loc 2 68 9 view .LVU999
  68:MotorControl/motor.cpp ****     }
 4206              		.loc 2 68 16 is_stmt 0 view .LVU1000
 4207 0090 DDED077A 		vldr.32	s15, [sp, #28]
 4208              	.LVL271:
  68:MotorControl/motor.cpp ****     }
 4209              		.loc 2 68 16 view .LVU1001
 4210              	.LBE2266:
ARM GAS  /tmp/ccofeNgA.s 			page 250


 4211              	.LBE2265:
 448:MotorControl/motor.cpp ****     if (is_nan(I_beta) || (abs(I_beta) / test_current) > 0.2f) {
 4212              		.loc 2 448 5 is_stmt 1 view .LVU1002
 4213              		.loc 19 103 5 view .LVU1003
 4214              		.loc 2 448 24 is_stmt 0 view .LVU1004
 4215 0094 F4EE677A 		vcmp.f32	s15, s15
 4216 0098 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4217 009c 0AD6     		bvs	.L153
 4218              	.LVL272:
 4219              	.LBB2267:
 4220              	.LBI2267:
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 4221              		.loc 7 75 3 is_stmt 1 view .LVU1005
 4222              	.LBB2268:
 4223              		.loc 7 76 5 view .LVU1006
 4224              		.loc 7 76 31 is_stmt 0 view .LVU1007
 4225 009e F0EEE77A 		vabs.f32	s15, s15
 4226              	.LVL273:
 4227              		.loc 7 76 31 view .LVU1008
 4228              	.LBE2268:
 4229              	.LBE2267:
 4230              		.loc 2 448 40 view .LVU1009
 4231 00a2 87EE887A 		vdiv.f32	s14, s15, s16
 4232              		.loc 2 448 24 view .LVU1010
 4233 00a6 DFED0F7A 		vldr.32	s15, .L158+12
 4234 00aa B4EEE77A 		vcmpe.f32	s14, s15
 4235 00ae F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4236 00b2 05DD     		ble	.L154
 4237              	.L153:
 449:MotorControl/motor.cpp ****         disarm_with_error(ERROR_UNBALANCED_PHASES);
 4238              		.loc 2 449 9 is_stmt 1 discriminator 3 view .LVU1011
 4239              		.loc 2 449 26 is_stmt 0 discriminator 3 view .LVU1012
 4240 00b4 0022     		movs	r2, #0
 4241 00b6 0823     		movs	r3, #8
 4242 00b8 2846     		mov	r0, r5
 4243 00ba FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 4244              	.LVL274:
 450:MotorControl/motor.cpp ****         success = false;
 4245              		.loc 2 450 17 discriminator 3 view .LVU1013
 4246 00be 0024     		movs	r4, #0
 4247              	.LVL275:
 4248              	.L154:
 451:MotorControl/motor.cpp ****     }
 452:MotorControl/motor.cpp **** 
 453:MotorControl/motor.cpp ****     return success;
 4249              		.loc 2 453 5 is_stmt 1 view .LVU1014
 454:MotorControl/motor.cpp **** }
 4250              		.loc 2 454 1 is_stmt 0 view .LVU1015
 4251 00c0 2046     		mov	r0, r4
 4252 00c2 0BB0     		add	sp, sp, #44
 4253              	.LCFI60:
 4254              		.cfi_remember_state
 4255              		.cfi_def_cfa_offset 20
 4256              		@ sp needed
 4257 00c4 BDEC028B 		vldm	sp!, {d8}
 4258              	.LCFI61:
 4259              		.cfi_restore 80
ARM GAS  /tmp/ccofeNgA.s 			page 251


 4260              		.cfi_restore 81
 4261              		.cfi_def_cfa_offset 12
 4262              	.LVL276:
 4263              		.loc 2 454 1 view .LVU1016
 4264 00c8 30BD     		pop	{r4, r5, pc}
 4265              	.LVL277:
 4266              	.L157:
 4267              	.LCFI62:
 4268              		.cfi_restore_state
 443:MotorControl/motor.cpp ****         success = false;
 4269              		.loc 2 443 9 is_stmt 1 view .LVU1017
 443:MotorControl/motor.cpp ****         success = false;
 4270              		.loc 2 443 26 is_stmt 0 view .LVU1018
 4271 00ca 0122     		movs	r2, #1
 4272 00cc 0023     		movs	r3, #0
 4273 00ce 2846     		mov	r0, r5
 4274 00d0 FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 4275              	.LVL278:
 444:MotorControl/motor.cpp ****     }
 4276              		.loc 2 444 17 view .LVU1019
 4277 00d4 0024     		movs	r4, #0
 4278              	.LVL279:
 444:MotorControl/motor.cpp ****     }
 4279              		.loc 2 444 17 view .LVU1020
 4280 00d6 DBE7     		b	.L152
 4281              	.L159:
 4282              		.align	2
 4283              	.L158:
 4284 00d8 08000000 		.word	_ZTV31ResistanceMeasurementControlLaw+8
 4285 00dc 0000A042 		.word	1117782016
 4286 00e0 0000C07F 		.word	2143289344
 4287 00e4 CDCC4C3E 		.word	1045220557
 4288              		.cfi_endproc
 4289              	.LFE5305:
 4290              		.fnend
 4292              		.section	.text._ZN5Motor24measure_phase_inductanceEf,"ax",%progbits
 4293              		.align	1
 4294              		.global	_ZN5Motor24measure_phase_inductanceEf
 4295              		.syntax unified
 4296              		.thumb
 4297              		.thumb_func
 4299              	_ZN5Motor24measure_phase_inductanceEf:
 4300              		.fnstart
 4301              	.LVL280:
 4302              	.LFB5325:
 455:MotorControl/motor.cpp **** 
 456:MotorControl/motor.cpp **** 
 457:MotorControl/motor.cpp **** bool Motor::measure_phase_inductance(float test_voltage) {
 4303              		.loc 2 457 58 is_stmt 1 view -0
 4304              		.cfi_startproc
 4305              		@ args = 0, pretend = 0, frame = 32
 4306              		@ frame_needed = 0, uses_anonymous_args = 0
 4307              		.loc 2 457 58 is_stmt 0 view .LVU1022
 4308 0000 30B5     		push	{r4, r5, lr}
 4309              		.save {r4, r5, lr}
 4310              	.LCFI63:
 4311              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccofeNgA.s 			page 252


 4312              		.cfi_offset 4, -12
 4313              		.cfi_offset 5, -8
 4314              		.cfi_offset 14, -4
 4315              		.pad #36
 4316 0002 89B0     		sub	sp, sp, #36
 4317              	.LCFI64:
 4318              		.cfi_def_cfa_offset 48
 4319 0004 0546     		mov	r5, r0
 458:MotorControl/motor.cpp ****     InductanceMeasurementControlLaw control_law;
 4320              		.loc 2 458 5 is_stmt 1 view .LVU1023
 4321              		.loc 2 458 37 is_stmt 0 view .LVU1024
 4322 0006 2D4B     		ldr	r3, .L168
 4323 0008 0093     		str	r3, [sp]
 4324 000a 0023     		movs	r3, #0
 4325 000c 0193     		str	r3, [sp, #4]	@ float
 4326 000e 0024     		movs	r4, #0
 4327 0010 8DF80840 		strb	r4, [sp, #8]
 4328 0014 0393     		str	r3, [sp, #12]	@ float
 4329 0016 0494     		str	r4, [sp, #16]
 4330 0018 294A     		ldr	r2, .L168+4
 4331 001a 0592     		str	r2, [sp, #20]	@ float
 4332 001c 0694     		str	r4, [sp, #24]
 4333 001e 0793     		str	r3, [sp, #28]	@ float
 459:MotorControl/motor.cpp ****     control_law.test_voltage_ = test_voltage;
 4334              		.loc 2 459 5 is_stmt 1 view .LVU1025
 4335              		.loc 2 459 31 is_stmt 0 view .LVU1026
 4336 0020 8DED010A 		vstr.32	s0, [sp, #4]
 460:MotorControl/motor.cpp **** 
 461:MotorControl/motor.cpp ****     arm(&control_law);
 4337              		.loc 2 461 5 is_stmt 1 view .LVU1027
 4338              		.loc 2 461 8 is_stmt 0 view .LVU1028
 4339 0024 6946     		mov	r1, sp
 4340 0026 FFF7FEFF 		bl	_ZN5Motor3armEP15PhaseControlLawILj3EE
 4341              	.LVL281:
 4342              	.L162:
 4343              	.LBB2269:
 462:MotorControl/motor.cpp **** 
 463:MotorControl/motor.cpp ****     for (size_t i = 0; i < 1250; ++i) {
 4344              		.loc 2 463 26 is_stmt 1 discriminator 1 view .LVU1029
 4345 002a 40F2E143 		movw	r3, #1249
 4346 002e 9C42     		cmp	r4, r3
 4347 0030 0ED8     		bhi	.L161
 464:MotorControl/motor.cpp ****         if (!((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_)) 
 4348              		.loc 2 464 9 view .LVU1030
 4349              		.loc 2 464 16 is_stmt 0 view .LVU1031
 4350 0032 D5F88430 		ldr	r3, [r5, #132]
 4351              		.loc 2 464 23 view .LVU1032
 4352 0036 93F86C22 		ldrb	r2, [r3, #620]	@ zero_extendqisi2
 4353              		.loc 2 464 9 view .LVU1033
 4354 003a 4AB9     		cbnz	r2, .L161
 4355              		.loc 2 464 81 discriminator 1 view .LVU1034
 4356 003c D3F85831 		ldr	r3, [r3, #344]
 4357              		.loc 2 464 88 discriminator 1 view .LVU1035
 4358 0040 93F89C30 		ldrb	r3, [r3, #156]	@ zero_extendqisi2
 4359              		.loc 2 464 13 discriminator 1 view .LVU1036
 4360 0044 23B1     		cbz	r3, .L161
 465:MotorControl/motor.cpp ****             break;
ARM GAS  /tmp/ccofeNgA.s 			page 253


 466:MotorControl/motor.cpp ****         }
 467:MotorControl/motor.cpp ****         osDelay(1);
 4361              		.loc 2 467 9 is_stmt 1 view .LVU1037
 4362              		.loc 2 467 16 is_stmt 0 view .LVU1038
 4363 0046 0120     		movs	r0, #1
 4364 0048 FFF7FEFF 		bl	osDelay
 4365              	.LVL282:
 463:MotorControl/motor.cpp ****         if (!((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_)) 
 4366              		.loc 2 463 5 is_stmt 1 view .LVU1039
 4367 004c 0134     		adds	r4, r4, #1
 4368              	.LVL283:
 463:MotorControl/motor.cpp ****         if (!((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_)) 
 4369              		.loc 2 463 5 is_stmt 0 view .LVU1040
 4370 004e ECE7     		b	.L162
 4371              	.L161:
 463:MotorControl/motor.cpp ****         if (!((axis_->requested_state_ == Axis::AXIS_STATE_UNDEFINED) && axis_->motor_.is_armed_)) 
 4372              		.loc 2 463 5 view .LVU1041
 4373              	.LBE2269:
 468:MotorControl/motor.cpp ****     }
 469:MotorControl/motor.cpp **** 
 470:MotorControl/motor.cpp ****     bool success = is_armed_;
 4374              		.loc 2 470 5 is_stmt 1 view .LVU1042
 4375              		.loc 2 470 10 is_stmt 0 view .LVU1043
 4376 0050 95F89C40 		ldrb	r4, [r5, #156]	@ zero_extendqisi2
 4377              	.LVL284:
 471:MotorControl/motor.cpp **** 
 472:MotorControl/motor.cpp ****     //// De-energize motor
 473:MotorControl/motor.cpp ****     //if (!enqueue_voltage_timings(motor, 0.0f, 0.0f))
 474:MotorControl/motor.cpp ****     //    return false; // error set inside enqueue_voltage_timings
 475:MotorControl/motor.cpp **** 
 476:MotorControl/motor.cpp ****     disarm();
 4378              		.loc 2 476 5 is_stmt 1 view .LVU1044
 4379              		.loc 2 476 11 is_stmt 0 view .LVU1045
 4380 0054 0021     		movs	r1, #0
 4381 0056 2846     		mov	r0, r5
 4382 0058 FFF7FEFF 		bl	_ZN5Motor6disarmEPb
 4383              	.LVL285:
 477:MotorControl/motor.cpp **** 
 478:MotorControl/motor.cpp ****     config_.phase_inductance = control_law.get_inductance();
 4384              		.loc 2 478 5 is_stmt 1 view .LVU1046
 4385              	.LBB2270:
 4386              	.LBI2270:
 129:MotorControl/motor.cpp ****         // Note: A more correct formula would also take into account that there is a finite timeste
 4387              		.loc 2 129 11 view .LVU1047
 4388              	.LBB2271:
 132:MotorControl/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
 4389              		.loc 2 132 9 view .LVU1048
 132:MotorControl/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
 4390              		.loc 2 132 50 is_stmt 0 view .LVU1049
 4391 005c 069B     		ldr	r3, [sp, #24]
 4392 005e 049A     		ldr	r2, [sp, #16]
 4393 0060 9B1A     		subs	r3, r3, r2
 132:MotorControl/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
 4394              		.loc 2 132 20 view .LVU1050
 4395 0062 07EE903A 		vmov	s15, r3	@ int
 4396 0066 F8EE677A 		vcvt.f32.u32	s15, s15
 132:MotorControl/motor.cpp ****         return std::abs(test_voltage_) / (deltaI_ / dt);
ARM GAS  /tmp/ccofeNgA.s 			page 254


 4397              		.loc 2 132 15 view .LVU1051
 4398 006a DFED166A 		vldr.32	s13, .L168+8
 4399 006e 87EEA67A 		vdiv.f32	s14, s15, s13
 4400              	.LVL286:
 133:MotorControl/motor.cpp ****     }
 4401              		.loc 2 133 9 is_stmt 1 view .LVU1052
 133:MotorControl/motor.cpp ****     }
 4402              		.loc 2 133 24 is_stmt 0 view .LVU1053
 4403 0072 DDED017A 		vldr.32	s15, [sp, #4]
 4404              	.LVL287:
 4405              	.LBB2272:
 4406              	.LBI2272:
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 4407              		.loc 7 75 3 is_stmt 1 view .LVU1054
 4408              	.LBB2273:
 4409              		.loc 7 76 5 view .LVU1055
 4410              		.loc 7 76 31 is_stmt 0 view .LVU1056
 4411 0076 F0EEE77A 		vabs.f32	s15, s15
 4412              	.LVL288:
 4413              		.loc 7 76 31 view .LVU1057
 4414              	.LBE2273:
 4415              	.LBE2272:
 133:MotorControl/motor.cpp ****     }
 4416              		.loc 2 133 43 view .LVU1058
 4417 007a 9DED076A 		vldr.32	s12, [sp, #28]
 133:MotorControl/motor.cpp ****     }
 4418              		.loc 2 133 51 view .LVU1059
 4419 007e C6EE076A 		vdiv.f32	s13, s12, s14
 133:MotorControl/motor.cpp ****     }
 4420              		.loc 2 133 55 view .LVU1060
 4421 0082 87EEA67A 		vdiv.f32	s14, s15, s13
 4422              	.LVL289:
 133:MotorControl/motor.cpp ****     }
 4423              		.loc 2 133 55 view .LVU1061
 4424              	.LBE2271:
 4425              	.LBE2270:
 4426              		.loc 2 478 30 view .LVU1062
 4427 0086 85ED0B7A 		vstr.32	s14, [r5, #44]
 479:MotorControl/motor.cpp ****     
 480:MotorControl/motor.cpp ****     // TODO arbitrary values set for now
 481:MotorControl/motor.cpp ****     if (!(config_.phase_inductance >= 2e-6f && config_.phase_inductance <= 4000e-6f)) {
 4428              		.loc 2 481 5 is_stmt 1 view .LVU1063
 4429 008a DFED0F7A 		vldr.32	s15, .L168+12
 4430 008e B4EEE77A 		vcmpe.f32	s14, s15
 4431 0092 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4432 0096 06DB     		blt	.L163
 4433              		.loc 2 481 9 is_stmt 0 discriminator 1 view .LVU1064
 4434 0098 DFED0C7A 		vldr.32	s15, .L168+16
 4435 009c B4EEE77A 		vcmpe.f32	s14, s15
 4436 00a0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4437 00a4 06D9     		bls	.L165
 4438              	.L163:
 482:MotorControl/motor.cpp ****         error_ |= ERROR_PHASE_INDUCTANCE_OUT_OF_RANGE;
 4439              		.loc 2 482 9 is_stmt 1 view .LVU1065
 4440              		.loc 2 482 19 is_stmt 0 view .LVU1066
 4441 00a6 0222     		movs	r2, #2
 4442 00a8 0023     		movs	r3, #0
ARM GAS  /tmp/ccofeNgA.s 			page 255


 4443 00aa 05F19000 		add	r0, r5, #144
 4444 00ae FFF7FEFF 		bl	_ZoRRN10ODriveIntf9MotorIntf5ErrorES1_
 4445              	.LVL290:
 483:MotorControl/motor.cpp ****         success = false;
 4446              		.loc 2 483 9 is_stmt 1 view .LVU1067
 4447              		.loc 2 483 17 is_stmt 0 view .LVU1068
 4448 00b2 0024     		movs	r4, #0
 4449              	.LVL291:
 4450              	.L165:
 484:MotorControl/motor.cpp ****     }
 485:MotorControl/motor.cpp **** 
 486:MotorControl/motor.cpp ****     return success;
 4451              		.loc 2 486 5 is_stmt 1 view .LVU1069
 487:MotorControl/motor.cpp **** }
 4452              		.loc 2 487 1 is_stmt 0 view .LVU1070
 4453 00b4 2046     		mov	r0, r4
 4454 00b6 09B0     		add	sp, sp, #36
 4455              	.LCFI65:
 4456              		.cfi_def_cfa_offset 12
 4457              		@ sp needed
 4458 00b8 30BD     		pop	{r4, r5, pc}
 4459              	.LVL292:
 4460              	.L169:
 4461              		.loc 2 487 1 view .LVU1071
 4462 00ba 00BF     		.align	2
 4463              	.L168:
 4464 00bc 08000000 		.word	_ZTV31InductanceMeasurementControlLaw+8
 4465 00c0 0000C07F 		.word	2143289344
 4466 00c4 A037204D 		.word	1293957024
 4467 00c8 BD370636 		.word	906377149
 4468 00cc 6F12833B 		.word	998445679
 4469              		.cfi_endproc
 4470              	.LFE5325:
 4471              		.fnend
 4473              		.section	.text._ZN5Motor15run_calibrationEv,"ax",%progbits
 4474              		.align	1
 4475              		.global	_ZN5Motor15run_calibrationEv
 4476              		.syntax unified
 4477              		.thumb
 4478              		.thumb_func
 4480              	_ZN5Motor15run_calibrationEv:
 4481              		.fnstart
 4482              	.LVL293:
 4483              	.LFB5329:
 488:MotorControl/motor.cpp **** 
 489:MotorControl/motor.cpp **** 
 490:MotorControl/motor.cpp **** // TODO: motor calibration should only be a utility function that's called from
 491:MotorControl/motor.cpp **** // the UI on explicit user request. It should take its parameters as input
 492:MotorControl/motor.cpp **** // arguments and return the measured results without modifying any config values.
 493:MotorControl/motor.cpp **** bool Motor::run_calibration() {
 4484              		.loc 2 493 31 is_stmt 1 view -0
 4485              		.cfi_startproc
 4486              		@ args = 0, pretend = 0, frame = 0
 4487              		@ frame_needed = 0, uses_anonymous_args = 0
 4488              		.loc 2 493 31 is_stmt 0 view .LVU1073
 4489 0000 10B5     		push	{r4, lr}
 4490              		.save {r4, lr}
ARM GAS  /tmp/ccofeNgA.s 			page 256


 4491              	.LCFI66:
 4492              		.cfi_def_cfa_offset 8
 4493              		.cfi_offset 4, -8
 4494              		.cfi_offset 14, -4
 4495 0002 2DED028B 		vpush.64	{d8}
 4496              		.vsave {d8}
 4497              	.LCFI67:
 4498              		.cfi_def_cfa_offset 16
 4499              		.cfi_offset 80, -16
 4500              		.cfi_offset 81, -12
 4501 0006 0446     		mov	r4, r0
 494:MotorControl/motor.cpp ****     float R_calib_max_voltage = config_.resistance_calib_max_voltage;
 4502              		.loc 2 494 5 is_stmt 1 view .LVU1074
 4503              		.loc 2 494 11 is_stmt 0 view .LVU1075
 4504 0008 90ED0A8A 		vldr.32	s16, [r0, #40]
 4505              	.LVL294:
 495:MotorControl/motor.cpp ****     if (config_.motor_type == MOTOR_TYPE_HIGH_CURRENT
 4506              		.loc 2 495 5 is_stmt 1 view .LVU1076
 4507              		.loc 2 495 17 is_stmt 0 view .LVU1077
 4508 000c 90F83830 		ldrb	r3, [r0, #56]	@ zero_extendqisi2
 4509              		.loc 2 495 5 view .LVU1078
 4510 0010 63B1     		cbz	r3, .L171
 496:MotorControl/motor.cpp ****         || config_.motor_type == MOTOR_TYPE_ACIM) {
 4511              		.loc 2 496 9 view .LVU1079
 4512 0012 032B     		cmp	r3, #3
 4513 0014 0AD0     		beq	.L171
 497:MotorControl/motor.cpp ****         if (!measure_phase_resistance(config_.calibration_current, R_calib_max_voltage))
 498:MotorControl/motor.cpp ****             return false;
 499:MotorControl/motor.cpp ****         if (!measure_phase_inductance(R_calib_max_voltage))
 500:MotorControl/motor.cpp ****             return false;
 501:MotorControl/motor.cpp ****     } else if (config_.motor_type == MOTOR_TYPE_GIMBAL) {
 4514              		.loc 2 501 12 is_stmt 1 view .LVU1080
 4515 0016 022B     		cmp	r3, #2
 4516 0018 19D1     		bne	.L175
 4517              	.LVL295:
 4518              	.L174:
 502:MotorControl/motor.cpp ****         // no calibration needed
 503:MotorControl/motor.cpp ****     } else {
 504:MotorControl/motor.cpp ****         return false;
 505:MotorControl/motor.cpp ****     }
 506:MotorControl/motor.cpp **** 
 507:MotorControl/motor.cpp ****     update_current_controller_gains();
 4519              		.loc 2 507 5 view .LVU1081
 4520              		.loc 2 507 36 is_stmt 0 view .LVU1082
 4521 001a 2046     		mov	r0, r4
 4522 001c FFF7FEFF 		bl	_ZN5Motor31update_current_controller_gainsEv
 4523              	.LVL296:
 508:MotorControl/motor.cpp ****     
 509:MotorControl/motor.cpp ****     is_calibrated_ = true;
 4524              		.loc 2 509 5 is_stmt 1 view .LVU1083
 4525              		.loc 2 509 20 is_stmt 0 view .LVU1084
 4526 0020 0120     		movs	r0, #1
 4527 0022 84F89E00 		strb	r0, [r4, #158]
 510:MotorControl/motor.cpp ****     return true;
 4528              		.loc 2 510 5 is_stmt 1 view .LVU1085
 4529              	.L173:
 511:MotorControl/motor.cpp **** }
ARM GAS  /tmp/ccofeNgA.s 			page 257


 4530              		.loc 2 511 1 is_stmt 0 view .LVU1086
 4531 0026 BDEC028B 		vldm	sp!, {d8}
 4532              	.LCFI68:
 4533              		.cfi_remember_state
 4534              		.cfi_restore 80
 4535              		.cfi_restore 81
 4536              		.cfi_def_cfa_offset 8
 4537              	.LVL297:
 4538              		.loc 2 511 1 view .LVU1087
 4539 002a 10BD     		pop	{r4, pc}
 4540              	.LVL298:
 4541              	.L171:
 4542              	.LCFI69:
 4543              		.cfi_restore_state
 497:MotorControl/motor.cpp ****             return false;
 4544              		.loc 2 497 9 is_stmt 1 view .LVU1088
 497:MotorControl/motor.cpp ****             return false;
 4545              		.loc 2 497 38 is_stmt 0 view .LVU1089
 4546 002c F0EE480A 		vmov.f32	s1, s16
 4547 0030 94ED090A 		vldr.32	s0, [r4, #36]
 4548 0034 2046     		mov	r0, r4
 4549              	.LVL299:
 497:MotorControl/motor.cpp ****             return false;
 4550              		.loc 2 497 38 view .LVU1090
 4551 0036 FFF7FEFF 		bl	_ZN5Motor24measure_phase_resistanceEff
 4552              	.LVL300:
 497:MotorControl/motor.cpp ****             return false;
 4553              		.loc 2 497 9 view .LVU1091
 4554 003a 0028     		cmp	r0, #0
 4555 003c F3D0     		beq	.L173
 499:MotorControl/motor.cpp ****             return false;
 4556              		.loc 2 499 9 is_stmt 1 view .LVU1092
 499:MotorControl/motor.cpp ****             return false;
 4557              		.loc 2 499 38 is_stmt 0 view .LVU1093
 4558 003e B0EE480A 		vmov.f32	s0, s16
 4559 0042 2046     		mov	r0, r4
 4560 0044 FFF7FEFF 		bl	_ZN5Motor24measure_phase_inductanceEf
 4561              	.LVL301:
 499:MotorControl/motor.cpp ****             return false;
 4562              		.loc 2 499 9 view .LVU1094
 4563 0048 0028     		cmp	r0, #0
 4564 004a E6D1     		bne	.L174
 4565 004c EBE7     		b	.L173
 4566              	.LVL302:
 4567              	.L175:
 504:MotorControl/motor.cpp ****     }
 4568              		.loc 2 504 16 view .LVU1095
 4569 004e 0020     		movs	r0, #0
 4570              	.LVL303:
 504:MotorControl/motor.cpp ****     }
 4571              		.loc 2 504 16 view .LVU1096
 4572 0050 E9E7     		b	.L173
 4573              		.cfi_endproc
 4574              	.LFE5329:
 4575              		.fnend
 4577              		.section	.text._ZN5Motor15current_meas_cbEmSt8optionalI9Iph_ABC_tE,"ax",%progbits
 4578              		.align	1
ARM GAS  /tmp/ccofeNgA.s 			page 258


 4579              		.global	_ZN5Motor15current_meas_cbEmSt8optionalI9Iph_ABC_tE
 4580              		.syntax unified
 4581              		.thumb
 4582              		.thumb_func
 4584              	_ZN5Motor15current_meas_cbEmSt8optionalI9Iph_ABC_tE:
 4585              		.fnstart
 4586              	.LVL304:
 4587              	.LFB5341:
 512:MotorControl/motor.cpp **** 
 513:MotorControl/motor.cpp **** void Motor::update(uint32_t timestamp) {
 514:MotorControl/motor.cpp ****     // Load torque setpoint, convert to motor direction
 515:MotorControl/motor.cpp ****     std::optional<float> maybe_torque = torque_setpoint_src_.present();
 516:MotorControl/motor.cpp ****     if (!maybe_torque.has_value()) {
 517:MotorControl/motor.cpp ****         error_ |= ERROR_UNKNOWN_TORQUE;
 518:MotorControl/motor.cpp ****         return;
 519:MotorControl/motor.cpp ****     }
 520:MotorControl/motor.cpp ****     float torque = direction_ * *maybe_torque;
 521:MotorControl/motor.cpp **** 
 522:MotorControl/motor.cpp ****     // Load setpoints from previous iteration.
 523:MotorControl/motor.cpp ****     auto [id, iq] = Idq_setpoint_.previous()
 524:MotorControl/motor.cpp ****                      .value_or(float2D{0.0f, 0.0f});
 525:MotorControl/motor.cpp ****     // Load effective current limit
 526:MotorControl/motor.cpp ****     float ilim = axis_->motor_.effective_current_lim_;
 527:MotorControl/motor.cpp **** 
 528:MotorControl/motor.cpp ****     // Autoflux tracks old Iq (that may be 2-norm clamped last cycle) to make sure we are chasing a
 529:MotorControl/motor.cpp ****     if ((axis_->motor_.config_.motor_type == Motor::MOTOR_TYPE_ACIM) && config_.acim_autoflux_enabl
 530:MotorControl/motor.cpp ****         float abs_iq = std::abs(iq);
 531:MotorControl/motor.cpp ****         float gain = abs_iq > id ? config_.acim_autoflux_attack_gain : config_.acim_autoflux_decay_
 532:MotorControl/motor.cpp ****         id += gain * (abs_iq - id) * current_meas_period;
 533:MotorControl/motor.cpp ****         id = std::clamp(id, config_.acim_autoflux_min_Id, 0.9f * ilim); // 10% space reserved for I
 534:MotorControl/motor.cpp ****     } else {
 535:MotorControl/motor.cpp ****         id = std::clamp(id, -ilim*0.99f, ilim*0.99f); // 1% space reserved for Iq to avoid numerica
 536:MotorControl/motor.cpp ****     }
 537:MotorControl/motor.cpp **** 
 538:MotorControl/motor.cpp ****     // Convert requested torque to current
 539:MotorControl/motor.cpp ****     if (axis_->motor_.config_.motor_type == Motor::MOTOR_TYPE_ACIM) {
 540:MotorControl/motor.cpp ****         iq = torque / (axis_->motor_.config_.torque_constant * std::max(axis_->acim_estimator_.roto
 541:MotorControl/motor.cpp ****     } else {
 542:MotorControl/motor.cpp ****         iq = torque / axis_->motor_.config_.torque_constant;
 543:MotorControl/motor.cpp ****     }
 544:MotorControl/motor.cpp **** 
 545:MotorControl/motor.cpp ****     // 2-norm clamping where Id takes priority
 546:MotorControl/motor.cpp ****     float iq_lim_sqr = SQ(ilim) - SQ(id);
 547:MotorControl/motor.cpp ****     float Iq_lim = (iq_lim_sqr <= 0.0f) ? 0.0f : sqrt(iq_lim_sqr);
 548:MotorControl/motor.cpp ****     iq = std::clamp(iq, -Iq_lim, Iq_lim);
 549:MotorControl/motor.cpp **** 
 550:MotorControl/motor.cpp ****     if (axis_->motor_.config_.motor_type != Motor::MOTOR_TYPE_GIMBAL) {
 551:MotorControl/motor.cpp ****         Idq_setpoint_ = {id, iq};
 552:MotorControl/motor.cpp ****     }
 553:MotorControl/motor.cpp **** 
 554:MotorControl/motor.cpp ****     // This update call is in bit a weird position because it depends on the
 555:MotorControl/motor.cpp ****     // Id,q setpoint but outputs the phase velocity that we depend on later
 556:MotorControl/motor.cpp ****     // in this function.
 557:MotorControl/motor.cpp ****     // A cleaner fix would be to take the feedforward calculation out of here
 558:MotorControl/motor.cpp ****     // and turn it into a separate component.
 559:MotorControl/motor.cpp ****     MEASURE_TIME(axis_->task_times_.acim_estimator_update)
 560:MotorControl/motor.cpp ****         axis_->acim_estimator_.update(timestamp);
ARM GAS  /tmp/ccofeNgA.s 			page 259


 561:MotorControl/motor.cpp **** 
 562:MotorControl/motor.cpp ****     float vd = 0.0f;
 563:MotorControl/motor.cpp ****     float vq = 0.0f;
 564:MotorControl/motor.cpp **** 
 565:MotorControl/motor.cpp ****     std::optional<float> phase_vel = phase_vel_src_.present();
 566:MotorControl/motor.cpp **** 
 567:MotorControl/motor.cpp ****     if (config_.R_wL_FF_enable) {
 568:MotorControl/motor.cpp ****         if (!phase_vel.has_value()) {
 569:MotorControl/motor.cpp ****             error_ |= ERROR_UNKNOWN_PHASE_VEL;
 570:MotorControl/motor.cpp ****             return;
 571:MotorControl/motor.cpp ****         }
 572:MotorControl/motor.cpp **** 
 573:MotorControl/motor.cpp ****         vd -= *phase_vel * config_.phase_inductance * iq;
 574:MotorControl/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 575:MotorControl/motor.cpp ****         vd += config_.phase_resistance * id;
 576:MotorControl/motor.cpp ****         vq += config_.phase_resistance * iq;
 577:MotorControl/motor.cpp ****     }
 578:MotorControl/motor.cpp **** 
 579:MotorControl/motor.cpp ****     if (config_.bEMF_FF_enable) {
 580:MotorControl/motor.cpp ****         if (!phase_vel.has_value()) {
 581:MotorControl/motor.cpp ****             error_ |= ERROR_UNKNOWN_PHASE_VEL;
 582:MotorControl/motor.cpp ****             return;
 583:MotorControl/motor.cpp ****         }
 584:MotorControl/motor.cpp **** 
 585:MotorControl/motor.cpp ****         vq += *phase_vel * (2.0f/3.0f) * (config_.torque_constant / config_.pole_pairs);
 586:MotorControl/motor.cpp ****     }
 587:MotorControl/motor.cpp ****     
 588:MotorControl/motor.cpp ****     if (axis_->motor_.config_.motor_type == Motor::MOTOR_TYPE_GIMBAL) {
 589:MotorControl/motor.cpp ****         // reinterpret current as voltage
 590:MotorControl/motor.cpp ****         Vdq_setpoint_ = {vd + id, vq + iq};
 591:MotorControl/motor.cpp ****     } else {
 592:MotorControl/motor.cpp ****         Vdq_setpoint_ = {vd, vq};
 593:MotorControl/motor.cpp ****     }
 594:MotorControl/motor.cpp **** }
 595:MotorControl/motor.cpp **** 
 596:MotorControl/motor.cpp **** 
 597:MotorControl/motor.cpp **** /**
 598:MotorControl/motor.cpp ****  * @brief Called when the underlying hardware timer triggers an update event.
 599:MotorControl/motor.cpp ****  */
 600:MotorControl/motor.cpp **** void Motor::current_meas_cb(uint32_t timestamp, std::optional<Iph_ABC_t> current) {
 4588              		.loc 2 600 83 is_stmt 1 view -0
 4589              		.cfi_startproc
 4590              		@ args = 16, pretend = 8, frame = 80
 4591              		@ frame_needed = 0, uses_anonymous_args = 0
 4592              		.loc 2 600 83 is_stmt 0 view .LVU1098
 4593              		.pad #8
 4594 0000 82B0     		sub	sp, sp, #8
 4595              	.LCFI70:
 4596              		.cfi_def_cfa_offset 8
 4597 0002 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4598              		.save {r4, r5, r6, r7, r8, r9, lr}
 4599              	.LCFI71:
 4600              		.cfi_def_cfa_offset 36
 4601              		.cfi_offset 4, -36
 4602              		.cfi_offset 5, -32
 4603              		.cfi_offset 6, -28
 4604              		.cfi_offset 7, -24
ARM GAS  /tmp/ccofeNgA.s 			page 260


 4605              		.cfi_offset 8, -20
 4606              		.cfi_offset 9, -16
 4607              		.cfi_offset 14, -12
 4608              		.pad #100
 4609 0006 99B0     		sub	sp, sp, #100
 4610              	.LCFI72:
 4611              		.cfi_def_cfa_offset 136
 4612 0008 0446     		mov	r4, r0
 4613 000a 8846     		mov	r8, r1
 4614 000c 20A9     		add	r1, sp, #128
 4615 000e 81E80C00 		stm	r1, {r2, r3}
 601:MotorControl/motor.cpp ****     // TODO: this is platform specific
 602:MotorControl/motor.cpp ****     //const float current_meas_period = static_cast<float>(2 * TIM_1_8_PERIOD_CLOCKS * (TIM_1_8_RCR
 603:MotorControl/motor.cpp ****     TaskTimerContext tmr{axis_->task_times_.current_sense};
 4616              		.loc 2 603 5 is_stmt 1 view .LVU1099
 4617              		.loc 2 603 26 is_stmt 0 view .LVU1100
 4618 0012 D0F88470 		ldr	r7, [r0, #132]
 4619              		.loc 2 603 45 view .LVU1101
 4620 0016 07F50776 		add	r6, r7, #540
 4621              	.LVL305:
 4622              	.LBB2384:
 4623              	.LBI2384:
  48:MotorControl/task_timer.hpp **** };
  49:MotorControl/task_timer.hpp **** 
  50:MotorControl/task_timer.hpp **** struct TaskTimerContext {
  51:MotorControl/task_timer.hpp ****     TaskTimerContext(const TaskTimerContext&) = delete;
  52:MotorControl/task_timer.hpp ****     TaskTimerContext(const TaskTimerContext&&) = delete;
  53:MotorControl/task_timer.hpp ****     void operator=(const TaskTimerContext&) = delete;
  54:MotorControl/task_timer.hpp ****     void operator=(const TaskTimerContext&&) = delete;
  55:MotorControl/task_timer.hpp ****     TaskTimerContext(TaskTimer& timer) : timer_(timer), start_time(timer.start()) {}
 4624              		.loc 10 55 5 is_stmt 1 view .LVU1102
 4625              	.LBB2385:
 4626              	.LBB2386:
 4627              		.loc 10 55 81 is_stmt 0 view .LVU1103
 4628 001a 0696     		str	r6, [sp, #24]
 4629              	.LVL306:
 4630              	.LBB2387:
 4631              	.LBI2387:
  25:MotorControl/task_timer.hpp ****         return sample_TIM13();
 4632              		.loc 10 25 14 is_stmt 1 view .LVU1104
 4633              	.LBB2388:
  26:MotorControl/task_timer.hpp ****     }
 4634              		.loc 10 26 9 view .LVU1105
 4635              	.LBB2389:
 4636              	.LBI2389:
  12:MotorControl/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 4637              		.loc 10 12 17 view .LVU1106
 4638              	.LBB2390:
  13:MotorControl/task_timer.hpp ****     return clocks_per_cnt * TIM13->CNT;  // TODO: Use a hw_config
 4639              		.loc 10 13 5 view .LVU1107
  14:MotorControl/task_timer.hpp **** }
 4640              		.loc 10 14 5 view .LVU1108
  14:MotorControl/task_timer.hpp **** }
 4641              		.loc 10 14 36 is_stmt 0 view .LVU1109
 4642 001c 974B     		ldr	r3, .L225
 4643 001e 5D6A     		ldr	r5, [r3, #36]
 4644 0020 6D00     		lsls	r5, r5, #1
ARM GAS  /tmp/ccofeNgA.s 			page 261


 4645 0022 ADB2     		uxth	r5, r5
 4646              	.LVL307:
  14:MotorControl/task_timer.hpp **** }
 4647              		.loc 10 14 36 view .LVU1110
 4648              	.LBE2390:
 4649              	.LBE2389:
 4650              	.LBE2388:
 4651              	.LBE2387:
 4652              		.loc 10 55 81 view .LVU1111
 4653 0024 0795     		str	r5, [sp, #28]
 4654 0026 0023     		movs	r3, #0
 4655 0028 8DF82030 		strb	r3, [sp, #32]
 4656              	.LVL308:
 4657              		.loc 10 55 81 view .LVU1112
 4658              	.LBE2386:
 4659              	.LBE2385:
 4660              	.LBE2384:
 604:MotorControl/motor.cpp **** 
 605:MotorControl/motor.cpp ****     n_evt_current_measurement_++;
 4661              		.loc 2 605 5 is_stmt 1 view .LVU1113
 4662 002c D0F88830 		ldr	r3, [r0, #136]
 4663              		.loc 2 605 31 is_stmt 0 view .LVU1114
 4664 0030 0133     		adds	r3, r3, #1
 4665 0032 C0F88830 		str	r3, [r0, #136]
 606:MotorControl/motor.cpp **** 
 607:MotorControl/motor.cpp ****     bool dc_calib_valid = (dc_calib_running_since_ >= config_.dc_calib_tau * 7.5f)
 4666              		.loc 2 607 5 is_stmt 1 view .LVU1115
 4667              		.loc 2 607 28 is_stmt 0 view .LVU1116
 4668 0036 90ED2F7A 		vldr.32	s14, [r0, #188]
 4669              		.loc 2 607 63 view .LVU1117
 4670 003a D0ED1F7A 		vldr.32	s15, [r0, #124]
 4671              		.loc 2 607 76 view .LVU1118
 4672 003e F1EE0E6A 		vmov.f32	s13, #7.5e+0
 4673 0042 67EEA67A 		vmul.f32	s15, s15, s13
 608:MotorControl/motor.cpp ****                        && (abs(DC_calib_.phA) < max_dc_calib_)
 609:MotorControl/motor.cpp ****                        && (abs(DC_calib_.phB) < max_dc_calib_)
 610:MotorControl/motor.cpp ****                        && (abs(DC_calib_.phC) < max_dc_calib_);
 4674              		.loc 2 610 24 view .LVU1119
 4675 0046 B4EEE77A 		vcmpe.f32	s14, s15
 4676 004a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4677 004e 1EDB     		blt	.L211
 608:MotorControl/motor.cpp ****                        && (abs(DC_calib_.phA) < max_dc_calib_)
 4678              		.loc 2 608 31 view .LVU1120
 4679 0050 D0ED2C7A 		vldr.32	s15, [r0, #176]
 4680              	.LVL309:
 4681              	.LBB2391:
 4682              	.LBI2391:
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 4683              		.loc 7 75 3 is_stmt 1 view .LVU1121
 4684              	.LBB2392:
 4685              		.loc 7 76 5 view .LVU1122
 4686              		.loc 7 76 31 is_stmt 0 view .LVU1123
 4687 0054 F0EEE77A 		vabs.f32	s15, s15
 4688              	.LVL310:
 4689              		.loc 7 76 31 view .LVU1124
 4690              	.LBE2392:
 4691              	.LBE2391:
ARM GAS  /tmp/ccofeNgA.s 			page 262


 608:MotorControl/motor.cpp ****                        && (abs(DC_calib_.phA) < max_dc_calib_)
 4692              		.loc 2 608 49 view .LVU1125
 4693 0058 90ED5E7A 		vldr.32	s14, [r0, #376]
 608:MotorControl/motor.cpp ****                        && (abs(DC_calib_.phA) < max_dc_calib_)
 4694              		.loc 2 608 24 view .LVU1126
 4695 005c B4EEE77A 		vcmpe.f32	s14, s15
 4696 0060 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4697 0064 28DD     		ble	.L212
 609:MotorControl/motor.cpp ****                        && (abs(DC_calib_.phC) < max_dc_calib_);
 4698              		.loc 2 609 31 view .LVU1127
 4699 0066 D0ED2D7A 		vldr.32	s15, [r0, #180]
 4700              	.LVL311:
 4701              	.LBB2393:
 4702              	.LBI2393:
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 4703              		.loc 7 75 3 is_stmt 1 view .LVU1128
 4704              	.LBB2394:
 4705              		.loc 7 76 5 view .LVU1129
 4706              		.loc 7 76 31 is_stmt 0 view .LVU1130
 4707 006a F0EEE77A 		vabs.f32	s15, s15
 4708              	.LVL312:
 4709              		.loc 7 76 31 view .LVU1131
 4710              	.LBE2394:
 4711              	.LBE2393:
 609:MotorControl/motor.cpp ****                        && (abs(DC_calib_.phC) < max_dc_calib_);
 4712              		.loc 2 609 24 view .LVU1132
 4713 006e B4EEE77A 		vcmpe.f32	s14, s15
 4714 0072 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4715 0076 21DD     		ble	.L213
 4716              		.loc 2 610 31 discriminator 3 view .LVU1133
 4717 0078 D0ED2E7A 		vldr.32	s15, [r0, #184]
 4718              	.LVL313:
 4719              	.LBB2395:
 4720              	.LBI2395:
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 4721              		.loc 7 75 3 is_stmt 1 discriminator 3 view .LVU1134
 4722              	.LBB2396:
 4723              		.loc 7 76 5 discriminator 3 view .LVU1135
 4724              		.loc 7 76 31 is_stmt 0 discriminator 3 view .LVU1136
 4725 007c F0EEE77A 		vabs.f32	s15, s15
 4726              	.LVL314:
 4727              		.loc 7 76 31 discriminator 3 view .LVU1137
 4728              	.LBE2396:
 4729              	.LBE2395:
 4730              		.loc 2 610 24 discriminator 3 view .LVU1138
 4731 0080 B4EEE77A 		vcmpe.f32	s14, s15
 4732 0084 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 4733 0088 1ADD     		ble	.L214
 4734              		.loc 2 610 24 view .LVU1139
 4735 008a 0122     		movs	r2, #1
 4736 008c 00E0     		b	.L178
 4737              	.L211:
 4738 008e 0022     		movs	r2, #0
 4739              	.L178:
 4740              	.LVL315:
 611:MotorControl/motor.cpp **** 
 612:MotorControl/motor.cpp ****     if (armed_state_ == 1 || armed_state_ == 2) {
ARM GAS  /tmp/ccofeNgA.s 			page 263


 4741              		.loc 2 612 5 is_stmt 1 discriminator 5 view .LVU1140
 4742              		.loc 2 612 9 is_stmt 0 discriminator 5 view .LVU1141
 4743 0090 94F89D30 		ldrb	r3, [r4, #157]	@ zero_extendqisi2
 4744              		.loc 2 612 27 discriminator 5 view .LVU1142
 4745 0094 013B     		subs	r3, r3, #1
 4746 0096 DBB2     		uxtb	r3, r3
 4747              		.loc 2 612 5 discriminator 5 view .LVU1143
 4748 0098 012B     		cmp	r3, #1
 4749 009a 13D9     		bls	.L217
 613:MotorControl/motor.cpp ****         current_meas_ = {0.0f, 0.0f, 0.0f};
 614:MotorControl/motor.cpp ****         armed_state_ += 1;
 615:MotorControl/motor.cpp ****     } else if (current.has_value() && dc_calib_valid) {
 4750              		.loc 2 615 12 is_stmt 1 view .LVU1144
 4751              	.LVL316:
 4752              	.LBB2397:
 4753              	.LBI2397:
 4754              		.loc 3 916 22 view .LVU1145
 4755              	.LBB2398:
 4756              	.LBI2398:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 4757              		.loc 3 433 22 view .LVU1146
 4758              	.LBB2399:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4759              		.loc 3 434 58 is_stmt 0 view .LVU1147
 4760 009c 9DF88C30 		ldrb	r3, [sp, #140]	@ zero_extendqisi2
 4761              	.LVL317:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4762              		.loc 3 434 58 view .LVU1148
 4763              	.LBE2399:
 4764              	.LBE2398:
 4765              	.LBE2397:
 4766              		.loc 2 615 36 view .LVU1149
 4767 00a0 03B1     		cbz	r3, .L187
 4768              		.loc 2 615 36 discriminator 1 view .LVU1150
 4769 00a2 4ABB     		cbnz	r2, .L218
 4770              	.L187:
 616:MotorControl/motor.cpp ****         current_meas_ = {
 617:MotorControl/motor.cpp ****             current->phA - DC_calib_.phA,
 618:MotorControl/motor.cpp ****             current->phB - DC_calib_.phB,
 619:MotorControl/motor.cpp ****             current->phC - DC_calib_.phC
 620:MotorControl/motor.cpp ****         };
 621:MotorControl/motor.cpp ****     } else {
 622:MotorControl/motor.cpp ****         current_meas_ = std::nullopt;
 4771              		.loc 2 622 9 is_stmt 1 view .LVU1151
 4772              	.LVL318:
 4773              	.LBB2400:
 4774              	.LBI2400:
 775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 4775              		.loc 3 775 7 view .LVU1152
 4776              	.LBB2401:
 4777              	.LBI2401:
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
 4778              		.loc 3 430 7 view .LVU1153
 4779              	.LBB2402:
 4780              	.LBI2402:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 4781              		.loc 3 276 7 view .LVU1154
ARM GAS  /tmp/ccofeNgA.s 			page 264


 4782              	.LBB2403:
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 4783              		.loc 3 278 12 is_stmt 0 view .LVU1155
 4784 00a4 94F8AC30 		ldrb	r3, [r4, #172]	@ zero_extendqisi2
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  _M_destroy();
 4785              		.loc 3 278 2 view .LVU1156
 4786 00a8 13B1     		cbz	r3, .L186
 4787              	.LVL319:
 4788              	.LBB2404:
 4789              	.LBI2404:
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 4790              		.loc 3 256 7 is_stmt 1 view .LVU1157
 4791              	.LBB2405:
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 4792              		.loc 3 258 13 is_stmt 0 view .LVU1158
 4793 00aa 0023     		movs	r3, #0
 4794 00ac 84F8AC30 		strb	r3, [r4, #172]
 4795              	.LVL320:
 4796              	.L186:
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	_M_payload._M_value.~_Stored_type();
 4797              		.loc 3 258 13 view .LVU1159
 4798              	.LBE2405:
 4799              	.LBE2404:
 4800              	.LBE2403:
 4801              	.LBE2402:
 4802              	.LBE2401:
 4803              	.LBE2400:
 623:MotorControl/motor.cpp ****     }
 624:MotorControl/motor.cpp **** 
 625:MotorControl/motor.cpp ****     // Run system-level checks (e.g. overvoltage/undervoltage condition)
 626:MotorControl/motor.cpp ****     // The motor might be disarmed in this function. In this case the
 627:MotorControl/motor.cpp ****     // handler will continue to run until the end but it won't have an
 628:MotorControl/motor.cpp ****     // effect on the PWM.
 629:MotorControl/motor.cpp ****     odrv.do_fast_checks();
 4804              		.loc 2 629 5 is_stmt 1 view .LVU1160
 4805              		.loc 2 629 24 is_stmt 0 view .LVU1161
 4806 00b0 7348     		ldr	r0, .L225+4
 4807              	.LEHB5:
 4808 00b2 FFF7FEFF 		bl	_ZN6ODrive14do_fast_checksEv
 4809              	.LVL321:
 4810 00b6 48E0     		b	.L219
 4811              	.LVL322:
 4812              	.L212:
 610:MotorControl/motor.cpp **** 
 4813              		.loc 2 610 24 view .LVU1162
 4814 00b8 0022     		movs	r2, #0
 4815 00ba E9E7     		b	.L178
 4816              	.L213:
 4817 00bc 0022     		movs	r2, #0
 4818 00be E7E7     		b	.L178
 4819              	.L214:
 4820 00c0 0022     		movs	r2, #0
 4821 00c2 E5E7     		b	.L178
 4822              	.LVL323:
 4823              	.L217:
 613:MotorControl/motor.cpp ****         armed_state_ += 1;
 4824              		.loc 2 613 9 is_stmt 1 view .LVU1163
ARM GAS  /tmp/ccofeNgA.s 			page 265


 613:MotorControl/motor.cpp ****         armed_state_ += 1;
 4825              		.loc 2 613 42 is_stmt 0 view .LVU1164
 4826 00c4 0023     		movs	r3, #0
 4827 00c6 0993     		str	r3, [sp, #36]	@ float
 4828 00c8 0A93     		str	r3, [sp, #40]	@ float
 4829 00ca 0B93     		str	r3, [sp, #44]	@ float
 4830 00cc 04F1A003 		add	r3, r4, #160
 4831              	.LVL324:
 4832              	.LBB2406:
 4833              	.LBI2406:
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 4834              		.loc 3 788 2 is_stmt 1 view .LVU1165
 4835              	.LBB2407:
 4836              	.LBB2408:
 4837              	.LBI2408:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 4838              		.loc 3 433 22 view .LVU1166
 4839              	.LBB2409:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4840              		.loc 3 434 58 is_stmt 0 view .LVU1167
 4841 00d0 94F8AC20 		ldrb	r2, [r4, #172]	@ zero_extendqisi2
 4842              	.LVL325:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4843              		.loc 3 434 58 view .LVU1168
 4844              	.LBE2409:
 4845              	.LBE2408:
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 4846              		.loc 3 790 4 view .LVU1169
 4847 00d4 4AB1     		cbz	r2, .L184
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 4848              		.loc 3 791 6 view .LVU1170
 4849 00d6 09AA     		add	r2, sp, #36
 4850 00d8 07CA     		ldm	r2, {r0, r1, r2}
 4851              	.LVL326:
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 4852              		.loc 3 791 6 view .LVU1171
 4853 00da 83E80700 		stm	r3, {r0, r1, r2}
 4854              	.L185:
 4855              	.LVL327:
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 4856              		.loc 3 791 6 view .LVU1172
 4857              	.LBE2407:
 4858              	.LBE2406:
 614:MotorControl/motor.cpp ****     } else if (current.has_value() && dc_calib_valid) {
 4859              		.loc 2 614 9 is_stmt 1 view .LVU1173
 614:MotorControl/motor.cpp ****     } else if (current.has_value() && dc_calib_valid) {
 4860              		.loc 2 614 22 is_stmt 0 view .LVU1174
 4861 00de 94F89D30 		ldrb	r3, [r4, #157]	@ zero_extendqisi2
 4862 00e2 0133     		adds	r3, r3, #1
 4863 00e4 84F89D30 		strb	r3, [r4, #157]
 4864 00e8 E2E7     		b	.L186
 4865              	.LVL328:
 4866              	.L184:
 4867              	.LBB2415:
 4868              	.LBB2413:
 4869              	.LBB2410:
 4870              	.LBI2410:
ARM GAS  /tmp/ccofeNgA.s 			page 266


 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 4871              		.loc 3 415 2 is_stmt 1 view .LVU1175
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 4872              		.loc 3 415 2 is_stmt 0 view .LVU1176
 4873              	.LBE2410:
 4874              	.LBE2413:
 4875              	.LBE2415:
 4876              		.loc 6 175 3 is_stmt 1 view .LVU1177
 4877              	.LBB2416:
 4878              	.LBB2414:
 4879              	.LBB2412:
 4880              	.LBB2411:
 4881              		.loc 6 175 3 is_stmt 0 view .LVU1178
 4882 00ea 09AA     		add	r2, sp, #36
 4883 00ec 07CA     		ldm	r2, {r0, r1, r2}
 4884              	.LVL329:
 4885              		.loc 6 175 3 view .LVU1179
 4886 00ee 83E80700 		stm	r3, {r0, r1, r2}
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 4887              		.loc 3 421 51 view .LVU1180
 4888 00f2 0122     		movs	r2, #1
 4889 00f4 1A73     		strb	r2, [r3, #12]
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4890              		.loc 3 422 2 view .LVU1181
 4891 00f6 F2E7     		b	.L185
 4892              	.LVL330:
 4893              	.L218:
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4894              		.loc 3 422 2 view .LVU1182
 4895              	.LBE2411:
 4896              	.LBE2412:
 4897              	.LBE2414:
 4898              	.LBE2416:
 616:MotorControl/motor.cpp ****             current->phA - DC_calib_.phA,
 4899              		.loc 2 616 9 is_stmt 1 view .LVU1183
 617:MotorControl/motor.cpp ****             current->phB - DC_calib_.phB,
 4900              		.loc 2 617 38 is_stmt 0 view .LVU1184
 4901 00f8 94ED2C7A 		vldr.32	s14, [r4, #176]
 617:MotorControl/motor.cpp ****             current->phB - DC_calib_.phB,
 4902              		.loc 2 617 26 view .LVU1185
 4903 00fc DDED207A 		vldr.32	s15, [sp, #128]
 4904 0100 77EEC77A 		vsub.f32	s15, s15, s14
 620:MotorControl/motor.cpp ****     } else {
 4905              		.loc 2 620 9 view .LVU1186
 4906 0104 CDED0C7A 		vstr.32	s15, [sp, #48]
 618:MotorControl/motor.cpp ****             current->phC - DC_calib_.phC
 4907              		.loc 2 618 38 view .LVU1187
 4908 0108 94ED2D7A 		vldr.32	s14, [r4, #180]
 618:MotorControl/motor.cpp ****             current->phC - DC_calib_.phC
 4909              		.loc 2 618 26 view .LVU1188
 4910 010c DDED217A 		vldr.32	s15, [sp, #132]
 4911 0110 77EEC77A 		vsub.f32	s15, s15, s14
 620:MotorControl/motor.cpp ****     } else {
 4912              		.loc 2 620 9 view .LVU1189
 4913 0114 CDED0D7A 		vstr.32	s15, [sp, #52]
 619:MotorControl/motor.cpp ****         };
 4914              		.loc 2 619 38 view .LVU1190
ARM GAS  /tmp/ccofeNgA.s 			page 267


 4915 0118 94ED2E7A 		vldr.32	s14, [r4, #184]
 619:MotorControl/motor.cpp ****         };
 4916              		.loc 2 619 26 view .LVU1191
 4917 011c DDED227A 		vldr.32	s15, [sp, #136]
 4918 0120 77EEC77A 		vsub.f32	s15, s15, s14
 620:MotorControl/motor.cpp ****     } else {
 4919              		.loc 2 620 9 view .LVU1192
 4920 0124 CDED0E7A 		vstr.32	s15, [sp, #56]
 4921 0128 04F1A003 		add	r3, r4, #160
 4922              	.LVL331:
 4923              	.LBB2417:
 4924              	.LBI2417:
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 4925              		.loc 3 788 2 is_stmt 1 view .LVU1193
 4926              	.LBB2418:
 4927              	.LBB2419:
 4928              	.LBI2419:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 4929              		.loc 3 433 22 view .LVU1194
 4930              	.LBB2420:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4931              		.loc 3 434 58 is_stmt 0 view .LVU1195
 4932 012c 94F8AC20 		ldrb	r2, [r4, #172]	@ zero_extendqisi2
 4933              	.LVL332:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4934              		.loc 3 434 58 view .LVU1196
 4935              	.LBE2420:
 4936              	.LBE2419:
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    this->_M_get() = std::forward<_Up>(__u);
 4937              		.loc 3 790 4 view .LVU1197
 4938 0130 22B1     		cbz	r2, .L188
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 4939              		.loc 3 791 6 view .LVU1198
 4940 0132 0CAA     		add	r2, sp, #48
 4941 0134 07CA     		ldm	r2, {r0, r1, r2}
 4942              	.LVL333:
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  else
 4943              		.loc 3 791 6 view .LVU1199
 4944 0136 83E80700 		stm	r3, {r0, r1, r2}
 4945 013a B9E7     		b	.L186
 4946              	.LVL334:
 4947              	.L188:
 4948              	.LBB2421:
 4949              	.LBI2421:
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 4950              		.loc 3 415 2 is_stmt 1 view .LVU1200
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
 4951              		.loc 3 415 2 is_stmt 0 view .LVU1201
 4952              	.LBE2421:
 4953              	.LBE2418:
 4954              	.LBE2417:
 4955              		.loc 6 175 3 is_stmt 1 view .LVU1202
 4956              	.LBB2425:
 4957              	.LBB2424:
 4958              	.LBB2423:
 4959              	.LBB2422:
 4960              		.loc 6 175 3 is_stmt 0 view .LVU1203
ARM GAS  /tmp/ccofeNgA.s 			page 268


 4961 013c 0CAA     		add	r2, sp, #48
 4962 013e 07CA     		ldm	r2, {r0, r1, r2}
 4963              	.LVL335:
 4964              		.loc 6 175 3 view .LVU1204
 4965 0140 83E80700 		stm	r3, {r0, r1, r2}
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 4966              		.loc 3 421 51 view .LVU1205
 4967 0144 0122     		movs	r2, #1
 4968 0146 1A73     		strb	r2, [r3, #12]
 4969              	.LVL336:
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4970              		.loc 3 422 2 view .LVU1206
 4971 0148 B2E7     		b	.L186
 4972              	.L219:
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4973              		.loc 3 422 2 view .LVU1207
 4974              	.LBE2422:
 4975              	.LBE2423:
 4976              	.LBE2424:
 4977              	.LBE2425:
 630:MotorControl/motor.cpp **** 
 631:MotorControl/motor.cpp ****     if (current_meas_.has_value()) {
 4978              		.loc 2 631 5 is_stmt 1 view .LVU1208
 4979              	.LVL337:
 4980              	.LBB2426:
 4981              	.LBB2427:
 4982              	.LBI2427:
 4983              		.loc 3 916 22 view .LVU1209
 4984              	.LBB2428:
 4985              	.LBI2428:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 4986              		.loc 3 433 22 view .LVU1210
 4987              	.LBB2429:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4988              		.loc 3 434 58 is_stmt 0 view .LVU1211
 4989 014a 94F8AC30 		ldrb	r3, [r4, #172]	@ zero_extendqisi2
 4990              	.LVL338:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 4991              		.loc 3 434 58 view .LVU1212
 4992              	.LBE2429:
 4993              	.LBE2428:
 4994              	.LBE2427:
 4995              		.loc 2 631 5 view .LVU1213
 4996 014e 002B     		cmp	r3, #0
 4997 0150 49D0     		beq	.L191
 4998              	.LBB2430:
 632:MotorControl/motor.cpp ****         // Check for violation of current limit
 633:MotorControl/motor.cpp ****         // If Ia + Ib + Ic == 0 holds then we have:
 634:MotorControl/motor.cpp ****         // Inorm^2 = Id^2 + Iq^2 = Ialpha^2 + Ibeta^2 = 2/3 * (Ia^2 + Ib^2 + Ic^2)
 635:MotorControl/motor.cpp ****         float Itrip = effective_current_lim_ + config_.current_lim_margin;
 4999              		.loc 2 635 9 is_stmt 1 view .LVU1214
 5000              		.loc 2 635 23 is_stmt 0 view .LVU1215
 5001 0152 94ED5C7A 		vldr.32	s14, [r4, #368]
 5002              		.loc 2 635 56 view .LVU1216
 5003 0156 D4ED107A 		vldr.32	s15, [r4, #64]
 5004              		.loc 2 635 46 view .LVU1217
 5005 015a 37EE277A 		vadd.f32	s14, s14, s15
ARM GAS  /tmp/ccofeNgA.s 			page 269


 5006              	.LVL339:
 636:MotorControl/motor.cpp ****         float Inorm_sq = 2.0f / 3.0f * (SQ(current_meas_->phA)
 5007              		.loc 2 636 9 is_stmt 1 view .LVU1218
 5008              	.LBB2431:
 5009              	.LBI2431:
  84:./MotorControl/utils.hpp ****     return x * x;
 5010              		.loc 19 84 13 view .LVU1219
 5011              	.LBB2432:
  85:./MotorControl/utils.hpp **** }
 5012              		.loc 19 85 14 is_stmt 0 view .LVU1220
 5013 015e D4ED287A 		vldr.32	s15, [r4, #160]
  85:./MotorControl/utils.hpp **** }
 5014              		.loc 19 85 16 view .LVU1221
 5015 0162 67EEA76A 		vmul.f32	s13, s15, s15
 5016              	.LVL340:
  85:./MotorControl/utils.hpp **** }
 5017              		.loc 19 85 16 view .LVU1222
 5018              	.LBE2432:
 5019              	.LBE2431:
 5020              	.LBB2433:
 5021              	.LBI2433:
  84:./MotorControl/utils.hpp ****     return x * x;
 5022              		.loc 19 84 13 is_stmt 1 view .LVU1223
 5023              	.LBB2434:
  85:./MotorControl/utils.hpp **** }
 5024              		.loc 19 85 14 is_stmt 0 view .LVU1224
 5025 0166 D4ED297A 		vldr.32	s15, [r4, #164]
  85:./MotorControl/utils.hpp **** }
 5026              		.loc 19 85 16 view .LVU1225
 5027 016a 67EEA77A 		vmul.f32	s15, s15, s15
 5028              	.LVL341:
  85:./MotorControl/utils.hpp **** }
 5029              		.loc 19 85 16 view .LVU1226
 5030              	.LBE2434:
 5031              	.LBE2433:
 637:MotorControl/motor.cpp ****                                       + SQ(current_meas_->phB)
 5032              		.loc 2 637 39 view .LVU1227
 5033 016e 77EEA67A 		vadd.f32	s15, s15, s13
 5034              	.LVL342:
 5035              	.LBB2435:
 5036              	.LBI2435:
  84:./MotorControl/utils.hpp ****     return x * x;
 5037              		.loc 19 84 13 is_stmt 1 view .LVU1228
 5038              	.LBB2436:
  85:./MotorControl/utils.hpp **** }
 5039              		.loc 19 85 14 is_stmt 0 view .LVU1229
 5040 0172 D4ED2A6A 		vldr.32	s13, [r4, #168]
  85:./MotorControl/utils.hpp **** }
 5041              		.loc 19 85 16 view .LVU1230
 5042 0176 66EEA66A 		vmul.f32	s13, s13, s13
 5043              	.LVL343:
  85:./MotorControl/utils.hpp **** }
 5044              		.loc 19 85 16 view .LVU1231
 5045              	.LBE2436:
 5046              	.LBE2435:
 638:MotorControl/motor.cpp ****                                       + SQ(current_meas_->phC));
 5047              		.loc 2 638 39 view .LVU1232
ARM GAS  /tmp/ccofeNgA.s 			page 270


 5048 017a 77EEA67A 		vadd.f32	s15, s15, s13
 5049              		.loc 2 638 63 view .LVU1233
 5050 017e DFED416A 		vldr.32	s13, .L225+8
 5051 0182 67EEA67A 		vmul.f32	s15, s15, s13
 5052              	.LVL344:
 639:MotorControl/motor.cpp **** 
 640:MotorControl/motor.cpp ****         // Hack: we disable the current check during motor calibration because
 641:MotorControl/motor.cpp ****         // it tends to briefly overshoot when the motor moves to align flux with I_alpha
 642:MotorControl/motor.cpp ****         if (Inorm_sq > SQ(Itrip)) {
 5053              		.loc 2 642 9 is_stmt 1 view .LVU1234
 5054              	.LBB2437:
 5055              	.LBI2437:
  84:./MotorControl/utils.hpp ****     return x * x;
 5056              		.loc 19 84 13 view .LVU1235
 5057              	.LBB2438:
  85:./MotorControl/utils.hpp **** }
 5058              		.loc 19 85 16 is_stmt 0 view .LVU1236
 5059 0186 27EE077A 		vmul.f32	s14, s14, s14
 5060              	.LVL345:
  85:./MotorControl/utils.hpp **** }
 5061              		.loc 19 85 16 view .LVU1237
 5062              	.LBE2438:
 5063              	.LBE2437:
 5064              		.loc 2 642 9 view .LVU1238
 5065 018a B4EEE77A 		vcmpe.f32	s14, s15
 5066 018e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5067 0192 21D4     		bmi	.L220
 5068              	.LVL346:
 5069              	.L192:
 5070              		.loc 2 642 9 view .LVU1239
 5071              	.LBE2430:
 5072              	.LBE2426:
 643:MotorControl/motor.cpp ****             disarm_with_error(ERROR_CURRENT_LIMIT_VIOLATION);
 644:MotorControl/motor.cpp ****         }
 645:MotorControl/motor.cpp ****     } else if (is_armed_) {
 646:MotorControl/motor.cpp ****         // Since we can't check current limits, be safe for now and disarm.
 647:MotorControl/motor.cpp ****         // Theoretically we could continue to operate if there is no active
 648:MotorControl/motor.cpp ****         // current limit.
 649:MotorControl/motor.cpp ****         disarm_with_error(ERROR_UNKNOWN_CURRENT_MEASUREMENT);
 650:MotorControl/motor.cpp ****     }
 651:MotorControl/motor.cpp **** 
 652:MotorControl/motor.cpp ****     if (control_law_) {
 5073              		.loc 2 652 5 is_stmt 1 view .LVU1240
 5074              	.LBB2440:
 5075              		.loc 2 652 9 is_stmt 0 view .LVU1241
 5076 0194 D4F8A8C1 		ldr	ip, [r4, #424]
 5077              		.loc 2 652 5 view .LVU1242
 5078 0198 BCF1000F 		cmp	ip, #0
 5079 019c 44D0     		beq	.L194
 5080              	.LBB2441:
 653:MotorControl/motor.cpp ****         Error err = control_law_->on_measurement(vbus_voltage,
 5081              		.loc 2 653 9 is_stmt 1 view .LVU1243
 654:MotorControl/motor.cpp ****                             current_meas_.has_value() ?
 655:MotorControl/motor.cpp ****                                 std::make_optional(std::array<float, 3>{current_meas_->phA, current
 656:MotorControl/motor.cpp ****                                 : std::nullopt,
 657:MotorControl/motor.cpp ****                             timestamp);
 5082              		.loc 2 657 38 is_stmt 0 view .LVU1244
ARM GAS  /tmp/ccofeNgA.s 			page 271


 5083 019e DCF80030 		ldr	r3, [ip]
 5084 01a2 D3F80490 		ldr	r9, [r3, #4]
 5085              	.LVL347:
 5086              	.LBB2442:
 5087              	.LBI2442:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 5088              		.loc 3 700 2 is_stmt 1 view .LVU1245
 5089              	.LBB2443:
 5090              	.LBB2444:
 5091              	.LBB2445:
 5092              	.LBI2445:
 5093              		.loc 5 76 5 view .LVU1246
 5094              		.loc 5 76 5 is_stmt 0 view .LVU1247
 5095              	.LBE2445:
 5096              	.LBB2446:
 5097              	.LBI2446:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 5098              		.loc 3 607 28 is_stmt 1 view .LVU1248
 5099              	.LBB2447:
 5100              	.LBB2448:
 5101              	.LBB2449:
 5102              	.LBI2449:
 5103              		.loc 5 76 5 view .LVU1249
 5104              		.loc 5 76 5 is_stmt 0 view .LVU1250
 5105              	.LBE2449:
 5106              	.LBB2450:
 5107              	.LBI2450:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 5108              		.loc 3 300 42 is_stmt 1 view .LVU1251
 5109              	.LBB2451:
 5110              	.LBB2452:
 5111              	.LBB2453:
 5112              	.LBI2453:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 5113              		.loc 3 115 2 view .LVU1252
 5114              	.LBB2454:
 5115              	.LBB2455:
 5116              	.LBB2456:
 5117              	.LBI2456:
 5118              		.loc 5 76 5 view .LVU1253
 5119              		.loc 5 76 5 is_stmt 0 view .LVU1254
 5120              	.LBE2456:
 5121              	.LBB2457:
 5122              	.LBI2457:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 5123              		.loc 3 203 6 is_stmt 1 view .LVU1255
 5124              	.LBB2458:
 5125              	.LBB2459:
 5126              	.LBB2460:
 5127              	.LBI2460:
 5128              		.loc 5 76 5 view .LVU1256
 5129              		.loc 5 76 5 is_stmt 0 view .LVU1257
 5130              	.LBE2460:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 5131              		.loc 3 204 47 view .LVU1258
 5132 01a6 384B     		ldr	r3, .L225+12
 5133 01a8 1B68     		ldr	r3, [r3]	@ float
ARM GAS  /tmp/ccofeNgA.s 			page 272


 5134 01aa 0F93     		str	r3, [sp, #60]	@ float
 5135              	.LVL348:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 5136              		.loc 3 204 47 view .LVU1259
 5137              	.LBE2459:
 5138              	.LBE2458:
 5139              	.LBE2457:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 5140              		.loc 3 117 19 view .LVU1260
 5141 01ac 0123     		movs	r3, #1
 5142 01ae 8DF84030 		strb	r3, [sp, #64]
 5143              	.LVL349:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 5144              		.loc 3 117 19 view .LVU1261
 5145              	.LBE2455:
 5146              	.LBE2454:
 5147              	.LBE2453:
 5148              	.LBE2452:
 5149              	.LBE2451:
 5150              	.LBE2450:
 5151              	.LBE2448:
 5152              	.LBE2447:
 5153              	.LBE2446:
 5154              	.LBE2444:
 5155              	.LBE2443:
 5156              	.LBE2442:
 5157              	.LBB2461:
 5158              	.LBI2461:
 5159              		.loc 3 916 22 is_stmt 1 view .LVU1262
 5160              	.LBB2462:
 5161              	.LBI2462:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 5162              		.loc 3 433 22 view .LVU1263
 5163              	.LBB2463:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 5164              		.loc 3 434 58 is_stmt 0 view .LVU1264
 5165 01b2 94F8AC30 		ldrb	r3, [r4, #172]	@ zero_extendqisi2
 5166              	.LVL350:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 5167              		.loc 3 434 58 view .LVU1265
 5168              	.LBE2463:
 5169              	.LBE2462:
 5170              	.LBE2461:
 653:MotorControl/motor.cpp ****                             current_meas_.has_value() ?
 5171              		.loc 2 653 49 view .LVU1266
 5172 01b6 0BBB     		cbnz	r3, .L221
 5173              	.LVL351:
 5174              	.LBB2464:
 5175              	.LBI2464:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 5176              		.loc 3 692 17 is_stmt 1 discriminator 2 view .LVU1267
 5177              	.LBB2465:
 5178              	.LBB2466:
 5179              	.LBI2466:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 5180              		.loc 3 602 17 discriminator 2 view .LVU1268
 5181              	.LBB2467:
ARM GAS  /tmp/ccofeNgA.s 			page 273


 5182              	.LBI2467:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 5183              		.loc 3 302 7 discriminator 2 view .LVU1269
 5184              	.LBB2468:
 5185              	.LBI2468:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 5186              		.loc 3 110 7 discriminator 2 view .LVU1270
 5187              	.LBB2469:
 5188              	.LBB2470:
 5189              	.LBI2470:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 5190              		.loc 3 199 14 discriminator 2 view .LVU1271
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 5191              		.loc 3 199 14 is_stmt 0 discriminator 2 view .LVU1272
 5192              	.LBE2470:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 5193              		.loc 3 110 7 discriminator 2 view .LVU1273
 5194 01b8 0023     		movs	r3, #0
 5195 01ba 8DF85030 		strb	r3, [sp, #80]
 5196              	.LVL352:
 5197              	.L196:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 5198              		.loc 3 110 7 discriminator 2 view .LVU1274
 5199              	.LBE2469:
 5200              	.LBE2468:
 5201              	.LBE2467:
 5202              	.LBE2466:
 5203              	.LBE2465:
 5204              	.LBE2464:
 653:MotorControl/motor.cpp ****                             current_meas_.has_value() ?
 5205              		.loc 2 653 49 discriminator 3 view .LVU1275
 5206 01be CDF80C80 		str	r8, [sp, #12]
 5207 01c2 12AB     		add	r3, sp, #72
 5208 01c4 93E80700 		ldm	r3, {r0, r1, r2}
 5209 01c8 8DE80700 		stm	sp, {r0, r1, r2}
 5210 01cc 119B     		ldr	r3, [sp, #68]
 5211 01ce 0FAA     		add	r2, sp, #60
 5212 01d0 06CA     		ldm	r2, {r1, r2}
 5213 01d2 6046     		mov	r0, ip
 5214 01d4 C847     		blx	r9
 5215              	.LVL353:
 5216 01d6 24E0     		b	.L222
 5217              	.LVL354:
 5218              	.L220:
 653:MotorControl/motor.cpp ****                             current_meas_.has_value() ?
 5219              		.loc 2 653 49 discriminator 3 view .LVU1276
 5220              	.LBE2441:
 5221              	.LBE2440:
 5222              	.LBB2494:
 5223              	.LBB2439:
 643:MotorControl/motor.cpp ****         }
 5224              		.loc 2 643 13 is_stmt 1 view .LVU1277
 643:MotorControl/motor.cpp ****         }
 5225              		.loc 2 643 30 is_stmt 0 view .LVU1278
 5226 01d8 4FF48052 		mov	r2, #4096
 5227 01dc 0023     		movs	r3, #0
 5228 01de 2046     		mov	r0, r4
ARM GAS  /tmp/ccofeNgA.s 			page 274


 5229 01e0 FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 5230              	.LVL355:
 643:MotorControl/motor.cpp ****         }
 5231              		.loc 2 643 30 view .LVU1279
 5232 01e4 D6E7     		b	.L192
 5233              	.L191:
 643:MotorControl/motor.cpp ****         }
 5234              		.loc 2 643 30 view .LVU1280
 5235              	.LBE2439:
 645:MotorControl/motor.cpp ****         // Since we can't check current limits, be safe for now and disarm.
 5236              		.loc 2 645 12 is_stmt 1 view .LVU1281
 645:MotorControl/motor.cpp ****         // Since we can't check current limits, be safe for now and disarm.
 5237              		.loc 2 645 16 is_stmt 0 view .LVU1282
 5238 01e6 94F89C30 		ldrb	r3, [r4, #156]	@ zero_extendqisi2
 645:MotorControl/motor.cpp ****         // Since we can't check current limits, be safe for now and disarm.
 5239              		.loc 2 645 12 view .LVU1283
 5240 01ea 002B     		cmp	r3, #0
 5241 01ec D2D0     		beq	.L192
 649:MotorControl/motor.cpp ****     }
 5242              		.loc 2 649 9 is_stmt 1 view .LVU1284
 649:MotorControl/motor.cpp ****     }
 5243              		.loc 2 649 26 is_stmt 0 view .LVU1285
 5244 01ee 4FF08042 		mov	r2, #1073741824
 5245 01f2 0023     		movs	r3, #0
 5246 01f4 2046     		mov	r0, r4
 5247 01f6 FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 5248              	.LVL356:
 5249 01fa CBE7     		b	.L192
 5250              	.L221:
 649:MotorControl/motor.cpp ****     }
 5251              		.loc 2 649 26 view .LVU1286
 5252              	.LBE2494:
 5253              	.LBB2495:
 5254              	.LBB2492:
 655:MotorControl/motor.cpp ****                                 : std::nullopt,
 5255              		.loc 2 655 88 view .LVU1287
 5256 01fc D4F8A030 		ldr	r3, [r4, #160]	@ float
 655:MotorControl/motor.cpp ****                                 : std::nullopt,
 5257              		.loc 2 655 57 view .LVU1288
 5258 0200 1593     		str	r3, [sp, #84]	@ float
 655:MotorControl/motor.cpp ****                                 : std::nullopt,
 5259              		.loc 2 655 108 view .LVU1289
 5260 0202 D4F8A430 		ldr	r3, [r4, #164]	@ float
 655:MotorControl/motor.cpp ****                                 : std::nullopt,
 5261              		.loc 2 655 57 view .LVU1290
 5262 0206 1693     		str	r3, [sp, #88]	@ float
 655:MotorControl/motor.cpp ****                                 : std::nullopt,
 5263              		.loc 2 655 128 view .LVU1291
 5264 0208 D4F8A830 		ldr	r3, [r4, #168]	@ float
 655:MotorControl/motor.cpp ****                                 : std::nullopt,
 5265              		.loc 2 655 57 view .LVU1292
 5266 020c 1793     		str	r3, [sp, #92]	@ float
 5267              	.LVL357:
 5268              	.LBB2471:
 5269              	.LBI2471:
 917:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_is_engaged(); }
 918:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
ARM GAS  /tmp/ccofeNgA.s 			page 275


 919:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&
 920:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       value() const&
 921:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 922:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return this->_M_is_engaged()
 923:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ? this->_M_get()
 924:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 925:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 926:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 927:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&
 928:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       value()&
 929:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 930:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return this->_M_is_engaged()
 931:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ? this->_M_get()
 932:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  : (__throw_bad_optional_access(), this->_M_get());
 933:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 934:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 935:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr _Tp&&
 936:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       value()&&
 937:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 938:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return this->_M_is_engaged()
 939:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ? std::move(this->_M_get())
 940:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 941:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 942:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 943:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       constexpr const _Tp&&
 944:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       value() const&&
 945:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       {
 946:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	return this->_M_is_engaged()
 947:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  ? std::move(this->_M_get())
 948:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 949:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       }
 950:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 951:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 952:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr _Tp
 953:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	value_or(_Up&& __u) const&
 954:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 955:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  static_assert(is_copy_constructible_v<_Tp>);
 956:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 957:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 958:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return this->_M_is_engaged()
 959:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    ? this->_M_get() : static_cast<_Tp>(std::forward<_Up>(__u));
 960:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 961:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 962:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       template<typename _Up>
 963:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	constexpr _Tp
 964:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	value_or(_Up&& __u) &&
 965:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 966:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  static_assert(is_move_constructible_v<_Tp>);
 967:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  static_assert(is_convertible_v<_Up&&, _Tp>);
 968:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 969:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	  return this->_M_is_engaged()
 970:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    ? std::move(this->_M_get())
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : static_cast<_Tp>(std::forward<_Up>(__u));
 972:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 973:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 974:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       void reset() noexcept { this->_M_reset(); }
 975:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
ARM GAS  /tmp/ccofeNgA.s 			page 276


 976:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 977:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
 978:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_relop_t =
 979:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       enable_if_t<is_convertible<_Tp, bool>::value, bool>;
 980:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 981:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 982:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_eq_t = __optional_relop_t<
 983:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() == std::declval<const _Up&>())
 984:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
 985:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 986:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 987:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_ne_t = __optional_relop_t<
 988:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() != std::declval<const _Up&>())
 989:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
 990:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 991:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 992:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_lt_t = __optional_relop_t<
 993:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() < std::declval<const _Up&>())
 994:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
 995:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 996:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
 997:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_gt_t = __optional_relop_t<
 998:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() > std::declval<const _Up&>())
 999:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
1000:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1001:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1002:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_le_t = __optional_relop_t<
1003:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() <= std::declval<const _Up&>())
1004:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
1005:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1006:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1007:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     using __optional_ge_t = __optional_relop_t<
1008:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       decltype(std::declval<const _Tp&>() >= std::declval<const _Up&>())
1009:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       >;
1010:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1011:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Comparisons between optional values.
1012:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1013:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1014:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator==(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1015:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_eq_t<_Tp, _Up>
1016:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1017:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return static_cast<bool>(__lhs) == static_cast<bool>(__rhs)
1018:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	     && (!__lhs || *__lhs == *__rhs);
1019:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1020:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1021:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1022:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1023:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator!=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1024:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ne_t<_Tp, _Up>
1025:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1026:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return static_cast<bool>(__lhs) != static_cast<bool>(__rhs)
1027:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	|| (static_cast<bool>(__lhs) && *__lhs != *__rhs);
1028:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1029:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1030:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1031:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1032:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
ARM GAS  /tmp/ccofeNgA.s 			page 277


1033:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_lt_t<_Tp, _Up>
1034:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1035:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return static_cast<bool>(__rhs) && (!__lhs || *__lhs < *__rhs);
1036:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1037:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1038:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1039:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1040:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1041:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_gt_t<_Tp, _Up>
1042:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1043:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return static_cast<bool>(__lhs) && (!__rhs || *__lhs > *__rhs);
1044:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1045:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1046:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1047:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1048:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1049:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_le_t<_Tp, _Up>
1050:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1051:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return !__lhs || (static_cast<bool>(__rhs) && *__lhs <= *__rhs);
1052:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1053:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1054:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1055:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1056:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
1057:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ge_t<_Tp, _Up>
1058:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1059:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return !__rhs || (static_cast<bool>(__lhs) && *__lhs >= *__rhs);
1060:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1061:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1062:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #ifdef __cpp_lib_three_way_comparison
1063:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, three_way_comparable_with<_Tp> _Up>
1064:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
1065:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=>(const optional<_Tp>& __x, const optional<_Up>& __y)
1066:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     {
1067:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       return __x && __y ? *__x <=> *__y : bool(__x) <=> bool(__y);
1068:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     }
1069:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #endif
1070:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1071:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Comparisons with nullopt.
1072:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1073:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1074:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator==(const optional<_Tp>& __lhs, nullopt_t) noexcept
1075:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__lhs; }
1076:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1077:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #ifdef __cpp_lib_three_way_comparison
1078:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1079:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr strong_ordering
1080:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=>(const optional<_Tp>& __x, nullopt_t) noexcept
1081:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return bool(__x) <=> false; }
1082:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #else
1083:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1084:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1085:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator==(nullopt_t, const optional<_Tp>& __rhs) noexcept
1086:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__rhs; }
1087:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1088:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1089:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
ARM GAS  /tmp/ccofeNgA.s 			page 278


1090:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator!=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1091:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return static_cast<bool>(__lhs); }
1092:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1093:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1094:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1095:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator!=(nullopt_t, const optional<_Tp>& __rhs) noexcept
1096:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return static_cast<bool>(__rhs); }
1097:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1098:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1099:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return false; }
1102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<(nullopt_t, const optional<_Tp>& __rhs) noexcept
1106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return static_cast<bool>(__rhs); }
1107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>(const optional<_Tp>& __lhs, nullopt_t) noexcept
1111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return static_cast<bool>(__lhs); }
1112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return false; }
1117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=(const optional<_Tp>& __lhs, nullopt_t) noexcept
1121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__lhs; }
1122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=(nullopt_t, const optional<_Tp>& /* __rhs */) noexcept
1126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return true; }
1127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>=(const optional<_Tp>& /* __lhs */, nullopt_t) noexcept
1131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return true; }
1132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr bool
1135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>=(nullopt_t, const optional<_Tp>& __rhs) noexcept
1136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__rhs; }
1137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #endif // three-way-comparison
1138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Comparisons with value type.
1140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator==(const optional<_Tp>& __lhs, const _Up& __rhs)
1143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_eq_t<_Tp, _Up>
1144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __lhs && *__lhs == __rhs; }
1145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
ARM GAS  /tmp/ccofeNgA.s 			page 279


1147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator==(const _Up& __lhs, const optional<_Tp>& __rhs)
1149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_eq_t<_Up, _Tp>
1150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __rhs && __lhs == *__rhs; }
1151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator!=(const optional<_Tp>& __lhs, const _Up& __rhs)
1155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ne_t<_Tp, _Up>
1156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__lhs || *__lhs != __rhs; }
1157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator!=(const _Up& __lhs, const optional<_Tp>& __rhs)
1161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ne_t<_Up, _Tp>
1162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__rhs || __lhs != *__rhs; }
1163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<(const optional<_Tp>& __lhs, const _Up& __rhs)
1167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_lt_t<_Tp, _Up>
1168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__lhs || *__lhs < __rhs; }
1169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<(const _Up& __lhs, const optional<_Tp>& __rhs)
1173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_lt_t<_Up, _Tp>
1174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __rhs && __lhs < *__rhs; }
1175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>(const optional<_Tp>& __lhs, const _Up& __rhs)
1179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_gt_t<_Tp, _Up>
1180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __lhs && *__lhs > __rhs; }
1181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>(const _Up& __lhs, const optional<_Tp>& __rhs)
1185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_gt_t<_Up, _Tp>
1186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__rhs || __lhs > *__rhs; }
1187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=(const optional<_Tp>& __lhs, const _Up& __rhs)
1191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_le_t<_Tp, _Up>
1192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__lhs || *__lhs <= __rhs; }
1193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=(const _Up& __lhs, const optional<_Tp>& __rhs)
1197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_le_t<_Up, _Tp>
1198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __rhs && __lhs <= *__rhs; }
1199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>=(const optional<_Tp>& __lhs, const _Up& __rhs)
1203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ge_t<_Tp, _Up>
ARM GAS  /tmp/ccofeNgA.s 			page 280


1204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return __lhs && *__lhs >= __rhs; }
1205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr auto
1208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator>=(const _Up& __lhs, const optional<_Tp>& __rhs)
1209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     -> __optional_ge_t<_Up, _Tp>
1210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return !__rhs || __lhs >= *__rhs; }
1211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #ifdef __cpp_lib_three_way_comparison
1213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     inline constexpr bool __is_optional_v = false;
1215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     inline constexpr bool __is_optional_v<optional<_Tp>> = true;
1217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp, typename _Up>
1219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     requires (!__is_optional_v<_Up>)
1220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       && three_way_comparable_with<_Tp, _Up>
1221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr compare_three_way_result_t<_Tp, _Up>
1222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     operator<=>(const optional<_Tp>& __x, const _Up& __v)
1223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return bool(__x) ? *__x <=> __v : strong_ordering::less; }
1224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** #endif
1225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // Swap and creation functions.
1227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   // 2748. swappable traits for optionals
1230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     inline enable_if_t<is_move_constructible_v<_Tp> && is_swappable_v<_Tp>>
1232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     swap(optional<_Tp>& __lhs, optional<_Tp>& __rhs)
1233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     noexcept(noexcept(__lhs.swap(__rhs)))
1234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { __lhs.swap(__rhs); }
1235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     enable_if_t<!(is_move_constructible_v<_Tp> && is_swappable_v<_Tp>)>
1238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     swap(optional<_Tp>&, optional<_Tp>&) = delete;
1239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
1240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****   template<typename _Tp>
1241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     constexpr optional<decay_t<_Tp>>
1242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     make_optional(_Tp&& __t)
 5270              		.loc 3 1242 5 is_stmt 1 view .LVU1293
 5271              	.LBB2472:
 5272              	.LBB2473:
 5273              	.LBI2473:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 5274              		.loc 3 700 2 view .LVU1294
 5275              	.LBB2474:
 5276              	.LBB2475:
 5277              	.LBB2476:
 5278              	.LBI2476:
 5279              		.loc 5 76 5 view .LVU1295
 5280              		.loc 5 76 5 is_stmt 0 view .LVU1296
 5281              	.LBE2476:
 5282              	.LBB2477:
 5283              	.LBI2477:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 5284              		.loc 3 607 28 is_stmt 1 view .LVU1297
 5285              	.LBB2478:
ARM GAS  /tmp/ccofeNgA.s 			page 281


 5286              	.LBB2479:
 5287              	.LBB2480:
 5288              	.LBI2480:
 5289              		.loc 5 76 5 view .LVU1298
 5290              		.loc 5 76 5 is_stmt 0 view .LVU1299
 5291              	.LBE2480:
 5292              	.LBB2481:
 5293              	.LBI2481:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 5294              		.loc 3 300 42 is_stmt 1 view .LVU1300
 5295              	.LBB2482:
 5296              	.LBB2483:
 5297              	.LBB2484:
 5298              	.LBI2484:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 5299              		.loc 3 115 2 view .LVU1301
 5300              	.LBB2485:
 5301              	.LBB2486:
 5302              	.LBB2487:
 5303              	.LBI2487:
 5304              		.loc 5 76 5 view .LVU1302
 5305              		.loc 5 76 5 is_stmt 0 view .LVU1303
 5306              	.LBE2487:
 5307              	.LBB2488:
 5308              	.LBI2488:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 5309              		.loc 3 203 6 is_stmt 1 view .LVU1304
 5310              	.LBB2489:
 5311              	.LBB2490:
 5312              	.LBB2491:
 5313              	.LBI2491:
 5314              		.loc 5 76 5 view .LVU1305
 5315              		.loc 5 76 5 is_stmt 0 view .LVU1306
 5316              	.LBE2491:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 5317              		.loc 3 204 47 view .LVU1307
 5318 020e 11AB     		add	r3, sp, #68
 5319 0210 18AA     		add	r2, sp, #96
 5320 0212 12E90700 		ldmdb	r2, {r0, r1, r2}
 5321 0216 83E80700 		stm	r3, {r0, r1, r2}
 5322              	.LVL358:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 5323              		.loc 3 204 47 view .LVU1308
 5324              	.LBE2490:
 5325              	.LBE2489:
 5326              	.LBE2488:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 5327              		.loc 3 117 19 view .LVU1309
 5328 021a 0123     		movs	r3, #1
 5329 021c 8DF85030 		strb	r3, [sp, #80]
 5330              	.LVL359:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 5331              		.loc 3 117 19 view .LVU1310
 5332              	.LBE2486:
 5333              	.LBE2485:
 5334              	.LBE2484:
 5335              	.LBE2483:
ARM GAS  /tmp/ccofeNgA.s 			page 282


 5336              	.LBE2482:
 5337              	.LBE2481:
 5338              	.LBE2479:
 5339              	.LBE2478:
 5340              	.LBE2477:
 5341              	.LBE2475:
 5342              	.LBE2474:
 5343              	.LBE2473:
1243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }
 5344              		.loc 3 1243 62 view .LVU1311
 5345 0220 CDE7     		b	.L196
 5346              	.LVL360:
 5347              	.L222:
 5348              		.loc 3 1243 62 view .LVU1312
 5349              	.LBE2472:
 5350              	.LBE2471:
 658:MotorControl/motor.cpp ****         if (err != ERROR_NONE) {
 5351              		.loc 2 658 9 is_stmt 1 discriminator 3 view .LVU1313
 5352 0222 50EA0103 		orrs	r3, r0, r1
 5353 0226 1AD1     		bne	.L223
 5354              	.LVL361:
 5355              	.L194:
 5356              		.loc 2 658 9 is_stmt 0 discriminator 3 view .LVU1314
 5357              	.LBE2492:
 5358              	.LBE2495:
 5359              	.LBB2496:
 5360              	.LBI2496:
  56:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 5361              		.loc 10 56 5 is_stmt 1 view .LVU1315
 5362              	.LBB2497:
 5363              		.loc 10 56 27 view .LVU1316
 5364              	.LBB2498:
 5365              	.LBI2498:
  29:MotorControl/task_timer.hpp ****         uint32_t end_time = sample_TIM13();
 5366              		.loc 10 29 10 view .LVU1317
 5367              	.LBB2499:
  30:MotorControl/task_timer.hpp ****         uint32_t length = end_time - start_time;
 5368              		.loc 10 30 9 view .LVU1318
 5369              	.LBB2500:
 5370              	.LBI2500:
  12:MotorControl/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 5371              		.loc 10 12 17 view .LVU1319
 5372              	.LBB2501:
  13:MotorControl/task_timer.hpp ****     return clocks_per_cnt * TIM13->CNT;  // TODO: Use a hw_config
 5373              		.loc 10 13 5 view .LVU1320
  14:MotorControl/task_timer.hpp **** }
 5374              		.loc 10 14 5 view .LVU1321
  14:MotorControl/task_timer.hpp **** }
 5375              		.loc 10 14 36 is_stmt 0 view .LVU1322
 5376 0228 144B     		ldr	r3, .L225
 5377 022a 5B6A     		ldr	r3, [r3, #36]
 5378 022c 5B00     		lsls	r3, r3, #1
 5379 022e 9BB2     		uxth	r3, r3
 5380              	.LVL362:
  14:MotorControl/task_timer.hpp **** }
 5381              		.loc 10 14 36 view .LVU1323
 5382              	.LBE2501:
ARM GAS  /tmp/ccofeNgA.s 			page 283


 5383              	.LBE2500:
  31:MotorControl/task_timer.hpp **** 
 5384              		.loc 10 31 9 is_stmt 1 view .LVU1324
  31:MotorControl/task_timer.hpp **** 
 5385              		.loc 10 31 36 is_stmt 0 view .LVU1325
 5386 0230 5A1B     		subs	r2, r3, r5
  31:MotorControl/task_timer.hpp **** 
 5387              		.loc 10 31 18 view .LVU1326
 5388 0232 0592     		str	r2, [sp, #20]
  33:MotorControl/task_timer.hpp **** #ifdef MEASURE_START_TIME
 5389              		.loc 10 33 9 is_stmt 1 view .LVU1327
 5390 0234 154A     		ldr	r2, .L225+16
 5391 0236 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 5392 0238 22B1     		cbz	r2, .L197
  35:MotorControl/task_timer.hpp **** #endif
 5393              		.loc 10 35 13 view .LVU1328
  35:MotorControl/task_timer.hpp **** #endif
 5394              		.loc 10 35 25 is_stmt 0 view .LVU1329
 5395 023a C7F81C52 		str	r5, [r7, #540]
  38:MotorControl/task_timer.hpp **** #endif
 5396              		.loc 10 38 13 is_stmt 1 view .LVU1330
  38:MotorControl/task_timer.hpp **** #endif
 5397              		.loc 10 38 23 is_stmt 0 view .LVU1331
 5398 023e 7360     		str	r3, [r6, #4]
  41:MotorControl/task_timer.hpp **** #endif
 5399              		.loc 10 41 13 is_stmt 1 view .LVU1332
  41:MotorControl/task_timer.hpp **** #endif
 5400              		.loc 10 41 21 is_stmt 0 view .LVU1333
 5401 0240 059B     		ldr	r3, [sp, #20]
 5402              	.LVL363:
  41:MotorControl/task_timer.hpp **** #endif
 5403              		.loc 10 41 21 view .LVU1334
 5404 0242 B360     		str	r3, [r6, #8]
 5405              	.LVL364:
 5406              	.L197:
  45:MotorControl/task_timer.hpp **** #endif
 5407              		.loc 10 45 9 is_stmt 1 view .LVU1335
  45:MotorControl/task_timer.hpp **** #endif
 5408              		.loc 10 45 32 is_stmt 0 view .LVU1336
 5409 0244 06F10C03 		add	r3, r6, #12
 5410              	.LVL365:
 5411              	.LBB2502:
 5412              	.LBI2502:
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 5413              		.loc 11 254 5 is_stmt 1 view .LVU1337
 5414              	.LBB2503:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 5415              		.loc 11 259 15 is_stmt 0 view .LVU1338
 5416 0248 F168     		ldr	r1, [r6, #12]
 5417 024a 059A     		ldr	r2, [sp, #20]
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 5418              		.loc 11 259 7 view .LVU1339
 5419 024c 9142     		cmp	r1, r2
 5420 024e 0CD3     		bcc	.L224
 5421              	.L198:
 5422              	.LVL366:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
ARM GAS  /tmp/ccofeNgA.s 			page 284


 5423              		.loc 11 259 7 view .LVU1340
 5424              	.LBE2503:
 5425              	.LBE2502:
  45:MotorControl/task_timer.hpp **** #endif
 5426              		.loc 10 45 31 view .LVU1341
 5427 0250 1B68     		ldr	r3, [r3]
  45:MotorControl/task_timer.hpp **** #endif
 5428              		.loc 10 45 21 view .LVU1342
 5429 0252 F360     		str	r3, [r6, #12]
 5430              	.LVL367:
  45:MotorControl/task_timer.hpp **** #endif
 5431              		.loc 10 45 21 view .LVU1343
 5432              	.LBE2499:
 5433              	.LBE2498:
 5434              	.LBE2497:
 5435              	.LBE2496:
 659:MotorControl/motor.cpp ****             disarm_with_error(err);
 660:MotorControl/motor.cpp ****         }
 661:MotorControl/motor.cpp ****     }
 662:MotorControl/motor.cpp **** }
 5436              		.loc 2 662 1 view .LVU1344
 5437 0254 19B0     		add	sp, sp, #100
 5438              	.LCFI73:
 5439              		.cfi_remember_state
 5440              		.cfi_def_cfa_offset 36
 5441              		@ sp needed
 5442 0256 BDE8F043 		pop	{r4, r5, r6, r7, r8, r9, lr}
 5443              	.LCFI74:
 5444              		.cfi_restore 14
 5445              		.cfi_restore 9
 5446              		.cfi_restore 8
 5447              		.cfi_restore 7
 5448              		.cfi_restore 6
 5449              		.cfi_restore 5
 5450              		.cfi_restore 4
 5451              		.cfi_def_cfa_offset 8
 5452              	.LVL368:
 5453              		.loc 2 662 1 view .LVU1345
 5454 025a 02B0     		add	sp, sp, #8
 5455              	.LCFI75:
 5456              		.cfi_def_cfa_offset 0
 5457 025c 7047     		bx	lr
 5458              	.LVL369:
 5459              	.L223:
 5460              	.LCFI76:
 5461              		.cfi_restore_state
 5462              	.LBB2509:
 5463              	.LBB2493:
 659:MotorControl/motor.cpp ****             disarm_with_error(err);
 5464              		.loc 2 659 13 is_stmt 1 view .LVU1346
 659:MotorControl/motor.cpp ****             disarm_with_error(err);
 5465              		.loc 2 659 30 is_stmt 0 view .LVU1347
 5466 025e 0246     		mov	r2, r0
 5467 0260 0B46     		mov	r3, r1
 5468 0262 2046     		mov	r0, r4
 5469              	.LVL370:
 659:MotorControl/motor.cpp ****             disarm_with_error(err);
ARM GAS  /tmp/ccofeNgA.s 			page 285


 5470              		.loc 2 659 30 view .LVU1348
 5471 0264 FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 5472              	.LVL371:
 5473              	.LEHE5:
 659:MotorControl/motor.cpp ****             disarm_with_error(err);
 5474              		.loc 2 659 30 view .LVU1349
 5475 0268 DEE7     		b	.L194
 5476              	.LVL372:
 5477              	.L224:
 659:MotorControl/motor.cpp ****             disarm_with_error(err);
 5478              		.loc 2 659 30 view .LVU1350
 5479              	.LBE2493:
 5480              	.LBE2509:
 5481              	.LBB2510:
 5482              	.LBB2508:
 5483              	.LBB2507:
 5484              	.LBB2506:
 5485              	.LBB2505:
 5486              	.LBB2504:
 5487              		.loc 11 260 9 view .LVU1351
 5488 026a 05AB     		add	r3, sp, #20
 5489 026c F0E7     		b	.L198
 5490              	.LVL373:
 5491              	.L205:
 5492              		.loc 11 260 9 view .LVU1352
 5493              	.LBE2504:
 5494              	.LBE2505:
 5495              	.LBE2506:
 5496              	.LBE2507:
 5497              	.LBE2508:
 5498              	.LBE2510:
 5499              	.LBB2511:
 5500              	.LBI2511:
 5501              		.loc 10 56 5 is_stmt 1 view .LVU1353
 5502              	.LBB2512:
 5503              		.loc 10 56 27 view .LVU1354
 5504              		.loc 10 56 38 is_stmt 0 view .LVU1355
 5505 026e 2946     		mov	r1, r5
 5506 0270 3046     		mov	r0, r6
 5507 0272 FFF7FEFF 		bl	_ZN9TaskTimer4stopEm
 5508              	.LVL374:
 5509              	.LEHB6:
 5510              		.loc 10 56 38 view .LVU1356
 5511 0276 FFF7FEFF 		bl	__cxa_end_cleanup
 5512              	.LVL375:
 5513              	.LEHE6:
 5514              	.L226:
 5515 027a 00BF     		.align	2
 5516              	.L225:
 5517 027c 001C0040 		.word	1073748992
 5518 0280 00000000 		.word	odrv
 5519 0284 ABAA2A3F 		.word	1059760811
 5520 0288 00000000 		.word	vbus_voltage
 5521 028c 00000000 		.word	_ZN9TaskTimer7enabledE
 5522              	.LBE2512:
 5523              	.LBE2511:
 5524              		.cfi_endproc
ARM GAS  /tmp/ccofeNgA.s 			page 286


 5525              	.LFE5341:
 5526              		.personality	__gxx_personality_v0
 5527              		.handlerdata
 5528              	.LLSDA5341:
 5529 0008 FF       		.byte	0xff
 5530 0009 FF       		.byte	0xff
 5531 000a 01       		.byte	0x1
 5532 000b 0C       		.uleb128 .LLSDACSE5341-.LLSDACSB5341
 5533              	.LLSDACSB5341:
 5534 000c B201     		.uleb128 .LEHB5-.LFB5341
 5535 000e B603     		.uleb128 .LEHE5-.LEHB5
 5536 0010 EE04     		.uleb128 .L205-.LFB5341
 5537 0012 00       		.uleb128 0
 5538 0013 F604     		.uleb128 .LEHB6-.LFB5341
 5539 0015 04       		.uleb128 .LEHE6-.LEHB6
 5540 0016 00       		.uleb128 0
 5541 0017 00       		.uleb128 0
 5542              	.LLSDACSE5341:
 5543              		.section	.text._ZN5Motor15current_meas_cbEmSt8optionalI9Iph_ABC_tE
 5544              		.fnend
 5546              		.section	.text._ZN5Motor11dc_calib_cbEmSt8optionalI9Iph_ABC_tE,"ax",%progbits
 5547              		.align	1
 5548              		.global	_ZN5Motor11dc_calib_cbEmSt8optionalI9Iph_ABC_tE
 5549              		.syntax unified
 5550              		.thumb
 5551              		.thumb_func
 5553              	_ZN5Motor11dc_calib_cbEmSt8optionalI9Iph_ABC_tE:
 5554              		.fnstart
 5555              	.LVL376:
 5556              	.LFB5350:
 663:MotorControl/motor.cpp **** 
 664:MotorControl/motor.cpp **** /**
 665:MotorControl/motor.cpp ****  * @brief Called when the underlying hardware timer triggers an update event.
 666:MotorControl/motor.cpp ****  */
 667:MotorControl/motor.cpp **** void Motor::dc_calib_cb(uint32_t timestamp, std::optional<Iph_ABC_t> current) {
 5557              		.loc 2 667 79 is_stmt 1 view -0
 5558              		.cfi_startproc
 5559              		@ args = 16, pretend = 8, frame = 24
 5560              		@ frame_needed = 0, uses_anonymous_args = 0
 5561              		@ link register save eliminated.
 5562              		.loc 2 667 79 is_stmt 0 view .LVU1358
 5563 0000 82B0     		sub	sp, sp, #8
 5564              	.LCFI77:
 5565              		.cfi_def_cfa_offset 8
 5566 0002 10B4     		push	{r4}
 5567              	.LCFI78:
 5568              		.cfi_def_cfa_offset 12
 5569              		.cfi_offset 4, -12
 5570 0004 87B0     		sub	sp, sp, #28
 5571              	.LCFI79:
 5572              		.cfi_def_cfa_offset 40
 5573 0006 08A9     		add	r1, sp, #32
 5574 0008 81E80C00 		stm	r1, {r2, r3}
 668:MotorControl/motor.cpp ****     const float dc_calib_period = static_cast<float>(2 * TIM_1_8_PERIOD_CLOCKS * (TIM_1_8_RCR + 1))
 5575              		.loc 2 668 5 is_stmt 1 view .LVU1359
 5576              	.LVL377:
 669:MotorControl/motor.cpp ****     TaskTimerContext tmr{axis_->task_times_.dc_calib};
ARM GAS  /tmp/ccofeNgA.s 			page 287


 5577              		.loc 2 669 5 view .LVU1360
 5578              		.loc 2 669 26 is_stmt 0 view .LVU1361
 5579 000c D0F88440 		ldr	r4, [r0, #132]
 5580              		.loc 2 669 45 view .LVU1362
 5581 0010 04F50371 		add	r1, r4, #524
 5582              	.LVL378:
 5583              	.LBB2535:
 5584              	.LBI2535:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 5585              		.loc 10 55 5 is_stmt 1 view .LVU1363
 5586              	.LBB2536:
 5587              	.LBB2537:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 5588              		.loc 10 55 81 is_stmt 0 view .LVU1364
 5589 0014 0191     		str	r1, [sp, #4]
 5590              	.LVL379:
 5591              	.LBB2538:
 5592              	.LBI2538:
  25:MotorControl/task_timer.hpp ****         return sample_TIM13();
 5593              		.loc 10 25 14 is_stmt 1 view .LVU1365
 5594              	.LBB2539:
  26:MotorControl/task_timer.hpp ****     }
 5595              		.loc 10 26 9 view .LVU1366
 5596              	.LBB2540:
 5597              	.LBI2540:
  12:MotorControl/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 5598              		.loc 10 12 17 view .LVU1367
 5599              	.LBB2541:
  13:MotorControl/task_timer.hpp ****     return clocks_per_cnt * TIM13->CNT;  // TODO: Use a hw_config
 5600              		.loc 10 13 5 view .LVU1368
  14:MotorControl/task_timer.hpp **** }
 5601              		.loc 10 14 5 view .LVU1369
  14:MotorControl/task_timer.hpp **** }
 5602              		.loc 10 14 36 is_stmt 0 view .LVU1370
 5603 0016 3A4B     		ldr	r3, .L237
 5604 0018 5B6A     		ldr	r3, [r3, #36]
 5605 001a 5B00     		lsls	r3, r3, #1
 5606 001c 9BB2     		uxth	r3, r3
 5607              	.LVL380:
  14:MotorControl/task_timer.hpp **** }
 5608              		.loc 10 14 36 view .LVU1371
 5609              	.LBE2541:
 5610              	.LBE2540:
 5611              	.LBE2539:
 5612              	.LBE2538:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 5613              		.loc 10 55 81 view .LVU1372
 5614 001e 0293     		str	r3, [sp, #8]
 5615 0020 0022     		movs	r2, #0
 5616 0022 8DF80C20 		strb	r2, [sp, #12]
 5617              	.LVL381:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 5618              		.loc 10 55 81 view .LVU1373
 5619              	.LBE2537:
 5620              	.LBE2536:
 5621              	.LBE2535:
 670:MotorControl/motor.cpp **** 
ARM GAS  /tmp/ccofeNgA.s 			page 288


 671:MotorControl/motor.cpp ****     if (current.has_value()) {
 5622              		.loc 2 671 5 is_stmt 1 view .LVU1374
 5623              	.LBB2542:
 5624              	.LBB2543:
 5625              	.LBI2543:
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_is_engaged(); }
 5626              		.loc 3 916 22 view .LVU1375
 5627              	.LBB2544:
 5628              	.LBI2544:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 5629              		.loc 3 433 22 view .LVU1376
 5630              	.LBB2545:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 5631              		.loc 3 434 58 is_stmt 0 view .LVU1377
 5632 0026 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 5633              	.LVL382:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 5634              		.loc 3 434 58 view .LVU1378
 5635              	.LBE2545:
 5636              	.LBE2544:
 5637              	.LBE2543:
 5638              		.loc 2 671 5 view .LVU1379
 5639 002a 002A     		cmp	r2, #0
 5640 002c 5CD0     		beq	.L228
 5641              	.LBB2546:
 672:MotorControl/motor.cpp ****         const float calib_filter_k = std::min(dc_calib_period / config_.dc_calib_tau, 1.0f);
 5642              		.loc 2 672 9 is_stmt 1 view .LVU1380
 5643              		.loc 2 672 73 is_stmt 0 view .LVU1381
 5644 002e D0ED1F7A 		vldr.32	s15, [r0, #124]
 5645              		.loc 2 672 63 view .LVU1382
 5646 0032 DFED346A 		vldr.32	s13, .L237+4
 5647 0036 86EEA77A 		vdiv.f32	s14, s13, s15
 5648 003a 8DED047A 		vstr.32	s14, [sp, #16]
 5649              		.loc 2 672 87 view .LVU1383
 5650 003e F7EE007A 		vmov.f32	s15, #1.0e+0
 5651 0042 CDED057A 		vstr.32	s15, [sp, #20]
 5652              	.LVL383:
 5653              	.LBB2547:
 5654              	.LBI2547:
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 5655              		.loc 11 230 5 is_stmt 1 view .LVU1384
 5656              	.LBB2548:
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 5657              		.loc 11 235 7 is_stmt 0 view .LVU1385
 5658 0046 B4EEE77A 		vcmpe.f32	s14, s15
 5659 004a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 5660 004e 49DC     		bgt	.L233
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 5661              		.loc 11 237 14 view .LVU1386
 5662 0050 04AA     		add	r2, sp, #16
 5663              	.L229:
 5664              	.LVL384:
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 5665              		.loc 11 237 14 view .LVU1387
 5666              	.LBE2548:
 5667              	.LBE2547:
 5668              		.loc 2 672 91 view .LVU1388
ARM GAS  /tmp/ccofeNgA.s 			page 289


 5669 0052 92ED006A 		vldr.32	s12, [r2]
 5670              	.LVL385:
 673:MotorControl/motor.cpp ****         DC_calib_.phA += (current->phA - DC_calib_.phA) * calib_filter_k;
 5671              		.loc 2 673 9 is_stmt 1 view .LVU1389
 5672              		.loc 2 673 52 is_stmt 0 view .LVU1390
 5673 0056 D0ED2C6A 		vldr.32	s13, [r0, #176]
 5674              		.loc 2 673 40 view .LVU1391
 5675 005a 9DED087A 		vldr.32	s14, [sp, #32]
 5676 005e 37EE667A 		vsub.f32	s14, s14, s13
 5677              		.loc 2 673 57 view .LVU1392
 5678 0062 27EE067A 		vmul.f32	s14, s14, s12
 5679              		.loc 2 673 23 view .LVU1393
 5680 0066 36EE877A 		vadd.f32	s14, s13, s14
 5681 006a 80ED2C7A 		vstr.32	s14, [r0, #176]
 674:MotorControl/motor.cpp ****         DC_calib_.phB += (current->phB - DC_calib_.phB) * calib_filter_k;
 5682              		.loc 2 674 9 is_stmt 1 view .LVU1394
 5683              		.loc 2 674 52 is_stmt 0 view .LVU1395
 5684 006e D0ED2D6A 		vldr.32	s13, [r0, #180]
 5685              		.loc 2 674 40 view .LVU1396
 5686 0072 9DED097A 		vldr.32	s14, [sp, #36]
 5687 0076 37EE667A 		vsub.f32	s14, s14, s13
 5688              		.loc 2 674 57 view .LVU1397
 5689 007a 27EE067A 		vmul.f32	s14, s14, s12
 5690              		.loc 2 674 23 view .LVU1398
 5691 007e 36EE877A 		vadd.f32	s14, s13, s14
 5692 0082 80ED2D7A 		vstr.32	s14, [r0, #180]
 675:MotorControl/motor.cpp ****         DC_calib_.phC += (current->phC - DC_calib_.phC) * calib_filter_k;
 5693              		.loc 2 675 9 is_stmt 1 view .LVU1399
 5694              		.loc 2 675 52 is_stmt 0 view .LVU1400
 5695 0086 90ED2E7A 		vldr.32	s14, [r0, #184]
 5696              		.loc 2 675 40 view .LVU1401
 5697 008a DDED0A7A 		vldr.32	s15, [sp, #40]
 5698 008e 77EEC77A 		vsub.f32	s15, s15, s14
 5699              		.loc 2 675 57 view .LVU1402
 5700 0092 67EE867A 		vmul.f32	s15, s15, s12
 5701              		.loc 2 675 23 view .LVU1403
 5702 0096 77EE277A 		vadd.f32	s15, s14, s15
 5703 009a C0ED2E7A 		vstr.32	s15, [r0, #184]
 676:MotorControl/motor.cpp ****         dc_calib_running_since_ += dc_calib_period;
 5704              		.loc 2 676 9 is_stmt 1 view .LVU1404
 5705              		.loc 2 676 33 is_stmt 0 view .LVU1405
 5706 009e D0ED2F7A 		vldr.32	s15, [r0, #188]
 5707 00a2 9FED187A 		vldr.32	s14, .L237+4
 5708 00a6 77EE877A 		vadd.f32	s15, s15, s14
 5709 00aa C0ED2F7A 		vstr.32	s15, [r0, #188]
 5710              	.LVL386:
 5711              	.L230:
 5712              		.loc 2 676 33 view .LVU1406
 5713              	.LBE2546:
 5714              	.LBE2542:
 5715              	.LBB2552:
 5716              	.LBI2552:
 5717              		.loc 10 56 5 is_stmt 1 view .LVU1407
 5718              	.LBB2553:
 5719              		.loc 10 56 27 view .LVU1408
 5720              	.LBB2554:
 5721              	.LBI2554:
ARM GAS  /tmp/ccofeNgA.s 			page 290


  29:MotorControl/task_timer.hpp ****         uint32_t end_time = sample_TIM13();
 5722              		.loc 10 29 10 view .LVU1409
 5723              	.LBB2555:
  30:MotorControl/task_timer.hpp ****         uint32_t length = end_time - start_time;
 5724              		.loc 10 30 9 view .LVU1410
 5725              	.LBB2556:
 5726              	.LBI2556:
  12:MotorControl/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 5727              		.loc 10 12 17 view .LVU1411
 5728              	.LBB2557:
  13:MotorControl/task_timer.hpp ****     return clocks_per_cnt * TIM13->CNT;  // TODO: Use a hw_config
 5729              		.loc 10 13 5 view .LVU1412
  14:MotorControl/task_timer.hpp **** }
 5730              		.loc 10 14 5 view .LVU1413
  14:MotorControl/task_timer.hpp **** }
 5731              		.loc 10 14 36 is_stmt 0 view .LVU1414
 5732 00ae 144A     		ldr	r2, .L237
 5733 00b0 526A     		ldr	r2, [r2, #36]
 5734 00b2 5200     		lsls	r2, r2, #1
 5735 00b4 92B2     		uxth	r2, r2
 5736              	.LVL387:
  14:MotorControl/task_timer.hpp **** }
 5737              		.loc 10 14 36 view .LVU1415
 5738              	.LBE2557:
 5739              	.LBE2556:
  31:MotorControl/task_timer.hpp **** 
 5740              		.loc 10 31 9 is_stmt 1 view .LVU1416
  31:MotorControl/task_timer.hpp **** 
 5741              		.loc 10 31 36 is_stmt 0 view .LVU1417
 5742 00b6 D01A     		subs	r0, r2, r3
 5743              	.LVL388:
  31:MotorControl/task_timer.hpp **** 
 5744              		.loc 10 31 18 view .LVU1418
 5745 00b8 0090     		str	r0, [sp]
  33:MotorControl/task_timer.hpp **** #ifdef MEASURE_START_TIME
 5746              		.loc 10 33 9 is_stmt 1 view .LVU1419
 5747 00ba 1348     		ldr	r0, .L237+8
 5748 00bc 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 5749 00be 20B1     		cbz	r0, .L231
  35:MotorControl/task_timer.hpp **** #endif
 5750              		.loc 10 35 13 view .LVU1420
  35:MotorControl/task_timer.hpp **** #endif
 5751              		.loc 10 35 25 is_stmt 0 view .LVU1421
 5752 00c0 C4F80C32 		str	r3, [r4, #524]
  38:MotorControl/task_timer.hpp **** #endif
 5753              		.loc 10 38 13 is_stmt 1 view .LVU1422
  38:MotorControl/task_timer.hpp **** #endif
 5754              		.loc 10 38 23 is_stmt 0 view .LVU1423
 5755 00c4 4A60     		str	r2, [r1, #4]
  41:MotorControl/task_timer.hpp **** #endif
 5756              		.loc 10 41 13 is_stmt 1 view .LVU1424
  41:MotorControl/task_timer.hpp **** #endif
 5757              		.loc 10 41 21 is_stmt 0 view .LVU1425
 5758 00c6 009B     		ldr	r3, [sp]
 5759              	.LVL389:
  41:MotorControl/task_timer.hpp **** #endif
 5760              		.loc 10 41 21 view .LVU1426
ARM GAS  /tmp/ccofeNgA.s 			page 291


 5761 00c8 8B60     		str	r3, [r1, #8]
 5762              	.LVL390:
 5763              	.L231:
  45:MotorControl/task_timer.hpp **** #endif
 5764              		.loc 10 45 9 is_stmt 1 view .LVU1427
  45:MotorControl/task_timer.hpp **** #endif
 5765              		.loc 10 45 32 is_stmt 0 view .LVU1428
 5766 00ca 01F10C03 		add	r3, r1, #12
 5767              	.LVL391:
 5768              	.LBB2558:
 5769              	.LBI2558:
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 5770              		.loc 11 254 5 is_stmt 1 view .LVU1429
 5771              	.LBB2559:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 5772              		.loc 11 259 15 is_stmt 0 view .LVU1430
 5773 00ce C868     		ldr	r0, [r1, #12]
 5774 00d0 009A     		ldr	r2, [sp]
 5775              	.LVL392:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 5776              		.loc 11 259 7 view .LVU1431
 5777 00d2 9042     		cmp	r0, r2
 5778 00d4 12D3     		bcc	.L236
 5779              	.L232:
 5780              	.LVL393:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 5781              		.loc 11 259 7 view .LVU1432
 5782              	.LBE2559:
 5783              	.LBE2558:
  45:MotorControl/task_timer.hpp **** #endif
 5784              		.loc 10 45 31 view .LVU1433
 5785 00d6 1B68     		ldr	r3, [r3]
  45:MotorControl/task_timer.hpp **** #endif
 5786              		.loc 10 45 21 view .LVU1434
 5787 00d8 CB60     		str	r3, [r1, #12]
 5788              	.LVL394:
  45:MotorControl/task_timer.hpp **** #endif
 5789              		.loc 10 45 21 view .LVU1435
 5790              	.LBE2555:
 5791              	.LBE2554:
 5792              	.LBE2553:
 5793              	.LBE2552:
 677:MotorControl/motor.cpp ****     } else {
 678:MotorControl/motor.cpp ****         DC_calib_.phA = 0.0f;
 679:MotorControl/motor.cpp ****         DC_calib_.phB = 0.0f;
 680:MotorControl/motor.cpp ****         DC_calib_.phC = 0.0f;
 681:MotorControl/motor.cpp ****         dc_calib_running_since_ = 0.0f;
 682:MotorControl/motor.cpp ****     }
 683:MotorControl/motor.cpp **** }
 5794              		.loc 2 683 1 view .LVU1436
 5795 00da 07B0     		add	sp, sp, #28
 5796              	.LCFI80:
 5797              		.cfi_remember_state
 5798              		.cfi_def_cfa_offset 12
 5799              		@ sp needed
 5800 00dc 5DF8044B 		ldr	r4, [sp], #4
 5801              	.LCFI81:
ARM GAS  /tmp/ccofeNgA.s 			page 292


 5802              		.cfi_restore 4
 5803              		.cfi_def_cfa_offset 8
 5804 00e0 02B0     		add	sp, sp, #8
 5805              	.LCFI82:
 5806              		.cfi_def_cfa_offset 0
 5807 00e2 7047     		bx	lr
 5808              	.LVL395:
 5809              	.L233:
 5810              	.LCFI83:
 5811              		.cfi_restore_state
 5812              	.LBB2565:
 5813              	.LBB2551:
 5814              	.LBB2550:
 5815              	.LBB2549:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 5816              		.loc 11 236 9 view .LVU1437
 5817 00e4 05AA     		add	r2, sp, #20
 5818 00e6 B4E7     		b	.L229
 5819              	.LVL396:
 5820              	.L228:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 5821              		.loc 11 236 9 view .LVU1438
 5822              	.LBE2549:
 5823              	.LBE2550:
 5824              	.LBE2551:
 678:MotorControl/motor.cpp ****         DC_calib_.phB = 0.0f;
 5825              		.loc 2 678 9 is_stmt 1 view .LVU1439
 678:MotorControl/motor.cpp ****         DC_calib_.phB = 0.0f;
 5826              		.loc 2 678 23 is_stmt 0 view .LVU1440
 5827 00e8 0022     		movs	r2, #0
 5828 00ea C0F8B020 		str	r2, [r0, #176]	@ float
 679:MotorControl/motor.cpp ****         DC_calib_.phC = 0.0f;
 5829              		.loc 2 679 9 is_stmt 1 view .LVU1441
 679:MotorControl/motor.cpp ****         DC_calib_.phC = 0.0f;
 5830              		.loc 2 679 23 is_stmt 0 view .LVU1442
 5831 00ee C0F8B420 		str	r2, [r0, #180]	@ float
 680:MotorControl/motor.cpp ****         dc_calib_running_since_ = 0.0f;
 5832              		.loc 2 680 9 is_stmt 1 view .LVU1443
 680:MotorControl/motor.cpp ****         dc_calib_running_since_ = 0.0f;
 5833              		.loc 2 680 23 is_stmt 0 view .LVU1444
 5834 00f2 C0F8B820 		str	r2, [r0, #184]	@ float
 681:MotorControl/motor.cpp ****     }
 5835              		.loc 2 681 9 is_stmt 1 view .LVU1445
 681:MotorControl/motor.cpp ****     }
 5836              		.loc 2 681 33 is_stmt 0 view .LVU1446
 5837 00f6 C0F8BC20 		str	r2, [r0, #188]	@ float
 5838 00fa D8E7     		b	.L230
 5839              	.LVL397:
 5840              	.L236:
 681:MotorControl/motor.cpp ****     }
 5841              		.loc 2 681 33 view .LVU1447
 5842              	.LBE2565:
 5843              	.LBB2566:
 5844              	.LBB2564:
 5845              	.LBB2563:
 5846              	.LBB2562:
 5847              	.LBB2561:
ARM GAS  /tmp/ccofeNgA.s 			page 293


 5848              	.LBB2560:
 5849              		.loc 11 260 9 view .LVU1448
 5850 00fc 6B46     		mov	r3, sp
 5851 00fe EAE7     		b	.L232
 5852              	.L238:
 5853              		.align	2
 5854              	.L237:
 5855 0100 001C0040 		.word	1073748992
 5856 0104 6F120339 		.word	956502639
 5857 0108 00000000 		.word	_ZN9TaskTimer7enabledE
 5858              	.LBE2560:
 5859              	.LBE2561:
 5860              	.LBE2562:
 5861              	.LBE2563:
 5862              	.LBE2564:
 5863              	.LBE2566:
 5864              		.cfi_endproc
 5865              	.LFE5350:
 5866              		.cantunwind
 5867              		.fnend
 5869              		.section	.text._ZN5Motor13pwm_update_cbEm,"ax",%progbits
 5870              		.align	1
 5871              		.global	_ZN5Motor13pwm_update_cbEm
 5872              		.syntax unified
 5873              		.thumb
 5874              		.thumb_func
 5876              	_ZN5Motor13pwm_update_cbEm:
 5877              		.fnstart
 5878              	.LVL398:
 5879              	.LFB5351:
 684:MotorControl/motor.cpp **** 
 685:MotorControl/motor.cpp **** 
 686:MotorControl/motor.cpp **** void Motor::pwm_update_cb(uint32_t output_timestamp) {
 5880              		.loc 2 686 54 is_stmt 1 view -0
 5881              		.cfi_startproc
 5882              		@ args = 0, pretend = 0, frame = 64
 5883              		@ frame_needed = 0, uses_anonymous_args = 0
 5884              		.loc 2 686 54 is_stmt 0 view .LVU1450
 5885 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 5886              		.save {r4, r5, r6, r7, r8, lr}
 5887              	.LCFI84:
 5888              		.cfi_def_cfa_offset 24
 5889              		.cfi_offset 4, -24
 5890              		.cfi_offset 5, -20
 5891              		.cfi_offset 6, -16
 5892              		.cfi_offset 7, -12
 5893              		.cfi_offset 8, -8
 5894              		.cfi_offset 14, -4
 5895              		.pad #64
 5896 0004 90B0     		sub	sp, sp, #64
 5897              	.LCFI85:
 5898              		.cfi_def_cfa_offset 88
 5899 0006 0446     		mov	r4, r0
 5900 0008 8E46     		mov	lr, r1
 687:MotorControl/motor.cpp ****     TaskTimerContext tmr{axis_->task_times_.pwm_update};
 5901              		.loc 2 687 5 is_stmt 1 view .LVU1451
 5902              		.loc 2 687 26 is_stmt 0 view .LVU1452
ARM GAS  /tmp/ccofeNgA.s 			page 294


 5903 000a D0F88470 		ldr	r7, [r0, #132]
 5904              		.loc 2 687 45 view .LVU1453
 5905 000e 07F50B76 		add	r6, r7, #556
 5906              	.LVL399:
 5907              	.LBB2646:
 5908              	.LBI2646:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 5909              		.loc 10 55 5 is_stmt 1 view .LVU1454
 5910              	.LBB2647:
 5911              	.LBB2648:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 5912              		.loc 10 55 81 is_stmt 0 view .LVU1455
 5913 0012 0796     		str	r6, [sp, #28]
 5914              	.LVL400:
 5915              	.LBB2649:
 5916              	.LBI2649:
  25:MotorControl/task_timer.hpp ****         return sample_TIM13();
 5917              		.loc 10 25 14 is_stmt 1 view .LVU1456
 5918              	.LBB2650:
  26:MotorControl/task_timer.hpp ****     }
 5919              		.loc 10 26 9 view .LVU1457
 5920              	.LBB2651:
 5921              	.LBI2651:
  12:MotorControl/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 5922              		.loc 10 12 17 view .LVU1458
 5923              	.LBB2652:
  13:MotorControl/task_timer.hpp ****     return clocks_per_cnt * TIM13->CNT;  // TODO: Use a hw_config
 5924              		.loc 10 13 5 view .LVU1459
  14:MotorControl/task_timer.hpp **** }
 5925              		.loc 10 14 5 view .LVU1460
  14:MotorControl/task_timer.hpp **** }
 5926              		.loc 10 14 36 is_stmt 0 view .LVU1461
 5927 0014 654B     		ldr	r3, .L262
 5928 0016 5D6A     		ldr	r5, [r3, #36]
 5929 0018 6D00     		lsls	r5, r5, #1
 5930 001a ADB2     		uxth	r5, r5
 5931              	.LVL401:
  14:MotorControl/task_timer.hpp **** }
 5932              		.loc 10 14 36 view .LVU1462
 5933              	.LBE2652:
 5934              	.LBE2651:
 5935              	.LBE2650:
 5936              	.LBE2649:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 5937              		.loc 10 55 81 view .LVU1463
 5938 001c 0895     		str	r5, [sp, #32]
 5939 001e 0023     		movs	r3, #0
 5940 0020 8DF82430 		strb	r3, [sp, #36]
 5941              	.LVL402:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 5942              		.loc 10 55 81 view .LVU1464
 5943              	.LBE2648:
 5944              	.LBE2647:
 5945              	.LBE2646:
 688:MotorControl/motor.cpp ****     n_evt_pwm_update_++;
 5946              		.loc 2 688 5 is_stmt 1 view .LVU1465
 5947 0024 D0F88C20 		ldr	r2, [r0, #140]
ARM GAS  /tmp/ccofeNgA.s 			page 295


 5948              		.loc 2 688 22 is_stmt 0 view .LVU1466
 5949 0028 0132     		adds	r2, r2, #1
 5950 002a C0F88C20 		str	r2, [r0, #140]
 689:MotorControl/motor.cpp **** 
 690:MotorControl/motor.cpp ****     Error control_law_status = ERROR_CONTROLLER_FAILED;
 5951              		.loc 2 690 5 is_stmt 1 view .LVU1467
 5952              	.LVL403:
 691:MotorControl/motor.cpp ****     float pwm_timings[3] = {NAN, NAN, NAN};
 5953              		.loc 2 691 5 view .LVU1468
 5954              		.loc 2 691 11 is_stmt 0 view .LVU1469
 5955 002e 604A     		ldr	r2, .L262+4
 5956 0030 0DF1100C 		add	ip, sp, #16
 5957 0034 07CA     		ldm	r2, {r0, r1, r2}
 5958              	.LVL404:
 5959              		.loc 2 691 11 view .LVU1470
 5960 0036 8CE80700 		stm	ip, {r0, r1, r2}
 692:MotorControl/motor.cpp ****     std::optional<float> i_bus;
 5961              		.loc 2 692 5 is_stmt 1 view .LVU1471
 5962              		.loc 2 692 26 is_stmt 0 view .LVU1472
 5963 003a 0293     		str	r3, [sp, #8]
 5964 003c 0393     		str	r3, [sp, #12]
 693:MotorControl/motor.cpp **** 
 694:MotorControl/motor.cpp ****     if (control_law_) {
 5965              		.loc 2 694 5 is_stmt 1 view .LVU1473
 5966              		.loc 2 694 9 is_stmt 0 view .LVU1474
 5967 003e D4F8A801 		ldr	r0, [r4, #424]
 5968              		.loc 2 694 5 view .LVU1475
 5969 0042 F0B1     		cbz	r0, .L252
 695:MotorControl/motor.cpp ****         control_law_status = control_law_->get_output(
 5970              		.loc 2 695 9 is_stmt 1 view .LVU1476
 696:MotorControl/motor.cpp ****             output_timestamp, pwm_timings, &i_bus);
 5971              		.loc 2 696 50 is_stmt 0 view .LVU1477
 5972 0044 0368     		ldr	r3, [r0]
 5973 0046 D3F80880 		ldr	r8, [r3, #8]
 695:MotorControl/motor.cpp ****         control_law_status = control_law_->get_output(
 5974              		.loc 2 695 54 view .LVU1478
 5975 004a 02AB     		add	r3, sp, #8
 5976 004c 6246     		mov	r2, ip
 5977 004e 7146     		mov	r1, lr
 5978              	.LEHB7:
 5979 0050 C047     		blx	r8
 5980              	.LVL405:
 695:MotorControl/motor.cpp ****         control_law_status = control_law_->get_output(
 5981              		.loc 2 695 54 view .LVU1479
 5982 0052 0246     		mov	r2, r0
 5983 0054 0B46     		mov	r3, r1
 5984              	.L240:
 5985              	.LVL406:
 697:MotorControl/motor.cpp ****     }
 698:MotorControl/motor.cpp **** 
 699:MotorControl/motor.cpp ****     // Apply control law to calculate PWM duty cycles
 700:MotorControl/motor.cpp ****     if (is_armed_ && control_law_status == ERROR_NONE) {
 5986              		.loc 2 700 5 is_stmt 1 view .LVU1480
 5987              	.LBB2653:
 5988              		.loc 2 700 9 is_stmt 0 view .LVU1481
 5989 0056 94F89C10 		ldrb	r1, [r4, #156]	@ zero_extendqisi2
 5990              		.loc 2 700 5 view .LVU1482
ARM GAS  /tmp/ccofeNgA.s 			page 296


 5991 005a 11B1     		cbz	r1, .L241
 5992              		.loc 2 700 19 discriminator 1 view .LVU1483
 5993 005c 52EA0300 		orrs	r0, r2, r3
 5994 0060 13D0     		beq	.L257
 5995              	.L241:
 701:MotorControl/motor.cpp ****         uint16_t next_timings[] = {
 702:MotorControl/motor.cpp ****             (uint16_t)(pwm_timings[0] * (float)TIM_1_8_PERIOD_CLOCKS),
 703:MotorControl/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
 704:MotorControl/motor.cpp ****             (uint16_t)(pwm_timings[2] * (float)TIM_1_8_PERIOD_CLOCKS)
 705:MotorControl/motor.cpp ****         };
 706:MotorControl/motor.cpp ****         apply_pwm_timings(next_timings, false);
 707:MotorControl/motor.cpp ****     } else if (is_armed_) {
 5996              		.loc 2 707 12 is_stmt 1 view .LVU1484
 5997 0062 0029     		cmp	r1, #0
 5998 0064 42D0     		beq	.L242
 708:MotorControl/motor.cpp ****         if (!(timer_->Instance->BDTR & TIM_BDTR_MOE) && (control_law_status == ERROR_CONTROLLER_INI
 5999              		.loc 2 708 9 view .LVU1485
 6000              		.loc 2 708 15 is_stmt 0 view .LVU1486
 6001 0066 2168     		ldr	r1, [r4]
 6002              		.loc 2 708 23 view .LVU1487
 6003 0068 0968     		ldr	r1, [r1]
 6004              		.loc 2 708 33 view .LVU1488
 6005 006a 496C     		ldr	r1, [r1, #68]
 6006              		.loc 2 708 54 view .LVU1489
 6007 006c 11F4004F 		tst	r1, #32768
 6008 0070 03D1     		bne	.L243
 6009              		.loc 2 708 54 discriminator 1 view .LVU1490
 6010 0072 042B     		cmp	r3, #4
 6011 0074 08BF     		it	eq
 6012 0076 002A     		cmpeq	r2, #0
 6013 0078 2DD0     		beq	.L258
 6014              	.L243:
 709:MotorControl/motor.cpp ****             // If the PWM output is armed in software but not yet in
 710:MotorControl/motor.cpp ****             // hardware we tolerate the "initializing" error.
 711:MotorControl/motor.cpp ****             i_bus = 0.0f;
 712:MotorControl/motor.cpp ****         } else {
 713:MotorControl/motor.cpp ****             disarm_with_error(control_law_status);
 6015              		.loc 2 713 13 is_stmt 1 view .LVU1491
 6016              		.loc 2 713 30 is_stmt 0 view .LVU1492
 6017 007a 2046     		mov	r0, r4
 6018 007c FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 6019              	.LVL407:
 6020              		.loc 2 713 30 view .LVU1493
 6021 0080 34E0     		b	.L242
 6022              	.LVL408:
 6023              	.L252:
 6024              		.loc 2 713 30 view .LVU1494
 6025              	.LBE2653:
 690:MotorControl/motor.cpp ****     float pwm_timings[3] = {NAN, NAN, NAN};
 6026              		.loc 2 690 11 view .LVU1495
 6027 0082 4FF40012 		mov	r2, #2097152
 6028 0086 0023     		movs	r3, #0
 6029 0088 E5E7     		b	.L240
 6030              	.LVL409:
 6031              	.L257:
 6032              	.LBB2674:
 6033              	.LBB2654:
ARM GAS  /tmp/ccofeNgA.s 			page 297


 701:MotorControl/motor.cpp ****             (uint16_t)(pwm_timings[0] * (float)TIM_1_8_PERIOD_CLOCKS),
 6034              		.loc 2 701 9 is_stmt 1 view .LVU1496
 702:MotorControl/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
 6035              		.loc 2 702 39 is_stmt 0 view .LVU1497
 6036 008a DFED4A6A 		vldr.32	s13, .L262+8
 6037 008e 9DED047A 		vldr.32	s14, [sp, #16]
 6038 0092 27EE267A 		vmul.f32	s14, s14, s13
 702:MotorControl/motor.cpp ****             (uint16_t)(pwm_timings[1] * (float)TIM_1_8_PERIOD_CLOCKS),
 6039              		.loc 2 702 13 view .LVU1498
 6040 0096 BCEEC77A 		vcvt.u32.f32	s14, s14
 705:MotorControl/motor.cpp ****         apply_pwm_timings(next_timings, false);
 6041              		.loc 2 705 9 view .LVU1499
 6042 009a 17EE103A 		vmov	r3, s14	@ int
 6043              	.LVL410:
 705:MotorControl/motor.cpp ****         apply_pwm_timings(next_timings, false);
 6044              		.loc 2 705 9 view .LVU1500
 6045 009e ADF80030 		strh	r3, [sp]	@ movhi
 703:MotorControl/motor.cpp ****             (uint16_t)(pwm_timings[2] * (float)TIM_1_8_PERIOD_CLOCKS)
 6046              		.loc 2 703 37 view .LVU1501
 6047 00a2 9DED057A 		vldr.32	s14, [sp, #20]
 703:MotorControl/motor.cpp ****             (uint16_t)(pwm_timings[2] * (float)TIM_1_8_PERIOD_CLOCKS)
 6048              		.loc 2 703 39 view .LVU1502
 6049 00a6 27EE267A 		vmul.f32	s14, s14, s13
 703:MotorControl/motor.cpp ****             (uint16_t)(pwm_timings[2] * (float)TIM_1_8_PERIOD_CLOCKS)
 6050              		.loc 2 703 13 view .LVU1503
 6051 00aa BCEEC77A 		vcvt.u32.f32	s14, s14
 705:MotorControl/motor.cpp ****         apply_pwm_timings(next_timings, false);
 6052              		.loc 2 705 9 view .LVU1504
 6053 00ae 17EE103A 		vmov	r3, s14	@ int
 6054 00b2 ADF80230 		strh	r3, [sp, #2]	@ movhi
 704:MotorControl/motor.cpp ****         };
 6055              		.loc 2 704 37 view .LVU1505
 6056 00b6 DDED067A 		vldr.32	s15, [sp, #24]
 704:MotorControl/motor.cpp ****         };
 6057              		.loc 2 704 39 view .LVU1506
 6058 00ba 67EEA67A 		vmul.f32	s15, s15, s13
 704:MotorControl/motor.cpp ****         };
 6059              		.loc 2 704 13 view .LVU1507
 6060 00be FCEEE77A 		vcvt.u32.f32	s15, s15
 705:MotorControl/motor.cpp ****         apply_pwm_timings(next_timings, false);
 6061              		.loc 2 705 9 view .LVU1508
 6062 00c2 17EE903A 		vmov	r3, s15	@ int
 6063 00c6 ADF80430 		strh	r3, [sp, #4]	@ movhi
 706:MotorControl/motor.cpp ****     } else if (is_armed_) {
 6064              		.loc 2 706 9 is_stmt 1 view .LVU1509
 706:MotorControl/motor.cpp ****     } else if (is_armed_) {
 6065              		.loc 2 706 26 is_stmt 0 view .LVU1510
 6066 00ca 0022     		movs	r2, #0
 706:MotorControl/motor.cpp ****     } else if (is_armed_) {
 6067              		.loc 2 706 26 view .LVU1511
 6068 00cc 6946     		mov	r1, sp
 6069 00ce 2046     		mov	r0, r4
 6070 00d0 FFF7FEFF 		bl	_ZN5Motor17apply_pwm_timingsEPtb
 6071              	.LVL411:
 6072 00d4 0AE0     		b	.L242
 6073              	.LVL412:
 6074              	.L258:
ARM GAS  /tmp/ccofeNgA.s 			page 298


 706:MotorControl/motor.cpp ****     } else if (is_armed_) {
 6075              		.loc 2 706 26 view .LVU1512
 6076              	.LBE2654:
 711:MotorControl/motor.cpp ****         } else {
 6077              		.loc 2 711 13 is_stmt 1 view .LVU1513
 6078              	.LBB2655:
 6079              	.LBI2655:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 6080              		.loc 3 700 2 view .LVU1514
 6081              	.LBB2656:
 6082              	.LBB2657:
 6083              	.LBB2658:
 6084              	.LBI2658:
 6085              		.loc 5 76 5 view .LVU1515
 6086              		.loc 5 76 5 is_stmt 0 view .LVU1516
 6087              	.LBE2658:
 6088              	.LBB2659:
 6089              	.LBI2659:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 6090              		.loc 3 607 28 is_stmt 1 view .LVU1517
 6091              	.LBB2660:
 6092              	.LBB2661:
 6093              	.LBB2662:
 6094              	.LBI2662:
 6095              		.loc 5 76 5 view .LVU1518
 6096              		.loc 5 76 5 is_stmt 0 view .LVU1519
 6097              	.LBE2662:
 6098              	.LBB2663:
 6099              	.LBI2663:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6100              		.loc 3 300 42 is_stmt 1 view .LVU1520
 6101              	.LBB2664:
 6102              	.LBB2665:
 6103              	.LBB2666:
 6104              	.LBI2666:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 6105              		.loc 3 115 2 view .LVU1521
 6106              	.LBB2667:
 6107              	.LBB2668:
 6108              	.LBB2669:
 6109              	.LBI2669:
 6110              		.loc 5 76 5 view .LVU1522
 6111              		.loc 5 76 5 is_stmt 0 view .LVU1523
 6112              	.LBE2669:
 6113              	.LBB2670:
 6114              	.LBI2670:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 6115              		.loc 3 203 6 is_stmt 1 view .LVU1524
 6116              	.LBB2671:
 6117              	.LBB2672:
 6118              	.LBB2673:
 6119              	.LBI2673:
 6120              		.loc 5 76 5 view .LVU1525
 6121              		.loc 5 76 5 is_stmt 0 view .LVU1526
 6122              	.LBE2673:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 6123              		.loc 3 204 47 view .LVU1527
ARM GAS  /tmp/ccofeNgA.s 			page 299


 6124 00d6 0023     		movs	r3, #0
 6125              	.LVL413:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 6126              		.loc 3 204 47 view .LVU1528
 6127 00d8 0A93     		str	r3, [sp, #40]	@ float
 6128              	.LVL414:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 6129              		.loc 3 204 47 view .LVU1529
 6130              	.LBE2672:
 6131              	.LBE2671:
 6132              	.LBE2670:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 6133              		.loc 3 117 19 view .LVU1530
 6134 00da 0123     		movs	r3, #1
 6135 00dc 8DF82C30 		strb	r3, [sp, #44]
 6136              	.LVL415:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 6137              		.loc 3 117 19 view .LVU1531
 6138              	.LBE2668:
 6139              	.LBE2667:
 6140              	.LBE2666:
 6141              	.LBE2665:
 6142              	.LBE2664:
 6143              	.LBE2663:
 6144              	.LBE2661:
 6145              	.LBE2660:
 6146              	.LBE2659:
 6147              	.LBE2657:
 6148              	.LBE2656:
 6149              	.LBE2655:
 711:MotorControl/motor.cpp ****         } else {
 6150              		.loc 2 711 19 view .LVU1532
 6151 00e0 02AB     		add	r3, sp, #8
 6152 00e2 0AAA     		add	r2, sp, #40
 711:MotorControl/motor.cpp ****         } else {
 6153              		.loc 2 711 19 view .LVU1533
 6154 00e4 92E80300 		ldm	r2, {r0, r1}
 6155 00e8 83E80300 		stm	r3, {r0, r1}
 6156              	.L242:
 711:MotorControl/motor.cpp ****         } else {
 6157              		.loc 2 711 19 view .LVU1534
 6158              	.LBE2674:
 714:MotorControl/motor.cpp ****         }
 715:MotorControl/motor.cpp ****     }
 716:MotorControl/motor.cpp **** 
 717:MotorControl/motor.cpp ****     if (!is_armed_) {
 6159              		.loc 2 717 5 is_stmt 1 view .LVU1535
 6160              		.loc 2 717 10 is_stmt 0 view .LVU1536
 6161 00ec 94F89C30 		ldrb	r3, [r4, #156]	@ zero_extendqisi2
 6162              		.loc 2 717 5 view .LVU1537
 6163 00f0 DBB1     		cbz	r3, .L259
 718:MotorControl/motor.cpp ****         // If something above failed, reset I_bus to 0A.
 719:MotorControl/motor.cpp ****         i_bus = 0.0f;
 720:MotorControl/motor.cpp ****     } else if (is_armed_ && !i_bus.has_value()) {
 6164              		.loc 2 720 12 is_stmt 1 view .LVU1538
 6165              	.LVL416:
 6166              	.LBB2675:
ARM GAS  /tmp/ccofeNgA.s 			page 300


 6167              	.LBI2675:
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_is_engaged(); }
 6168              		.loc 3 916 22 view .LVU1539
 6169              	.LBB2676:
 6170              	.LBI2676:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 6171              		.loc 3 433 22 view .LVU1540
 6172              	.LBB2677:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6173              		.loc 3 434 58 is_stmt 0 view .LVU1541
 6174 00f2 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 6175              	.LVL417:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6176              		.loc 3 434 58 view .LVU1542
 6177              	.LBE2677:
 6178              	.LBE2676:
 6179              	.LBE2675:
 6180              		.loc 2 720 26 view .LVU1543
 6181 00f6 23B3     		cbz	r3, .L260
 6182              	.L245:
 721:MotorControl/motor.cpp ****         // If the motor is armed then i_bus must be known
 722:MotorControl/motor.cpp ****         disarm_with_error(ERROR_UNKNOWN_CURRENT_MEASUREMENT);
 723:MotorControl/motor.cpp ****         i_bus = 0.0f;
 724:MotorControl/motor.cpp ****     }
 725:MotorControl/motor.cpp **** 
 726:MotorControl/motor.cpp ****     I_bus_ = *i_bus;
 6183              		.loc 2 726 5 is_stmt 1 view .LVU1544
 6184              		.loc 2 726 14 is_stmt 0 view .LVU1545
 6185 00f8 DDED027A 		vldr.32	s15, [sp, #8]
 6186              		.loc 2 726 12 view .LVU1546
 6187 00fc C4ED307A 		vstr.32	s15, [r4, #192]
 727:MotorControl/motor.cpp **** 
 728:MotorControl/motor.cpp ****     if (*i_bus < config_.I_bus_hard_min || *i_bus > config_.I_bus_hard_max) {
 6188              		.loc 2 728 5 is_stmt 1 view .LVU1547
 6189              		.loc 2 728 26 is_stmt 0 view .LVU1548
 6190 0100 94ED1C7A 		vldr.32	s14, [r4, #112]
 6191              		.loc 2 728 41 view .LVU1549
 6192 0104 F4EEC77A 		vcmpe.f32	s15, s14
 6193 0108 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 6194 010c 06D4     		bmi	.L246
 6195              		.loc 2 728 61 view .LVU1550
 6196 010e 94ED1D7A 		vldr.32	s14, [r4, #116]
 6197              		.loc 2 728 41 view .LVU1551
 6198 0112 F4EEC77A 		vcmpe.f32	s15, s14
 6199 0116 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 6200 011a 24DD     		ble	.L247
 6201              	.L246:
 729:MotorControl/motor.cpp ****         disarm_with_error(ERROR_I_BUS_OUT_OF_RANGE);
 6202              		.loc 2 729 9 is_stmt 1 discriminator 3 view .LVU1552
 6203              		.loc 2 729 26 is_stmt 0 discriminator 3 view .LVU1553
 6204 011c 4FF48002 		mov	r2, #4194304
 6205 0120 0023     		movs	r3, #0
 6206 0122 2046     		mov	r0, r4
 6207 0124 FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 6208              	.LVL418:
 6209 0128 1DE0     		b	.L247
 6210              	.L259:
ARM GAS  /tmp/ccofeNgA.s 			page 301


 719:MotorControl/motor.cpp ****     } else if (is_armed_ && !i_bus.has_value()) {
 6211              		.loc 2 719 9 is_stmt 1 view .LVU1554
 6212              	.LVL419:
 6213              	.LBB2678:
 6214              	.LBI2678:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 6215              		.loc 3 700 2 view .LVU1555
 6216              	.LBB2679:
 6217              	.LBB2680:
 6218              	.LBB2681:
 6219              	.LBI2681:
 6220              		.loc 5 76 5 view .LVU1556
 6221              		.loc 5 76 5 is_stmt 0 view .LVU1557
 6222              	.LBE2681:
 6223              	.LBB2682:
 6224              	.LBI2682:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 6225              		.loc 3 607 28 is_stmt 1 view .LVU1558
 6226              	.LBB2683:
 6227              	.LBB2684:
 6228              	.LBB2685:
 6229              	.LBI2685:
 6230              		.loc 5 76 5 view .LVU1559
 6231              		.loc 5 76 5 is_stmt 0 view .LVU1560
 6232              	.LBE2685:
 6233              	.LBB2686:
 6234              	.LBI2686:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6235              		.loc 3 300 42 is_stmt 1 view .LVU1561
 6236              	.LBB2687:
 6237              	.LBB2688:
 6238              	.LBB2689:
 6239              	.LBI2689:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 6240              		.loc 3 115 2 view .LVU1562
 6241              	.LBB2690:
 6242              	.LBB2691:
 6243              	.LBB2692:
 6244              	.LBI2692:
 6245              		.loc 5 76 5 view .LVU1563
 6246              		.loc 5 76 5 is_stmt 0 view .LVU1564
 6247              	.LBE2692:
 6248              	.LBB2693:
 6249              	.LBI2693:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 6250              		.loc 3 203 6 is_stmt 1 view .LVU1565
 6251              	.LBB2694:
 6252              	.LBB2695:
 6253              	.LBB2696:
 6254              	.LBI2696:
 6255              		.loc 5 76 5 view .LVU1566
 6256              		.loc 5 76 5 is_stmt 0 view .LVU1567
 6257              	.LBE2696:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 6258              		.loc 3 204 47 view .LVU1568
 6259 012a 0023     		movs	r3, #0
 6260 012c 0C93     		str	r3, [sp, #48]	@ float
ARM GAS  /tmp/ccofeNgA.s 			page 302


 6261              	.LVL420:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 6262              		.loc 3 204 47 view .LVU1569
 6263              	.LBE2695:
 6264              	.LBE2694:
 6265              	.LBE2693:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 6266              		.loc 3 117 19 view .LVU1570
 6267 012e 0123     		movs	r3, #1
 6268 0130 8DF83430 		strb	r3, [sp, #52]
 6269              	.LVL421:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 6270              		.loc 3 117 19 view .LVU1571
 6271              	.LBE2691:
 6272              	.LBE2690:
 6273              	.LBE2689:
 6274              	.LBE2688:
 6275              	.LBE2687:
 6276              	.LBE2686:
 6277              	.LBE2684:
 6278              	.LBE2683:
 6279              	.LBE2682:
 6280              	.LBE2680:
 6281              	.LBE2679:
 6282              	.LBE2678:
 719:MotorControl/motor.cpp ****     } else if (is_armed_ && !i_bus.has_value()) {
 6283              		.loc 2 719 15 view .LVU1572
 6284 0134 02AB     		add	r3, sp, #8
 6285 0136 0CAA     		add	r2, sp, #48
 6286 0138 92E80300 		ldm	r2, {r0, r1}
 6287 013c 83E80300 		stm	r3, {r0, r1}
 6288 0140 DAE7     		b	.L245
 6289              	.L260:
 722:MotorControl/motor.cpp ****         i_bus = 0.0f;
 6290              		.loc 2 722 9 is_stmt 1 view .LVU1573
 722:MotorControl/motor.cpp ****         i_bus = 0.0f;
 6291              		.loc 2 722 26 is_stmt 0 view .LVU1574
 6292 0142 4FF08042 		mov	r2, #1073741824
 6293 0146 0023     		movs	r3, #0
 6294 0148 2046     		mov	r0, r4
 6295 014a FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 6296              	.LVL422:
 723:MotorControl/motor.cpp ****     }
 6297              		.loc 2 723 9 is_stmt 1 view .LVU1575
 6298              	.LBB2697:
 6299              	.LBI2697:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 6300              		.loc 3 700 2 view .LVU1576
 6301              	.LBB2698:
 6302              	.LBB2699:
 6303              	.LBB2700:
 6304              	.LBI2700:
 6305              		.loc 5 76 5 view .LVU1577
 6306              		.loc 5 76 5 is_stmt 0 view .LVU1578
 6307              	.LBE2700:
 6308              	.LBB2701:
 6309              	.LBI2701:
ARM GAS  /tmp/ccofeNgA.s 			page 303


 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 6310              		.loc 3 607 28 is_stmt 1 view .LVU1579
 6311              	.LBB2702:
 6312              	.LBB2703:
 6313              	.LBB2704:
 6314              	.LBI2704:
 6315              		.loc 5 76 5 view .LVU1580
 6316              		.loc 5 76 5 is_stmt 0 view .LVU1581
 6317              	.LBE2704:
 6318              	.LBB2705:
 6319              	.LBI2705:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6320              		.loc 3 300 42 is_stmt 1 view .LVU1582
 6321              	.LBB2706:
 6322              	.LBB2707:
 6323              	.LBB2708:
 6324              	.LBI2708:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 6325              		.loc 3 115 2 view .LVU1583
 6326              	.LBB2709:
 6327              	.LBB2710:
 6328              	.LBB2711:
 6329              	.LBI2711:
 6330              		.loc 5 76 5 view .LVU1584
 6331              		.loc 5 76 5 is_stmt 0 view .LVU1585
 6332              	.LBE2711:
 6333              	.LBB2712:
 6334              	.LBI2712:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 6335              		.loc 3 203 6 is_stmt 1 view .LVU1586
 6336              	.LBB2713:
 6337              	.LBB2714:
 6338              	.LBB2715:
 6339              	.LBI2715:
 6340              		.loc 5 76 5 view .LVU1587
 6341              		.loc 5 76 5 is_stmt 0 view .LVU1588
 6342              	.LBE2715:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 6343              		.loc 3 204 47 view .LVU1589
 6344 014e 0023     		movs	r3, #0
 6345 0150 0E93     		str	r3, [sp, #56]	@ float
 6346              	.LVL423:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 6347              		.loc 3 204 47 view .LVU1590
 6348              	.LBE2714:
 6349              	.LBE2713:
 6350              	.LBE2712:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 6351              		.loc 3 117 19 view .LVU1591
 6352 0152 0123     		movs	r3, #1
 6353 0154 8DF83C30 		strb	r3, [sp, #60]
 6354              	.LVL424:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 6355              		.loc 3 117 19 view .LVU1592
 6356              	.LBE2710:
 6357              	.LBE2709:
 6358              	.LBE2708:
ARM GAS  /tmp/ccofeNgA.s 			page 304


 6359              	.LBE2707:
 6360              	.LBE2706:
 6361              	.LBE2705:
 6362              	.LBE2703:
 6363              	.LBE2702:
 6364              	.LBE2701:
 6365              	.LBE2699:
 6366              	.LBE2698:
 6367              	.LBE2697:
 723:MotorControl/motor.cpp ****     }
 6368              		.loc 2 723 15 view .LVU1593
 6369 0158 02AB     		add	r3, sp, #8
 6370 015a 10AA     		add	r2, sp, #64
 6371 015c 12E90300 		ldmdb	r2, {r0, r1}
 6372 0160 83E80300 		stm	r3, {r0, r1}
 6373 0164 C8E7     		b	.L245
 6374              	.L247:
 730:MotorControl/motor.cpp ****     }
 731:MotorControl/motor.cpp **** 
 732:MotorControl/motor.cpp ****     update_brake_current();
 6375              		.loc 2 732 5 is_stmt 1 view .LVU1594
 6376              		.loc 2 732 25 is_stmt 0 view .LVU1595
 6377 0166 FFF7FEFF 		bl	update_brake_current
 6378              	.LVL425:
 6379              	.LEHE7:
 6380              	.LBB2716:
 6381              	.LBI2716:
 6382              		.loc 10 56 5 is_stmt 1 view .LVU1596
 6383              	.LBB2717:
 6384              		.loc 10 56 27 view .LVU1597
 6385              	.LBB2718:
 6386              	.LBI2718:
  29:MotorControl/task_timer.hpp ****         uint32_t end_time = sample_TIM13();
 6387              		.loc 10 29 10 view .LVU1598
 6388              	.LBB2719:
  30:MotorControl/task_timer.hpp ****         uint32_t length = end_time - start_time;
 6389              		.loc 10 30 9 view .LVU1599
 6390              	.LBB2720:
 6391              	.LBI2720:
  12:MotorControl/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 6392              		.loc 10 12 17 view .LVU1600
 6393              	.LBB2721:
  13:MotorControl/task_timer.hpp ****     return clocks_per_cnt * TIM13->CNT;  // TODO: Use a hw_config
 6394              		.loc 10 13 5 view .LVU1601
  14:MotorControl/task_timer.hpp **** }
 6395              		.loc 10 14 5 view .LVU1602
  14:MotorControl/task_timer.hpp **** }
 6396              		.loc 10 14 36 is_stmt 0 view .LVU1603
 6397 016a 104B     		ldr	r3, .L262
 6398 016c 5B6A     		ldr	r3, [r3, #36]
 6399 016e 5B00     		lsls	r3, r3, #1
 6400 0170 9BB2     		uxth	r3, r3
 6401              	.LVL426:
  14:MotorControl/task_timer.hpp **** }
 6402              		.loc 10 14 36 view .LVU1604
 6403              	.LBE2721:
 6404              	.LBE2720:
ARM GAS  /tmp/ccofeNgA.s 			page 305


  31:MotorControl/task_timer.hpp **** 
 6405              		.loc 10 31 9 is_stmt 1 view .LVU1605
  31:MotorControl/task_timer.hpp **** 
 6406              		.loc 10 31 36 is_stmt 0 view .LVU1606
 6407 0172 5A1B     		subs	r2, r3, r5
  31:MotorControl/task_timer.hpp **** 
 6408              		.loc 10 31 18 view .LVU1607
 6409 0174 0092     		str	r2, [sp]
  33:MotorControl/task_timer.hpp **** #ifdef MEASURE_START_TIME
 6410              		.loc 10 33 9 is_stmt 1 view .LVU1608
 6411 0176 104A     		ldr	r2, .L262+12
 6412 0178 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 6413 017a 22B1     		cbz	r2, .L249
  35:MotorControl/task_timer.hpp **** #endif
 6414              		.loc 10 35 13 view .LVU1609
  35:MotorControl/task_timer.hpp **** #endif
 6415              		.loc 10 35 25 is_stmt 0 view .LVU1610
 6416 017c C7F82C52 		str	r5, [r7, #556]
  38:MotorControl/task_timer.hpp **** #endif
 6417              		.loc 10 38 13 is_stmt 1 view .LVU1611
  38:MotorControl/task_timer.hpp **** #endif
 6418              		.loc 10 38 23 is_stmt 0 view .LVU1612
 6419 0180 7360     		str	r3, [r6, #4]
  41:MotorControl/task_timer.hpp **** #endif
 6420              		.loc 10 41 13 is_stmt 1 view .LVU1613
  41:MotorControl/task_timer.hpp **** #endif
 6421              		.loc 10 41 21 is_stmt 0 view .LVU1614
 6422 0182 009B     		ldr	r3, [sp]
 6423              	.LVL427:
  41:MotorControl/task_timer.hpp **** #endif
 6424              		.loc 10 41 21 view .LVU1615
 6425 0184 B360     		str	r3, [r6, #8]
 6426              	.LVL428:
 6427              	.L249:
  45:MotorControl/task_timer.hpp **** #endif
 6428              		.loc 10 45 9 is_stmt 1 view .LVU1616
  45:MotorControl/task_timer.hpp **** #endif
 6429              		.loc 10 45 32 is_stmt 0 view .LVU1617
 6430 0186 06F10C03 		add	r3, r6, #12
 6431              	.LVL429:
 6432              	.LBB2722:
 6433              	.LBI2722:
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 6434              		.loc 11 254 5 is_stmt 1 view .LVU1618
 6435              	.LBB2723:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 6436              		.loc 11 259 15 is_stmt 0 view .LVU1619
 6437 018a F168     		ldr	r1, [r6, #12]
 6438 018c 009A     		ldr	r2, [sp]
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 6439              		.loc 11 259 7 view .LVU1620
 6440 018e 9142     		cmp	r1, r2
 6441 0190 04D3     		bcc	.L261
 6442              	.LVL430:
 6443              	.L250:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 6444              		.loc 11 259 7 view .LVU1621
ARM GAS  /tmp/ccofeNgA.s 			page 306


 6445              	.LBE2723:
 6446              	.LBE2722:
  45:MotorControl/task_timer.hpp **** #endif
 6447              		.loc 10 45 31 view .LVU1622
 6448 0192 1B68     		ldr	r3, [r3]
  45:MotorControl/task_timer.hpp **** #endif
 6449              		.loc 10 45 21 view .LVU1623
 6450 0194 F360     		str	r3, [r6, #12]
 6451              	.LVL431:
  45:MotorControl/task_timer.hpp **** #endif
 6452              		.loc 10 45 21 view .LVU1624
 6453              	.LBE2719:
 6454              	.LBE2718:
 6455              	.LBE2717:
 6456              	.LBE2716:
 733:MotorControl/motor.cpp **** }
 6457              		.loc 2 733 1 view .LVU1625
 6458 0196 10B0     		add	sp, sp, #64
 6459              	.LCFI86:
 6460              		.cfi_remember_state
 6461              		.cfi_def_cfa_offset 24
 6462              		@ sp needed
 6463 0198 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6464              	.LVL432:
 6465              	.L261:
 6466              	.LCFI87:
 6467              		.cfi_restore_state
 6468              	.LBB2729:
 6469              	.LBB2728:
 6470              	.LBB2727:
 6471              	.LBB2726:
 6472              	.LBB2725:
 6473              	.LBB2724:
 6474              		.loc 11 260 9 view .LVU1626
 6475 019c 6B46     		mov	r3, sp
 6476              	.LVL433:
 6477              		.loc 11 260 9 view .LVU1627
 6478 019e F8E7     		b	.L250
 6479              	.LVL434:
 6480              	.L254:
 6481              		.loc 11 260 9 view .LVU1628
 6482              	.LBE2724:
 6483              	.LBE2725:
 6484              	.LBE2726:
 6485              	.LBE2727:
 6486              	.LBE2728:
 6487              	.LBE2729:
 6488              	.LBB2730:
 6489              	.LBI2730:
 6490              		.loc 10 56 5 is_stmt 1 view .LVU1629
 6491              	.LBB2731:
 6492              		.loc 10 56 27 view .LVU1630
 6493              		.loc 10 56 38 is_stmt 0 view .LVU1631
 6494 01a0 2946     		mov	r1, r5
 6495 01a2 3046     		mov	r0, r6
 6496 01a4 FFF7FEFF 		bl	_ZN9TaskTimer4stopEm
 6497              	.LVL435:
ARM GAS  /tmp/ccofeNgA.s 			page 307


 6498              	.LEHB8:
 6499              		.loc 10 56 38 view .LVU1632
 6500 01a8 FFF7FEFF 		bl	__cxa_end_cleanup
 6501              	.LVL436:
 6502              	.LEHE8:
 6503              	.L263:
 6504              		.align	2
 6505              	.L262:
 6506 01ac 001C0040 		.word	1073748992
 6507 01b0 00000000 		.word	.LANCHOR0
 6508 01b4 00C05A45 		.word	1163575296
 6509 01b8 00000000 		.word	_ZN9TaskTimer7enabledE
 6510              	.LBE2731:
 6511              	.LBE2730:
 6512              		.cfi_endproc
 6513              	.LFE5351:
 6514              		.personality	__gxx_personality_v0
 6515              		.handlerdata
 6516              	.LLSDA5351:
 6517 0008 FF       		.byte	0xff
 6518 0009 FF       		.byte	0xff
 6519 000a 01       		.byte	0x1
 6520 000b 0B       		.uleb128 .LLSDACSE5351-.LLSDACSB5351
 6521              	.LLSDACSB5351:
 6522 000c 50       		.uleb128 .LEHB7-.LFB5351
 6523 000d 9A02     		.uleb128 .LEHE7-.LEHB7
 6524 000f A003     		.uleb128 .L254-.LFB5351
 6525 0011 00       		.uleb128 0
 6526 0012 A803     		.uleb128 .LEHB8-.LFB5351
 6527 0014 04       		.uleb128 .LEHE8-.LEHB8
 6528 0015 00       		.uleb128 0
 6529 0016 00       		.uleb128 0
 6530              	.LLSDACSE5351:
 6531              		.section	.text._ZN5Motor13pwm_update_cbEm
 6532              		.fnend
 6534              		.section	.rodata._ZN9InputPortIfE7presentEv.str1.4,"aMS",%progbits,1
 6535              		.align	2
 6536              	.LC1:
 6537 0000 7374643A 		.ascii	"std::get: wrong index for variant\000"
 6537      3A676574 
 6537      3A207772 
 6537      6F6E6720 
 6537      696E6465 
 6538              		.section	.text._ZN9InputPortIfE7presentEv,"axG",%progbits,_ZN9InputPortIfE7presentEv,comdat
 6539              		.align	1
 6540              		.weak	_ZN9InputPortIfE7presentEv
 6541              		.syntax unified
 6542              		.thumb
 6543              		.thumb_func
 6545              	_ZN9InputPortIfE7presentEv:
 6546              		.fnstart
 6547              	.LVL437:
 6548              	.LFB5770:
 124:./MotorControl/component.hpp **** public:
 125:./MotorControl/component.hpp ****     void connect_to(OutputPort<T>* input_port) {
 126:./MotorControl/component.hpp ****         content_ = input_port;
 127:./MotorControl/component.hpp ****     }
ARM GAS  /tmp/ccofeNgA.s 			page 308


 128:./MotorControl/component.hpp **** 
 129:./MotorControl/component.hpp ****     void connect_to(T* input_ptr) {
 130:./MotorControl/component.hpp ****         content_ = input_ptr;
 131:./MotorControl/component.hpp ****     }
 132:./MotorControl/component.hpp **** 
 133:./MotorControl/component.hpp ****     void disconnect() {
 134:./MotorControl/component.hpp ****         content_ = (OutputPort<T>*)nullptr;
 135:./MotorControl/component.hpp ****     }
 136:./MotorControl/component.hpp **** 
 137:./MotorControl/component.hpp ****     std::optional<T> present() {
 6549              		.loc 17 137 22 is_stmt 1 view -0
 6550              		.cfi_startproc
 6551              		@ args = 0, pretend = 0, frame = 0
 6552              		@ frame_needed = 0, uses_anonymous_args = 0
 6553              		.loc 17 137 22 is_stmt 0 view .LVU1634
 6554 0000 08B5     		push	{r3, lr}
 6555              		.save {r3, lr}
 6556              	.LCFI88:
 6557              		.cfi_def_cfa_offset 8
 6558              		.cfi_offset 3, -8
 6559              		.cfi_offset 14, -4
 6560              	.LVL438:
 6561              	.LBB2862:
 6562              	.LBB2863:
 6563              	.LBI2863:
1365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       variant(const variant& __rhs) = default;
1366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       variant(variant&&) = default;
1367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       variant& operator=(const variant&) = default;
1368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       variant& operator=(variant&&) = default;
1369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       ~variant() = default;
1370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp,
1372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<sizeof...(_Types) != 0>,
1373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<__not_in_place_tag<_Tp>>,
1374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename _Tj = __accepted_type<_Tp&&>,
1375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tj>
1376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				      && is_constructible_v<_Tj, _Tp>>>
1377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr
1378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant(_Tp&& __t)
1379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
1380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: variant(in_place_index<__accepted_index<_Tp>>,
1381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  std::forward<_Tp>(__t))
1382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
1383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp, typename... _Args,
1385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				      && is_constructible_v<_Tp, _Args...>>>
1387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr explicit
1388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant(in_place_type_t<_Tp>, _Args&&... __args)
1389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>,
1390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  std::forward<_Args>(__args)...)
1391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
1392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp, typename _Up, typename... _Args,
1394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<__exactly_once<_Tp>
1395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				      && is_constructible_v<_Tp,
1396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 					   initializer_list<_Up>&, _Args...>>>
ARM GAS  /tmp/ccofeNgA.s 			page 309


1397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr explicit
1398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant(in_place_type_t<_Tp>, initializer_list<_Up> __il,
1399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		_Args&&... __args)
1400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: variant(in_place_index<__index_of<_Tp>>, __il,
1401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  std::forward<_Args>(__args)...)
1402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
1403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args,
1405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename _Tp = __to_type<_Np>,
1406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>
1407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr explicit
1408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant(in_place_index_t<_Np>, _Args&&... __args)
1409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
1410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
1412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename _Up, typename... _Args,
1414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename _Tp = __to_type<_Np>,
1415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       typename = enable_if_t<is_constructible_v<_Tp,
1416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 							 initializer_list<_Up>&,
1417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 							 _Args...>>>
1418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	constexpr explicit
1419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	variant(in_place_index_t<_Np>, initializer_list<_Up> __il,
1420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		_Args&&... __args)
1421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	: _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),
1422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	_Default_ctor_enabler(_Enable_default_constructor_tag{})
1423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{ }
1424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp>
1426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	enable_if_t<__exactly_once<__accepted_type<_Tp&&>>
1427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    && is_constructible_v<__accepted_type<_Tp&&>, _Tp>
1428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,
1429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    variant&>
1430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	operator=(_Tp&& __rhs)
1431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
1432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		 && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)
1433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
1434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  constexpr auto __index = __accepted_index<_Tp>;
1435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if (index() == __index)
1436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
1437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
1438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      using _Tj = __accepted_type<_Tp&&>;
1440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      if constexpr (is_nothrow_constructible_v<_Tj, _Tp>
1441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			    || !is_nothrow_move_constructible_v<_Tj>)
1442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		this->emplace<__index>(std::forward<_Tp>(__rhs));
1443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      else
1444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		operator=(variant(std::forward<_Tp>(__rhs)));
1445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return *this;
1447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp, typename... _Args>
1450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	enable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,
1451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    _Tp&>
1452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	emplace(_Args&&... __args)
1453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
ARM GAS  /tmp/ccofeNgA.s 			page 310


1454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return this->emplace<__index>(std::forward<_Args>(__args)...);
1456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Tp, typename _Up, typename... _Args>
1459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>
1460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    && __exactly_once<_Tp>,
1461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    _Tp&>
1462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
1464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  constexpr size_t __index = __index_of<_Tp>;
1465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return this->emplace<__index>(__il, std::forward<_Args>(__args)...);
1466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename... _Args>
1469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				       _Args...>,
1471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	emplace(_Args&&... __args)
1473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
1474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			"The index must be in [0, number of alternatives)");
1476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // to avoid becoming valueless.
1479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type, _Args...>)
1480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
1482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __variant_construct_by_index<_Np>(*this,
1483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  std::forward<_Args>(__args)...);
1484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else if constexpr (is_scalar_v<type>)
1486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // This might invoke a potentially-throwing conversion operator:
1488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      const type __tmp(std::forward<_Args>(__args)...);
1489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // But these steps won't throw:
1490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
1491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __tmp);
1492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      && _Traits::_S_move_assign)
1495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // This construction might throw:
1497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      variant __tmp(in_place_index<_Np>,
1498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			    std::forward<_Args>(__args)...);
1499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      *this = std::move(__tmp);
1501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
1503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // i.e. the variant can become valueless.
1506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
1507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __try
1508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		{
1509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __variant_construct_by_index<_Np>(*this,
1510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    std::forward<_Args>(__args)...);
ARM GAS  /tmp/ccofeNgA.s 			page 311


1511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		}
1512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __catch (...)
1513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		{
1514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  this->_M_index = variant_npos;
1515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __throw_exception_again;
1516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		}
1517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return std::get<_Np>(*this);
1519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename _Up, typename... _Args>
1522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>,
1523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 				       initializer_list<_Up>&, _Args...>,
1524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    variant_alternative_t<_Np, variant>&>
1525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	emplace(initializer_list<_Up> __il, _Args&&... __args)
1526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	{
1527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  static_assert(_Np < sizeof...(_Types),
1528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			"The index must be in [0, number of alternatives)");
1529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  using type = variant_alternative_t<_Np, variant>;
1530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // Provide the strong exception-safety guarantee when possible,
1531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  // to avoid becoming valueless.
1532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  if constexpr (is_nothrow_constructible_v<type,
1533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 						   initializer_list<_Up>&,
1534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 						   _Args...>)
1535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
1537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __variant_construct_by_index<_Np>(*this, __il,
1538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  std::forward<_Args>(__args)...);
1539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else if constexpr (__detail::__variant::_Never_valueless_alt<type>()
1541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      && _Traits::_S_move_assign)
1542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // This construction might throw:
1544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      variant __tmp(in_place_index<_Np>, __il,
1545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			    std::forward<_Args>(__args)...);
1546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // But _Never_valueless_alt<type> means this won't:
1547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      *this = std::move(__tmp);
1548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  else
1550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    {
1551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // This case only provides the basic exception-safety guarantee,
1552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      // i.e. the variant can become valueless.
1553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      this->_M_reset();
1554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __try
1555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		{
1556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __variant_construct_by_index<_Np>(*this, __il,
1557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    std::forward<_Args>(__args)...);
1558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		}
1559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      __catch (...)
1560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		{
1561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  this->_M_index = variant_npos;
1562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  __throw_exception_again;
1563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		}
1564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    }
1565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return std::get<_Np>(*this);
1566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	}
1567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
ARM GAS  /tmp/ccofeNgA.s 			page 312


1568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr bool valueless_by_exception() const noexcept
1569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return !this->_M_valid(); }
1570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       constexpr size_t index() const noexcept
 6564              		.loc 1 1571 24 is_stmt 1 view .LVU1635
 6565              	.LBB2864:
1572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
1573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	using __index_type = typename _Base::__index_type;
1574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	if constexpr (__detail::__variant::__never_valueless<_Types...>())
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return this->_M_index;
 6566              		.loc 1 1575 17 is_stmt 0 view .LVU1636
 6567 0002 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 6568              	.LVL439:
 6569              		.loc 1 1575 17 view .LVU1637
 6570              	.LBE2864:
 6571              	.LBE2863:
 138:./MotorControl/component.hpp ****         if (content_.index() == 2) {
 6572              		.loc 17 138 9 view .LVU1638
 6573 0004 022B     		cmp	r3, #2
 6574 0006 08D0     		beq	.L276
 6575              	.LBB2865:
 139:./MotorControl/component.hpp ****             OutputPort<T>* ptr = std::get<2>(content_);
 140:./MotorControl/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 141:./MotorControl/component.hpp ****         } else if (content_.index() == 1) {
 6576              		.loc 17 141 16 view .LVU1639
 6577 0008 012B     		cmp	r3, #1
 6578 000a 19D0     		beq	.L277
 6579              	.LVL440:
 6580              	.LBB2866:
 6581              	.LBI2866:
1576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
1577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return make_signed_t<__index_type>(this->_M_index);
1578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else
1579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  return size_t(__index_type(this->_M_index + 1)) - 1;
1580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
1581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       void
1583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       swap(variant& __rhs)
1584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       noexcept((__is_nothrow_swappable<_Types>::value && ...)
1585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	       && is_nothrow_move_constructible_v<variant>)
1586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
1587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::__raw_idx_visit(
1588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
1589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  {
1590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    if constexpr (__rhs_index != variant_npos)
1591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      {
1592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		if (this->index() == __rhs_index)
1593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  {
1594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    auto& __this_mem =
1595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      std::get<__rhs_index>(*this);
1596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    using std::swap;
1597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    swap(__this_mem, __rhs_mem);
1598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  }
1599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		else
1600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  {
1601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    if (!this->valueless_by_exception()) [[__likely__]]
1602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      {
ARM GAS  /tmp/ccofeNgA.s 			page 313


1603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			auto __tmp(std::move(__rhs_mem));
1604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			__rhs = std::move(*this);
1605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			this->_M_destructive_move(__rhs_index,
1606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 						  std::move(__tmp));
1607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      }
1608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    else
1609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      {
1610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			this->_M_destructive_move(__rhs_index,
1611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 						  std::move(__rhs_mem));
1612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 			__rhs._M_reset();
1613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      }
1614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  }
1615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      }
1616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	    else
1617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      {
1618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		if (!this->valueless_by_exception()) [[__likely__]]
1619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  {
1620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    __rhs = std::move(*this);
1621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    this->_M_reset();
1622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		  }
1623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	      }
1624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	  }, __rhs);
1625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       }
1626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     private:
1628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #if defined(__clang__) && __clang_major__ <= 7
1630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     public:
1631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       using _Base::_M_u; // See https://bugs.llvm.org/show_bug.cgi?id=31852
1632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     private:
1633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #endif
1634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<size_t _Np, typename _Vp>
1636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	friend constexpr decltype(auto)
1637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::__get(_Vp&& __v) noexcept;
1638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename _Vp>
1640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	friend void*
1641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	__detail::__variant::__get_storage(_Vp&& __v) noexcept;
1642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #define _VARIANT_RELATION_FUNCTION_TEMPLATE(__OP) \
1644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       template<typename... _Tp> \
1645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	friend constexpr bool \
1646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	operator __OP(const variant<_Tp...>& __lhs, \
1647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		      const variant<_Tp...>& __rhs);
1648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<)
1650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(<=)
1651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(==)
1652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(!=)
1653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>=)
1654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       _VARIANT_RELATION_FUNCTION_TEMPLATE(>)
1655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** #undef _VARIANT_RELATION_FUNCTION_TEMPLATE
1657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     };
1658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 
1659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   template<size_t _Np, typename... _Types>
ARM GAS  /tmp/ccofeNgA.s 			page 314


1660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     constexpr variant_alternative_t<_Np, variant<_Types...>>&
1661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     get(variant<_Types...>& __v)
 6582              		.loc 1 1661 5 is_stmt 1 view .LVU1640
 6583              	.LBB2867:
 6584              	.LBB2868:
 6585              	.LBI2868:
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 6586              		.loc 1 1571 24 view .LVU1641
 6587              	.LBB2869:
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 6588              		.loc 1 1575 17 is_stmt 0 view .LVU1642
 6589 000c 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 6590              	.LVL441:
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 6591              		.loc 1 1575 17 view .LVU1643
 6592              	.LBE2869:
 6593              	.LBE2868:
1662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
1663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       static_assert(_Np < sizeof...(_Types),
1664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 		    "The index must be in [0, number of alternatives)");
1665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       if (__v.index() != _Np)
 6594              		.loc 1 1665 7 view .LVU1644
 6595 000e 3BBB     		cbnz	r3, .L278
 6596              	.LVL442:
 6597              	.LBB2870:
 6598              	.LBI2870:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 6599              		.loc 1 276 5 is_stmt 1 view .LVU1645
 6600              	.LBB2871:
 6601              	.LBB2872:
 6602              	.LBI2872:
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 6603              		.loc 1 262 5 view .LVU1646
 6604              	.LBB2873:
 6605              	.LBI2873:
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 6606              		.loc 1 222 24 view .LVU1647
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 6607              		.loc 1 222 24 is_stmt 0 view .LVU1648
 6608              	.LBE2873:
 6609              	.LBE2872:
 6610              	.LBE2871:
 6611              	.LBE2870:
 6612              	.LBE2867:
 6613              	.LBE2866:
 6614              	.LBB2877:
 6615              	.LBI2877:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 6616              		.loc 3 700 2 is_stmt 1 view .LVU1649
 6617              	.LBB2878:
 6618              	.LBB2879:
 6619              	.LBB2880:
 6620              	.LBI2880:
 6621              		.loc 5 76 5 view .LVU1650
 6622              		.loc 5 76 5 is_stmt 0 view .LVU1651
 6623              	.LBE2880:
 6624              	.LBB2881:
ARM GAS  /tmp/ccofeNgA.s 			page 315


 6625              	.LBI2881:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 6626              		.loc 3 607 28 is_stmt 1 view .LVU1652
 6627              	.LBB2882:
 6628              	.LBB2883:
 6629              	.LBB2884:
 6630              	.LBI2884:
 6631              		.loc 5 76 5 view .LVU1653
 6632              		.loc 5 76 5 is_stmt 0 view .LVU1654
 6633              	.LBE2884:
 6634              	.LBB2885:
 6635              	.LBI2885:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6636              		.loc 3 300 42 is_stmt 1 view .LVU1655
 6637              	.LBB2886:
 6638              	.LBB2887:
 6639              	.LBB2888:
 6640              	.LBI2888:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 6641              		.loc 3 115 2 view .LVU1656
 6642              	.LBB2889:
 6643              	.LBB2890:
 6644              	.LBB2891:
 6645              	.LBI2891:
 6646              		.loc 5 76 5 view .LVU1657
 6647              		.loc 5 76 5 is_stmt 0 view .LVU1658
 6648              	.LBE2891:
 6649              	.LBB2892:
 6650              	.LBI2892:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 6651              		.loc 3 203 6 is_stmt 1 view .LVU1659
 6652              	.LBB2893:
 6653              	.LBB2894:
 6654              	.LBB2895:
 6655              	.LBI2895:
 6656              		.loc 5 76 5 view .LVU1660
 6657              		.loc 5 76 5 is_stmt 0 view .LVU1661
 6658              	.LBE2895:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 6659              		.loc 3 204 47 view .LVU1662
 6660 0010 0B68     		ldr	r3, [r1]	@ float
 6661 0012 0360     		str	r3, [r0]	@ float
 6662              	.LVL443:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 6663              		.loc 3 204 47 view .LVU1663
 6664              	.LBE2894:
 6665              	.LBE2893:
 6666              	.LBE2892:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 6667              		.loc 3 117 19 view .LVU1664
 6668 0014 0123     		movs	r3, #1
 6669 0016 0371     		strb	r3, [r0, #4]
 6670              	.LVL444:
 6671              	.L264:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 6672              		.loc 3 117 19 view .LVU1665
 6673              	.LBE2890:
ARM GAS  /tmp/ccofeNgA.s 			page 316


 6674              	.LBE2889:
 6675              	.LBE2888:
 6676              	.LBE2887:
 6677              	.LBE2886:
 6678              	.LBE2885:
 6679              	.LBE2883:
 6680              	.LBE2882:
 6681              	.LBE2881:
 6682              	.LBE2879:
 6683              	.LBE2878:
 6684              	.LBE2877:
 6685              	.LBE2865:
 6686              	.LBE2862:
 142:./MotorControl/component.hpp ****             T* ptr = std::get<1>(content_);
 143:./MotorControl/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 144:./MotorControl/component.hpp ****         } else {
 145:./MotorControl/component.hpp ****             return std::get<0>(content_);
 146:./MotorControl/component.hpp ****         }
 147:./MotorControl/component.hpp ****     }
 6687              		.loc 17 147 5 view .LVU1666
 6688 0018 08BD     		pop	{r3, pc}
 6689              	.L276:
 6690              	.LVL445:
 6691              	.LBB2994:
 6692              	.LBB2940:
 6693              	.LBB2941:
 6694              	.LBI2941:
1661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 6695              		.loc 1 1661 5 is_stmt 1 view .LVU1667
 6696              	.LBB2942:
 6697              	.LBB2943:
 6698              	.LBI2943:
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 6699              		.loc 1 1571 24 view .LVU1668
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 6700              		.loc 1 1571 24 is_stmt 0 view .LVU1669
 6701              	.LBE2943:
 6702              		.loc 1 1665 7 view .LVU1670
 6703 001a 06D1     		bne	.L279
 6704              	.LVL446:
 6705              	.LBB2944:
 6706              	.LBI2944:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 6707              		.loc 1 276 5 is_stmt 1 view .LVU1671
 6708              	.LBB2945:
 6709              	.LBB2946:
 6710              	.LBI2946:
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 6711              		.loc 1 267 5 view .LVU1672
 6712              	.LBB2947:
 6713              	.LBB2948:
 6714              	.LBI2948:
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 6715              		.loc 1 267 5 view .LVU1673
 6716              	.LBB2949:
 6717              	.LBB2950:
 6718              	.LBI2950:
ARM GAS  /tmp/ccofeNgA.s 			page 317


 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 6719              		.loc 1 262 5 view .LVU1674
 6720              	.LBB2951:
 6721              	.LBI2951:
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 6722              		.loc 1 222 24 view .LVU1675
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 6723              		.loc 1 222 24 is_stmt 0 view .LVU1676
 6724              	.LBE2951:
 6725              	.LBE2950:
 6726              	.LBE2949:
 6727              	.LBE2948:
 6728              	.LBE2947:
 6729              	.LBE2946:
 6730              	.LBE2945:
 6731              	.LBE2944:
 6732              	.LBE2942:
 6733              	.LBE2941:
 139:./MotorControl/component.hpp ****             return ptr ? ptr->present() : std::nullopt;
 6734              		.loc 17 139 28 view .LVU1677
 6735 001c 0B68     		ldr	r3, [r1]
 6736              	.LVL447:
 140:./MotorControl/component.hpp ****         } else if (content_.index() == 1) {
 6737              		.loc 17 140 48 view .LVU1678
 6738 001e 63B1     		cbz	r3, .L267
 6739              	.LVL448:
 6740              	.LBB2955:
 6741              	.LBI2955:
  73:./MotorControl/component.hpp ****         if (age_ == 0) {
 6742              		.loc 17 73 22 is_stmt 1 view .LVU1679
 6743              	.LBB2956:
  74:./MotorControl/component.hpp ****             return content_;
 6744              		.loc 17 74 13 is_stmt 0 view .LVU1680
 6745 0020 1A68     		ldr	r2, [r3]
  74:./MotorControl/component.hpp ****             return content_;
 6746              		.loc 17 74 9 view .LVU1681
 6747 0022 2AB1     		cbz	r2, .L280
 6748              	.LVL449:
 6749              	.LBB2957:
 6750              	.LBI2957:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6751              		.loc 3 692 17 is_stmt 1 view .LVU1682
 6752              	.LBB2958:
 6753              	.LBB2959:
 6754              	.LBI2959:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6755              		.loc 3 602 17 view .LVU1683
 6756              	.LBB2960:
 6757              	.LBI2960:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 6758              		.loc 3 302 7 view .LVU1684
 6759              	.LBB2961:
 6760              	.LBI2961:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 6761              		.loc 3 110 7 view .LVU1685
 6762              	.LBB2962:
 6763              	.LBB2963:
ARM GAS  /tmp/ccofeNgA.s 			page 318


 6764              	.LBI2963:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6765              		.loc 3 199 14 view .LVU1686
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6766              		.loc 3 199 14 is_stmt 0 view .LVU1687
 6767              	.LBE2963:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 6768              		.loc 3 110 7 view .LVU1688
 6769 0024 0023     		movs	r3, #0
 6770              	.LVL450:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 6771              		.loc 3 110 7 view .LVU1689
 6772 0026 0371     		strb	r3, [r0, #4]
 6773              	.LVL451:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 6774              		.loc 3 110 7 view .LVU1690
 6775              	.LBE2962:
 6776              	.LBE2961:
 6777              	.LBE2960:
 6778              	.LBE2959:
 6779              	.LBE2958:
 6780              	.LBE2957:
  77:./MotorControl/component.hpp ****         }
 6781              		.loc 17 77 25 view .LVU1691
 6782 0028 F6E7     		b	.L264
 6783              	.LVL452:
 6784              	.L279:
  77:./MotorControl/component.hpp ****         }
 6785              		.loc 17 77 25 view .LVU1692
 6786              	.LBE2956:
 6787              	.LBE2955:
 6788              	.LBB2984:
 6789              	.LBB2954:
 6790              	.LBB2952:
 6791              	.LBI2952:
1287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 6792              		.loc 1 1287 3 is_stmt 1 view .LVU1693
 6793              	.LBB2953:
1289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
 6794              		.loc 1 1289 5 view .LVU1694
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 6795              		.loc 1 1292 7 view .LVU1695
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 6796              		.loc 1 1292 33 is_stmt 0 view .LVU1696
 6797 002a 0F48     		ldr	r0, .L282
 6798              	.LVL453:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 6799              		.loc 1 1292 33 view .LVU1697
 6800 002c FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
 6801              	.LVL454:
 6802              	.L280:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 6803              		.loc 1 1292 33 view .LVU1698
 6804              	.LBE2953:
 6805              	.LBE2952:
 6806              	.LBE2954:
 6807              	.LBE2984:
ARM GAS  /tmp/ccofeNgA.s 			page 319


 6808              	.LBB2985:
 6809              	.LBB2983:
 6810              	.LBB2964:
 6811              	.LBI2964:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 6812              		.loc 3 700 2 is_stmt 1 view .LVU1699
 6813              	.LBB2965:
 6814              	.LBB2966:
 6815              	.LBB2967:
 6816              	.LBI2967:
 6817              		.loc 5 76 5 view .LVU1700
 6818              		.loc 5 76 5 is_stmt 0 view .LVU1701
 6819              	.LBE2967:
 6820              	.LBB2968:
 6821              	.LBI2968:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 6822              		.loc 3 607 28 is_stmt 1 view .LVU1702
 6823              	.LBB2969:
 6824              	.LBB2970:
 6825              	.LBB2971:
 6826              	.LBI2971:
 6827              		.loc 5 76 5 view .LVU1703
 6828              		.loc 5 76 5 is_stmt 0 view .LVU1704
 6829              	.LBE2971:
 6830              	.LBB2972:
 6831              	.LBI2972:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6832              		.loc 3 300 42 is_stmt 1 view .LVU1705
 6833              	.LBB2973:
 6834              	.LBB2974:
 6835              	.LBB2975:
 6836              	.LBI2975:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 6837              		.loc 3 115 2 view .LVU1706
 6838              	.LBB2976:
 6839              	.LBB2977:
 6840              	.LBB2978:
 6841              	.LBI2978:
 6842              		.loc 5 76 5 view .LVU1707
 6843              		.loc 5 76 5 is_stmt 0 view .LVU1708
 6844              	.LBE2978:
 6845              	.LBB2979:
 6846              	.LBI2979:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 6847              		.loc 3 203 6 is_stmt 1 view .LVU1709
 6848              	.LBB2980:
 6849              	.LBB2981:
 6850              	.LBB2982:
 6851              	.LBI2982:
 6852              		.loc 5 76 5 view .LVU1710
 6853              		.loc 5 76 5 is_stmt 0 view .LVU1711
 6854              	.LBE2982:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 6855              		.loc 3 204 47 view .LVU1712
 6856 0030 5B68     		ldr	r3, [r3, #4]	@ float
 6857              	.LVL455:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
ARM GAS  /tmp/ccofeNgA.s 			page 320


 6858              		.loc 3 204 47 view .LVU1713
 6859 0032 0360     		str	r3, [r0]	@ float
 6860              	.LVL456:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 6861              		.loc 3 204 47 view .LVU1714
 6862              	.LBE2981:
 6863              	.LBE2980:
 6864              	.LBE2979:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 6865              		.loc 3 117 19 view .LVU1715
 6866 0034 0123     		movs	r3, #1
 6867 0036 0371     		strb	r3, [r0, #4]
 6868              	.LVL457:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 6869              		.loc 3 117 19 view .LVU1716
 6870              	.LBE2977:
 6871              	.LBE2976:
 6872              	.LBE2975:
 6873              	.LBE2974:
 6874              	.LBE2973:
 6875              	.LBE2972:
 6876              	.LBE2970:
 6877              	.LBE2969:
 6878              	.LBE2968:
 6879              	.LBE2966:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6880              		.loc 3 701 51 view .LVU1717
 6881 0038 EEE7     		b	.L264
 6882              	.LVL458:
 6883              	.L267:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6884              		.loc 3 701 51 view .LVU1718
 6885              	.LBE2965:
 6886              	.LBE2964:
 6887              	.LBE2983:
 6888              	.LBE2985:
 6889              	.LBB2986:
 6890              	.LBI2986:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6891              		.loc 3 692 17 is_stmt 1 discriminator 2 view .LVU1719
 6892              	.LBB2987:
 6893              	.LBB2988:
 6894              	.LBI2988:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6895              		.loc 3 602 17 discriminator 2 view .LVU1720
 6896              	.LBB2989:
 6897              	.LBI2989:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 6898              		.loc 3 302 7 discriminator 2 view .LVU1721
 6899              	.LBB2990:
 6900              	.LBI2990:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 6901              		.loc 3 110 7 discriminator 2 view .LVU1722
 6902              	.LBB2991:
 6903              	.LBB2992:
 6904              	.LBI2992:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
ARM GAS  /tmp/ccofeNgA.s 			page 321


 6905              		.loc 3 199 14 discriminator 2 view .LVU1723
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 6906              		.loc 3 199 14 is_stmt 0 discriminator 2 view .LVU1724
 6907              	.LBE2992:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 6908              		.loc 3 110 7 discriminator 2 view .LVU1725
 6909 003a 0023     		movs	r3, #0
 6910              	.LVL459:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 6911              		.loc 3 110 7 discriminator 2 view .LVU1726
 6912 003c 0371     		strb	r3, [r0, #4]
 6913              	.LVL460:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 6914              		.loc 3 110 7 discriminator 2 view .LVU1727
 6915 003e EBE7     		b	.L264
 6916              	.L277:
 6917              	.LVL461:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 6918              		.loc 3 110 7 discriminator 2 view .LVU1728
 6919              	.LBE2991:
 6920              	.LBE2990:
 6921              	.LBE2989:
 6922              	.LBE2988:
 6923              	.LBE2987:
 6924              	.LBE2986:
 6925              	.LBE2940:
 6926              	.LBB2993:
 6927              	.LBB2896:
 6928              	.LBB2897:
 6929              	.LBI2897:
1661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 6930              		.loc 1 1661 5 is_stmt 1 view .LVU1729
 6931              	.LBB2898:
 6932              	.LBB2899:
 6933              	.LBI2899:
1571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       {
 6934              		.loc 1 1571 24 view .LVU1730
 6935              	.LBB2900:
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 6936              		.loc 1 1575 17 is_stmt 0 view .LVU1731
 6937 0040 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 6938              	.LVL462:
1575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant **** 	else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
 6939              		.loc 1 1575 17 view .LVU1732
 6940              	.LBE2900:
 6941              	.LBE2899:
 6942              		.loc 1 1665 7 view .LVU1733
 6943 0042 012B     		cmp	r3, #1
 6944 0044 06D1     		bne	.L281
 6945              	.LVL463:
 6946              	.LBB2901:
 6947              	.LBI2901:
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 6948              		.loc 1 276 5 is_stmt 1 view .LVU1734
 6949              	.LBB2902:
 6950              	.LBB2903:
 6951              	.LBI2903:
ARM GAS  /tmp/ccofeNgA.s 			page 322


 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     {
 6952              		.loc 1 267 5 view .LVU1735
 6953              	.LBB2904:
 6954              	.LBB2905:
 6955              	.LBI2905:
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****     { return std::forward<_Union>(__u)._M_first._M_get(); }
 6956              		.loc 1 262 5 view .LVU1736
 6957              	.LBB2906:
 6958              	.LBI2906:
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 6959              		.loc 1 222 24 view .LVU1737
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       { return _M_storage; }
 6960              		.loc 1 222 24 is_stmt 0 view .LVU1738
 6961              	.LBE2906:
 6962              	.LBE2905:
 6963              	.LBE2904:
 6964              	.LBE2903:
 6965              	.LBE2902:
 6966              	.LBE2901:
 6967              	.LBE2898:
 6968              	.LBE2897:
 142:./MotorControl/component.hpp ****             return ptr ? std::make_optional(*ptr) : std::nullopt;
 6969              		.loc 17 142 16 view .LVU1739
 6970 0046 0B68     		ldr	r3, [r1]
 6971              	.LVL464:
 143:./MotorControl/component.hpp ****         } else {
 6972              		.loc 17 143 58 view .LVU1740
 6973 0048 3BB1     		cbz	r3, .L273
 6974              	.LVL465:
 6975              	.LBB2910:
 6976              	.LBI2910:
1242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     { return optional<decay_t<_Tp>> { std::forward<_Tp>(__t) }; }
 6977              		.loc 3 1242 5 is_stmt 1 view .LVU1741
 6978              	.LBB2911:
 6979              	.LBB2912:
 6980              	.LBI2912:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 6981              		.loc 3 700 2 view .LVU1742
 6982              	.LBB2913:
 6983              	.LBB2914:
 6984              	.LBB2915:
 6985              	.LBI2915:
 6986              		.loc 5 76 5 view .LVU1743
 6987              		.loc 5 76 5 is_stmt 0 view .LVU1744
 6988              	.LBE2915:
 6989              	.LBB2916:
 6990              	.LBI2916:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 6991              		.loc 3 607 28 is_stmt 1 view .LVU1745
 6992              	.LBB2917:
 6993              	.LBB2918:
 6994              	.LBB2919:
 6995              	.LBI2919:
 6996              		.loc 5 76 5 view .LVU1746
 6997              		.loc 5 76 5 is_stmt 0 view .LVU1747
 6998              	.LBE2919:
 6999              	.LBB2920:
ARM GAS  /tmp/ccofeNgA.s 			page 323


 7000              	.LBI2920:
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7001              		.loc 3 300 42 is_stmt 1 view .LVU1748
 7002              	.LBB2921:
 7003              	.LBB2922:
 7004              	.LBB2923:
 7005              	.LBI2923:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 7006              		.loc 3 115 2 view .LVU1749
 7007              	.LBB2924:
 7008              	.LBB2925:
 7009              	.LBB2926:
 7010              	.LBI2926:
 7011              		.loc 5 76 5 view .LVU1750
 7012              		.loc 5 76 5 is_stmt 0 view .LVU1751
 7013              	.LBE2926:
 7014              	.LBB2927:
 7015              	.LBI2927:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 7016              		.loc 3 203 6 is_stmt 1 view .LVU1752
 7017              	.LBB2928:
 7018              	.LBB2929:
 7019              	.LBB2930:
 7020              	.LBI2930:
 7021              		.loc 5 76 5 view .LVU1753
 7022              		.loc 5 76 5 is_stmt 0 view .LVU1754
 7023              	.LBE2930:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 7024              		.loc 3 204 47 view .LVU1755
 7025 004a 1B68     		ldr	r3, [r3]	@ float
 7026              	.LVL466:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 7027              		.loc 3 204 47 view .LVU1756
 7028 004c 0360     		str	r3, [r0]	@ float
 7029              	.LVL467:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 7030              		.loc 3 204 47 view .LVU1757
 7031              	.LBE2929:
 7032              	.LBE2928:
 7033              	.LBE2927:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 7034              		.loc 3 117 19 view .LVU1758
 7035 004e 0123     		movs	r3, #1
 7036 0050 0371     		strb	r3, [r0, #4]
 7037              	.LVL468:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 7038              		.loc 3 117 19 view .LVU1759
 7039              	.LBE2925:
 7040              	.LBE2924:
 7041              	.LBE2923:
 7042              	.LBE2922:
 7043              	.LBE2921:
 7044              	.LBE2920:
 7045              	.LBE2918:
 7046              	.LBE2917:
 7047              	.LBE2916:
 7048              	.LBE2914:
ARM GAS  /tmp/ccofeNgA.s 			page 324


 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7049              		.loc 3 701 51 view .LVU1760
 7050 0052 E1E7     		b	.L264
 7051              	.LVL469:
 7052              	.L281:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7053              		.loc 3 701 51 view .LVU1761
 7054              	.LBE2913:
 7055              	.LBE2912:
 7056              	.LBE2911:
 7057              	.LBE2910:
 7058              	.LBB2931:
 7059              	.LBB2909:
 7060              	.LBB2907:
 7061              	.LBI2907:
1287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 7062              		.loc 1 1287 3 is_stmt 1 view .LVU1762
 7063              	.LBB2908:
1289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
 7064              		.loc 1 1289 5 view .LVU1763
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 7065              		.loc 1 1292 7 view .LVU1764
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 7066              		.loc 1 1292 33 is_stmt 0 view .LVU1765
 7067 0054 0448     		ldr	r0, .L282
 7068              	.LVL470:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 7069              		.loc 1 1292 33 view .LVU1766
 7070 0056 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
 7071              	.LVL471:
 7072              	.L273:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 7073              		.loc 1 1292 33 view .LVU1767
 7074              	.LBE2908:
 7075              	.LBE2907:
 7076              	.LBE2909:
 7077              	.LBE2931:
 7078              	.LBB2932:
 7079              	.LBI2932:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7080              		.loc 3 692 17 is_stmt 1 discriminator 2 view .LVU1768
 7081              	.LBB2933:
 7082              	.LBB2934:
 7083              	.LBI2934:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7084              		.loc 3 602 17 discriminator 2 view .LVU1769
 7085              	.LBB2935:
 7086              	.LBI2935:
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****     };
 7087              		.loc 3 302 7 discriminator 2 view .LVU1770
 7088              	.LBB2936:
 7089              	.LBI2936:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 7090              		.loc 3 110 7 discriminator 2 view .LVU1771
 7091              	.LBB2937:
 7092              	.LBB2938:
 7093              	.LBI2938:
ARM GAS  /tmp/ccofeNgA.s 			page 325


 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7094              		.loc 3 199 14 discriminator 2 view .LVU1772
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7095              		.loc 3 199 14 is_stmt 0 discriminator 2 view .LVU1773
 7096              	.LBE2938:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 7097              		.loc 3 110 7 discriminator 2 view .LVU1774
 7098 005a 0023     		movs	r3, #0
 7099              	.LVL472:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 7100              		.loc 3 110 7 discriminator 2 view .LVU1775
 7101 005c 0371     		strb	r3, [r0, #4]
 7102              	.LVL473:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 7103              		.loc 3 110 7 discriminator 2 view .LVU1776
 7104 005e DBE7     		b	.L264
 7105              	.LVL474:
 7106              	.L278:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 7107              		.loc 3 110 7 discriminator 2 view .LVU1777
 7108              	.LBE2937:
 7109              	.LBE2936:
 7110              	.LBE2935:
 7111              	.LBE2934:
 7112              	.LBE2933:
 7113              	.LBE2932:
 7114              	.LBE2896:
 7115              	.LBB2939:
 7116              	.LBB2876:
 7117              	.LBB2874:
 7118              	.LBI2874:
1287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   {
 7119              		.loc 1 1287 3 is_stmt 1 view .LVU1778
 7120              	.LBB2875:
1289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****       __throw_bad_variant_access("std::get: variant is valueless");
 7121              		.loc 1 1289 5 view .LVU1779
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 7122              		.loc 1 1292 7 view .LVU1780
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 7123              		.loc 1 1292 33 is_stmt 0 view .LVU1781
 7124 0060 0148     		ldr	r0, .L282
 7125              	.LVL475:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 7126              		.loc 1 1292 33 view .LVU1782
 7127 0062 FFF7FEFF 		bl	_ZSt26__throw_bad_variant_accessPKc
 7128              	.LVL476:
 7129              	.L283:
1292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant ****   }
 7130              		.loc 1 1292 33 view .LVU1783
 7131 0066 00BF     		.align	2
 7132              	.L282:
 7133 0068 00000000 		.word	.LC1
 7134              	.LBE2875:
 7135              	.LBE2874:
 7136              	.LBE2876:
 7137              	.LBE2939:
 7138              	.LBE2993:
ARM GAS  /tmp/ccofeNgA.s 			page 326


 7139              	.LBE2994:
 7140              		.cfi_endproc
 7141              	.LFE5770:
 7142              		.fnend
 7144              		.section	.text._ZN5Motor9do_checksEm,"ax",%progbits
 7145              		.align	1
 7146              		.global	_ZN5Motor9do_checksEm
 7147              		.syntax unified
 7148              		.thumb
 7149              		.thumb_func
 7151              	_ZN5Motor9do_checksEm:
 7152              		.fnstart
 7153              	.LVL477:
 7154              	.LFB5301:
 347:MotorControl/motor.cpp ****     gate_driver_.do_checks();
 7155              		.loc 2 347 43 is_stmt 1 view -0
 7156              		.cfi_startproc
 7157              		@ args = 0, pretend = 0, frame = 0
 7158              		@ frame_needed = 0, uses_anonymous_args = 0
 347:MotorControl/motor.cpp ****     gate_driver_.do_checks();
 7159              		.loc 2 347 43 is_stmt 0 view .LVU1785
 7160 0000 38B5     		push	{r3, r4, r5, lr}
 7161              		.save {r3, r4, r5, lr}
 7162              	.LCFI89:
 7163              		.cfi_def_cfa_offset 16
 7164              		.cfi_offset 3, -16
 7165              		.cfi_offset 4, -12
 7166              		.cfi_offset 5, -8
 7167              		.cfi_offset 14, -4
 7168 0002 0446     		mov	r4, r0
 348:MotorControl/motor.cpp **** 
 7169              		.loc 2 348 5 is_stmt 1 view .LVU1786
 348:MotorControl/motor.cpp **** 
 7170              		.loc 2 348 27 is_stmt 0 view .LVU1787
 7171 0004 C068     		ldr	r0, [r0, #12]
 7172              	.LVL478:
 348:MotorControl/motor.cpp **** 
 7173              		.loc 2 348 27 view .LVU1788
 7174 0006 FFF7FEFF 		bl	_ZN7Drv83019do_checksEv
 7175              	.LVL479:
 350:MotorControl/motor.cpp ****         disarm_with_error(ERROR_DRV_FAULT);
 7176              		.loc 2 350 5 is_stmt 1 view .LVU1789
 350:MotorControl/motor.cpp ****         disarm_with_error(ERROR_DRV_FAULT);
 7177              		.loc 2 350 31 is_stmt 0 view .LVU1790
 7178 000a E068     		ldr	r0, [r4, #12]
 7179 000c FFF7FEFF 		bl	_ZN7Drv83018is_readyEv
 7180              	.LVL480:
 350:MotorControl/motor.cpp ****         disarm_with_error(ERROR_DRV_FAULT);
 7181              		.loc 2 350 5 view .LVU1791
 7182 0010 58B1     		cbz	r0, .L289
 354:MotorControl/motor.cpp ****         disarm_with_error(ERROR_MOTOR_THERMISTOR_OVER_TEMP);
 7183              		.loc 2 354 5 is_stmt 1 view .LVU1792
 354:MotorControl/motor.cpp ****         disarm_with_error(ERROR_MOTOR_THERMISTOR_OVER_TEMP);
 7184              		.loc 2 354 37 is_stmt 0 view .LVU1793
 7185 0012 A069     		ldr	r0, [r4, #24]
 7186 0014 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiter9do_checksEv
 7187              	.LVL481:
ARM GAS  /tmp/ccofeNgA.s 			page 327


 354:MotorControl/motor.cpp ****         disarm_with_error(ERROR_MOTOR_THERMISTOR_OVER_TEMP);
 7188              		.loc 2 354 5 view .LVU1794
 7189 0018 0546     		mov	r5, r0
 7190 001a 68B1     		cbz	r0, .L290
 358:MotorControl/motor.cpp ****         disarm_with_error(ERROR_FET_THERMISTOR_OVER_TEMP);
 7191              		.loc 2 358 5 is_stmt 1 view .LVU1795
 358:MotorControl/motor.cpp ****         disarm_with_error(ERROR_FET_THERMISTOR_OVER_TEMP);
 7192              		.loc 2 358 35 is_stmt 0 view .LVU1796
 7193 001c 6069     		ldr	r0, [r4, #20]
 7194 001e FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiter9do_checksEv
 7195              	.LVL482:
 358:MotorControl/motor.cpp ****         disarm_with_error(ERROR_FET_THERMISTOR_OVER_TEMP);
 7196              		.loc 2 358 5 view .LVU1797
 7197 0022 0546     		mov	r5, r0
 7198 0024 78B1     		cbz	r0, .L291
 7199              	.L286:
 363:MotorControl/motor.cpp **** 
 7200              		.loc 2 363 1 view .LVU1798
 7201 0026 2846     		mov	r0, r5
 7202 0028 38BD     		pop	{r3, r4, r5, pc}
 7203              	.LVL483:
 7204              	.L289:
 363:MotorControl/motor.cpp **** 
 7205              		.loc 2 363 1 view .LVU1799
 7206 002a 0546     		mov	r5, r0
 351:MotorControl/motor.cpp ****         return false;
 7207              		.loc 2 351 9 is_stmt 1 view .LVU1800
 351:MotorControl/motor.cpp ****         return false;
 7208              		.loc 2 351 26 is_stmt 0 view .LVU1801
 7209 002c 0822     		movs	r2, #8
 7210 002e 0023     		movs	r3, #0
 7211 0030 2046     		mov	r0, r4
 7212 0032 FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 7213              	.LVL484:
 352:MotorControl/motor.cpp ****     }
 7214              		.loc 2 352 9 is_stmt 1 view .LVU1802
 352:MotorControl/motor.cpp ****     }
 7215              		.loc 2 352 16 is_stmt 0 view .LVU1803
 7216 0036 F6E7     		b	.L286
 7217              	.L290:
 355:MotorControl/motor.cpp ****         return false;
 7218              		.loc 2 355 9 is_stmt 1 view .LVU1804
 355:MotorControl/motor.cpp ****         return false;
 7219              		.loc 2 355 26 is_stmt 0 view .LVU1805
 7220 0038 4FF40032 		mov	r2, #131072
 7221 003c 0023     		movs	r3, #0
 7222 003e 2046     		mov	r0, r4
 7223 0040 FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 7224              	.LVL485:
 356:MotorControl/motor.cpp ****     }
 7225              		.loc 2 356 9 is_stmt 1 view .LVU1806
 356:MotorControl/motor.cpp ****     }
 7226              		.loc 2 356 16 is_stmt 0 view .LVU1807
 7227 0044 EFE7     		b	.L286
 7228              	.L291:
 359:MotorControl/motor.cpp ****         return false;
 7229              		.loc 2 359 9 is_stmt 1 view .LVU1808
ARM GAS  /tmp/ccofeNgA.s 			page 328


 359:MotorControl/motor.cpp ****         return false;
 7230              		.loc 2 359 26 is_stmt 0 view .LVU1809
 7231 0046 4FF48022 		mov	r2, #262144
 7232 004a 0023     		movs	r3, #0
 7233 004c 2046     		mov	r0, r4
 7234 004e FFF7FEFF 		bl	_ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
 7235              	.LVL486:
 360:MotorControl/motor.cpp ****     }
 7236              		.loc 2 360 9 is_stmt 1 view .LVU1810
 360:MotorControl/motor.cpp ****     }
 7237              		.loc 2 360 16 is_stmt 0 view .LVU1811
 7238 0052 E8E7     		b	.L286
 7239              		.cfi_endproc
 7240              	.LFE5301:
 7241              		.fnend
 7243              		.section	.text._ZN5Motor6updateEm,"ax",%progbits
 7244              		.align	1
 7245              		.global	_ZN5Motor6updateEm
 7246              		.syntax unified
 7247              		.thumb
 7248              		.thumb_func
 7250              	_ZN5Motor6updateEm:
 7251              		.fnstart
 7252              	.LVL487:
 7253              	.LFB5330:
 513:MotorControl/motor.cpp ****     // Load torque setpoint, convert to motor direction
 7254              		.loc 2 513 40 is_stmt 1 view -0
 7255              		.cfi_startproc
 7256              		@ args = 0, pretend = 0, frame = 120
 7257              		@ frame_needed = 0, uses_anonymous_args = 0
 513:MotorControl/motor.cpp ****     // Load torque setpoint, convert to motor direction
 7258              		.loc 2 513 40 is_stmt 0 view .LVU1813
 7259 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7260              		.save {r4, r5, r6, r7, r8, lr}
 7261              	.LCFI90:
 7262              		.cfi_def_cfa_offset 24
 7263              		.cfi_offset 4, -24
 7264              		.cfi_offset 5, -20
 7265              		.cfi_offset 6, -16
 7266              		.cfi_offset 7, -12
 7267              		.cfi_offset 8, -8
 7268              		.cfi_offset 14, -4
 7269              		.pad #120
 7270 0004 9EB0     		sub	sp, sp, #120
 7271              	.LCFI91:
 7272              		.cfi_def_cfa_offset 144
 7273 0006 0446     		mov	r4, r0
 7274 0008 0D46     		mov	r5, r1
 515:MotorControl/motor.cpp ****     if (!maybe_torque.has_value()) {
 7275              		.loc 2 515 5 is_stmt 1 view .LVU1814
 515:MotorControl/motor.cpp ****     if (!maybe_torque.has_value()) {
 7276              		.loc 2 515 70 is_stmt 0 view .LVU1815
 7277 000a 00F5BE71 		add	r1, r0, #380
 7278              	.LVL488:
 515:MotorControl/motor.cpp ****     if (!maybe_torque.has_value()) {
 7279              		.loc 2 515 70 view .LVU1816
 7280 000e 09A8     		add	r0, sp, #36
ARM GAS  /tmp/ccofeNgA.s 			page 329


 7281              	.LVL489:
 7282              	.LEHB9:
 515:MotorControl/motor.cpp ****     if (!maybe_torque.has_value()) {
 7283              		.loc 2 515 70 view .LVU1817
 7284 0010 FFF7FEFF 		bl	_ZN9InputPortIfE7presentEv
 7285              	.LVL490:
 7286              	.LEHE9:
 516:MotorControl/motor.cpp ****         error_ |= ERROR_UNKNOWN_TORQUE;
 7287              		.loc 2 516 5 is_stmt 1 view .LVU1818
 7288              	.LBB3109:
 7289              	.LBI3109:
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_is_engaged(); }
 7290              		.loc 3 916 22 view .LVU1819
 7291              	.LBB3110:
 7292              	.LBI3110:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 7293              		.loc 3 433 22 view .LVU1820
 7294              	.LBB3111:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7295              		.loc 3 434 58 is_stmt 0 view .LVU1821
 7296 0014 9DF82830 		ldrb	r3, [sp, #40]	@ zero_extendqisi2
 7297              	.LVL491:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7298              		.loc 3 434 58 view .LVU1822
 7299              	.LBE3111:
 7300              	.LBE3110:
 7301              	.LBE3109:
 516:MotorControl/motor.cpp ****         error_ |= ERROR_UNKNOWN_TORQUE;
 7302              		.loc 2 516 5 view .LVU1823
 7303 0018 002B     		cmp	r3, #0
 7304 001a 45D0     		beq	.L345
 520:MotorControl/motor.cpp **** 
 7305              		.loc 2 520 5 is_stmt 1 view .LVU1824
 520:MotorControl/motor.cpp **** 
 7306              		.loc 2 520 20 is_stmt 0 view .LVU1825
 7307 001c D4ED637A 		vldr.32	s15, [r4, #396]
 520:MotorControl/motor.cpp **** 
 7308              		.loc 2 520 33 view .LVU1826
 7309 0020 9DED097A 		vldr.32	s14, [sp, #36]
 520:MotorControl/motor.cpp **** 
 7310              		.loc 2 520 34 view .LVU1827
 7311 0024 27EE877A 		vmul.f32	s14, s15, s14
 7312              	.LVL492:
 523:MotorControl/motor.cpp ****                      .value_or(float2D{0.0f, 0.0f});
 7313              		.loc 2 523 5 is_stmt 1 view .LVU1828
 7314              	.LBB3112:
 7315              	.LBI3112:
  88:./MotorControl/component.hpp ****         if (age_ == 1) {
 7316              		.loc 17 88 22 view .LVU1829
 7317              	.LBB3113:
  89:./MotorControl/component.hpp ****             return content_;
 7318              		.loc 17 89 13 is_stmt 0 view .LVU1830
 7319 0028 D4F89C31 		ldr	r3, [r4, #412]
  89:./MotorControl/component.hpp ****             return content_;
 7320              		.loc 17 89 9 view .LVU1831
 7321 002c 012B     		cmp	r3, #1
 7322 002e 43D0     		beq	.L346
ARM GAS  /tmp/ccofeNgA.s 			page 330


 7323              	.LVL493:
 7324              	.LBB3114:
 7325              	.LBI3114:
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7326              		.loc 3 692 17 is_stmt 1 view .LVU1832
 7327              	.LBB3115:
 7328              	.LBB3116:
 7329              	.LBI3116:
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7330              		.loc 3 602 17 view .LVU1833
 7331              	.LBB3117:
 7332              	.LBI3117:
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload() = default;
 7333              		.loc 3 360 7 view .LVU1834
 7334              	.LBB3118:
 7335              	.LBI3118:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 7336              		.loc 3 110 7 view .LVU1835
 7337              	.LBB3119:
 7338              	.LBB3120:
 7339              	.LBI3120:
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7340              		.loc 3 199 14 view .LVU1836
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7341              		.loc 3 199 14 is_stmt 0 view .LVU1837
 7342              	.LBE3120:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 7343              		.loc 3 110 7 view .LVU1838
 7344 0030 0023     		movs	r3, #0
 7345 0032 8DF83430 		strb	r3, [sp, #52]
 7346              	.LVL494:
 7347              	.L296:
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       ~_Optional_payload_base() = default;
 7348              		.loc 3 110 7 view .LVU1839
 7349              	.LBE3119:
 7350              	.LBE3118:
 7351              	.LBE3117:
 7352              	.LBE3116:
 7353              	.LBE3115:
 7354              	.LBE3114:
 7355              	.LBE3113:
 7356              	.LBE3112:
 7357              	.LBB3141:
 7358              	.LBI3141:
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 7359              		.loc 4 352 12 is_stmt 1 view .LVU1840
 7360              	.LBB3142:
 7361              	.LBB3143:
 7362              	.LBB3144:
 7363              	.LBI3144:
 7364              		.loc 5 76 5 view .LVU1841
 7365              		.loc 5 76 5 is_stmt 0 view .LVU1842
 7366              	.LBE3144:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 7367              		.loc 4 353 64 view .LVU1843
 7368 0036 0023     		movs	r3, #0
 7369 0038 0E93     		str	r3, [sp, #56]	@ float
ARM GAS  /tmp/ccofeNgA.s 			page 331


 7370              	.LVL495:
 7371              	.LBB3145:
 7372              	.LBI3145:
 7373              		.loc 5 76 5 is_stmt 1 view .LVU1844
 7374              		.loc 5 76 5 is_stmt 0 view .LVU1845
 7375              	.LBE3145:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 7376              		.loc 4 353 64 view .LVU1846
 7377 003a 0F93     		str	r3, [sp, #60]	@ float
 7378              	.LVL496:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 7379              		.loc 4 353 64 view .LVU1847
 7380              	.LBE3143:
 7381              	.LBE3142:
 7382              	.LBE3141:
 7383              	.LBB3146:
 7384              	.LBI3146:
 964:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{
 7385              		.loc 3 964 2 is_stmt 1 view .LVU1848
 7386              	.LBB3147:
 7387              	.LBB3148:
 7388              	.LBI3148:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 7389              		.loc 3 433 22 view .LVU1849
 7390              	.LBB3149:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7391              		.loc 3 434 58 is_stmt 0 view .LVU1850
 7392 003c 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 7393              	.LVL497:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7394              		.loc 3 434 58 view .LVU1851
 7395              	.LBE3149:
 7396              	.LBE3148:
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 7397              		.loc 3 971 47 view .LVU1852
 7398 0040 002B     		cmp	r3, #0
 7399 0042 44D0     		beq	.L297
 7400 0044 0BAB     		add	r3, sp, #44
 7401              	.LVL498:
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 7402              		.loc 3 971 47 view .LVU1853
 7403 0046 93E80300 		ldm	r3, {r0, r1}
 7404 004a 1EAB     		add	r3, sp, #120
 7405              	.LVL499:
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 7406              		.loc 3 971 47 view .LVU1854
 7407 004c 03E90300 		stmdb	r3, {r0, r1}
 7408              	.L298:
 7409 0050 1AAB     		add	r3, sp, #104
 7410 0052 1EAA     		add	r2, sp, #120
 7411 0054 12E90300 		ldmdb	r2, {r0, r1}
 7412 0058 83E80300 		stm	r3, {r0, r1}
 7413              	.LVL500:
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 7414              		.loc 3 971 47 view .LVU1855
 7415              	.LBE3147:
 7416              	.LBE3146:
ARM GAS  /tmp/ccofeNgA.s 			page 332


 524:MotorControl/motor.cpp ****     // Load effective current limit
 7417              		.loc 2 524 51 view .LVU1856
 7418 005c 07AA     		add	r2, sp, #28
 7419 005e 82E80300 		stm	r2, {r0, r1}
 7420              	.LVL501:
 7421              	.LBB3151:
 7422              	.LBI3151:
 7423              		.file 20 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // <utility> -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** /*
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  *
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  *
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  *
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  *
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * Copyright (c) 1996,1997
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  *
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  */
ARM GAS  /tmp/ccofeNgA.s 			page 333


  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** /** @file include/utility
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  *  This is a Standard C++ Library header.
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  */
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #ifndef _GLIBCXX_UTILITY
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #define _GLIBCXX_UTILITY 1
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #pragma GCC system_header
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** /**
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * @defgroup utilities Utilities
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  *
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * Components deemed generally useful. Includes pair, tuple,
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * forward/move helpers, ratio, function object, metaprogramming and
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  * type traits, time, date, and memory functions.
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****  */
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #include <bits/c++config.h>
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #include <bits/stl_relops.h>
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #include <bits/stl_pair.h>
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #if __cplusplus >= 201103L
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #include <type_traits>
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #include <bits/move.h>
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #include <initializer_list>
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #if __cplusplus > 201703L
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #include <ext/numeric_traits.h>
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #endif
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** namespace std _GLIBCXX_VISIBILITY(default)
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** {
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   /// Finds the size of a given tuple type.
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<typename _Tp>
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct tuple_size;
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   // 2313. tuple_size should always derive from integral_constant<size_t, N>
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   // 2770. tuple_size<const T> specialization is not SFINAE compatible
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<typename _Tp,
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 	   typename _Up = typename remove_cv<_Tp>::type,
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 	   typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 	   size_t = tuple_size<_Tp>::value>
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     using __enable_if_has_tuple_size = _Tp;
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<typename _Tp>
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     : public tuple_size<_Tp> { };
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<typename _Tp>
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     : public tuple_size<_Tp> { };
ARM GAS  /tmp/ccofeNgA.s 			page 334


 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<typename _Tp>
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     : public tuple_size<_Tp> { };
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   /// Gives the type of the ith element of a given tuple type.
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<std::size_t __i, typename _Tp>
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct tuple_element;
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   // Duplicate of C++14's tuple_element_t for internal use in C++11 mode
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<std::size_t __i, typename _Tp>
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     using __tuple_element_t = typename tuple_element<__i, _Tp>::type;
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<std::size_t __i, typename _Tp>
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct tuple_element<__i, const _Tp>
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     {
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****       typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     };
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<std::size_t __i, typename _Tp>
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct tuple_element<__i, volatile _Tp>
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     {
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****       typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     };
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<std::size_t __i, typename _Tp>
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct tuple_element<__i, const volatile _Tp>
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     {
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****       typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     };
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #if __cplusplus >= 201402L
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // The standard says this macro and alias template should be in <tuple>
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // but we define them here, to be available when the partial specializations
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** // of tuple_element<pair<T,U>> and tuple_element<array<T,N>> are defined.
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #define __cpp_lib_tuple_element_t 201402L
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<std::size_t __i, typename _Tp>
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     using tuple_element_t = typename tuple_element<__i, _Tp>::type;
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** #endif
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   // Various functions which give std::pair a tuple-like interface.
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   /// Partial specialization for std::pair
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<typename _T1, typename _T2>
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     { };
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   /// Partial specialization for std::pair
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<class _Tp1, class _Tp2>
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct tuple_size<std::pair<_Tp1, _Tp2>>
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     : public integral_constant<std::size_t, 2> { };
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   /// Partial specialization for std::pair
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<class _Tp1, class _Tp2>
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct tuple_element<0, std::pair<_Tp1, _Tp2>>
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     { typedef _Tp1 type; };
ARM GAS  /tmp/ccofeNgA.s 			page 335


 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   /// Partial specialization for std::pair
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<class _Tp1, class _Tp2>
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct tuple_element<1, std::pair<_Tp1, _Tp2>>
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     { typedef _Tp2 type; };
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<std::size_t _Int>
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct __pair_get;
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<>
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct __pair_get<0>
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     {
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****       template<typename _Tp1, typename _Tp2>
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         static constexpr _Tp1&
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return __pair.first; }
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****       template<typename _Tp1, typename _Tp2>
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         static constexpr _Tp1&&
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return std::forward<_Tp1>(__pair.first); }
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****       template<typename _Tp1, typename _Tp2>
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         static constexpr const _Tp1&
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return __pair.first; }
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****       template<typename _Tp1, typename _Tp2>
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         static constexpr const _Tp1&&
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return std::forward<const _Tp1>(__pair.first); }
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     };
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<>
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     struct __pair_get<1>
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     {
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****       template<typename _Tp1, typename _Tp2>
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         static constexpr _Tp2&
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return __pair.second; }
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****       template<typename _Tp1, typename _Tp2>
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         static constexpr _Tp2&&
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return std::forward<_Tp2>(__pair.second); }
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****       template<typename _Tp1, typename _Tp2>
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         static constexpr const _Tp2&
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return __pair.second; }
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****       template<typename _Tp1, typename _Tp2>
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         static constexpr const _Tp2&&
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return std::forward<const _Tp2>(__pair.second); }
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     };
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
ARM GAS  /tmp/ccofeNgA.s 			page 336


 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<std::size_t _Int, class _Tp1, class _Tp2>
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     get(std::pair<_Tp1, _Tp2>& __in) noexcept
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     { return __pair_get<_Int>::__get(__in); }
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility **** 
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****   template<std::size_t _Int, class _Tp1, class _Tp2>
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****     get(std::pair<_Tp1, _Tp2>&& __in) noexcept
 7424              		.loc 20 228 5 is_stmt 1 view .LVU1857
 7425              	.LBB3152:
 7426              	.LBI3152:
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return std::forward<_Tp1>(__pair.first); }
 7427              		.loc 20 183 9 view .LVU1858
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return std::forward<_Tp1>(__pair.first); }
 7428              		.loc 20 183 9 is_stmt 0 view .LVU1859
 7429              	.LBE3152:
 7430              	.LBE3151:
 7431              	.LBB3153:
 7432              	.LBI3153:
 7433              		.loc 20 228 5 is_stmt 1 view .LVU1860
 7434              	.LBB3154:
 7435              	.LBI3154:
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return std::forward<_Tp2>(__pair.second); }
 7436              		.loc 20 207 9 view .LVU1861
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/utility ****         { return std::forward<_Tp2>(__pair.second); }
 7437              		.loc 20 207 9 is_stmt 0 view .LVU1862
 7438              	.LBE3154:
 7439              	.LBE3153:
 526:MotorControl/motor.cpp **** 
 7440              		.loc 2 526 5 is_stmt 1 view .LVU1863
 526:MotorControl/motor.cpp **** 
 7441              		.loc 2 526 18 is_stmt 0 view .LVU1864
 7442 0062 D4F88410 		ldr	r1, [r4, #132]
 526:MotorControl/motor.cpp **** 
 7443              		.loc 2 526 25 view .LVU1865
 7444 0066 D1F85831 		ldr	r3, [r1, #344]
 526:MotorControl/motor.cpp **** 
 7445              		.loc 2 526 32 view .LVU1866
 7446 006a 93ED5C0A 		vldr.32	s0, [r3, #368]
 7447              	.LVL502:
 529:MotorControl/motor.cpp ****         float abs_iq = std::abs(iq);
 7448              		.loc 2 529 5 is_stmt 1 view .LVU1867
 7449              	.LBB3155:
 529:MotorControl/motor.cpp ****         float abs_iq = std::abs(iq);
 7450              		.loc 2 529 32 is_stmt 0 view .LVU1868
 7451 006e 93F83820 		ldrb	r2, [r3, #56]	@ zero_extendqisi2
 7452              	.LVL503:
 529:MotorControl/motor.cpp ****         float abs_iq = std::abs(iq);
 7453              		.loc 2 529 5 view .LVU1869
 7454 0072 032A     		cmp	r2, #3
 7455 0074 32D0     		beq	.L347
 7456              	.L299:
 535:MotorControl/motor.cpp ****     }
 7457              		.loc 2 535 9 is_stmt 1 view .LVU1870
 535:MotorControl/motor.cpp ****     }
 7458              		.loc 2 535 34 is_stmt 0 view .LVU1871
 7459 0076 DFEDBC7A 		vldr.32	s15, .L355
ARM GAS  /tmp/ccofeNgA.s 			page 337


 7460 007a 60EE676A 		vnmul.f32	s13, s0, s15
 7461 007e CDED116A 		vstr.32	s13, [sp, #68]
 535:MotorControl/motor.cpp ****     }
 7462              		.loc 2 535 46 view .LVU1872
 7463 0082 60EE277A 		vmul.f32	s15, s0, s15
 7464 0086 CDED127A 		vstr.32	s15, [sp, #72]
 7465              	.LVL504:
 7466              	.LBB3156:
 7467              	.LBI3156:
3680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 7468              		.loc 18 3680 5 is_stmt 1 view .LVU1873
 7469              	.LBB3157:
 7470              		.loc 18 3683 21 is_stmt 0 view .LVU1874
 7471 008a 9DED076A 		vldr.32	s12, [sp, #28]
 7472              		.loc 18 3683 29 view .LVU1875
 7473 008e F4EEC66A 		vcmpe.f32	s13, s12
 7474 0092 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7475 0096 5BDC     		bgt	.L328
 7476 0098 F4EEC67A 		vcmpe.f32	s15, s12
 7477 009c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7478 00a0 40F18480 		bpl	.L342
 7479 00a4 12A8     		add	r0, sp, #72
 7480              	.LVL505:
 7481              		.loc 18 3683 29 view .LVU1876
 7482 00a6 54E0     		b	.L306
 7483              	.LVL506:
 7484              	.L345:
 7485              		.loc 18 3683 29 view .LVU1877
 7486              	.LBE3157:
 7487              	.LBE3156:
 7488              	.LBE3155:
 517:MotorControl/motor.cpp ****         return;
 7489              		.loc 2 517 9 is_stmt 1 view .LVU1878
 517:MotorControl/motor.cpp ****         return;
 7490              		.loc 2 517 19 is_stmt 0 view .LVU1879
 7491 00a8 4FF08052 		mov	r2, #268435456
 7492 00ac 0023     		movs	r3, #0
 7493 00ae 04F19000 		add	r0, r4, #144
 7494 00b2 FFF7FEFF 		bl	_ZoRRN10ODriveIntf9MotorIntf5ErrorES1_
 7495              	.LVL507:
 518:MotorControl/motor.cpp ****     }
 7496              		.loc 2 518 9 is_stmt 1 view .LVU1880
 7497 00b6 4BE1     		b	.L292
 7498              	.LVL508:
 7499              	.L346:
 7500              	.LBB3170:
 7501              	.LBB3140:
  90:./MotorControl/component.hpp ****         } else {
 7502              		.loc 17 90 20 is_stmt 0 view .LVU1881
 7503 00b8 04F5D073 		add	r3, r4, #416
 7504              	.LVL509:
 7505              	.LBB3121:
 7506              	.LBI3121:
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 7507              		.loc 3 700 2 is_stmt 1 view .LVU1882
 7508              	.LBB3122:
 7509              	.LBB3123:
ARM GAS  /tmp/ccofeNgA.s 			page 338


 7510              	.LBB3124:
 7511              	.LBI3124:
 7512              		.loc 5 76 5 view .LVU1883
 7513              		.loc 5 76 5 is_stmt 0 view .LVU1884
 7514              	.LBE3124:
 7515              	.LBB3125:
 7516              	.LBI3125:
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****         : _M_payload(in_place,
 7517              		.loc 3 607 28 is_stmt 1 view .LVU1885
 7518              	.LBB3126:
 7519              	.LBB3127:
 7520              	.LBB3128:
 7521              	.LBI3128:
 7522              		.loc 5 76 5 view .LVU1886
 7523              		.loc 5 76 5 is_stmt 0 view .LVU1887
 7524              	.LBE3128:
 7525              	.LBB3129:
 7526              	.LBI3129:
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7527              		.loc 3 358 42 is_stmt 1 view .LVU1888
 7528              	.LBB3130:
 7529              	.LBB3131:
 7530              	.LBB3132:
 7531              	.LBI3132:
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	: _M_payload(__tag, std::forward<_Args>(__args)...),
 7532              		.loc 3 115 2 view .LVU1889
 7533              	.LBB3133:
 7534              	.LBB3134:
 7535              	.LBB3135:
 7536              	.LBI3135:
 7537              		.loc 5 76 5 view .LVU1890
 7538              		.loc 5 76 5 is_stmt 0 view .LVU1891
 7539              	.LBE3135:
 7540              	.LBB3136:
 7541              	.LBI3136:
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    : _M_value(std::forward<_Args>(__args)...)
 7542              		.loc 3 203 6 is_stmt 1 view .LVU1892
 7543              	.LBB3137:
 7544              	.LBB3138:
 7545              	.LBB3139:
 7546              	.LBI3139:
 7547              		.loc 5 76 5 view .LVU1893
 7548              	.LBE3139:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 7549              		.loc 3 204 47 is_stmt 0 view .LVU1894
 7550 00bc 0BAA     		add	r2, sp, #44
 7551              	.LVL510:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 7552              		.loc 3 204 47 view .LVU1895
 7553 00be 93E80300 		ldm	r3, {r0, r1}
 7554 00c2 82E80300 		stm	r2, {r0, r1}
 7555              	.LVL511:
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	    { }
 7556              		.loc 3 204 47 view .LVU1896
 7557              	.LBE3138:
 7558              	.LBE3137:
 7559              	.LBE3136:
ARM GAS  /tmp/ccofeNgA.s 			page 339


 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 7560              		.loc 3 117 19 view .LVU1897
 7561 00c6 0123     		movs	r3, #1
 7562 00c8 8DF83430 		strb	r3, [sp, #52]
 7563              	.LVL512:
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	{ }
 7564              		.loc 3 117 19 view .LVU1898
 7565              	.LBE3134:
 7566              	.LBE3133:
 7567              	.LBE3132:
 7568              	.LBE3131:
 7569              	.LBE3130:
 7570              	.LBE3129:
 7571              	.LBE3127:
 7572              	.LBE3126:
 7573              	.LBE3125:
 7574              	.LBE3123:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7575              		.loc 3 701 51 view .LVU1899
 7576 00cc B3E7     		b	.L296
 7577              	.LVL513:
 7578              	.L297:
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 7579              		.loc 3 701 51 view .LVU1900
 7580              	.LBE3122:
 7581              	.LBE3121:
 7582              	.LBE3140:
 7583              	.LBE3170:
 7584              	.LBB3171:
 7585              	.LBB3150:
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 7586              		.loc 3 971 47 view .LVU1901
 7587 00ce 0EAB     		add	r3, sp, #56
 7588              	.LVL514:
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 7589              		.loc 3 971 47 view .LVU1902
 7590 00d0 93E80300 		ldm	r3, {r0, r1}
 7591 00d4 1EAB     		add	r3, sp, #120
 7592              	.LVL515:
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 7593              		.loc 3 971 47 view .LVU1903
 7594 00d6 03E90300 		stmdb	r3, {r0, r1}
 7595 00da B9E7     		b	.L298
 7596              	.LVL516:
 7597              	.L347:
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 	}
 7598              		.loc 3 971 47 view .LVU1904
 7599              	.LBE3150:
 7600              	.LBE3171:
 7601              	.LBB3172:
 529:MotorControl/motor.cpp ****         float abs_iq = std::abs(iq);
 7602              		.loc 2 529 81 discriminator 1 view .LVU1905
 7603 00dc 94F86000 		ldrb	r0, [r4, #96]	@ zero_extendqisi2
 529:MotorControl/motor.cpp ****         float abs_iq = std::abs(iq);
 7604              		.loc 2 529 70 discriminator 1 view .LVU1906
 7605 00e0 0028     		cmp	r0, #0
 7606 00e2 C8D0     		beq	.L299
ARM GAS  /tmp/ccofeNgA.s 			page 340


 7607              	.LBB3160:
 530:MotorControl/motor.cpp ****         float gain = abs_iq > id ? config_.acim_autoflux_attack_gain : config_.acim_autoflux_decay_
 7608              		.loc 2 530 9 is_stmt 1 view .LVU1907
 530:MotorControl/motor.cpp ****         float gain = abs_iq > id ? config_.acim_autoflux_attack_gain : config_.acim_autoflux_decay_
 7609              		.loc 2 530 32 is_stmt 0 view .LVU1908
 7610 00e4 DDED087A 		vldr.32	s15, [sp, #32]
 7611              	.LVL517:
 7612              	.LBB3161:
 7613              	.LBI3161:
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h ****   { return __builtin_fabsf(__x); }
 7614              		.loc 7 75 3 is_stmt 1 view .LVU1909
 7615              	.LBB3162:
 7616              		.loc 7 76 5 view .LVU1910
 7617              		.loc 7 76 31 is_stmt 0 view .LVU1911
 7618 00e8 F0EEE77A 		vabs.f32	s15, s15
 7619              	.LVL518:
 7620              		.loc 7 76 31 view .LVU1912
 7621              	.LBE3162:
 7622              	.LBE3161:
 531:MotorControl/motor.cpp ****         id += gain * (abs_iq - id) * current_meas_period;
 7623              		.loc 2 531 9 is_stmt 1 view .LVU1913
 531:MotorControl/motor.cpp ****         id += gain * (abs_iq - id) * current_meas_period;
 7624              		.loc 2 531 31 is_stmt 0 view .LVU1914
 7625 00ec DDED076A 		vldr.32	s13, [sp, #28]
 531:MotorControl/motor.cpp ****         id += gain * (abs_iq - id) * current_meas_period;
 7626              		.loc 2 531 34 view .LVU1915
 7627 00f0 F4EEE76A 		vcmpe.f32	s13, s15
 7628 00f4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7629 00f8 25D5     		bpl	.L340
 531:MotorControl/motor.cpp ****         id += gain * (abs_iq - id) * current_meas_period;
 7630              		.loc 2 531 34 discriminator 1 view .LVU1916
 7631 00fa 94ED196A 		vldr.32	s12, [r4, #100]
 7632              	.L302:
 7633              	.LVL519:
 532:MotorControl/motor.cpp ****         id = std::clamp(id, config_.acim_autoflux_min_Id, 0.9f * ilim); // 10% space reserved for I
 7634              		.loc 2 532 9 is_stmt 1 discriminator 4 view .LVU1917
 532:MotorControl/motor.cpp ****         id = std::clamp(id, config_.acim_autoflux_min_Id, 0.9f * ilim); // 10% space reserved for I
 7635              		.loc 2 532 30 is_stmt 0 discriminator 4 view .LVU1918
 7636 00fe 77EEE67A 		vsub.f32	s15, s15, s13
 7637              	.LVL520:
 532:MotorControl/motor.cpp ****         id = std::clamp(id, config_.acim_autoflux_min_Id, 0.9f * ilim); // 10% space reserved for I
 7638              		.loc 2 532 20 discriminator 4 view .LVU1919
 7639 0102 67EE867A 		vmul.f32	s15, s15, s12
 532:MotorControl/motor.cpp ****         id = std::clamp(id, config_.acim_autoflux_min_Id, 0.9f * ilim); // 10% space reserved for I
 7640              		.loc 2 532 36 discriminator 4 view .LVU1920
 7641 0106 9FED996A 		vldr.32	s12, .L355+4
 7642              	.LVL521:
 532:MotorControl/motor.cpp ****         id = std::clamp(id, config_.acim_autoflux_min_Id, 0.9f * ilim); // 10% space reserved for I
 7643              		.loc 2 532 36 discriminator 4 view .LVU1921
 7644 010a 67EE867A 		vmul.f32	s15, s15, s12
 532:MotorControl/motor.cpp ****         id = std::clamp(id, config_.acim_autoflux_min_Id, 0.9f * ilim); // 10% space reserved for I
 7645              		.loc 2 532 12 discriminator 4 view .LVU1922
 7646 010e 76EEA77A 		vadd.f32	s15, s13, s15
 7647 0112 CDED077A 		vstr.32	s15, [sp, #28]
 533:MotorControl/motor.cpp ****     } else {
 7648              		.loc 2 533 9 is_stmt 1 discriminator 4 view .LVU1923
 533:MotorControl/motor.cpp ****     } else {
ARM GAS  /tmp/ccofeNgA.s 			page 341


 7649              		.loc 2 533 37 is_stmt 0 discriminator 4 view .LVU1924
 7650 0116 04F15C00 		add	r0, r4, #92
 533:MotorControl/motor.cpp ****     } else {
 7651              		.loc 2 533 64 discriminator 4 view .LVU1925
 7652 011a DFED956A 		vldr.32	s13, .L355+8
 7653 011e 60EE266A 		vmul.f32	s13, s0, s13
 7654 0122 CDED106A 		vstr.32	s13, [sp, #64]
 7655              	.LVL522:
 7656              	.LBB3163:
 7657              	.LBI3163:
3680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 7658              		.loc 18 3680 5 is_stmt 1 discriminator 4 view .LVU1926
 7659              	.LBB3164:
 7660              		.loc 18 3683 21 is_stmt 0 discriminator 4 view .LVU1927
 7661 0126 94ED176A 		vldr.32	s12, [r4, #92]
 7662              		.loc 18 3683 29 discriminator 4 view .LVU1928
 7663 012a F4EEC67A 		vcmpe.f32	s15, s12
 7664 012e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7665 0132 05D4     		bmi	.L303
 7666              		.loc 18 3683 29 view .LVU1929
 7667 0134 F4EEE67A 		vcmpe.f32	s15, s13
 7668 0138 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7669 013c 06DD     		ble	.L341
 7670 013e 10A8     		add	r0, sp, #64
 7671              	.LVL523:
 7672              	.L303:
 7673              		.loc 18 3683 29 view .LVU1930
 7674              	.LBE3164:
 7675              	.LBE3163:
 533:MotorControl/motor.cpp ****     } else {
 7676              		.loc 2 533 24 view .LVU1931
 7677 0140 0068     		ldr	r0, [r0]	@ float
 533:MotorControl/motor.cpp ****     } else {
 7678              		.loc 2 533 12 view .LVU1932
 7679 0142 0790     		str	r0, [sp, #28]	@ float
 7680              	.LBE3160:
 533:MotorControl/motor.cpp ****     } else {
 7681              		.loc 2 533 71 view .LVU1933
 7682 0144 07E0     		b	.L305
 7683              	.LVL524:
 7684              	.L340:
 7685              	.LBB3167:
 531:MotorControl/motor.cpp ****         id += gain * (abs_iq - id) * current_meas_period;
 7686              		.loc 2 531 34 discriminator 2 view .LVU1934
 7687 0146 94ED1A6A 		vldr.32	s12, [r4, #104]
 7688 014a D8E7     		b	.L302
 7689              	.LVL525:
 7690              	.L341:
 7691              	.LBB3166:
 7692              	.LBB3165:
 7693              		.loc 18 3683 29 view .LVU1935
 7694 014c 07A8     		add	r0, sp, #28
 7695              	.LVL526:
 7696              		.loc 18 3683 29 view .LVU1936
 7697 014e F7E7     		b	.L303
 7698              	.LVL527:
 7699              	.L328:
ARM GAS  /tmp/ccofeNgA.s 			page 342


 7700              		.loc 18 3683 29 view .LVU1937
 7701              	.LBE3165:
 7702              	.LBE3166:
 7703              	.LBE3167:
 7704              	.LBB3168:
 7705              	.LBB3158:
 7706 0150 11A8     		add	r0, sp, #68
 7707              	.LVL528:
 7708              	.L306:
 7709              		.loc 18 3683 29 view .LVU1938
 7710              	.LBE3158:
 7711              	.LBE3168:
 535:MotorControl/motor.cpp ****     }
 7712              		.loc 2 535 24 view .LVU1939
 7713 0152 0068     		ldr	r0, [r0]	@ float
 535:MotorControl/motor.cpp ****     }
 7714              		.loc 2 535 12 view .LVU1940
 7715 0154 0790     		str	r0, [sp, #28]	@ float
 7716              	.L305:
 535:MotorControl/motor.cpp ****     }
 7717              		.loc 2 535 12 view .LVU1941
 7718              	.LBE3172:
 539:MotorControl/motor.cpp ****         iq = torque / (axis_->motor_.config_.torque_constant * std::max(axis_->acim_estimator_.roto
 7719              		.loc 2 539 5 is_stmt 1 view .LVU1942
 7720 0156 032A     		cmp	r2, #3
 7721 0158 2AD0     		beq	.L348
 542:MotorControl/motor.cpp ****     }
 7722              		.loc 2 542 9 view .LVU1943
 542:MotorControl/motor.cpp ****     }
 7723              		.loc 2 542 45 is_stmt 0 view .LVU1944
 7724 015a D3ED0D6A 		vldr.32	s13, [r3, #52]
 542:MotorControl/motor.cpp ****     }
 7725              		.loc 2 542 21 view .LVU1945
 7726 015e C7EE267A 		vdiv.f32	s15, s14, s13
 542:MotorControl/motor.cpp ****     }
 7727              		.loc 2 542 12 view .LVU1946
 7728 0162 CDED087A 		vstr.32	s15, [sp, #32]
 7729              	.L310:
 546:MotorControl/motor.cpp ****     float Iq_lim = (iq_lim_sqr <= 0.0f) ? 0.0f : sqrt(iq_lim_sqr);
 7730              		.loc 2 546 5 is_stmt 1 view .LVU1947
 7731              	.LVL529:
 7732              	.LBB3173:
 7733              	.LBI3173:
  84:./MotorControl/utils.hpp ****     return x * x;
 7734              		.loc 19 84 13 view .LVU1948
 7735              	.LBB3174:
  85:./MotorControl/utils.hpp **** }
 7736              		.loc 19 85 16 is_stmt 0 view .LVU1949
 7737 0166 20EE000A 		vmul.f32	s0, s0, s0
 7738              	.LVL530:
  85:./MotorControl/utils.hpp **** }
 7739              		.loc 19 85 16 view .LVU1950
 7740              	.LBE3174:
 7741              	.LBE3173:
 7742              	.LBB3175:
 7743              	.LBI3175:
  84:./MotorControl/utils.hpp ****     return x * x;
ARM GAS  /tmp/ccofeNgA.s 			page 343


 7744              		.loc 19 84 13 is_stmt 1 view .LVU1951
 7745              	.LBB3176:
  85:./MotorControl/utils.hpp **** }
 7746              		.loc 19 85 14 is_stmt 0 view .LVU1952
 7747 016a DDED077A 		vldr.32	s15, [sp, #28]
  85:./MotorControl/utils.hpp **** }
 7748              		.loc 19 85 16 view .LVU1953
 7749 016e 67EEA77A 		vmul.f32	s15, s15, s15
 7750              	.LVL531:
  85:./MotorControl/utils.hpp **** }
 7751              		.loc 19 85 16 view .LVU1954
 7752              	.LBE3176:
 7753              	.LBE3175:
 546:MotorControl/motor.cpp ****     float Iq_lim = (iq_lim_sqr <= 0.0f) ? 0.0f : sqrt(iq_lim_sqr);
 7754              		.loc 2 546 40 view .LVU1955
 7755 0172 30EE670A 		vsub.f32	s0, s0, s15
 7756              	.LVL532:
 547:MotorControl/motor.cpp ****     iq = std::clamp(iq, -Iq_lim, Iq_lim);
 7757              		.loc 2 547 5 is_stmt 1 view .LVU1956
 547:MotorControl/motor.cpp ****     iq = std::clamp(iq, -Iq_lim, Iq_lim);
 7758              		.loc 2 547 41 is_stmt 0 view .LVU1957
 7759 0176 B5EEC00A 		vcmpe.f32	s0, #0
 7760 017a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7761 017e 30D8     		bhi	.L349
 7762 0180 9FED7C0A 		vldr.32	s0, .L355+12
 7763              	.LVL533:
 7764              	.L311:
 547:MotorControl/motor.cpp ****     iq = std::clamp(iq, -Iq_lim, Iq_lim);
 7765              		.loc 2 547 65 discriminator 4 view .LVU1958
 7766 0184 8DED060A 		vstr.32	s0, [sp, #24]
 548:MotorControl/motor.cpp **** 
 7767              		.loc 2 548 5 is_stmt 1 discriminator 4 view .LVU1959
 548:MotorControl/motor.cpp **** 
 7768              		.loc 2 548 25 is_stmt 0 discriminator 4 view .LVU1960
 7769 0188 F1EE407A 		vneg.f32	s15, s0
 7770 018c CDED137A 		vstr.32	s15, [sp, #76]
 7771              	.LVL534:
 7772              	.LBB3177:
 7773              	.LBI3177:
3680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algo.h ****     {
 7774              		.loc 18 3680 5 is_stmt 1 discriminator 4 view .LVU1961
 7775              	.LBB3178:
 7776              		.loc 18 3683 21 is_stmt 0 discriminator 4 view .LVU1962
 7777 0190 9DED087A 		vldr.32	s14, [sp, #32]
 7778              		.loc 18 3683 29 discriminator 4 view .LVU1963
 7779 0194 F4EEC77A 		vcmpe.f32	s15, s14
 7780 0198 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7781 019c 24DC     		bgt	.L331
 7782              		.loc 18 3683 29 view .LVU1964
 7783 019e B4EEC70A 		vcmpe.f32	s0, s14
 7784 01a2 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7785 01a6 45D5     		bpl	.L343
 7786 01a8 06AB     		add	r3, sp, #24
 7787              	.LVL535:
 7788              		.loc 18 3683 29 view .LVU1965
 7789 01aa 1EE0     		b	.L312
 7790              	.LVL536:
ARM GAS  /tmp/ccofeNgA.s 			page 344


 7791              	.L342:
 7792              		.loc 18 3683 29 view .LVU1966
 7793              	.LBE3178:
 7794              	.LBE3177:
 7795              	.LBB3181:
 7796              	.LBB3169:
 7797              	.LBB3159:
 7798 01ac 07A8     		add	r0, sp, #28
 7799              	.LVL537:
 7800              		.loc 18 3683 29 view .LVU1967
 7801 01ae D0E7     		b	.L306
 7802              	.LVL538:
 7803              	.L348:
 7804              		.loc 18 3683 29 view .LVU1968
 7805              	.LBE3159:
 7806              	.LBE3169:
 7807              	.LBE3181:
 540:MotorControl/motor.cpp ****     } else {
 7808              		.loc 2 540 9 is_stmt 1 view .LVU1969
 540:MotorControl/motor.cpp ****     } else {
 7809              		.loc 2 540 46 is_stmt 0 view .LVU1970
 7810 01b0 D3ED0D7A 		vldr.32	s15, [r3, #52]
 540:MotorControl/motor.cpp ****     } else {
 7811              		.loc 2 540 96 view .LVU1971
 7812 01b4 01F1DC02 		add	r2, r1, #220
 540:MotorControl/motor.cpp ****     } else {
 7813              		.loc 2 540 117 view .LVU1972
 7814 01b8 04F15803 		add	r3, r4, #88
 7815              	.LVL539:
 7816              	.LBB3182:
 7817              	.LBI3182:
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 7818              		.loc 11 254 5 is_stmt 1 view .LVU1973
 7819              	.LBB3183:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 7820              		.loc 11 259 15 is_stmt 0 view .LVU1974
 7821 01bc 91ED376A 		vldr.32	s12, [r1, #220]
 7822 01c0 D4ED166A 		vldr.32	s13, [r4, #88]
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 7823              		.loc 11 259 7 view .LVU1975
 7824 01c4 B4EEE66A 		vcmpe.f32	s12, s13
 7825 01c8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 7826 01cc 00D4     		bmi	.L309
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 7827              		.loc 11 261 14 view .LVU1976
 7828 01ce 1346     		mov	r3, r2
 7829              	.LVL540:
 7830              	.L309:
 7831              		.loc 11 261 14 view .LVU1977
 7832              	.LBE3183:
 7833              	.LBE3182:
 540:MotorControl/motor.cpp ****     } else {
 7834              		.loc 2 540 72 view .LVU1978
 7835 01d0 D3ED006A 		vldr.32	s13, [r3]
 540:MotorControl/motor.cpp ****     } else {
 7836              		.loc 2 540 62 view .LVU1979
 7837 01d4 67EEA67A 		vmul.f32	s15, s15, s13
ARM GAS  /tmp/ccofeNgA.s 			page 345


 540:MotorControl/motor.cpp ****     } else {
 7838              		.loc 2 540 21 view .LVU1980
 7839 01d8 C7EE276A 		vdiv.f32	s13, s14, s15
 540:MotorControl/motor.cpp ****     } else {
 7840              		.loc 2 540 12 view .LVU1981
 7841 01dc CDED086A 		vstr.32	s13, [sp, #32]
 7842 01e0 C1E7     		b	.L310
 7843              	.LVL541:
 7844              	.L349:
 7845              	.LBB3184:
 7846              	.LBI3184:
 7847              		.file 21 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // -*- C++ -*- C forwarding header.
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** /** @file include/cmath
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  This is a Standard C++ Library file.  You should @c \#include this file
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  in your programs, rather than any of the @a *.h implementation files.
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  This is the C++ version of the Standard C Library header @c math.h,
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  and its contents are (mostly) the same as that header, but are all
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  contained in the namespace @c std (except for names which are defined
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  *  as macros in C).
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****  */
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** //
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // ISO C++ 14882: 26.5  C library
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** //
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #pragma GCC system_header
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <bits/c++config.h>
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <bits/cpp_type_traits.h>
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <ext/type_traits.h>
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #define _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include_next <math.h>
ARM GAS  /tmp/ccofeNgA.s 			page 346


  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #include <bits/std_abs.h>
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef _GLIBCXX_CMATH
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #define _GLIBCXX_CMATH 1
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** // Get rid of those macros defined in <math.h> in lieu of real functions.
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef div
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef acos
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef asin
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef atan
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef atan2
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef ceil
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef cos
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef cosh
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef exp
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fabs
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef floor
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef fmod
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef frexp
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef ldexp
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef log10
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef modf
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef pow
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef sin
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef sinh
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef sqrt
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef tan
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #undef tanh
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** extern "C++"
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** {
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** {
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::acos;
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   acos(float __x)
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_acosf(__x); }
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   acos(long double __x)
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_acosl(__x); }
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     acos(_Tp __x)
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_acos(__x); }
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::asin;
ARM GAS  /tmp/ccofeNgA.s 			page 347


 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   asin(float __x)
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_asinf(__x); }
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   asin(long double __x)
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_asinl(__x); }
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     asin(_Tp __x)
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_asin(__x); }
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::atan;
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan(float __x)
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atanf(__x); }
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan(long double __x)
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atanl(__x); }
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     atan(_Tp __x)
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_atan(__x); }
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::atan2;
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan2(float __y, float __x)
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atan2f(__y, __x); }
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   atan2(long double __y, long double __x)
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_atan2l(__y, __x); }
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     atan2(_Tp __y, _Up __x)
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return atan2(__type(__y), __type(__x));
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
ARM GAS  /tmp/ccofeNgA.s 			page 348


 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::ceil;
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ceil(float __x)
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ceilf(__x); }
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ceil(long double __x)
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ceill(__x); }
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     ceil(_Tp __x)
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_ceil(__x); }
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::cos;
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cos(float __x)
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_cosf(__x); }
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cos(long double __x)
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_cosl(__x); }
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     cos(_Tp __x)
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_cos(__x); }
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::cosh;
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cosh(float __x)
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_coshf(__x); }
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   cosh(long double __x)
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_coshl(__x); }
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     cosh(_Tp __x)
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_cosh(__x); }
ARM GAS  /tmp/ccofeNgA.s 			page 349


 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::exp;
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   exp(float __x)
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_expf(__x); }
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   exp(long double __x)
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_expl(__x); }
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     exp(_Tp __x)
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_exp(__x); }
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fabs;
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fabs(float __x)
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fabsf(__x); }
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fabs(long double __x)
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fabsl(__x); }
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     fabs(_Tp __x)
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_fabs(__x); }
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::floor;
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   floor(float __x)
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_floorf(__x); }
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   floor(long double __x)
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_floorl(__x); }
 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     floor(_Tp __x)
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_floor(__x); }
ARM GAS  /tmp/ccofeNgA.s 			page 350


 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::fmod;
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fmod(float __x, float __y)
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fmodf(__x, __y); }
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   fmod(long double __x, long double __y)
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_fmodl(__x, __y); }
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     fmod(_Tp __x, _Up __y)
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return fmod(__type(__x), __type(__y));
 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::frexp;
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline float
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   frexp(float __x, int* __exp)
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_frexpf(__x, __exp); }
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline long double
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   frexp(long double __x, int* __exp)
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_frexpl(__x, __exp); }
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     frexp(_Tp __x, int* __exp)
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_frexp(__x, __exp); }
 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::ldexp;
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ldexp(float __x, int __exp)
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ldexpf(__x, __exp); }
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   ldexp(long double __x, int __exp)
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_ldexpl(__x, __exp); }
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
ARM GAS  /tmp/ccofeNgA.s 			page 351


 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     ldexp(_Tp __x, int __exp)
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_ldexp(__x, __exp); }
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log;
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log(float __x)
 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_logf(__x); }
 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log(long double __x)
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_logl(__x); }
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     log(_Tp __x)
 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_log(__x); }
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::log10;
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log10(float __x)
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_log10f(__x); }
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   log10(long double __x)
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_log10l(__x); }
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     log10(_Tp __x)
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_log10(__x); }
 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::modf;
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline float
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   modf(float __x, float* __iptr)
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_modff(__x, __iptr); }
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline long double
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   modf(long double __x, long double* __iptr)
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_modfl(__x, __iptr); }
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::pow;
 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
ARM GAS  /tmp/ccofeNgA.s 			page 352


 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(float __x, float __y)
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powf(__x, __y); }
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(long double __x, long double __y)
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powl(__x, __y); }
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #if __cplusplus < 201103L
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   // DR 550. What should the return type of pow(float,int) be?
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline double
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(double __x, int __i)
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powi(__x, __i); }
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline float
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(float __x, int __n)
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powif(__x, __n); }
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline long double
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   pow(long double __x, int __n)
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_powil(__x, __n); }
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp, typename _Up>
 413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     pow(_Tp __x, _Up __y)
 416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     {
 417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
 418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****       return pow(__type(__x), __type(__y));
 419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     }
 420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::sin;
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sin(float __x)
 426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinf(__x); }
 427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sin(long double __x)
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinl(__x); }
 431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     sin(_Tp __x)
 438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_sin(__x); }
 439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::sinh;
 441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sinh(float __x)
ARM GAS  /tmp/ccofeNgA.s 			page 353


 445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinhf(__x); }
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR long double
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sinh(long double __x)
 449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sinhl(__x); }
 450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #endif
 451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   template<typename _Tp>
 453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     inline _GLIBCXX_CONSTEXPR
 454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
 455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****                                     double>::__type
 456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     sinh(_Tp __x)
 457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****     { return __builtin_sinh(__x); }
 458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   using ::sqrt;
 460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** 
 461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath **** #ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
 462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   inline _GLIBCXX_CONSTEXPR float
 463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   sqrt(float __x)
 7848              		.loc 21 463 3 is_stmt 1 view .LVU1982
 7849              	.LBB3185:
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath ****   { return __builtin_sqrtf(__x); }
 7850              		.loc 21 464 5 view .LVU1983
 7851              		.loc 21 464 27 is_stmt 0 view .LVU1984
 7852 01e2 FFF7FEFF 		bl	sqrtf
 7853              	.LVL542:
 7854              		.loc 21 464 27 view .LVU1985
 7855 01e6 CDE7     		b	.L311
 7856              	.LVL543:
 7857              	.L331:
 7858              		.loc 21 464 27 view .LVU1986
 7859              	.LBE3185:
 7860              	.LBE3184:
 7861              	.LBB3186:
 7862              	.LBB3179:
 7863              		.loc 18 3683 29 view .LVU1987
 7864 01e8 13AB     		add	r3, sp, #76
 7865              	.LVL544:
 7866              	.L312:
 7867              		.loc 18 3683 29 view .LVU1988
 7868              	.LBE3179:
 7869              	.LBE3186:
 548:MotorControl/motor.cpp **** 
 7870              		.loc 2 548 20 view .LVU1989
 7871 01ea 1B68     		ldr	r3, [r3]	@ float
 548:MotorControl/motor.cpp **** 
 7872              		.loc 2 548 8 view .LVU1990
 7873 01ec 0893     		str	r3, [sp, #32]	@ float
 550:MotorControl/motor.cpp ****         Idq_setpoint_ = {id, iq};
 7874              		.loc 2 550 5 is_stmt 1 view .LVU1991
 550:MotorControl/motor.cpp ****         Idq_setpoint_ = {id, iq};
 7875              		.loc 2 550 9 is_stmt 0 view .LVU1992
 7876 01ee D4F88480 		ldr	r8, [r4, #132]
 550:MotorControl/motor.cpp ****         Idq_setpoint_ = {id, iq};
 7877              		.loc 2 550 16 view .LVU1993
 7878 01f2 D8F85821 		ldr	r2, [r8, #344]
 550:MotorControl/motor.cpp ****         Idq_setpoint_ = {id, iq};
ARM GAS  /tmp/ccofeNgA.s 			page 354


 7879              		.loc 2 550 31 view .LVU1994
 7880 01f6 92F83820 		ldrb	r2, [r2, #56]	@ zero_extendqisi2
 550:MotorControl/motor.cpp ****         Idq_setpoint_ = {id, iq};
 7881              		.loc 2 550 5 view .LVU1995
 7882 01fa 022A     		cmp	r2, #2
 7883 01fc 0ED0     		beq	.L314
 551:MotorControl/motor.cpp ****     }
 7884              		.loc 2 551 9 is_stmt 1 view .LVU1996
 7885              	.LVL545:
 7886              	.LBB3187:
 7887              	.LBI3187:
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 7888              		.loc 4 352 12 view .LVU1997
 7889              	.LBB3188:
 7890              	.LBB3189:
 7891              	.LBB3190:
 7892              	.LBI3190:
 7893              		.loc 5 76 5 view .LVU1998
 7894              		.loc 5 76 5 is_stmt 0 view .LVU1999
 7895              	.LBE3190:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 7896              		.loc 4 353 64 view .LVU2000
 7897 01fe 079A     		ldr	r2, [sp, #28]	@ float
 7898 0200 1492     		str	r2, [sp, #80]	@ float
 7899              	.LVL546:
 7900              	.LBB3191:
 7901              	.LBI3191:
 7902              		.loc 5 76 5 is_stmt 1 view .LVU2001
 7903              		.loc 5 76 5 is_stmt 0 view .LVU2002
 7904              	.LBE3191:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 7905              		.loc 4 353 64 view .LVU2003
 7906 0202 1593     		str	r3, [sp, #84]	@ float
 7907              	.LVL547:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 7908              		.loc 4 353 64 view .LVU2004
 7909 0204 01AE     		add	r6, sp, #4
 7910 0206 14A9     		add	r1, sp, #80
 7911 0208 03C9     		ldm	r1, {r0, r1}
 7912 020a 86E80300 		stm	r6, {r0, r1}
 7913              	.LBE3189:
 7914              	.LBE3188:
 7915              	.LBE3187:
 7916              	.LBB3192:
 7917              	.LBI3192:
  52:./MotorControl/component.hpp ****         content_ = value;
 7918              		.loc 17 52 10 is_stmt 1 view .LVU2005
 7919              	.LVL548:
 7920              	.LBB3193:
 7921              	.LBB3194:
 7922              	.LBI3194:
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 7923              		.loc 4 390 7 view .LVU2006
 7924              	.LBB3195:
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	second = __p.second;
 7925              		.loc 4 395 8 is_stmt 0 view .LVU2007
 7926 020e C4F8A021 		str	r2, [r4, #416]	@ float
ARM GAS  /tmp/ccofeNgA.s 			page 355


 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return *this;
 7927              		.loc 4 396 9 view .LVU2008
 7928 0212 C4F8A431 		str	r3, [r4, #420]	@ float
 7929              	.LVL549:
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return *this;
 7930              		.loc 4 396 9 view .LVU2009
 7931              	.LBE3195:
 7932              	.LBE3194:
  54:./MotorControl/component.hpp ****     }
 7933              		.loc 17 54 14 view .LVU2010
 7934 0216 0023     		movs	r3, #0
 7935 0218 C4F89C31 		str	r3, [r4, #412]
 7936              	.LVL550:
 7937              	.L314:
  54:./MotorControl/component.hpp ****     }
 7938              		.loc 17 54 14 view .LVU2011
 7939              	.LBE3193:
 7940              	.LBE3192:
 559:MotorControl/motor.cpp ****         axis_->acim_estimator_.update(timestamp);
 7941              		.loc 2 559 5 is_stmt 1 view .LVU2012
 7942              	.LBB3196:
 7943 021c 08F5EE77 		add	r7, r8, #476
 7944              	.LVL551:
 7945              	.LBB3197:
 7946              	.LBI3197:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 7947              		.loc 10 55 5 view .LVU2013
 7948              	.LBB3198:
 7949              	.LBB3199:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 7950              		.loc 10 55 81 is_stmt 0 view .LVU2014
 7951 0220 0197     		str	r7, [sp, #4]
 7952              	.LVL552:
 7953              	.LBB3200:
 7954              	.LBI3200:
  25:MotorControl/task_timer.hpp ****         return sample_TIM13();
 7955              		.loc 10 25 14 is_stmt 1 view .LVU2015
 7956              	.LBB3201:
  26:MotorControl/task_timer.hpp ****     }
 7957              		.loc 10 26 9 view .LVU2016
 7958              	.LBB3202:
 7959              	.LBI3202:
  12:MotorControl/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 7960              		.loc 10 12 17 view .LVU2017
 7961              	.LBB3203:
  13:MotorControl/task_timer.hpp ****     return clocks_per_cnt * TIM13->CNT;  // TODO: Use a hw_config
 7962              		.loc 10 13 5 view .LVU2018
  14:MotorControl/task_timer.hpp **** }
 7963              		.loc 10 14 5 view .LVU2019
  14:MotorControl/task_timer.hpp **** }
 7964              		.loc 10 14 36 is_stmt 0 view .LVU2020
 7965 0222 554B     		ldr	r3, .L355+16
 7966 0224 5E6A     		ldr	r6, [r3, #36]
 7967 0226 7600     		lsls	r6, r6, #1
 7968 0228 B6B2     		uxth	r6, r6
 7969              	.LVL553:
  14:MotorControl/task_timer.hpp **** }
ARM GAS  /tmp/ccofeNgA.s 			page 356


 7970              		.loc 10 14 36 view .LVU2021
 7971              	.LBE3203:
 7972              	.LBE3202:
 7973              	.LBE3201:
 7974              	.LBE3200:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 7975              		.loc 10 55 81 view .LVU2022
 7976 022a 0296     		str	r6, [sp, #8]
 7977 022c 0023     		movs	r3, #0
 7978 022e 8DF80C30 		strb	r3, [sp, #12]
 7979              	.LBE3199:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 7980              		.loc 10 55 84 view .LVU2023
 7981 0232 04E0     		b	.L316
 7982              	.LVL554:
 7983              	.L343:
  55:MotorControl/task_timer.hpp ****     ~TaskTimerContext() { timer_.stop(start_time); }
 7984              		.loc 10 55 84 view .LVU2024
 7985              	.LBE3198:
 7986              	.LBE3197:
 7987              	.LBE3196:
 7988              	.LBB3220:
 7989              	.LBB3180:
 7990              		.loc 18 3683 29 view .LVU2025
 7991 0234 08AB     		add	r3, sp, #32
 7992              	.LVL555:
 7993              		.loc 18 3683 29 view .LVU2026
 7994 0236 D8E7     		b	.L312
 7995              	.LVL556:
 7996              	.L350:
 7997              		.loc 18 3683 29 view .LVU2027
 7998              	.LBE3180:
 7999              	.LBE3220:
 8000              	.LBB3221:
 559:MotorControl/motor.cpp ****         axis_->acim_estimator_.update(timestamp);
 8001              		.loc 2 559 5 is_stmt 1 discriminator 3 view .LVU2028
 8002 0238 0123     		movs	r3, #1
 8003 023a 8DF80C30 		strb	r3, [sp, #12]
 8004              	.L316:
 559:MotorControl/motor.cpp ****         axis_->acim_estimator_.update(timestamp);
 8005              		.loc 2 559 5 discriminator 1 view .LVU2029
 8006 023e 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 8007 0242 33B9     		cbnz	r3, .L315
 560:MotorControl/motor.cpp **** 
 8008              		.loc 2 560 9 view .LVU2030
 8009 0244 D4F88400 		ldr	r0, [r4, #132]
 560:MotorControl/motor.cpp **** 
 8010              		.loc 2 560 38 is_stmt 0 view .LVU2031
 8011 0248 2946     		mov	r1, r5
 8012 024a B030     		adds	r0, r0, #176
 8013              	.LEHB10:
 8014 024c FFF7FEFF 		bl	_ZN13AcimEstimator6updateEm
 8015              	.LVL557:
 8016              	.LEHE10:
 8017 0250 F2E7     		b	.L350
 8018              	.L315:
 8019              	.LVL558:
ARM GAS  /tmp/ccofeNgA.s 			page 357


 8020              	.LBB3204:
 8021              	.LBI3204:
 8022              		.loc 10 56 5 is_stmt 1 view .LVU2032
 8023              	.LBB3205:
 8024              		.loc 10 56 27 view .LVU2033
 8025              	.LBB3206:
 8026              	.LBI3206:
  29:MotorControl/task_timer.hpp ****         uint32_t end_time = sample_TIM13();
 8027              		.loc 10 29 10 view .LVU2034
 8028              	.LBB3207:
  30:MotorControl/task_timer.hpp ****         uint32_t length = end_time - start_time;
 8029              		.loc 10 30 9 view .LVU2035
 8030              	.LBB3208:
 8031              	.LBI3208:
  12:MotorControl/task_timer.hpp ****     constexpr uint16_t clocks_per_cnt = (uint16_t)((float)TIM_1_8_CLOCK_HZ / (float)TIM_APB1_CLOCK_
 8032              		.loc 10 12 17 view .LVU2036
 8033              	.LBB3209:
  13:MotorControl/task_timer.hpp ****     return clocks_per_cnt * TIM13->CNT;  // TODO: Use a hw_config
 8034              		.loc 10 13 5 view .LVU2037
  14:MotorControl/task_timer.hpp **** }
 8035              		.loc 10 14 5 view .LVU2038
  14:MotorControl/task_timer.hpp **** }
 8036              		.loc 10 14 36 is_stmt 0 view .LVU2039
 8037 0252 494B     		ldr	r3, .L355+16
 8038 0254 5B6A     		ldr	r3, [r3, #36]
 8039 0256 5B00     		lsls	r3, r3, #1
 8040 0258 9BB2     		uxth	r3, r3
 8041              	.LVL559:
  14:MotorControl/task_timer.hpp **** }
 8042              		.loc 10 14 36 view .LVU2040
 8043              	.LBE3209:
 8044              	.LBE3208:
  31:MotorControl/task_timer.hpp **** 
 8045              		.loc 10 31 9 is_stmt 1 view .LVU2041
  31:MotorControl/task_timer.hpp **** 
 8046              		.loc 10 31 36 is_stmt 0 view .LVU2042
 8047 025a 9A1B     		subs	r2, r3, r6
  31:MotorControl/task_timer.hpp **** 
 8048              		.loc 10 31 18 view .LVU2043
 8049 025c 0092     		str	r2, [sp]
  33:MotorControl/task_timer.hpp **** #ifdef MEASURE_START_TIME
 8050              		.loc 10 33 9 is_stmt 1 view .LVU2044
 8051 025e 474A     		ldr	r2, .L355+20
 8052 0260 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 8053 0262 22B1     		cbz	r2, .L317
  35:MotorControl/task_timer.hpp **** #endif
 8054              		.loc 10 35 13 view .LVU2045
  35:MotorControl/task_timer.hpp **** #endif
 8055              		.loc 10 35 25 is_stmt 0 view .LVU2046
 8056 0264 C8F8DC61 		str	r6, [r8, #476]
  38:MotorControl/task_timer.hpp **** #endif
 8057              		.loc 10 38 13 is_stmt 1 view .LVU2047
  38:MotorControl/task_timer.hpp **** #endif
 8058              		.loc 10 38 23 is_stmt 0 view .LVU2048
 8059 0268 7B60     		str	r3, [r7, #4]
  41:MotorControl/task_timer.hpp **** #endif
 8060              		.loc 10 41 13 is_stmt 1 view .LVU2049
ARM GAS  /tmp/ccofeNgA.s 			page 358


  41:MotorControl/task_timer.hpp **** #endif
 8061              		.loc 10 41 21 is_stmt 0 view .LVU2050
 8062 026a 009B     		ldr	r3, [sp]
 8063              	.LVL560:
  41:MotorControl/task_timer.hpp **** #endif
 8064              		.loc 10 41 21 view .LVU2051
 8065 026c BB60     		str	r3, [r7, #8]
 8066              	.LVL561:
 8067              	.L317:
  45:MotorControl/task_timer.hpp **** #endif
 8068              		.loc 10 45 9 is_stmt 1 view .LVU2052
  45:MotorControl/task_timer.hpp **** #endif
 8069              		.loc 10 45 32 is_stmt 0 view .LVU2053
 8070 026e 07F10C03 		add	r3, r7, #12
 8071              	.LVL562:
 8072              	.LBB3210:
 8073              	.LBI3210:
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 8074              		.loc 11 254 5 is_stmt 1 view .LVU2054
 8075              	.LBB3211:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 8076              		.loc 11 259 15 is_stmt 0 view .LVU2055
 8077 0272 F968     		ldr	r1, [r7, #12]
 8078 0274 009A     		ldr	r2, [sp]
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 8079              		.loc 11 259 7 view .LVU2056
 8080 0276 9142     		cmp	r1, r2
 8081 0278 2BD3     		bcc	.L351
 8082              	.LVL563:
 8083              	.L318:
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 8084              		.loc 11 259 7 view .LVU2057
 8085              	.LBE3211:
 8086              	.LBE3210:
  45:MotorControl/task_timer.hpp **** #endif
 8087              		.loc 10 45 31 view .LVU2058
 8088 027a 1B68     		ldr	r3, [r3]
  45:MotorControl/task_timer.hpp **** #endif
 8089              		.loc 10 45 21 view .LVU2059
 8090 027c FB60     		str	r3, [r7, #12]
 8091              	.LVL564:
  45:MotorControl/task_timer.hpp **** #endif
 8092              		.loc 10 45 21 view .LVU2060
 8093              	.LBE3207:
 8094              	.LBE3206:
 8095              	.LBE3205:
 8096              	.LBE3204:
 8097              	.LBE3221:
 562:MotorControl/motor.cpp ****     float vq = 0.0f;
 8098              		.loc 2 562 5 is_stmt 1 view .LVU2061
 563:MotorControl/motor.cpp **** 
 8099              		.loc 2 563 5 view .LVU2062
 565:MotorControl/motor.cpp **** 
 8100              		.loc 2 565 5 view .LVU2063
 565:MotorControl/motor.cpp **** 
 8101              		.loc 2 565 61 is_stmt 0 view .LVU2064
 8102 027e 04F5C271 		add	r1, r4, #388
ARM GAS  /tmp/ccofeNgA.s 			page 359


 8103 0282 04A8     		add	r0, sp, #16
 8104              	.LEHB11:
 8105 0284 FFF7FEFF 		bl	_ZN9InputPortIfE7presentEv
 8106              	.LVL565:
 567:MotorControl/motor.cpp ****         if (!phase_vel.has_value()) {
 8107              		.loc 2 567 5 is_stmt 1 view .LVU2065
 567:MotorControl/motor.cpp ****         if (!phase_vel.has_value()) {
 8108              		.loc 2 567 17 is_stmt 0 view .LVU2066
 8109 0288 94F86C30 		ldrb	r3, [r4, #108]	@ zero_extendqisi2
 567:MotorControl/motor.cpp ****         if (!phase_vel.has_value()) {
 8110              		.loc 2 567 5 view .LVU2067
 8111 028c 5BB3     		cbz	r3, .L334
 568:MotorControl/motor.cpp ****             error_ |= ERROR_UNKNOWN_PHASE_VEL;
 8112              		.loc 2 568 9 is_stmt 1 view .LVU2068
 8113              	.LVL566:
 8114              	.LBB3222:
 8115              	.LBI3222:
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_is_engaged(); }
 8116              		.loc 3 916 22 view .LVU2069
 8117              	.LBB3223:
 8118              	.LBI3223:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8119              		.loc 3 433 22 view .LVU2070
 8120              	.LBB3224:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 8121              		.loc 3 434 58 is_stmt 0 view .LVU2071
 8122 028e 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 8123              	.LVL567:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 8124              		.loc 3 434 58 view .LVU2072
 8125              	.LBE3224:
 8126              	.LBE3223:
 8127              	.LBE3222:
 568:MotorControl/motor.cpp ****             error_ |= ERROR_UNKNOWN_PHASE_VEL;
 8128              		.loc 2 568 9 view .LVU2073
 8129 0292 03B3     		cbz	r3, .L352
 573:MotorControl/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 8130              		.loc 2 573 9 is_stmt 1 view .LVU2074
 573:MotorControl/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 8131              		.loc 2 573 36 is_stmt 0 view .LVU2075
 8132 0294 D4ED0B7A 		vldr.32	s15, [r4, #44]
 573:MotorControl/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 8133              		.loc 2 573 26 view .LVU2076
 8134 0298 9DED047A 		vldr.32	s14, [sp, #16]
 8135 029c 27EE277A 		vmul.f32	s14, s14, s15
 573:MotorControl/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 8136              		.loc 2 573 55 view .LVU2077
 8137 02a0 9DED086A 		vldr.32	s12, [sp, #32]
 573:MotorControl/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 8138              		.loc 2 573 53 view .LVU2078
 8139 02a4 67EE066A 		vmul.f32	s13, s14, s12
 573:MotorControl/motor.cpp ****         vq += *phase_vel * config_.phase_inductance * id;
 8140              		.loc 2 573 12 view .LVU2079
 8141 02a8 9FED325A 		vldr.32	s10, .L355+12
 8142 02ac 75EE666A 		vsub.f32	s13, s10, s13
 8143              	.LVL568:
 574:MotorControl/motor.cpp ****         vd += config_.phase_resistance * id;
ARM GAS  /tmp/ccofeNgA.s 			page 360


 8144              		.loc 2 574 9 is_stmt 1 view .LVU2080
 574:MotorControl/motor.cpp ****         vd += config_.phase_resistance * id;
 8145              		.loc 2 574 55 is_stmt 0 view .LVU2081
 8146 02b0 DDED075A 		vldr.32	s11, [sp, #28]
 574:MotorControl/motor.cpp ****         vd += config_.phase_resistance * id;
 8147              		.loc 2 574 53 view .LVU2082
 8148 02b4 67EE257A 		vmul.f32	s15, s14, s11
 574:MotorControl/motor.cpp ****         vd += config_.phase_resistance * id;
 8149              		.loc 2 574 12 view .LVU2083
 8150 02b8 77EE857A 		vadd.f32	s15, s15, s10
 8151              	.LVL569:
 575:MotorControl/motor.cpp ****         vq += config_.phase_resistance * iq;
 8152              		.loc 2 575 9 is_stmt 1 view .LVU2084
 575:MotorControl/motor.cpp ****         vq += config_.phase_resistance * iq;
 8153              		.loc 2 575 23 is_stmt 0 view .LVU2085
 8154 02bc 94ED0C5A 		vldr.32	s10, [r4, #48]
 575:MotorControl/motor.cpp ****         vq += config_.phase_resistance * iq;
 8155              		.loc 2 575 40 view .LVU2086
 8156 02c0 25EE857A 		vmul.f32	s14, s11, s10
 575:MotorControl/motor.cpp ****         vq += config_.phase_resistance * iq;
 8157              		.loc 2 575 12 view .LVU2087
 8158 02c4 36EE877A 		vadd.f32	s14, s13, s14
 8159              	.LVL570:
 576:MotorControl/motor.cpp ****     }
 8160              		.loc 2 576 9 is_stmt 1 view .LVU2088
 576:MotorControl/motor.cpp ****     }
 8161              		.loc 2 576 40 is_stmt 0 view .LVU2089
 8162 02c8 26EE056A 		vmul.f32	s12, s12, s10
 576:MotorControl/motor.cpp ****     }
 8163              		.loc 2 576 12 view .LVU2090
 8164 02cc 77EE867A 		vadd.f32	s15, s15, s12
 8165              	.LVL571:
 576:MotorControl/motor.cpp ****     }
 8166              		.loc 2 576 12 view .LVU2091
 8167 02d0 0DE0     		b	.L319
 8168              	.LVL572:
 8169              	.L351:
 8170              	.LBB3225:
 8171              	.LBB3217:
 8172              	.LBB3216:
 8173              	.LBB3215:
 8174              	.LBB3214:
 8175              	.LBB3213:
 8176              	.LBB3212:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 8177              		.loc 11 260 9 view .LVU2092
 8178 02d2 6B46     		mov	r3, sp
 8179              	.LVL573:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 8180              		.loc 11 260 9 view .LVU2093
 8181 02d4 D1E7     		b	.L318
 8182              	.LVL574:
 8183              	.L352:
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 8184              		.loc 11 260 9 view .LVU2094
 8185              	.LBE3212:
 8186              	.LBE3213:
ARM GAS  /tmp/ccofeNgA.s 			page 361


 8187              	.LBE3214:
 8188              	.LBE3215:
 8189              	.LBE3216:
 8190              	.LBE3217:
 8191              	.LBE3225:
 569:MotorControl/motor.cpp ****             return;
 8192              		.loc 2 569 13 is_stmt 1 view .LVU2095
 569:MotorControl/motor.cpp ****             return;
 8193              		.loc 2 569 23 is_stmt 0 view .LVU2096
 8194 02d6 4FF00062 		mov	r2, #134217728
 8195 02da 0023     		movs	r3, #0
 8196 02dc 04F19000 		add	r0, r4, #144
 8197 02e0 FFF7FEFF 		bl	_ZoRRN10ODriveIntf9MotorIntf5ErrorES1_
 8198              	.LVL575:
 570:MotorControl/motor.cpp ****         }
 8199              		.loc 2 570 13 is_stmt 1 view .LVU2097
 8200 02e4 34E0     		b	.L292
 8201              	.L334:
 563:MotorControl/motor.cpp **** 
 8202              		.loc 2 563 11 is_stmt 0 view .LVU2098
 8203 02e6 DFED237A 		vldr.32	s15, .L355+12
 562:MotorControl/motor.cpp ****     float vq = 0.0f;
 8204              		.loc 2 562 11 view .LVU2099
 8205 02ea B0EE677A 		vmov.f32	s14, s15
 8206              	.LVL576:
 8207              	.L319:
 579:MotorControl/motor.cpp ****         if (!phase_vel.has_value()) {
 8208              		.loc 2 579 5 is_stmt 1 view .LVU2100
 579:MotorControl/motor.cpp ****         if (!phase_vel.has_value()) {
 8209              		.loc 2 579 17 is_stmt 0 view .LVU2101
 8210 02ee 94F86D30 		ldrb	r3, [r4, #109]	@ zero_extendqisi2
 579:MotorControl/motor.cpp ****         if (!phase_vel.has_value()) {
 8211              		.loc 2 579 5 view .LVU2102
 8212 02f2 A3B1     		cbz	r3, .L321
 580:MotorControl/motor.cpp ****             error_ |= ERROR_UNKNOWN_PHASE_VEL;
 8213              		.loc 2 580 9 is_stmt 1 view .LVU2103
 8214              	.LVL577:
 8215              	.LBB3226:
 8216              	.LBI3226:
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return this->_M_is_engaged(); }
 8217              		.loc 3 916 22 view .LVU2104
 8218              	.LBB3227:
 8219              	.LBI3227:
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional ****       { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8220              		.loc 3 433 22 view .LVU2105
 8221              	.LBB3228:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 8222              		.loc 3 434 58 is_stmt 0 view .LVU2106
 8223 02f4 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 8224              	.LVL578:
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional **** 
 8225              		.loc 3 434 58 view .LVU2107
 8226              	.LBE3228:
 8227              	.LBE3227:
 8228              	.LBE3226:
 580:MotorControl/motor.cpp ****             error_ |= ERROR_UNKNOWN_PHASE_VEL;
 8229              		.loc 2 580 9 view .LVU2108
ARM GAS  /tmp/ccofeNgA.s 			page 362


 8230 02f8 6BB3     		cbz	r3, .L353
 585:MotorControl/motor.cpp ****     }
 8231              		.loc 2 585 9 is_stmt 1 view .LVU2109
 585:MotorControl/motor.cpp ****     }
 8232              		.loc 2 585 26 is_stmt 0 view .LVU2110
 8233 02fa DDED046A 		vldr.32	s13, [sp, #16]
 8234 02fe 9FED206A 		vldr.32	s12, .L355+24
 8235 0302 66EE866A 		vmul.f32	s13, s13, s12
 585:MotorControl/motor.cpp ****     }
 8236              		.loc 2 585 51 view .LVU2111
 8237 0306 94ED0D5A 		vldr.32	s10, [r4, #52]
 585:MotorControl/motor.cpp ****     }
 8238              		.loc 2 585 67 view .LVU2112
 8239 030a 94ED086A 		vldr.32	s12, [r4, #32]	@ int
 8240 030e B8EEC66A 		vcvt.f32.s32	s12, s12
 8241 0312 C5EE065A 		vdiv.f32	s11, s10, s12
 585:MotorControl/motor.cpp ****     }
 8242              		.loc 2 585 40 view .LVU2113
 8243 0316 66EEA56A 		vmul.f32	s13, s13, s11
 585:MotorControl/motor.cpp ****     }
 8244              		.loc 2 585 12 view .LVU2114
 8245 031a 77EEA67A 		vadd.f32	s15, s15, s13
 8246              	.LVL579:
 8247              	.L321:
 588:MotorControl/motor.cpp ****         // reinterpret current as voltage
 8248              		.loc 2 588 5 is_stmt 1 view .LVU2115
 588:MotorControl/motor.cpp ****         // reinterpret current as voltage
 8249              		.loc 2 588 9 is_stmt 0 view .LVU2116
 8250 031e D4F88430 		ldr	r3, [r4, #132]
 588:MotorControl/motor.cpp ****         // reinterpret current as voltage
 8251              		.loc 2 588 16 view .LVU2117
 8252 0322 D3F85831 		ldr	r3, [r3, #344]
 588:MotorControl/motor.cpp ****         // reinterpret current as voltage
 8253              		.loc 2 588 31 view .LVU2118
 8254 0326 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 588:MotorControl/motor.cpp ****         // reinterpret current as voltage
 8255              		.loc 2 588 5 view .LVU2119
 8256 032a 022B     		cmp	r3, #2
 8257 032c 2AD0     		beq	.L354
 592:MotorControl/motor.cpp ****     }
 8258              		.loc 2 592 9 is_stmt 1 view .LVU2120
 8259              	.LVL580:
 8260              	.LBB3229:
 8261              	.LBI3229:
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8262              		.loc 4 352 12 view .LVU2121
 8263              	.LBB3230:
 8264              	.LBB3231:
 8265              	.LBB3232:
 8266              	.LBI3232:
 8267              		.loc 5 76 5 view .LVU2122
 8268              		.loc 5 76 5 is_stmt 0 view .LVU2123
 8269              	.LBE3232:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 8270              		.loc 4 353 64 view .LVU2124
 8271 032e 8DED187A 		vstr.32	s14, [sp, #96]
 8272              	.LVL581:
ARM GAS  /tmp/ccofeNgA.s 			page 363


 8273              	.LBB3233:
 8274              	.LBI3233:
 8275              		.loc 5 76 5 is_stmt 1 view .LVU2125
 8276              		.loc 5 76 5 is_stmt 0 view .LVU2126
 8277              	.LBE3233:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 8278              		.loc 4 353 64 view .LVU2127
 8279 0332 CDED197A 		vstr.32	s15, [sp, #100]
 8280              	.LVL582:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 8281              		.loc 4 353 64 view .LVU2128
 8282 0336 01AB     		add	r3, sp, #4
 8283 0338 18AA     		add	r2, sp, #96
 8284 033a 92E80300 		ldm	r2, {r0, r1}
 8285 033e 83E80300 		stm	r3, {r0, r1}
 8286              	.LBE3231:
 8287              	.LBE3230:
 8288              	.LBE3229:
 8289              	.LBB3234:
 8290              	.LBI3234:
  52:./MotorControl/component.hpp ****         content_ = value;
 8291              		.loc 17 52 10 is_stmt 1 view .LVU2129
 8292              	.LVL583:
 8293              	.LBB3235:
 8294              	.LBB3236:
 8295              	.LBI3236:
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 8296              		.loc 4 390 7 view .LVU2130
 8297              	.LBB3237:
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	second = __p.second;
 8298              		.loc 4 395 8 is_stmt 0 view .LVU2131
 8299 0342 84ED657A 		vstr.32	s14, [r4, #404]
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return *this;
 8300              		.loc 4 396 9 view .LVU2132
 8301 0346 C4ED667A 		vstr.32	s15, [r4, #408]
 8302              	.LVL584:
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return *this;
 8303              		.loc 4 396 9 view .LVU2133
 8304              	.LBE3237:
 8305              	.LBE3236:
  54:./MotorControl/component.hpp ****     }
 8306              		.loc 17 54 14 view .LVU2134
 8307 034a 0023     		movs	r3, #0
 8308 034c C4F89031 		str	r3, [r4, #400]
 8309              	.LVL585:
 8310              	.L292:
  54:./MotorControl/component.hpp ****     }
 8311              		.loc 17 54 14 view .LVU2135
 8312              	.LBE3235:
 8313              	.LBE3234:
 594:MotorControl/motor.cpp **** 
 8314              		.loc 2 594 1 view .LVU2136
 8315 0350 1EB0     		add	sp, sp, #120
 8316              	.LCFI92:
 8317              		.cfi_remember_state
 8318              		.cfi_def_cfa_offset 24
 8319              		@ sp needed
ARM GAS  /tmp/ccofeNgA.s 			page 364


 8320 0352 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8321              	.LVL586:
 8322              	.L353:
 8323              	.LCFI93:
 8324              		.cfi_restore_state
 581:MotorControl/motor.cpp ****             return;
 8325              		.loc 2 581 13 is_stmt 1 view .LVU2137
 581:MotorControl/motor.cpp ****             return;
 8326              		.loc 2 581 23 is_stmt 0 view .LVU2138
 8327 0356 4FF00062 		mov	r2, #134217728
 8328 035a 0023     		movs	r3, #0
 8329 035c 04F19000 		add	r0, r4, #144
 8330 0360 FFF7FEFF 		bl	_ZoRRN10ODriveIntf9MotorIntf5ErrorES1_
 8331              	.LVL587:
 582:MotorControl/motor.cpp ****         }
 8332              		.loc 2 582 13 is_stmt 1 view .LVU2139
 8333 0364 F4E7     		b	.L292
 8334              	.L356:
 8335 0366 00BF     		.align	2
 8336              	.L355:
 8337 0368 A4707D3F 		.word	1065185444
 8338 036c 6F120339 		.word	956502639
 8339 0370 6666663F 		.word	1063675494
 8340 0374 00000000 		.word	0
 8341 0378 001C0040 		.word	1073748992
 8342 037c 00000000 		.word	_ZN9TaskTimer7enabledE
 8343 0380 ABAA2A3F 		.word	1059760811
 8344              	.LVL588:
 8345              	.L354:
 590:MotorControl/motor.cpp ****     } else {
 8346              		.loc 2 590 9 view .LVU2140
 590:MotorControl/motor.cpp ****     } else {
 8347              		.loc 2 590 31 is_stmt 0 view .LVU2141
 8348 0384 DDED076A 		vldr.32	s13, [sp, #28]
 590:MotorControl/motor.cpp ****     } else {
 8349              		.loc 2 590 29 view .LVU2142
 8350 0388 36EE877A 		vadd.f32	s14, s13, s14
 8351              	.LVL589:
 590:MotorControl/motor.cpp ****     } else {
 8352              		.loc 2 590 40 view .LVU2143
 8353 038c DDED086A 		vldr.32	s13, [sp, #32]
 590:MotorControl/motor.cpp ****     } else {
 8354              		.loc 2 590 38 view .LVU2144
 8355 0390 76EEA77A 		vadd.f32	s15, s13, s15
 8356              	.LVL590:
 8357              	.LBB3238:
 8358              	.LBI3238:
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8359              		.loc 4 352 12 is_stmt 1 view .LVU2145
 8360              	.LBB3239:
 8361              	.LBB3240:
 8362              	.LBB3241:
 8363              	.LBI3241:
 8364              		.loc 5 76 5 view .LVU2146
 8365              		.loc 5 76 5 is_stmt 0 view .LVU2147
 8366              	.LBE3241:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
ARM GAS  /tmp/ccofeNgA.s 			page 365


 8367              		.loc 4 353 64 view .LVU2148
 8368 0394 8DED167A 		vstr.32	s14, [sp, #88]
 8369              	.LVL591:
 8370              	.LBB3242:
 8371              	.LBI3242:
 8372              		.loc 5 76 5 is_stmt 1 view .LVU2149
 8373              		.loc 5 76 5 is_stmt 0 view .LVU2150
 8374              	.LBE3242:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 8375              		.loc 4 353 64 view .LVU2151
 8376 0398 CDED177A 		vstr.32	s15, [sp, #92]
 8377              	.LVL592:
 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 
 8378              		.loc 4 353 64 view .LVU2152
 8379 039c 01AB     		add	r3, sp, #4
 8380 039e 16AA     		add	r2, sp, #88
 8381 03a0 92E80300 		ldm	r2, {r0, r1}
 8382 03a4 83E80300 		stm	r3, {r0, r1}
 8383              	.LBE3240:
 8384              	.LBE3239:
 8385              	.LBE3238:
 8386              	.LBB3243:
 8387              	.LBI3243:
  52:./MotorControl/component.hpp ****         content_ = value;
 8388              		.loc 17 52 10 is_stmt 1 view .LVU2153
 8389              	.LVL593:
 8390              	.LBB3244:
 8391              	.LBB3245:
 8392              	.LBI3245:
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 8393              		.loc 4 390 7 view .LVU2154
 8394              	.LBB3246:
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	second = __p.second;
 8395              		.loc 4 395 8 is_stmt 0 view .LVU2155
 8396 03a8 84ED657A 		vstr.32	s14, [r4, #404]
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return *this;
 8397              		.loc 4 396 9 view .LVU2156
 8398 03ac C4ED667A 		vstr.32	s15, [r4, #408]
 8399              	.LVL594:
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h **** 	return *this;
 8400              		.loc 4 396 9 view .LVU2157
 8401              	.LBE3246:
 8402              	.LBE3245:
  54:./MotorControl/component.hpp ****     }
 8403              		.loc 17 54 14 view .LVU2158
 8404 03b0 0023     		movs	r3, #0
 8405 03b2 C4F89031 		str	r3, [r4, #400]
 8406              	.LVL595:
  54:./MotorControl/component.hpp ****     }
 8407              		.loc 17 54 14 view .LVU2159
 8408              	.LBE3244:
 8409              	.LBE3243:
 8410 03b6 CBE7     		b	.L292
 8411              	.LVL596:
 8412              	.L335:
 8413              	.LBB3247:
 8414              	.LBB3218:
ARM GAS  /tmp/ccofeNgA.s 			page 366


 8415              	.LBI3218:
 8416              		.loc 10 56 5 is_stmt 1 view .LVU2160
 8417              	.LBB3219:
 8418              		.loc 10 56 27 view .LVU2161
 8419              		.loc 10 56 38 is_stmt 0 view .LVU2162
 8420 03b8 3146     		mov	r1, r6
 8421 03ba 3846     		mov	r0, r7
 8422 03bc FFF7FEFF 		bl	_ZN9TaskTimer4stopEm
 8423              	.LVL597:
 8424              		.loc 10 56 38 view .LVU2163
 8425 03c0 FFF7FEFF 		bl	__cxa_end_cleanup
 8426              	.LVL598:
 8427              	.LEHE11:
 8428              	.LBE3219:
 8429              	.LBE3218:
 8430              	.LBE3247:
 8431              		.cfi_endproc
 8432              	.LFE5330:
 8433              		.personality	__gxx_personality_v0
 8434              		.handlerdata
 8435              	.LLSDA5330:
 8436 0008 FF       		.byte	0xff
 8437 0009 FF       		.byte	0xff
 8438 000a 01       		.byte	0x1
 8439 000b 10       		.uleb128 .LLSDACSE5330-.LLSDACSB5330
 8440              	.LLSDACSB5330:
 8441 000c 10       		.uleb128 .LEHB9-.LFB5330
 8442 000d 04       		.uleb128 .LEHE9-.LEHB9
 8443 000e 00       		.uleb128 0
 8444 000f 00       		.uleb128 0
 8445 0010 CC04     		.uleb128 .LEHB10-.LFB5330
 8446 0012 04       		.uleb128 .LEHE10-.LEHB10
 8447 0013 B807     		.uleb128 .L335-.LFB5330
 8448 0015 00       		.uleb128 0
 8449 0016 8405     		.uleb128 .LEHB11-.LFB5330
 8450 0018 C002     		.uleb128 .LEHE11-.LEHB11
 8451 001a 00       		.uleb128 0
 8452 001b 00       		.uleb128 0
 8453              	.LLSDACSE5330:
 8454              		.section	.text._ZN5Motor6updateEm
 8455              		.fnend
 8457              		.weak	_ZTSSt18bad_variant_access
 8458              		.section	.rodata._ZTSSt18bad_variant_access,"aG",%progbits,_ZTSSt18bad_variant_access,comdat
 8459              		.align	2
 8462              	_ZTSSt18bad_variant_access:
 8463 0000 53743138 		.ascii	"St18bad_variant_access\000"
 8463      6261645F 
 8463      76617269 
 8463      616E745F 
 8463      61636365 
 8464              		.weak	_ZTISt18bad_variant_access
 8465              		.section	.rodata._ZTISt18bad_variant_access,"aG",%progbits,_ZTISt18bad_variant_access,comdat
 8466              		.align	2
 8469              	_ZTISt18bad_variant_access:
 8470 0000 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 8471 0004 00000000 		.word	_ZTSSt18bad_variant_access
 8472 0008 00000000 		.word	_ZTISt9exception
ARM GAS  /tmp/ccofeNgA.s 			page 367


 8473              		.weak	_ZTS13ComponentBase
 8474              		.section	.rodata._ZTS13ComponentBase,"aG",%progbits,_ZTS13ComponentBase,comdat
 8475              		.align	2
 8478              	_ZTS13ComponentBase:
 8479 0000 3133436F 		.ascii	"13ComponentBase\000"
 8479      6D706F6E 
 8479      656E7442 
 8479      61736500 
 8480              		.weak	_ZTI13ComponentBase
 8481              		.section	.rodata._ZTI13ComponentBase,"aG",%progbits,_ZTI13ComponentBase,comdat
 8482              		.align	2
 8485              	_ZTI13ComponentBase:
 8486 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 8487 0004 00000000 		.word	_ZTS13ComponentBase
 8488              		.weak	_ZTS15PhaseControlLawILj3EE
 8489              		.section	.rodata._ZTS15PhaseControlLawILj3EE,"aG",%progbits,_ZTS15PhaseControlLawILj3EE,comdat
 8490              		.align	2
 8493              	_ZTS15PhaseControlLawILj3EE:
 8494 0000 31355068 		.ascii	"15PhaseControlLawILj3EE\000"
 8494      61736543 
 8494      6F6E7472 
 8494      6F6C4C61 
 8494      77494C6A 
 8495              		.weak	_ZTI15PhaseControlLawILj3EE
 8496              		.section	.rodata._ZTI15PhaseControlLawILj3EE,"aG",%progbits,_ZTI15PhaseControlLawILj3EE,comdat
 8497              		.align	2
 8500              	_ZTI15PhaseControlLawILj3EE:
 8501 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 8502 0004 00000000 		.word	_ZTS15PhaseControlLawILj3EE
 8503              		.weak	_ZTS31ResistanceMeasurementControlLaw
 8504              		.section	.rodata._ZTS31ResistanceMeasurementControlLaw,"aG",%progbits,_ZTS31ResistanceMeasurementC
 8505              		.align	2
 8508              	_ZTS31ResistanceMeasurementControlLaw:
 8509 0000 33315265 		.ascii	"31ResistanceMeasurementControlLaw\000"
 8509      73697374 
 8509      616E6365 
 8509      4D656173 
 8509      7572656D 
 8510              		.weak	_ZTI31ResistanceMeasurementControlLaw
 8511              		.section	.rodata._ZTI31ResistanceMeasurementControlLaw,"aG",%progbits,_ZTI31ResistanceMeasurementC
 8512              		.align	2
 8515              	_ZTI31ResistanceMeasurementControlLaw:
 8516 0000 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 8517 0004 00000000 		.word	_ZTS31ResistanceMeasurementControlLaw
 8518 0008 00000000 		.word	_ZTI24AlphaBetaFrameController
 8519              		.weak	_ZTS31InductanceMeasurementControlLaw
 8520              		.section	.rodata._ZTS31InductanceMeasurementControlLaw,"aG",%progbits,_ZTS31InductanceMeasurementC
 8521              		.align	2
 8524              	_ZTS31InductanceMeasurementControlLaw:
 8525 0000 3331496E 		.ascii	"31InductanceMeasurementControlLaw\000"
 8525      64756374 
 8525      616E6365 
 8525      4D656173 
 8525      7572656D 
 8526              		.weak	_ZTI31InductanceMeasurementControlLaw
 8527              		.section	.rodata._ZTI31InductanceMeasurementControlLaw,"aG",%progbits,_ZTI31InductanceMeasurementC
 8528              		.align	2
ARM GAS  /tmp/ccofeNgA.s 			page 368


 8531              	_ZTI31InductanceMeasurementControlLaw:
 8532 0000 08000000 		.word	_ZTVN10__cxxabiv120__si_class_type_infoE+8
 8533 0004 00000000 		.word	_ZTS31InductanceMeasurementControlLaw
 8534 0008 00000000 		.word	_ZTI24AlphaBetaFrameController
 8535              		.weak	_ZTVSt18bad_variant_access
 8536              		.section	.rodata._ZTVSt18bad_variant_access,"aG",%progbits,_ZTVSt18bad_variant_access,comdat
 8537              		.align	2
 8540              	_ZTVSt18bad_variant_access:
 8541 0000 00000000 		.word	0
 8542 0004 00000000 		.word	_ZTISt18bad_variant_access
 8543 0008 00000000 		.word	_ZNSt18bad_variant_accessD1Ev
 8544 000c 00000000 		.word	_ZNSt18bad_variant_accessD0Ev
 8545 0010 00000000 		.word	_ZNKSt18bad_variant_access4whatEv
 8546              		.weak	_ZTV13ComponentBase
 8547              		.section	.rodata._ZTV13ComponentBase,"aG",%progbits,_ZTV13ComponentBase,comdat
 8548              		.align	2
 8551              	_ZTV13ComponentBase:
 8552 0000 00000000 		.word	0
 8553 0004 00000000 		.word	_ZTI13ComponentBase
 8554 0008 00000000 		.word	__cxa_pure_virtual
 8555              		.weak	_ZTV15PhaseControlLawILj3EE
 8556              		.section	.rodata._ZTV15PhaseControlLawILj3EE,"aG",%progbits,_ZTV15PhaseControlLawILj3EE,comdat
 8557              		.align	2
 8560              	_ZTV15PhaseControlLawILj3EE:
 8561 0000 00000000 		.word	0
 8562 0004 00000000 		.word	_ZTI15PhaseControlLawILj3EE
 8563 0008 00000000 		.word	__cxa_pure_virtual
 8564 000c 00000000 		.word	__cxa_pure_virtual
 8565 0010 00000000 		.word	__cxa_pure_virtual
 8566              		.weak	_ZTV31ResistanceMeasurementControlLaw
 8567              		.section	.rodata._ZTV31ResistanceMeasurementControlLaw,"aG",%progbits,_ZTV31ResistanceMeasurementC
 8568              		.align	2
 8571              	_ZTV31ResistanceMeasurementControlLaw:
 8572 0000 00000000 		.word	0
 8573 0004 00000000 		.word	_ZTI31ResistanceMeasurementControlLaw
 8574 0008 00000000 		.word	_ZN31ResistanceMeasurementControlLaw5resetEv
 8575 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 8576 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 8577 0014 00000000 		.word	_ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 8578 0018 00000000 		.word	_ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 8579              		.weak	_ZTV31InductanceMeasurementControlLaw
 8580              		.section	.rodata._ZTV31InductanceMeasurementControlLaw,"aG",%progbits,_ZTV31InductanceMeasurementC
 8581              		.align	2
 8584              	_ZTV31InductanceMeasurementControlLaw:
 8585 0000 00000000 		.word	0
 8586 0004 00000000 		.word	_ZTI31InductanceMeasurementControlLaw
 8587 0008 00000000 		.word	_ZN31InductanceMeasurementControlLaw5resetEv
 8588 000c 00000000 		.word	_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
 8589 0010 00000000 		.word	_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
 8590 0014 00000000 		.word	_ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
 8591 0018 00000000 		.word	_ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_If
 8592              		.section	.rodata
 8593              		.align	2
 8594              		.set	.LANCHOR0,. + 0
 8595              	.LC0:
 8596 0000 0000C07F 		.word	2143289344
 8597 0004 0000C07F 		.word	2143289344
ARM GAS  /tmp/ccofeNgA.s 			page 369


 8598 0008 0000C07F 		.word	2143289344
 8599              		.text
 8600              	.Letext0:
 8601              		.file 22 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 8602              		.file 23 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 8603              		.file 24 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdint.h"
 8604              		.file 25 "ThirdParty/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 8605              		.file 26 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 8606              		.file 27 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 8607              		.file 28 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_types.h"
 8608              		.file 29 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/reent.h"
 8609              		.file 30 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/lock.h"
 8610              		.file 31 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdio.h"
 8611              		.file 32 "ThirdParty/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 8612              		.file 33 "ThirdParty/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 8613              		.file 34 "ThirdParty/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 8614              		.file 35 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdlib"
 8615              		.file 36 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/cpp_type_traits.h"
 8616              		.file 37 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/type_traits"
 8617              		.file 38 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v7e-m+fp/har
 8618              		.file 39 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 8619              		.file 40 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 8620              		.file 41 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 8621              		.file 42 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/enable_special_members.h"
 8622              		.file 43 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 8623              		.file 44 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/functional"
 8624              		.file 45 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstring"
 8625              		.file 46 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/parse_numbers.h"
 8626              		.file 47 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cwchar"
 8627              		.file 48 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/clocale"
 8628              		.file 49 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdint"
 8629              		.file 50 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/string_view"
 8630              		.file 51 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 8631              		.file 52 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdio"
 8632              		.file 53 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array"
 8633              		.file 54 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h"
 8634              		.file 55 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdlib.h"
 8635              		.file 56 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 8636              		.file 57 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/math.h"
 8637              		.file 58 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/math.h"
 8638              		.file 59 "./Drivers/DRV8301/drv8301.hpp"
 8639              		.file 60 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/string.h"
 8640              		.file 61 "fibre-cpp/include/fibre/cpp_utils.hpp"
 8641              		.file 62 "fibre-cpp/include/fibre/callback.hpp"
 8642              		.file 63 "Board/v3/Inc/board.h"
 8643              		.file 64 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/pstl/execution_defs.h"
 8644              		.file 65 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_function.h"
 8645              		.file 66 "MotorControl/low_level.h"
 8646              		.file 67 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/wchar.h"
 8647              		.file 68 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/locale.h"
 8648              		.file 69 "MotorControl/odrive_main.h"
 8649              		.file 70 "ThirdParty/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 8650              		.file 71 "<built-in>"
ARM GAS  /tmp/ccofeNgA.s 			page 370


DEFINED SYMBOLS
                            *ABS*:0000000000000000 motor.cpp
     /tmp/ccofeNgA.s:20     .text._ZNKSt18bad_variant_access4whatEv:0000000000000000 $t
     /tmp/ccofeNgA.s:26     .text._ZNKSt18bad_variant_access4whatEv:0000000000000000 _ZNKSt18bad_variant_access4whatEv
.ARM.exidx.text._ZNKSt18bad_variant_access4whatEv:0000000000000000 $d
     /tmp/ccofeNgA.s:48     .text._ZN31ResistanceMeasurementControlLaw5resetEv:0000000000000000 $t
     /tmp/ccofeNgA.s:54     .text._ZN31ResistanceMeasurementControlLaw5resetEv:0000000000000000 _ZN31ResistanceMeasurementControlLaw5resetEv
.ARM.exidx.text._ZN31ResistanceMeasurementControlLaw5resetEv:0000000000000000 $d
     /tmp/ccofeNgA.s:110    .text._ZN31InductanceMeasurementControlLaw5resetEv:0000000000000000 $t
     /tmp/ccofeNgA.s:116    .text._ZN31InductanceMeasurementControlLaw5resetEv:0000000000000000 _ZN31InductanceMeasurementControlLaw5resetEv
.ARM.exidx.text._ZN31InductanceMeasurementControlLaw5resetEv:0000000000000000 $d
     /tmp/ccofeNgA.s:137    .text._ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $t
     /tmp/ccofeNgA.s:143    .text._ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 _ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
.ARM.exidx.text._ZN31InductanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $d
     /tmp/ccofeNgA.s:277    .text._ZNSt18bad_variant_accessD2Ev:0000000000000000 $t
     /tmp/ccofeNgA.s:283    .text._ZNSt18bad_variant_accessD2Ev:0000000000000000 _ZNSt18bad_variant_accessD2Ev
     /tmp/ccofeNgA.s:313    .text._ZNSt18bad_variant_accessD2Ev:0000000000000010 $d
     /tmp/ccofeNgA.s:8540   .rodata._ZTVSt18bad_variant_access:0000000000000000 _ZTVSt18bad_variant_access
.ARM.exidx.text._ZNSt18bad_variant_accessD2Ev:0000000000000000 $d
     /tmp/ccofeNgA.s:283    .text._ZNSt18bad_variant_accessD2Ev:0000000000000000 _ZNSt18bad_variant_accessD1Ev
     /tmp/ccofeNgA.s:322    .text._ZNSt18bad_variant_accessD0Ev:0000000000000000 $t
     /tmp/ccofeNgA.s:328    .text._ZNSt18bad_variant_accessD0Ev:0000000000000000 _ZNSt18bad_variant_accessD0Ev
     /tmp/ccofeNgA.s:366    .text._ZNSt18bad_variant_accessD0Ev:0000000000000018 $d
.ARM.exidx.text._ZNSt18bad_variant_accessD0Ev:0000000000000000 $d
     /tmp/ccofeNgA.s:373    .text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $t
     /tmp/ccofeNgA.s:379    .text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 _ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
     /tmp/ccofeNgA.s:594    .text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000068 $d
.ARM.exidx.text._ZN31InductanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $d
     /tmp/ccofeNgA.s:606    .text._ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $t
     /tmp/ccofeNgA.s:612    .text._ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 _ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE
.ARM.exidx.text._ZN31ResistanceMeasurementControlLaw21get_alpha_beta_outputEmPSt8optionalISt4pairIffEEPS0_IfE:0000000000000000 $d
     /tmp/ccofeNgA.s:850    .text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $t
     /tmp/ccofeNgA.s:856    .text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 _ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm
     /tmp/ccofeNgA.s:1118   .text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:00000000000000d0 $d
.ARM.exidx.text._ZN31ResistanceMeasurementControlLaw14on_measurementESt8optionalIfES0_ISt4pairIffEEm:0000000000000000 $d
     /tmp/ccofeNgA.s:1130   .text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 $t
     /tmp/ccofeNgA.s:1136   .text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 _ZSt26__throw_bad_variant_accessPKc
     /tmp/ccofeNgA.s:1190   .text._ZSt26__throw_bad_variant_accessPKc:000000000000001c $d
     /tmp/ccofeNgA.s:8469   .rodata._ZTISt18bad_variant_access:0000000000000000 _ZTISt18bad_variant_access
.ARM.exidx.text._ZSt26__throw_bad_variant_accessPKc:0000000000000000 $d
     /tmp/ccofeNgA.s:1199   .text._ZoRRN10ODriveIntf8AxisIntf5ErrorES1_:0000000000000000 $t
     /tmp/ccofeNgA.s:1205   .text._ZoRRN10ODriveIntf8AxisIntf5ErrorES1_:0000000000000000 _ZoRRN10ODriveIntf8AxisIntf5ErrorES1_
.ARM.exidx.text._ZoRRN10ODriveIntf8AxisIntf5ErrorES1_:0000000000000000 $d
     /tmp/ccofeNgA.s:1230   .text._ZoRRN10ODriveIntf9MotorIntf5ErrorES1_:0000000000000000 $t
     /tmp/ccofeNgA.s:1236   .text._ZoRRN10ODriveIntf9MotorIntf5ErrorES1_:0000000000000000 _ZoRRN10ODriveIntf9MotorIntf5ErrorES1_
.ARM.exidx.text._ZoRRN10ODriveIntf9MotorIntf5ErrorES1_:0000000000000000 $d
     /tmp/ccofeNgA.s:1267   .text._ZN9TaskTimer4stopEm:0000000000000000 $t
     /tmp/ccofeNgA.s:1273   .text._ZN9TaskTimer4stopEm:0000000000000000 _ZN9TaskTimer4stopEm
     /tmp/ccofeNgA.s:1374   .text._ZN9TaskTimer4stopEm:0000000000000034 $d
.ARM.exidx.text._ZN9TaskTimer4stopEm:0000000000000000 $d
     /tmp/ccofeNgA.s:1384   .text._ZN5Motor3armEP15PhaseControlLawILj3EE:0000000000000000 $t
     /tmp/ccofeNgA.s:1390   .text._ZN5Motor3armEP15PhaseControlLawILj3EE:0000000000000000 _ZN5Motor3armEP15PhaseControlLawILj3EE
     /tmp/ccofeNgA.s:1634   .text._ZN5Motor3armEP15PhaseControlLawILj3EE:0000000000000084 $d
.ARM.extab.text._ZN5Motor3armEP15PhaseControlLawILj3EE:0000000000000000 $d
.ARM.exidx.text._ZN5Motor3armEP15PhaseControlLawILj3EE:0000000000000000 $d
     /tmp/ccofeNgA.s:1670   .text._ZN5Motor6disarmEPb:0000000000000000 $t
     /tmp/ccofeNgA.s:1676   .text._ZN5Motor6disarmEPb:0000000000000000 _ZN5Motor6disarmEPb
ARM GAS  /tmp/ccofeNgA.s 			page 371


.ARM.exidx.text._ZN5Motor6disarmEPb:0000000000000000 $d
     /tmp/ccofeNgA.s:1867   .text._ZN5Motor31update_current_controller_gainsEv:0000000000000000 $t
     /tmp/ccofeNgA.s:1873   .text._ZN5Motor31update_current_controller_gainsEv:0000000000000000 _ZN5Motor31update_current_controller_gainsEv
.ARM.exidx.text._ZN5Motor31update_current_controller_gainsEv:0000000000000000 $d
     /tmp/ccofeNgA.s:2011   .text._ZN5Motor12apply_configEv:0000000000000000 $t
     /tmp/ccofeNgA.s:2017   .text._ZN5Motor12apply_configEv:0000000000000000 _ZN5Motor12apply_configEv
.ARM.exidx.text._ZN5Motor12apply_configEv:0000000000000000 $d
     /tmp/ccofeNgA.s:2053   .text._ZN5MotorC2EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32OffboardThermistorCurrentLimiter:0000000000000000 $t
     /tmp/ccofeNgA.s:2059   .text._ZN5MotorC2EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32OffboardThermistorCurrentLimiter:0000000000000000 _ZN5MotorC2EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32OffboardThermistorCurrentLimiter
     /tmp/ccofeNgA.s:3009   .text._ZN5MotorC2EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32OffboardThermistorCurrentLimiter:00000000000001d0 $d
     /tmp/ccofeNgA.s:8560   .rodata._ZTV15PhaseControlLawILj3EE:0000000000000000 _ZTV15PhaseControlLawILj3EE
     /tmp/ccofeNgA.s:8551   .rodata._ZTV13ComponentBase:0000000000000000 _ZTV13ComponentBase
.ARM.exidx.text._ZN5MotorC2EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32OffboardThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccofeNgA.s:2059   .text._ZN5MotorC2EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32OffboardThermistorCurrentLimiter:0000000000000000 _ZN5MotorC1EP17TIM_HandleTypeDefhfR7Drv8301S3_R31OnboardThermistorCurrentLimiterR32OffboardThermistorCurrentLimiter
     /tmp/ccofeNgA.s:3032   .text._ZN5Motor5setupEv:0000000000000000 $t
     /tmp/ccofeNgA.s:3038   .text._ZN5Motor5setupEv:0000000000000000 _ZN5Motor5setupEv
     /tmp/ccofeNgA.s:3147   .text._ZN5Motor5setupEv:0000000000000068 $d
.ARM.extab.text._ZN5Motor5setupEv:0000000000000000 $d
.ARM.exidx.text._ZN5Motor5setupEv:0000000000000000 $d
     /tmp/ccofeNgA.s:3154   .text._ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE:0000000000000000 $t
     /tmp/ccofeNgA.s:3160   .text._ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE:0000000000000000 _ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE
     /tmp/ccofeNgA.s:3213   .text._ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE:0000000000000038 $d
.ARM.exidx.text._ZN5Motor17disarm_with_errorEN10ODriveIntf9MotorIntf5ErrorE:0000000000000000 $d
     /tmp/ccofeNgA.s:3220   .text._ZN5Motor17apply_pwm_timingsEPtb:0000000000000000 $t
     /tmp/ccofeNgA.s:3226   .text._ZN5Motor17apply_pwm_timingsEPtb:0000000000000000 _ZN5Motor17apply_pwm_timingsEPtb
     /tmp/ccofeNgA.s:3468   .text._ZN5Motor17apply_pwm_timingsEPtb:0000000000000064 $d
.ARM.extab.text._ZN5Motor17apply_pwm_timingsEPtb:0000000000000000 $d
.ARM.exidx.text._ZN5Motor17apply_pwm_timingsEPtb:0000000000000000 $d
     /tmp/ccofeNgA.s:3499   .text._ZN5Motor21effective_current_limEv:0000000000000000 $t
     /tmp/ccofeNgA.s:3505   .text._ZN5Motor21effective_current_limEv:0000000000000000 _ZN5Motor21effective_current_limEv
     /tmp/ccofeNgA.s:3709   .text._ZN5Motor21effective_current_limEv:00000000000000b8 $d
.ARM.exidx.text._ZN5Motor21effective_current_limEv:0000000000000000 $d
     /tmp/ccofeNgA.s:3718   .text._ZN5Motor20max_available_torqueEv:0000000000000000 $t
     /tmp/ccofeNgA.s:3724   .text._ZN5Motor20max_available_torqueEv:0000000000000000 _ZN5Motor20max_available_torqueEv
.ARM.exidx.text._ZN5Motor20max_available_torqueEv:0000000000000000 $d
     /tmp/ccofeNgA.s:3876   .text._ZN5Motor25phase_current_from_adcvalEm:0000000000000000 $t
     /tmp/ccofeNgA.s:3882   .text._ZN5Motor25phase_current_from_adcvalEm:0000000000000000 _ZN5Motor25phase_current_from_adcvalEm
     /tmp/ccofeNgA.s:4053   .text._ZN5Motor25phase_current_from_adcvalEm:0000000000000054 $d
.ARM.exidx.text._ZN5Motor25phase_current_from_adcvalEm:0000000000000000 $d
     /tmp/ccofeNgA.s:4062   .text._ZN5Motor24measure_phase_resistanceEff:0000000000000000 $t
     /tmp/ccofeNgA.s:4068   .text._ZN5Motor24measure_phase_resistanceEff:0000000000000000 _ZN5Motor24measure_phase_resistanceEff
     /tmp/ccofeNgA.s:4284   .text._ZN5Motor24measure_phase_resistanceEff:00000000000000d8 $d
     /tmp/ccofeNgA.s:8571   .rodata._ZTV31ResistanceMeasurementControlLaw:0000000000000000 _ZTV31ResistanceMeasurementControlLaw
.ARM.extab.text._ZN5Motor24measure_phase_resistanceEff:0000000000000000 $d
.ARM.exidx.text._ZN5Motor24measure_phase_resistanceEff:0000000000000000 $d
     /tmp/ccofeNgA.s:4293   .text._ZN5Motor24measure_phase_inductanceEf:0000000000000000 $t
     /tmp/ccofeNgA.s:4299   .text._ZN5Motor24measure_phase_inductanceEf:0000000000000000 _ZN5Motor24measure_phase_inductanceEf
     /tmp/ccofeNgA.s:4464   .text._ZN5Motor24measure_phase_inductanceEf:00000000000000bc $d
     /tmp/ccofeNgA.s:8584   .rodata._ZTV31InductanceMeasurementControlLaw:0000000000000000 _ZTV31InductanceMeasurementControlLaw
.ARM.exidx.text._ZN5Motor24measure_phase_inductanceEf:0000000000000000 $d
     /tmp/ccofeNgA.s:4474   .text._ZN5Motor15run_calibrationEv:0000000000000000 $t
     /tmp/ccofeNgA.s:4480   .text._ZN5Motor15run_calibrationEv:0000000000000000 _ZN5Motor15run_calibrationEv
.ARM.exidx.text._ZN5Motor15run_calibrationEv:0000000000000000 $d
     /tmp/ccofeNgA.s:4578   .text._ZN5Motor15current_meas_cbEmSt8optionalI9Iph_ABC_tE:0000000000000000 $t
     /tmp/ccofeNgA.s:4584   .text._ZN5Motor15current_meas_cbEmSt8optionalI9Iph_ABC_tE:0000000000000000 _ZN5Motor15current_meas_cbEmSt8optionalI9Iph_ABC_tE
     /tmp/ccofeNgA.s:5517   .text._ZN5Motor15current_meas_cbEmSt8optionalI9Iph_ABC_tE:000000000000027c $d
.ARM.extab.text._ZN5Motor15current_meas_cbEmSt8optionalI9Iph_ABC_tE:0000000000000000 $d
ARM GAS  /tmp/ccofeNgA.s 			page 372


.ARM.exidx.text._ZN5Motor15current_meas_cbEmSt8optionalI9Iph_ABC_tE:0000000000000000 $d
     /tmp/ccofeNgA.s:5547   .text._ZN5Motor11dc_calib_cbEmSt8optionalI9Iph_ABC_tE:0000000000000000 $t
     /tmp/ccofeNgA.s:5553   .text._ZN5Motor11dc_calib_cbEmSt8optionalI9Iph_ABC_tE:0000000000000000 _ZN5Motor11dc_calib_cbEmSt8optionalI9Iph_ABC_tE
     /tmp/ccofeNgA.s:5855   .text._ZN5Motor11dc_calib_cbEmSt8optionalI9Iph_ABC_tE:0000000000000100 $d
.ARM.exidx.text._ZN5Motor11dc_calib_cbEmSt8optionalI9Iph_ABC_tE:0000000000000000 $d
     /tmp/ccofeNgA.s:5870   .text._ZN5Motor13pwm_update_cbEm:0000000000000000 $t
     /tmp/ccofeNgA.s:5876   .text._ZN5Motor13pwm_update_cbEm:0000000000000000 _ZN5Motor13pwm_update_cbEm
     /tmp/ccofeNgA.s:6506   .text._ZN5Motor13pwm_update_cbEm:00000000000001ac $d
.ARM.extab.text._ZN5Motor13pwm_update_cbEm:0000000000000000 $d
.ARM.exidx.text._ZN5Motor13pwm_update_cbEm:0000000000000000 $d
     /tmp/ccofeNgA.s:6535   .rodata._ZN9InputPortIfE7presentEv.str1.4:0000000000000000 $d
     /tmp/ccofeNgA.s:6539   .text._ZN9InputPortIfE7presentEv:0000000000000000 $t
     /tmp/ccofeNgA.s:6545   .text._ZN9InputPortIfE7presentEv:0000000000000000 _ZN9InputPortIfE7presentEv
     /tmp/ccofeNgA.s:7133   .text._ZN9InputPortIfE7presentEv:0000000000000068 $d
.ARM.extab.text._ZN9InputPortIfE7presentEv:0000000000000000 $d
.ARM.exidx.text._ZN9InputPortIfE7presentEv:0000000000000000 $d
     /tmp/ccofeNgA.s:7145   .text._ZN5Motor9do_checksEm:0000000000000000 $t
     /tmp/ccofeNgA.s:7151   .text._ZN5Motor9do_checksEm:0000000000000000 _ZN5Motor9do_checksEm
.ARM.exidx.text._ZN5Motor9do_checksEm:0000000000000000 $d
     /tmp/ccofeNgA.s:7244   .text._ZN5Motor6updateEm:0000000000000000 $t
     /tmp/ccofeNgA.s:7250   .text._ZN5Motor6updateEm:0000000000000000 _ZN5Motor6updateEm
     /tmp/ccofeNgA.s:8337   .text._ZN5Motor6updateEm:0000000000000368 $d
     /tmp/ccofeNgA.s:8348   .text._ZN5Motor6updateEm:0000000000000384 $t
.ARM.extab.text._ZN5Motor6updateEm:0000000000000000 $d
.ARM.exidx.text._ZN5Motor6updateEm:0000000000000000 $d
     /tmp/ccofeNgA.s:8462   .rodata._ZTSSt18bad_variant_access:0000000000000000 _ZTSSt18bad_variant_access
     /tmp/ccofeNgA.s:8459   .rodata._ZTSSt18bad_variant_access:0000000000000000 $d
     /tmp/ccofeNgA.s:8466   .rodata._ZTISt18bad_variant_access:0000000000000000 $d
     /tmp/ccofeNgA.s:8478   .rodata._ZTS13ComponentBase:0000000000000000 _ZTS13ComponentBase
     /tmp/ccofeNgA.s:8475   .rodata._ZTS13ComponentBase:0000000000000000 $d
     /tmp/ccofeNgA.s:8485   .rodata._ZTI13ComponentBase:0000000000000000 _ZTI13ComponentBase
     /tmp/ccofeNgA.s:8482   .rodata._ZTI13ComponentBase:0000000000000000 $d
     /tmp/ccofeNgA.s:8493   .rodata._ZTS15PhaseControlLawILj3EE:0000000000000000 _ZTS15PhaseControlLawILj3EE
     /tmp/ccofeNgA.s:8490   .rodata._ZTS15PhaseControlLawILj3EE:0000000000000000 $d
     /tmp/ccofeNgA.s:8500   .rodata._ZTI15PhaseControlLawILj3EE:0000000000000000 _ZTI15PhaseControlLawILj3EE
     /tmp/ccofeNgA.s:8497   .rodata._ZTI15PhaseControlLawILj3EE:0000000000000000 $d
     /tmp/ccofeNgA.s:8508   .rodata._ZTS31ResistanceMeasurementControlLaw:0000000000000000 _ZTS31ResistanceMeasurementControlLaw
     /tmp/ccofeNgA.s:8505   .rodata._ZTS31ResistanceMeasurementControlLaw:0000000000000000 $d
     /tmp/ccofeNgA.s:8515   .rodata._ZTI31ResistanceMeasurementControlLaw:0000000000000000 _ZTI31ResistanceMeasurementControlLaw
     /tmp/ccofeNgA.s:8512   .rodata._ZTI31ResistanceMeasurementControlLaw:0000000000000000 $d
     /tmp/ccofeNgA.s:8524   .rodata._ZTS31InductanceMeasurementControlLaw:0000000000000000 _ZTS31InductanceMeasurementControlLaw
     /tmp/ccofeNgA.s:8521   .rodata._ZTS31InductanceMeasurementControlLaw:0000000000000000 $d
     /tmp/ccofeNgA.s:8531   .rodata._ZTI31InductanceMeasurementControlLaw:0000000000000000 _ZTI31InductanceMeasurementControlLaw
     /tmp/ccofeNgA.s:8528   .rodata._ZTI31InductanceMeasurementControlLaw:0000000000000000 $d
     /tmp/ccofeNgA.s:8537   .rodata._ZTVSt18bad_variant_access:0000000000000000 $d
     /tmp/ccofeNgA.s:8548   .rodata._ZTV13ComponentBase:0000000000000000 $d
     /tmp/ccofeNgA.s:8557   .rodata._ZTV15PhaseControlLawILj3EE:0000000000000000 $d
     /tmp/ccofeNgA.s:8568   .rodata._ZTV31ResistanceMeasurementControlLaw:0000000000000000 $d
     /tmp/ccofeNgA.s:8581   .rodata._ZTV31InductanceMeasurementControlLaw:0000000000000000 $d
     /tmp/ccofeNgA.s:8593   .rodata:0000000000000000 $d
                           .group:0000000000000000 _ZNSt18bad_variant_accessD5Ev

UNDEFINED SYMBOLS
_ZNSt9exceptionD2Ev
_ZdlPvj
vbus_voltage
__cxa_allocate_exception
ARM GAS  /tmp/ccofeNgA.s 			page 373


__cxa_throw
_ZTVSt9exception
__aeabi_unwind_cpp_pr0
_ZN9TaskTimer7enabledE
_ZN10Controller5resetEv
__cxa_end_cleanup
odrv
brake_resistor_armed
__gxx_personality_v0
update_brake_current
_ZTV24AlphaBetaFrameController
_ZTV23FieldOrientedController
_ZN24ThermistorCurrentLimiter6updateEv
_ZN7Drv83016configEfPf
_ZN7Drv83014initEv
__aeabi_unwind_cpp_pr1
memset
osDelay
_ZN6ODrive14do_fast_checksEv
_ZN7Drv83019do_checksEv
_ZN7Drv83018is_readyEv
_ZN24ThermistorCurrentLimiter9do_checksEv
sqrtf
_ZN13AcimEstimator6updateEm
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTISt9exception
_ZTVN10__cxxabiv117__class_type_infoE
_ZTI24AlphaBetaFrameController
__cxa_pure_virtual
_ZN24AlphaBetaFrameController14on_measurementESt8optionalIfES0_ISt5arrayIfLj3EEEm
_ZN24AlphaBetaFrameController10get_outputEmRA3_fPSt8optionalIfE
