ARM GAS  /tmp/ccPK5rSs.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"thermistor.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._ZL8get_gpioj,"ax",%progbits
  20              		.align	1
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	_ZL8get_gpioj:
  26              		.fnstart
  27              	.LVL0:
  28              	.LFB5151:
  29              		.file 1 "MotorControl/odrive_main.h"
   1:MotorControl/odrive_main.h **** #ifndef __ODRIVE_MAIN_H
   2:MotorControl/odrive_main.h **** #define __ODRIVE_MAIN_H
   3:MotorControl/odrive_main.h **** 
   4:MotorControl/odrive_main.h **** // Hardware configuration
   5:MotorControl/odrive_main.h **** #include <board.h>
   6:MotorControl/odrive_main.h **** 
   7:MotorControl/odrive_main.h **** #ifdef __cplusplus
   8:MotorControl/odrive_main.h **** #include <communication/interface_usb.h>
   9:MotorControl/odrive_main.h **** #include <communication/interface_i2c.h>
  10:MotorControl/odrive_main.h **** #include <communication/interface_uart.h>
  11:MotorControl/odrive_main.h **** #include <task_timer.hpp>
  12:MotorControl/odrive_main.h **** extern "C" {
  13:MotorControl/odrive_main.h **** #endif
  14:MotorControl/odrive_main.h **** 
  15:MotorControl/odrive_main.h **** // OS includes
  16:MotorControl/odrive_main.h **** #include <cmsis_os.h>
  17:MotorControl/odrive_main.h **** 
  18:MotorControl/odrive_main.h **** // extern const float elec_rad_per_enc;
  19:MotorControl/odrive_main.h **** extern uint32_t _reboot_cookie;
  20:MotorControl/odrive_main.h **** 
  21:MotorControl/odrive_main.h **** extern uint64_t serial_number;
  22:MotorControl/odrive_main.h **** extern char serial_number_str[13];
  23:MotorControl/odrive_main.h **** 
  24:MotorControl/odrive_main.h **** #ifdef __cplusplus
  25:MotorControl/odrive_main.h **** }
  26:MotorControl/odrive_main.h **** 
  27:MotorControl/odrive_main.h **** typedef struct {
  28:MotorControl/odrive_main.h ****     bool fully_booted;
  29:MotorControl/odrive_main.h ****     uint32_t uptime; // [ms]
ARM GAS  /tmp/ccPK5rSs.s 			page 2


  30:MotorControl/odrive_main.h ****     uint32_t min_heap_space; // FreeRTOS heap [Bytes]
  31:MotorControl/odrive_main.h ****     uint32_t max_stack_usage_axis; // minimum remaining space since startup [Bytes]
  32:MotorControl/odrive_main.h ****     uint32_t max_stack_usage_usb;
  33:MotorControl/odrive_main.h ****     uint32_t max_stack_usage_uart;
  34:MotorControl/odrive_main.h ****     uint32_t max_stack_usage_startup;
  35:MotorControl/odrive_main.h ****     uint32_t max_stack_usage_can;
  36:MotorControl/odrive_main.h ****     uint32_t max_stack_usage_analog;
  37:MotorControl/odrive_main.h **** 
  38:MotorControl/odrive_main.h ****     uint32_t stack_size_axis;
  39:MotorControl/odrive_main.h ****     uint32_t stack_size_usb;
  40:MotorControl/odrive_main.h ****     uint32_t stack_size_uart;
  41:MotorControl/odrive_main.h ****     uint32_t stack_size_startup;
  42:MotorControl/odrive_main.h ****     uint32_t stack_size_can;
  43:MotorControl/odrive_main.h ****     uint32_t stack_size_analog;
  44:MotorControl/odrive_main.h **** 
  45:MotorControl/odrive_main.h ****     int32_t prio_axis;
  46:MotorControl/odrive_main.h ****     int32_t prio_usb;
  47:MotorControl/odrive_main.h ****     int32_t prio_uart;
  48:MotorControl/odrive_main.h ****     int32_t prio_startup;
  49:MotorControl/odrive_main.h ****     int32_t prio_can;
  50:MotorControl/odrive_main.h ****     int32_t prio_analog;
  51:MotorControl/odrive_main.h **** 
  52:MotorControl/odrive_main.h ****     USBStats_t& usb = usb_stats_;
  53:MotorControl/odrive_main.h ****     I2CStats_t& i2c = i2c_stats_;
  54:MotorControl/odrive_main.h **** } SystemStats_t;
  55:MotorControl/odrive_main.h **** 
  56:MotorControl/odrive_main.h **** struct PWMMapping_t {
  57:MotorControl/odrive_main.h ****     endpoint_ref_t endpoint = {0, 0};
  58:MotorControl/odrive_main.h ****     float min = 0;
  59:MotorControl/odrive_main.h ****     float max = 0;
  60:MotorControl/odrive_main.h **** };
  61:MotorControl/odrive_main.h **** 
  62:MotorControl/odrive_main.h **** // @brief general user configurable board configuration
  63:MotorControl/odrive_main.h **** struct BoardConfig_t {
  64:MotorControl/odrive_main.h ****     ODriveIntf::GpioMode gpio_modes[GPIO_COUNT] = {
  65:MotorControl/odrive_main.h ****         DEFAULT_GPIO_MODES
  66:MotorControl/odrive_main.h ****     };
  67:MotorControl/odrive_main.h **** 
  68:MotorControl/odrive_main.h ****     bool enable_uart_a = true;
  69:MotorControl/odrive_main.h ****     bool enable_uart_b = false;
  70:MotorControl/odrive_main.h ****     bool enable_uart_c = false;
  71:MotorControl/odrive_main.h ****     uint32_t uart_a_baudrate = 115200;
  72:MotorControl/odrive_main.h ****     uint32_t uart_b_baudrate = 115200;
  73:MotorControl/odrive_main.h ****     uint32_t uart_c_baudrate = 115200;
  74:MotorControl/odrive_main.h ****     bool enable_can_a = true;
  75:MotorControl/odrive_main.h ****     bool enable_i2c_a = false;
  76:MotorControl/odrive_main.h ****     ODriveIntf::StreamProtocolType uart0_protocol = ODriveIntf::STREAM_PROTOCOL_TYPE_ASCII_AND_STDO
  77:MotorControl/odrive_main.h ****     ODriveIntf::StreamProtocolType uart1_protocol = ODriveIntf::STREAM_PROTOCOL_TYPE_ASCII_AND_STDO
  78:MotorControl/odrive_main.h ****     ODriveIntf::StreamProtocolType uart2_protocol = ODriveIntf::STREAM_PROTOCOL_TYPE_ASCII_AND_STDO
  79:MotorControl/odrive_main.h ****     ODriveIntf::StreamProtocolType usb_cdc_protocol = ODriveIntf::STREAM_PROTOCOL_TYPE_ASCII_AND_ST
  80:MotorControl/odrive_main.h ****     float max_regen_current = 0.0f;
  81:MotorControl/odrive_main.h ****     float brake_resistance = DEFAULT_BRAKE_RESISTANCE;
  82:MotorControl/odrive_main.h ****     bool enable_brake_resistor = false;
  83:MotorControl/odrive_main.h ****     float dc_bus_undervoltage_trip_level = DEFAULT_MIN_DC_VOLTAGE;      //<! [V] minimum voltage be
  84:MotorControl/odrive_main.h ****     float dc_bus_overvoltage_trip_level = 1.07f * HW_VERSION_VOLTAGE;   //<! [V] maximum voltage ab
  85:MotorControl/odrive_main.h ****                                                                         //<! This protects against 
  86:MotorControl/odrive_main.h ****                                                                         //<! the brake power if the
ARM GAS  /tmp/ccPK5rSs.s 			page 3


  87:MotorControl/odrive_main.h ****                                                                         //<! The default is 26V for
  88:MotorControl/odrive_main.h **** 
  89:MotorControl/odrive_main.h ****     /**
  90:MotorControl/odrive_main.h ****      * If enabled, if the measured DC voltage exceeds `dc_bus_overvoltage_ramp_start`,
  91:MotorControl/odrive_main.h ****      * the ODrive will sink more power than usual into the the brake resistor
  92:MotorControl/odrive_main.h ****      * in an attempt to bring the voltage down again.
  93:MotorControl/odrive_main.h ****      * 
  94:MotorControl/odrive_main.h ****      * The brake duty cycle is increased by the following amount:
  95:MotorControl/odrive_main.h ****      *  vbus_voltage == dc_bus_overvoltage_ramp_start  =>  brake_duty_cycle += 0%
  96:MotorControl/odrive_main.h ****      *  vbus_voltage == dc_bus_overvoltage_ramp_end  =>  brake_duty_cycle += 100%
  97:MotorControl/odrive_main.h ****      * 
  98:MotorControl/odrive_main.h ****      * Remarks:
  99:MotorControl/odrive_main.h ****      *  - This feature is active even when all motors are disarmed.
 100:MotorControl/odrive_main.h ****      *  - This feature is disabled if `brake_resistance` is non-positive.
 101:MotorControl/odrive_main.h ****      */
 102:MotorControl/odrive_main.h ****     bool enable_dc_bus_overvoltage_ramp = false;
 103:MotorControl/odrive_main.h ****     float dc_bus_overvoltage_ramp_start = 1.07f * HW_VERSION_VOLTAGE; //!< See `enable_dc_bus_overv
 104:MotorControl/odrive_main.h ****                                                                       //!< Do not set this lower th
 105:MotorControl/odrive_main.h ****                                                                       //!< unless you like fried br
 106:MotorControl/odrive_main.h ****     float dc_bus_overvoltage_ramp_end = 1.07f * HW_VERSION_VOLTAGE; //!< See `enable_dc_bus_overvol
 107:MotorControl/odrive_main.h ****                                                                     //!< Must be larger than `dc_bu
 108:MotorControl/odrive_main.h ****                                                                     //!< otherwise the ramp feature
 109:MotorControl/odrive_main.h **** 
 110:MotorControl/odrive_main.h ****     float dc_max_positive_current = INFINITY; // Max current [A] the power supply can source
 111:MotorControl/odrive_main.h ****     float dc_max_negative_current = -0.01f; // Max current [A] the power supply can sink. You most 
 112:MotorControl/odrive_main.h ****     uint32_t error_gpio_pin = DEFAULT_ERROR_PIN;
 113:MotorControl/odrive_main.h ****     PWMMapping_t pwm_mappings[4];
 114:MotorControl/odrive_main.h ****     PWMMapping_t analog_mappings[GPIO_COUNT];
 115:MotorControl/odrive_main.h **** };
 116:MotorControl/odrive_main.h **** 
 117:MotorControl/odrive_main.h **** struct TaskTimes {
 118:MotorControl/odrive_main.h ****     TaskTimer sampling;
 119:MotorControl/odrive_main.h ****     TaskTimer control_loop_misc;
 120:MotorControl/odrive_main.h ****     TaskTimer control_loop_checks;
 121:MotorControl/odrive_main.h ****     TaskTimer dc_calib_wait;
 122:MotorControl/odrive_main.h **** };
 123:MotorControl/odrive_main.h **** 
 124:MotorControl/odrive_main.h **** 
 125:MotorControl/odrive_main.h **** // Forward Declarations
 126:MotorControl/odrive_main.h **** class Axis;
 127:MotorControl/odrive_main.h **** class Motor;
 128:MotorControl/odrive_main.h **** 
 129:MotorControl/odrive_main.h **** // TODO: move
 130:MotorControl/odrive_main.h **** // this is technically not thread-safe but practically it might be
 131:MotorControl/odrive_main.h **** #define DEFINE_ENUM_FLAG_OPERATORS(ENUMTYPE) \
 132:MotorControl/odrive_main.h **** inline ENUMTYPE operator | (ENUMTYPE a, ENUMTYPE b) { return static_cast<ENUMTYPE>(static_cast<std:
 133:MotorControl/odrive_main.h **** inline ENUMTYPE operator & (ENUMTYPE a, ENUMTYPE b) { return static_cast<ENUMTYPE>(static_cast<std:
 134:MotorControl/odrive_main.h **** inline ENUMTYPE operator ^ (ENUMTYPE a, ENUMTYPE b) { return static_cast<ENUMTYPE>(static_cast<std:
 135:MotorControl/odrive_main.h **** inline ENUMTYPE &operator |= (ENUMTYPE &a, ENUMTYPE b) { return reinterpret_cast<ENUMTYPE&>(reinter
 136:MotorControl/odrive_main.h **** inline ENUMTYPE &operator &= (ENUMTYPE &a, ENUMTYPE b) { return reinterpret_cast<ENUMTYPE&>(reinter
 137:MotorControl/odrive_main.h **** inline ENUMTYPE &operator ^= (ENUMTYPE &a, ENUMTYPE b) { return reinterpret_cast<ENUMTYPE&>(reinter
 138:MotorControl/odrive_main.h **** inline ENUMTYPE operator ~ (ENUMTYPE a) { return static_cast<ENUMTYPE>(~static_cast<std::underlying
 139:MotorControl/odrive_main.h **** 
 140:MotorControl/odrive_main.h **** #include "autogen/interfaces.hpp"
 141:MotorControl/odrive_main.h **** 
 142:MotorControl/odrive_main.h **** // ODrive specific includes
 143:MotorControl/odrive_main.h **** #include <utils.hpp>
ARM GAS  /tmp/ccPK5rSs.s 			page 4


 144:MotorControl/odrive_main.h **** #include <low_level.h>
 145:MotorControl/odrive_main.h **** #include <encoder.hpp>
 146:MotorControl/odrive_main.h **** #include <sensorless_estimator.hpp>
 147:MotorControl/odrive_main.h **** #include <controller.hpp>
 148:MotorControl/odrive_main.h **** #include <current_limiter.hpp>
 149:MotorControl/odrive_main.h **** #include <thermistor.hpp>
 150:MotorControl/odrive_main.h **** #include <trapTraj.hpp>
 151:MotorControl/odrive_main.h **** #include <endstop.hpp>
 152:MotorControl/odrive_main.h **** #include <mechanical_brake.hpp>
 153:MotorControl/odrive_main.h **** #include <axis.hpp>
 154:MotorControl/odrive_main.h **** #include <oscilloscope.hpp>
 155:MotorControl/odrive_main.h **** #include <communication/communication.h>
 156:MotorControl/odrive_main.h **** #include <communication/can/odrive_can.hpp>
 157:MotorControl/odrive_main.h **** 
 158:MotorControl/odrive_main.h **** // Defined in autogen/version.c based on git-derived version numbers
 159:MotorControl/odrive_main.h **** extern "C" {
 160:MotorControl/odrive_main.h **** extern const unsigned char fw_version_major_;
 161:MotorControl/odrive_main.h **** extern const unsigned char fw_version_minor_;
 162:MotorControl/odrive_main.h **** extern const unsigned char fw_version_revision_;
 163:MotorControl/odrive_main.h **** extern const unsigned char fw_version_unreleased_;
 164:MotorControl/odrive_main.h **** }
 165:MotorControl/odrive_main.h **** 
 166:MotorControl/odrive_main.h **** static Stm32Gpio get_gpio(size_t gpio_num) {
  30              		.loc 1 166 44 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              		.loc 1 166 44 is_stmt 0 view .LVU1
  36 0000 0346     		mov	r3, r0
 167:MotorControl/odrive_main.h ****     return (gpio_num < GPIO_COUNT) ? gpios[gpio_num] : GPIO_COUNT ? gpios[0] : Stm32Gpio::none;
  37              		.loc 1 167 5 is_stmt 1 view .LVU2
  38              		.loc 1 167 36 is_stmt 0 view .LVU3
  39 0002 1029     		cmp	r1, #16
  40 0004 07D8     		bhi	.L3
  41              		.loc 1 167 36 discriminator 1 view .LVU4
  42 0006 054A     		ldr	r2, .L4
  43 0008 02EBC101 		add	r1, r2, r1, lsl #3
  44              	.LVL1:
  45              	.L2:
  46              		.loc 1 167 91 discriminator 4 view .LVU5
  47 000c 03C9     		ldm	r1, {r0, r1}
  48              	.LVL2:
  49              		.loc 1 167 91 discriminator 4 view .LVU6
  50 000e 83E80300 		stm	r3, {r0, r1}
 168:MotorControl/odrive_main.h **** }
  51              		.loc 1 168 1 discriminator 4 view .LVU7
  52 0012 1846     		mov	r0, r3
  53 0014 7047     		bx	lr
  54              	.LVL3:
  55              	.L3:
 167:MotorControl/odrive_main.h ****     return (gpio_num < GPIO_COUNT) ? gpios[gpio_num] : GPIO_COUNT ? gpios[0] : Stm32Gpio::none;
  56              		.loc 1 167 36 view .LVU8
  57 0016 0149     		ldr	r1, .L4
  58              	.LVL4:
 167:MotorControl/odrive_main.h ****     return (gpio_num < GPIO_COUNT) ? gpios[gpio_num] : GPIO_COUNT ? gpios[0] : Stm32Gpio::none;
  59              		.loc 1 167 36 view .LVU9
ARM GAS  /tmp/ccPK5rSs.s 			page 5


  60 0018 F8E7     		b	.L2
  61              	.L5:
  62 001a 00BF     		.align	2
  63              	.L4:
  64 001c 00000000 		.word	gpios
  65              		.cfi_endproc
  66              	.LFE5151:
  67              		.cantunwind
  68              		.fnend
  70              		.section	.text._ZNK24ThermistorCurrentLimiter17get_current_limitEf,"ax",%progbits
  71              		.align	1
  72              		.global	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  77              	_ZNK24ThermistorCurrentLimiter17get_current_limitEf:
  78              		.fnstart
  79              	.LVL5:
  80              	.LFB5170:
  81              		.file 2 "MotorControl/thermistor.cpp"
   1:MotorControl/thermistor.cpp **** #include "odrive_main.h"
   2:MotorControl/thermistor.cpp **** 
   3:MotorControl/thermistor.cpp **** #include "low_level.h"
   4:MotorControl/thermistor.cpp **** 
   5:MotorControl/thermistor.cpp **** ThermistorCurrentLimiter::ThermistorCurrentLimiter(uint16_t adc_channel,
   6:MotorControl/thermistor.cpp ****                                                    const float* const coefficients,
   7:MotorControl/thermistor.cpp ****                                                    size_t num_coeffs,
   8:MotorControl/thermistor.cpp ****                                                    const float& temp_limit_lower,
   9:MotorControl/thermistor.cpp ****                                                    const float& temp_limit_upper,
  10:MotorControl/thermistor.cpp ****                                                    const bool& enabled) :
  11:MotorControl/thermistor.cpp ****     adc_channel_(adc_channel),
  12:MotorControl/thermistor.cpp ****     coefficients_(coefficients),
  13:MotorControl/thermistor.cpp ****     num_coeffs_(num_coeffs),
  14:MotorControl/thermistor.cpp ****     temperature_(NAN),
  15:MotorControl/thermistor.cpp ****     temp_limit_lower_(temp_limit_lower),
  16:MotorControl/thermistor.cpp ****     temp_limit_upper_(temp_limit_upper),
  17:MotorControl/thermistor.cpp ****     enabled_(enabled)
  18:MotorControl/thermistor.cpp **** {
  19:MotorControl/thermistor.cpp **** }
  20:MotorControl/thermistor.cpp **** 
  21:MotorControl/thermistor.cpp **** void ThermistorCurrentLimiter::update() {
  22:MotorControl/thermistor.cpp ****     const float normalized_voltage = get_adc_relative_voltage_ch(adc_channel_);
  23:MotorControl/thermistor.cpp ****     float raw_temperature_ = horner_poly_eval(normalized_voltage, coefficients_, num_coeffs_);
  24:MotorControl/thermistor.cpp **** 
  25:MotorControl/thermistor.cpp ****     constexpr float tau = 0.1f; // [sec]
  26:MotorControl/thermistor.cpp ****     float k = current_meas_period / tau;
  27:MotorControl/thermistor.cpp ****     float val = raw_temperature_;
  28:MotorControl/thermistor.cpp ****     for (float& lpf_val : lpf_vals_) {
  29:MotorControl/thermistor.cpp ****         lpf_val += k * (val - lpf_val);
  30:MotorControl/thermistor.cpp ****         val = lpf_val;
  31:MotorControl/thermistor.cpp ****     }
  32:MotorControl/thermistor.cpp ****     if (is_nan(val)) {
  33:MotorControl/thermistor.cpp ****         lpf_vals_.fill(0.0f);
  34:MotorControl/thermistor.cpp ****     }
  35:MotorControl/thermistor.cpp ****     temperature_ = lpf_vals_.back();
  36:MotorControl/thermistor.cpp **** }
  37:MotorControl/thermistor.cpp **** 
ARM GAS  /tmp/ccPK5rSs.s 			page 6


  38:MotorControl/thermistor.cpp **** bool ThermistorCurrentLimiter::do_checks() {
  39:MotorControl/thermistor.cpp ****     if (enabled_ && temperature_ >= temp_limit_upper_ + 5) {
  40:MotorControl/thermistor.cpp ****         return false;
  41:MotorControl/thermistor.cpp ****     }
  42:MotorControl/thermistor.cpp ****     return true;
  43:MotorControl/thermistor.cpp **** }
  44:MotorControl/thermistor.cpp **** 
  45:MotorControl/thermistor.cpp **** float ThermistorCurrentLimiter::get_current_limit(float base_current_lim) const {
  82              		.loc 2 45 81 is_stmt 1 view -0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 16
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87              		.loc 2 45 81 is_stmt 0 view .LVU11
  88 0000 84B0     		sub	sp, sp, #16
  89              	.LCFI0:
  90              		.cfi_def_cfa_offset 16
  91 0002 8DED010A 		vstr.32	s0, [sp, #4]
  46:MotorControl/thermistor.cpp ****     if (!enabled_) {
  92              		.loc 2 46 5 is_stmt 1 view .LVU12
  93              		.loc 2 46 10 is_stmt 0 view .LVU13
  94 0006 C369     		ldr	r3, [r0, #28]
  95 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  96              		.loc 2 46 5 view .LVU14
  97 000a 3BB3     		cbz	r3, .L6
  47:MotorControl/thermistor.cpp ****         return base_current_lim;
  48:MotorControl/thermistor.cpp ****     }
  49:MotorControl/thermistor.cpp **** 
  50:MotorControl/thermistor.cpp ****     const float temp_margin = temp_limit_upper_ - temperature_;
  98              		.loc 2 50 5 is_stmt 1 view .LVU15
  99              		.loc 2 50 31 is_stmt 0 view .LVU16
 100 000c 8369     		ldr	r3, [r0, #24]
 101 000e D3ED007A 		vldr.32	s15, [r3]
 102              		.loc 2 50 51 view .LVU17
 103 0012 D0ED046A 		vldr.32	s13, [r0, #16]
 104              		.loc 2 50 17 view .LVU18
 105 0016 77EEE66A 		vsub.f32	s13, s15, s13
 106              	.LVL6:
  51:MotorControl/thermistor.cpp ****     const float derating_range = temp_limit_upper_ - temp_limit_lower_;
 107              		.loc 2 51 5 is_stmt 1 view .LVU19
 108              		.loc 2 51 54 is_stmt 0 view .LVU20
 109 001a 4369     		ldr	r3, [r0, #20]
 110 001c 93ED007A 		vldr.32	s14, [r3]
 111              		.loc 2 51 17 view .LVU21
 112 0020 37EEC77A 		vsub.f32	s14, s15, s14
 113              	.LVL7:
  52:MotorControl/thermistor.cpp ****     float thermal_current_lim = base_current_lim * (temp_margin / derating_range);
 114              		.loc 2 52 5 is_stmt 1 view .LVU22
 115              		.loc 2 52 65 is_stmt 0 view .LVU23
 116 0024 C6EE877A 		vdiv.f32	s15, s13, s14
 117              		.loc 2 52 50 view .LVU24
 118 0028 9DED017A 		vldr.32	s14, [sp, #4]
 119              	.LVL8:
 120              		.loc 2 52 50 view .LVU25
 121 002c 67EE877A 		vmul.f32	s15, s15, s14
 122              		.loc 2 52 11 view .LVU26
 123 0030 CDED037A 		vstr.32	s15, [sp, #12]
ARM GAS  /tmp/ccPK5rSs.s 			page 7


 124              	.LVL9:
  53:MotorControl/thermistor.cpp ****     if (thermal_current_lim < 0.0f || is_nan(thermal_current_lim)) {
 125              		.loc 2 53 5 is_stmt 1 view .LVU27
 126              		.loc 2 53 36 is_stmt 0 view .LVU28
 127 0034 F5EEC07A 		vcmpe.f32	s15, #0
 128 0038 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 129 003c 10D4     		bmi	.L9
 130              	.LVL10:
 131              		.file 3 "./MotorControl/utils.hpp"
   1:./MotorControl/utils.hpp **** #pragma once
   2:./MotorControl/utils.hpp **** 
   3:./MotorControl/utils.hpp **** #include <stdint.h>
   4:./MotorControl/utils.hpp **** #include <limits>
   5:./MotorControl/utils.hpp **** #include <algorithm>
   6:./MotorControl/utils.hpp **** #include <array>
   7:./MotorControl/utils.hpp **** #include <tuple>
   8:./MotorControl/utils.hpp **** #include <cmath>
   9:./MotorControl/utils.hpp **** 
  10:./MotorControl/utils.hpp **** /**
  11:./MotorControl/utils.hpp ****  * @brief Flash size register address
  12:./MotorControl/utils.hpp ****  */
  13:./MotorControl/utils.hpp **** #define ID_FLASH_ADDRESS (0x1FFF7A22)
  14:./MotorControl/utils.hpp **** 
  15:./MotorControl/utils.hpp **** /**
  16:./MotorControl/utils.hpp ****  * @brief Device ID register address
  17:./MotorControl/utils.hpp ****  */
  18:./MotorControl/utils.hpp **** #define ID_DBGMCU_IDCODE (0xE0042000)
  19:./MotorControl/utils.hpp **** 
  20:./MotorControl/utils.hpp **** /**
  21:./MotorControl/utils.hpp ****  * "Returns" the device signature
  22:./MotorControl/utils.hpp ****  *
  23:./MotorControl/utils.hpp ****  * Possible returns:
  24:./MotorControl/utils.hpp ****  *    - 0x0413: STM32F405xx/07xx and STM32F415xx/17xx)
  25:./MotorControl/utils.hpp ****  *    - 0x0419: STM32F42xxx and STM32F43xxx
  26:./MotorControl/utils.hpp ****  *    - 0x0423: STM32F401xB/C
  27:./MotorControl/utils.hpp ****  *    - 0x0433: STM32F401xD/E
  28:./MotorControl/utils.hpp ****  *    - 0x0431: STM32F411xC/E
  29:./MotorControl/utils.hpp ****  *
  30:./MotorControl/utils.hpp ****  * Returned data is in 16-bit mode, but only bits 11:0 are valid, bits 15:12 are always 0.
  31:./MotorControl/utils.hpp ****  * Defined as macro
  32:./MotorControl/utils.hpp ****  */
  33:./MotorControl/utils.hpp **** #define STM_ID_GetSignature() ((*(uint16_t *)(ID_DBGMCU_IDCODE)) & 0x0FFF)
  34:./MotorControl/utils.hpp **** 
  35:./MotorControl/utils.hpp **** /**
  36:./MotorControl/utils.hpp ****  * "Returns" the device revision
  37:./MotorControl/utils.hpp ****  *
  38:./MotorControl/utils.hpp ****  * Revisions possible:
  39:./MotorControl/utils.hpp ****  *    - 0x1000: Revision A
  40:./MotorControl/utils.hpp ****  *    - 0x1001: Revision Z
  41:./MotorControl/utils.hpp ****  *    - 0x1003: Revision Y
  42:./MotorControl/utils.hpp ****  *    - 0x1007: Revision 1
  43:./MotorControl/utils.hpp ****  *    - 0x2001: Revision 3
  44:./MotorControl/utils.hpp ****  *
  45:./MotorControl/utils.hpp ****  * Returned data is in 16-bit mode.
  46:./MotorControl/utils.hpp ****  */
  47:./MotorControl/utils.hpp **** #define STM_ID_GetRevision() (*(uint16_t *)(ID_DBGMCU_IDCODE + 2))
  48:./MotorControl/utils.hpp **** 
ARM GAS  /tmp/ccPK5rSs.s 			page 8


  49:./MotorControl/utils.hpp **** /**
  50:./MotorControl/utils.hpp **** * "Returns" the Flash size
  51:./MotorControl/utils.hpp **** *
  52:./MotorControl/utils.hpp **** * Returned data is in 16-bit mode, returned value is flash size in kB (kilo bytes).
  53:./MotorControl/utils.hpp **** */
  54:./MotorControl/utils.hpp **** #define STM_ID_GetFlashSize() (*(uint16_t *)(ID_FLASH_ADDRESS))
  55:./MotorControl/utils.hpp **** 
  56:./MotorControl/utils.hpp **** #ifdef M_PI
  57:./MotorControl/utils.hpp **** #undef M_PI
  58:./MotorControl/utils.hpp **** #endif
  59:./MotorControl/utils.hpp **** 
  60:./MotorControl/utils.hpp **** // Math Constants
  61:./MotorControl/utils.hpp **** constexpr float M_PI = 3.14159265358979323846f;
  62:./MotorControl/utils.hpp **** constexpr float one_by_sqrt3 = 0.57735026919f;
  63:./MotorControl/utils.hpp **** constexpr float two_by_sqrt3 = 1.15470053838f;
  64:./MotorControl/utils.hpp **** constexpr float sqrt3_by_2 = 0.86602540378f;
  65:./MotorControl/utils.hpp **** 
  66:./MotorControl/utils.hpp **** // Function prototypes for implementations in utils.cpp
  67:./MotorControl/utils.hpp **** std::tuple<float, float, float, bool> SVM(float alpha, float beta);
  68:./MotorControl/utils.hpp **** float fast_atan2(float y, float x);
  69:./MotorControl/utils.hpp **** uint32_t deadline_to_timeout(uint32_t deadline_ms);
  70:./MotorControl/utils.hpp **** uint32_t timeout_to_deadline(uint32_t timeout_ms);
  71:./MotorControl/utils.hpp **** int is_in_the_future(uint32_t time_ms);
  72:./MotorControl/utils.hpp **** uint32_t micros(void);
  73:./MotorControl/utils.hpp **** void delay_us(uint32_t us);
  74:./MotorControl/utils.hpp **** 
  75:./MotorControl/utils.hpp **** extern "C" {
  76:./MotorControl/utils.hpp **** float our_arm_sin_f32(float x);
  77:./MotorControl/utils.hpp **** float our_arm_cos_f32(float x);
  78:./MotorControl/utils.hpp **** }
  79:./MotorControl/utils.hpp **** 
  80:./MotorControl/utils.hpp **** // ----------------
  81:./MotorControl/utils.hpp **** // Inline functions
  82:./MotorControl/utils.hpp **** 
  83:./MotorControl/utils.hpp **** template<typename T>
  84:./MotorControl/utils.hpp **** constexpr T SQ(const T& x){
  85:./MotorControl/utils.hpp ****     return x * x;
  86:./MotorControl/utils.hpp **** }
  87:./MotorControl/utils.hpp **** 
  88:./MotorControl/utils.hpp **** /**
  89:./MotorControl/utils.hpp ****  * @brief Small helper to make array with known size
  90:./MotorControl/utils.hpp ****  * in contrast to initializer lists the number of arguments
  91:./MotorControl/utils.hpp ****  * has to match exactly. Whereas initializer lists allow
  92:./MotorControl/utils.hpp ****  * less arguments.
  93:./MotorControl/utils.hpp ****  */
  94:./MotorControl/utils.hpp **** template <class T, class... Tail>
  95:./MotorControl/utils.hpp **** std::array<T, 1 + sizeof...(Tail)> make_array(T head, Tail... tail) {
  96:./MotorControl/utils.hpp ****     return std::array<T, 1 + sizeof...(Tail)>({head, tail...});
  97:./MotorControl/utils.hpp **** }
  98:./MotorControl/utils.hpp **** 
  99:./MotorControl/utils.hpp **** // To allow use of -ffast-math we need to have a special check for nan
 100:./MotorControl/utils.hpp **** // that bypasses the "ignore nan" flag
 101:./MotorControl/utils.hpp **** __attribute__((optimize("-fno-finite-math-only")))
 102:./MotorControl/utils.hpp **** inline bool is_nan(float x) {
 103:./MotorControl/utils.hpp ****     return __builtin_isnan(x);
 132              		.loc 3 103 5 is_stmt 1 discriminator 2 view .LVU29
 133              		.loc 2 53 36 is_stmt 0 discriminator 2 view .LVU30
ARM GAS  /tmp/ccPK5rSs.s 			page 9


 134 003e F4EE677A 		vcmp.f32	s15, s15
 135 0042 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 136 0046 0BD6     		bvs	.L9
 137              	.L10:
  54:MotorControl/thermistor.cpp ****         thermal_current_lim = 0.0f;
  55:MotorControl/thermistor.cpp ****     }
  56:MotorControl/thermistor.cpp **** 
  57:MotorControl/thermistor.cpp ****     return std::min(thermal_current_lim, base_current_lim);
 138              		.loc 2 57 5 is_stmt 1 view .LVU31
 139              	.LVL11:
 140              	.LBB107:
 141              	.LBI107:
 142              		.file 4 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
ARM GAS  /tmp/ccPK5rSs.s 			page 10


  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** {
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
ARM GAS  /tmp/ccPK5rSs.s 			page 11


 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
ARM GAS  /tmp/ccPK5rSs.s 			page 12


 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccPK5rSs.s 			page 13


 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 143              		.loc 4 230 5 view .LVU32
 144              	.LBB108:
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 145              		.loc 4 235 15 is_stmt 0 view .LVU33
 146 0048 DDED037A 		vldr.32	s15, [sp, #12]
 147              		.loc 4 235 7 view .LVU34
 148 004c B4EEE77A 		vcmpe.f32	s14, s15
 149 0050 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 150 0054 07D4     		bmi	.L12
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 151              		.loc 4 237 14 view .LVU35
 152 0056 03AB     		add	r3, sp, #12
 153              	.LVL12:
 154              	.L11:
 155              		.loc 4 237 14 view .LVU36
 156              	.LBE108:
 157              	.LBE107:
 158              		.loc 2 57 58 view .LVU37
 159 0058 93ED000A 		vldr.32	s0, [r3]
 160              	.LVL13:
 161              	.L6:
  58:MotorControl/thermistor.cpp **** }
 162              		.loc 2 58 1 view .LVU38
 163 005c 04B0     		add	sp, sp, #16
 164              	.LCFI1:
 165              		.cfi_remember_state
 166              		.cfi_def_cfa_offset 0
 167              	.LVL14:
 168              		.loc 2 58 1 view .LVU39
 169              		@ sp needed
 170 005e 7047     		bx	lr
 171              	.LVL15:
 172              	.L9:
 173              	.LCFI2:
 174              		.cfi_restore_state
  54:MotorControl/thermistor.cpp ****     }
 175              		.loc 2 54 9 is_stmt 1 discriminator 3 view .LVU40
ARM GAS  /tmp/ccPK5rSs.s 			page 14


  54:MotorControl/thermistor.cpp ****     }
 176              		.loc 2 54 29 is_stmt 0 discriminator 3 view .LVU41
 177 0060 0023     		movs	r3, #0
 178 0062 0393     		str	r3, [sp, #12]	@ float
 179 0064 F0E7     		b	.L10
 180              	.LVL16:
 181              	.L12:
 182              	.LBB110:
 183              	.LBB109:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 184              		.loc 4 236 9 view .LVU42
 185 0066 01AB     		add	r3, sp, #4
 186              	.LVL17:
 236:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 187              		.loc 4 236 9 view .LVU43
 188 0068 F6E7     		b	.L11
 189              	.LBE109:
 190              	.LBE110:
 191              		.cfi_endproc
 192              	.LFE5170:
 193              		.cantunwind
 194              		.fnend
 196              		.section	.text._ZN24ThermistorCurrentLimiterD2Ev,"axG",%progbits,_ZN24ThermistorCurrentLimiterD5Ev
 197              		.align	1
 198              		.weak	_ZN24ThermistorCurrentLimiterD2Ev
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 203              	_ZN24ThermistorCurrentLimiterD2Ev:
 204              		.fnstart
 205              	.LVL18:
 206              	.LFB5174:
 207              		.file 5 "./MotorControl/thermistor.hpp"
   1:./MotorControl/thermistor.hpp **** #ifndef __THERMISTOR_HPP
   2:./MotorControl/thermistor.hpp **** #define __THERMISTOR_HPP
   3:./MotorControl/thermistor.hpp **** 
   4:./MotorControl/thermistor.hpp **** class Motor; // declared in motor.hpp
   5:./MotorControl/thermistor.hpp **** 
   6:./MotorControl/thermistor.hpp **** #include "current_limiter.hpp"
   7:./MotorControl/thermistor.hpp **** #include <autogen/interfaces.hpp>
   8:./MotorControl/thermistor.hpp **** 
   9:./MotorControl/thermistor.hpp **** class ThermistorCurrentLimiter : public CurrentLimiter, public ODriveIntf::ThermistorCurrentLimiter
  10:./MotorControl/thermistor.hpp **** public:
  11:./MotorControl/thermistor.hpp ****     virtual ~ThermistorCurrentLimiter() = default;
 208              		.loc 5 11 13 is_stmt 1 view -0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213              	.LBB111:
 214              		.loc 5 11 13 is_stmt 0 view .LVU45
 215 0000 024A     		ldr	r2, .L15
 216 0002 0260     		str	r2, [r0]
 217              	.LVL19:
 218              	.LBB112:
 219              	.LBI112:
 220              		.file 6 "./MotorControl/current_limiter.hpp"
ARM GAS  /tmp/ccPK5rSs.s 			page 15


   1:./MotorControl/current_limiter.hpp **** #ifndef __CURRENT_LIMITER_HPP
   2:./MotorControl/current_limiter.hpp **** #define __CURRENT_LIMITER_HPP
   3:./MotorControl/current_limiter.hpp **** 
   4:./MotorControl/current_limiter.hpp **** class CurrentLimiter {
   5:./MotorControl/current_limiter.hpp **** public:
   6:./MotorControl/current_limiter.hpp ****     virtual ~CurrentLimiter() = default;
 221              		.loc 6 6 13 is_stmt 1 view .LVU46
 222              	.LBB113:
 223 0004 024A     		ldr	r2, .L15+4
 224 0006 0260     		str	r2, [r0]
 225              	.LVL20:
 226              		.loc 6 6 13 is_stmt 0 view .LVU47
 227              	.LBE113:
 228              	.LBE112:
 229              	.LBE111:
 230              		.loc 5 11 13 view .LVU48
 231 0008 7047     		bx	lr
 232              	.L16:
 233 000a 00BF     		.align	2
 234              	.L15:
 235 000c 08000000 		.word	.LANCHOR0+8
 236 0010 08000000 		.word	_ZTV14CurrentLimiter+8
 237              		.cfi_endproc
 238              	.LFE5174:
 239              		.cantunwind
 240              		.fnend
 242              		.weak	_ZN24ThermistorCurrentLimiterD1Ev
 243              		.thumb_set _ZN24ThermistorCurrentLimiterD1Ev,_ZN24ThermistorCurrentLimiterD2Ev
 244              		.section	.text._ZN32OffboardThermistorCurrentLimiterD2Ev,"axG",%progbits,_ZN32OffboardThermistorCu
 245              		.align	1
 246              		.weak	_ZN32OffboardThermistorCurrentLimiterD2Ev
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 251              	_ZN32OffboardThermistorCurrentLimiterD2Ev:
 252              		.fnstart
 253              	.LVL21:
 254              	.LFB6184:
  12:./MotorControl/thermistor.hpp **** 
  13:./MotorControl/thermistor.hpp ****     ThermistorCurrentLimiter(uint16_t adc_channel,
  14:./MotorControl/thermistor.hpp ****                              const float* const coefficients,
  15:./MotorControl/thermistor.hpp ****                              size_t num_coeffs,
  16:./MotorControl/thermistor.hpp ****                              const float& temp_limit_lower,
  17:./MotorControl/thermistor.hpp ****                              const float& temp_limit_upper,
  18:./MotorControl/thermistor.hpp ****                              const bool& enabled);
  19:./MotorControl/thermistor.hpp **** 
  20:./MotorControl/thermistor.hpp ****     void update();
  21:./MotorControl/thermistor.hpp ****     bool do_checks();
  22:./MotorControl/thermistor.hpp ****     float get_current_limit(float base_current_lim) const override;
  23:./MotorControl/thermistor.hpp **** 
  24:./MotorControl/thermistor.hpp ****     uint16_t adc_channel_;
  25:./MotorControl/thermistor.hpp ****     const float* const coefficients_;
  26:./MotorControl/thermistor.hpp ****     const size_t num_coeffs_;
  27:./MotorControl/thermistor.hpp ****     float temperature_ = NAN; // [°C] NaN while the ODrive is initializing.
  28:./MotorControl/thermistor.hpp ****     const float& temp_limit_lower_;
  29:./MotorControl/thermistor.hpp ****     const float& temp_limit_upper_;
  30:./MotorControl/thermistor.hpp ****     const bool& enabled_;
ARM GAS  /tmp/ccPK5rSs.s 			page 16


  31:./MotorControl/thermistor.hpp ****     Motor* motor_ = nullptr; // set by Motor::apply_config()
  32:./MotorControl/thermistor.hpp ****     std::array<float, 2> lpf_vals_ = { 0.0f };
  33:./MotorControl/thermistor.hpp **** };
  34:./MotorControl/thermistor.hpp **** 
  35:./MotorControl/thermistor.hpp **** class OnboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Onboard
  36:./MotorControl/thermistor.hpp **** public:
  37:./MotorControl/thermistor.hpp ****     struct Config_t {
  38:./MotorControl/thermistor.hpp ****         float temp_limit_lower = 100;
  39:./MotorControl/thermistor.hpp ****         float temp_limit_upper = 120;
  40:./MotorControl/thermistor.hpp ****         bool enabled = true;
  41:./MotorControl/thermistor.hpp ****     };
  42:./MotorControl/thermistor.hpp **** 
  43:./MotorControl/thermistor.hpp ****     virtual ~OnboardThermistorCurrentLimiter() = default;
  44:./MotorControl/thermistor.hpp ****     OnboardThermistorCurrentLimiter(uint16_t adc_channel, const float* const coefficients, size_t n
  45:./MotorControl/thermistor.hpp **** 
  46:./MotorControl/thermistor.hpp ****     Config_t config_;
  47:./MotorControl/thermistor.hpp **** };
  48:./MotorControl/thermistor.hpp **** 
  49:./MotorControl/thermistor.hpp **** class OffboardThermistorCurrentLimiter : public ThermistorCurrentLimiter, public ODriveIntf::Offboa
  50:./MotorControl/thermistor.hpp **** public:
  51:./MotorControl/thermistor.hpp ****     static const size_t num_coeffs_ = 4;
  52:./MotorControl/thermistor.hpp **** 
  53:./MotorControl/thermistor.hpp ****     struct Config_t {
  54:./MotorControl/thermistor.hpp ****         float thermistor_poly_coeffs[num_coeffs_];
  55:./MotorControl/thermistor.hpp **** 
  56:./MotorControl/thermistor.hpp **** #if HW_VERSION_MAJOR == 3
  57:./MotorControl/thermistor.hpp ****         uint16_t gpio_pin = 4;
  58:./MotorControl/thermistor.hpp **** #elif HW_VERSION_MAJOR == 4
  59:./MotorControl/thermistor.hpp ****         uint16_t gpio_pin = 2;
  60:./MotorControl/thermistor.hpp **** #endif
  61:./MotorControl/thermistor.hpp ****         float temp_limit_lower = 100;
  62:./MotorControl/thermistor.hpp ****         float temp_limit_upper = 120;
  63:./MotorControl/thermistor.hpp ****         bool enabled = false;
  64:./MotorControl/thermistor.hpp **** 
  65:./MotorControl/thermistor.hpp ****         // custom setters
  66:./MotorControl/thermistor.hpp ****         OffboardThermistorCurrentLimiter* parent;
  67:./MotorControl/thermistor.hpp ****         void set_gpio_pin(uint16_t value) { gpio_pin = value; parent->decode_pin(); }
  68:./MotorControl/thermistor.hpp ****     };
  69:./MotorControl/thermistor.hpp **** 
  70:./MotorControl/thermistor.hpp ****     virtual ~OffboardThermistorCurrentLimiter() = default;
 255              		.loc 5 70 13 is_stmt 1 view -0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              		@ link register save eliminated.
 260              	.LBB114:
 261              		.loc 5 70 13 is_stmt 0 view .LVU50
 262 0000 034A     		ldr	r2, .L18
 263 0002 0260     		str	r2, [r0]
 264              	.LVL22:
 265              	.LBB115:
 266              	.LBI115:
  11:./MotorControl/thermistor.hpp **** 
 267              		.loc 5 11 13 is_stmt 1 view .LVU51
 268              	.LBB116:
 269 0004 034A     		ldr	r2, .L18+4
 270 0006 0260     		str	r2, [r0]
ARM GAS  /tmp/ccPK5rSs.s 			page 17


 271              	.LVL23:
 272              	.LBB117:
 273              	.LBI117:
 274              		.loc 6 6 13 view .LVU52
 275              	.LBB118:
 276 0008 034A     		ldr	r2, .L18+8
 277 000a 0260     		str	r2, [r0]
 278              	.LVL24:
 279              		.loc 6 6 13 is_stmt 0 view .LVU53
 280              	.LBE118:
 281              	.LBE117:
 282              	.LBE116:
 283              	.LBE115:
 284              	.LBE114:
 285              		.loc 5 70 13 view .LVU54
 286 000c 7047     		bx	lr
 287              	.L19:
 288 000e 00BF     		.align	2
 289              	.L18:
 290 0010 08000000 		.word	_ZTV32OffboardThermistorCurrentLimiter+8
 291 0014 08000000 		.word	.LANCHOR0+8
 292 0018 08000000 		.word	_ZTV14CurrentLimiter+8
 293              		.cfi_endproc
 294              	.LFE6184:
 295              		.cantunwind
 296              		.fnend
 298              		.weak	_ZN32OffboardThermistorCurrentLimiterD1Ev
 299              		.thumb_set _ZN32OffboardThermistorCurrentLimiterD1Ev,_ZN32OffboardThermistorCurrentLimiterD2Ev
 300              		.section	.text._ZN31OnboardThermistorCurrentLimiterD2Ev,"axG",%progbits,_ZN31OnboardThermistorCurr
 301              		.align	1
 302              		.weak	_ZN31OnboardThermistorCurrentLimiterD2Ev
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 307              	_ZN31OnboardThermistorCurrentLimiterD2Ev:
 308              		.fnstart
 309              	.LVL25:
 310              	.LFB6188:
  43:./MotorControl/thermistor.hpp ****     OnboardThermistorCurrentLimiter(uint16_t adc_channel, const float* const coefficients, size_t n
 311              		.loc 5 43 13 is_stmt 1 view -0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 0
 314              		@ frame_needed = 0, uses_anonymous_args = 0
 315              		@ link register save eliminated.
 316              	.LBB119:
  43:./MotorControl/thermistor.hpp ****     OnboardThermistorCurrentLimiter(uint16_t adc_channel, const float* const coefficients, size_t n
 317              		.loc 5 43 13 is_stmt 0 view .LVU56
 318 0000 034A     		ldr	r2, .L21
 319 0002 0260     		str	r2, [r0]
 320              	.LVL26:
 321              	.LBB120:
 322              	.LBI120:
  11:./MotorControl/thermistor.hpp **** 
 323              		.loc 5 11 13 is_stmt 1 view .LVU57
 324              	.LBB121:
 325 0004 034A     		ldr	r2, .L21+4
 326 0006 0260     		str	r2, [r0]
ARM GAS  /tmp/ccPK5rSs.s 			page 18


 327              	.LVL27:
 328              	.LBB122:
 329              	.LBI122:
 330              		.loc 6 6 13 view .LVU58
 331              	.LBB123:
 332 0008 034A     		ldr	r2, .L21+8
 333 000a 0260     		str	r2, [r0]
 334              	.LVL28:
 335              		.loc 6 6 13 is_stmt 0 view .LVU59
 336              	.LBE123:
 337              	.LBE122:
 338              	.LBE121:
 339              	.LBE120:
 340              	.LBE119:
  43:./MotorControl/thermistor.hpp ****     OnboardThermistorCurrentLimiter(uint16_t adc_channel, const float* const coefficients, size_t n
 341              		.loc 5 43 13 view .LVU60
 342 000c 7047     		bx	lr
 343              	.L22:
 344 000e 00BF     		.align	2
 345              	.L21:
 346 0010 08000000 		.word	_ZTV31OnboardThermistorCurrentLimiter+8
 347 0014 08000000 		.word	.LANCHOR0+8
 348 0018 08000000 		.word	_ZTV14CurrentLimiter+8
 349              		.cfi_endproc
 350              	.LFE6188:
 351              		.cantunwind
 352              		.fnend
 354              		.weak	_ZN31OnboardThermistorCurrentLimiterD1Ev
 355              		.thumb_set _ZN31OnboardThermistorCurrentLimiterD1Ev,_ZN31OnboardThermistorCurrentLimiterD2Ev
 356              		.section	.text._ZN24ThermistorCurrentLimiterD0Ev,"axG",%progbits,_ZN24ThermistorCurrentLimiterD5Ev
 357              		.align	1
 358              		.weak	_ZN24ThermistorCurrentLimiterD0Ev
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 363              	_ZN24ThermistorCurrentLimiterD0Ev:
 364              		.fnstart
 365              	.LVL29:
 366              	.LFB5176:
  11:./MotorControl/thermistor.hpp **** 
 367              		.loc 5 11 13 is_stmt 1 view -0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
  11:./MotorControl/thermistor.hpp **** 
 371              		.loc 5 11 13 is_stmt 0 view .LVU62
 372 0000 10B5     		push	{r4, lr}
 373              	.LCFI3:
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 4, -8
 376              		.cfi_offset 14, -4
 377 0002 0446     		mov	r4, r0
 378              	.LVL30:
 379              	.LBB124:
 380              	.LBI124:
  11:./MotorControl/thermistor.hpp **** 
 381              		.loc 5 11 13 is_stmt 1 view .LVU63
ARM GAS  /tmp/ccPK5rSs.s 			page 19


 382              	.LBB125:
 383 0004 044B     		ldr	r3, .L25
 384 0006 0360     		str	r3, [r0]
 385              	.LVL31:
 386              	.LBB126:
 387              	.LBI126:
 388              		.loc 6 6 13 view .LVU64
 389              	.LBB127:
 390 0008 044B     		ldr	r3, .L25+4
 391 000a 0360     		str	r3, [r0]
 392              	.LVL32:
 393              		.loc 6 6 13 is_stmt 0 view .LVU65
 394              	.LBE127:
 395              	.LBE126:
 396              	.LBE125:
 397              	.LBE124:
  11:./MotorControl/thermistor.hpp **** 
 398              		.loc 5 11 13 view .LVU66
 399 000c 2C21     		movs	r1, #44
 400 000e FFF7FEFF 		bl	_ZdlPvj
 401              	.LVL33:
  11:./MotorControl/thermistor.hpp **** 
 402              		.loc 5 11 13 view .LVU67
 403 0012 2046     		mov	r0, r4
 404 0014 10BD     		pop	{r4, pc}
 405              	.LVL34:
 406              	.L26:
  11:./MotorControl/thermistor.hpp **** 
 407              		.loc 5 11 13 view .LVU68
 408 0016 00BF     		.align	2
 409              	.L25:
 410 0018 08000000 		.word	.LANCHOR0+8
 411 001c 08000000 		.word	_ZTV14CurrentLimiter+8
 412              		.cfi_endproc
 413              	.LFE5176:
 414              		.cantunwind
 415              		.fnend
 417              		.section	.text._ZN31OnboardThermistorCurrentLimiterD0Ev,"axG",%progbits,_ZN31OnboardThermistorCurr
 418              		.align	1
 419              		.weak	_ZN31OnboardThermistorCurrentLimiterD0Ev
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 424              	_ZN31OnboardThermistorCurrentLimiterD0Ev:
 425              		.fnstart
 426              	.LVL35:
 427              	.LFB6190:
  43:./MotorControl/thermistor.hpp ****     OnboardThermistorCurrentLimiter(uint16_t adc_channel, const float* const coefficients, size_t n
 428              		.loc 5 43 13 is_stmt 1 view -0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
  43:./MotorControl/thermistor.hpp ****     OnboardThermistorCurrentLimiter(uint16_t adc_channel, const float* const coefficients, size_t n
 432              		.loc 5 43 13 is_stmt 0 view .LVU70
 433 0000 10B5     		push	{r4, lr}
 434              	.LCFI4:
 435              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccPK5rSs.s 			page 20


 436              		.cfi_offset 4, -8
 437              		.cfi_offset 14, -4
 438 0002 0446     		mov	r4, r0
 439              	.LVL36:
 440              	.LBB128:
 441              	.LBI128:
  43:./MotorControl/thermistor.hpp ****     OnboardThermistorCurrentLimiter(uint16_t adc_channel, const float* const coefficients, size_t n
 442              		.loc 5 43 13 is_stmt 1 view .LVU71
 443              	.LBB129:
 444 0004 054B     		ldr	r3, .L29
 445 0006 0360     		str	r3, [r0]
 446              	.LVL37:
 447              	.LBB130:
 448              	.LBI130:
  11:./MotorControl/thermistor.hpp **** 
 449              		.loc 5 11 13 view .LVU72
 450              	.LBB131:
 451 0008 054B     		ldr	r3, .L29+4
 452 000a 0360     		str	r3, [r0]
 453              	.LVL38:
 454              	.LBB132:
 455              	.LBI132:
 456              		.loc 6 6 13 view .LVU73
 457              	.LBB133:
 458 000c 054B     		ldr	r3, .L29+8
 459 000e 0360     		str	r3, [r0]
 460              	.LVL39:
 461              		.loc 6 6 13 is_stmt 0 view .LVU74
 462              	.LBE133:
 463              	.LBE132:
 464              	.LBE131:
 465              	.LBE130:
 466              	.LBE129:
 467              	.LBE128:
  43:./MotorControl/thermistor.hpp ****     OnboardThermistorCurrentLimiter(uint16_t adc_channel, const float* const coefficients, size_t n
 468              		.loc 5 43 13 view .LVU75
 469 0010 3821     		movs	r1, #56
 470 0012 FFF7FEFF 		bl	_ZdlPvj
 471              	.LVL40:
  43:./MotorControl/thermistor.hpp ****     OnboardThermistorCurrentLimiter(uint16_t adc_channel, const float* const coefficients, size_t n
 472              		.loc 5 43 13 view .LVU76
 473 0016 2046     		mov	r0, r4
 474 0018 10BD     		pop	{r4, pc}
 475              	.LVL41:
 476              	.L30:
  43:./MotorControl/thermistor.hpp ****     OnboardThermistorCurrentLimiter(uint16_t adc_channel, const float* const coefficients, size_t n
 477              		.loc 5 43 13 view .LVU77
 478 001a 00BF     		.align	2
 479              	.L29:
 480 001c 08000000 		.word	_ZTV31OnboardThermistorCurrentLimiter+8
 481 0020 08000000 		.word	.LANCHOR0+8
 482 0024 08000000 		.word	_ZTV14CurrentLimiter+8
 483              		.cfi_endproc
 484              	.LFE6190:
 485              		.cantunwind
 486              		.fnend
 488              		.section	.text._ZN32OffboardThermistorCurrentLimiterD0Ev,"axG",%progbits,_ZN32OffboardThermistorCu
ARM GAS  /tmp/ccPK5rSs.s 			page 21


 489              		.align	1
 490              		.weak	_ZN32OffboardThermistorCurrentLimiterD0Ev
 491              		.syntax unified
 492              		.thumb
 493              		.thumb_func
 495              	_ZN32OffboardThermistorCurrentLimiterD0Ev:
 496              		.fnstart
 497              	.LVL42:
 498              	.LFB6186:
 499              		.loc 5 70 13 is_stmt 1 view -0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 0
 502              		@ frame_needed = 0, uses_anonymous_args = 0
 503              		.loc 5 70 13 is_stmt 0 view .LVU79
 504 0000 10B5     		push	{r4, lr}
 505              	.LCFI5:
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 4, -8
 508              		.cfi_offset 14, -4
 509 0002 0446     		mov	r4, r0
 510              	.LVL43:
 511              	.LBB134:
 512              	.LBI134:
 513              		.loc 5 70 13 is_stmt 1 view .LVU80
 514              	.LBB135:
 515 0004 054B     		ldr	r3, .L33
 516 0006 0360     		str	r3, [r0]
 517              	.LVL44:
 518              	.LBB136:
 519              	.LBI136:
  11:./MotorControl/thermistor.hpp **** 
 520              		.loc 5 11 13 view .LVU81
 521              	.LBB137:
 522 0008 054B     		ldr	r3, .L33+4
 523 000a 0360     		str	r3, [r0]
 524              	.LVL45:
 525              	.LBB138:
 526              	.LBI138:
 527              		.loc 6 6 13 view .LVU82
 528              	.LBB139:
 529 000c 054B     		ldr	r3, .L33+8
 530 000e 0360     		str	r3, [r0]
 531              	.LVL46:
 532              		.loc 6 6 13 is_stmt 0 view .LVU83
 533              	.LBE139:
 534              	.LBE138:
 535              	.LBE137:
 536              	.LBE136:
 537              	.LBE135:
 538              	.LBE134:
 539              		.loc 5 70 13 view .LVU84
 540 0010 5021     		movs	r1, #80
 541 0012 FFF7FEFF 		bl	_ZdlPvj
 542              	.LVL47:
 543              		.loc 5 70 13 view .LVU85
 544 0016 2046     		mov	r0, r4
 545 0018 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccPK5rSs.s 			page 22


 546              	.LVL48:
 547              	.L34:
 548              		.loc 5 70 13 view .LVU86
 549 001a 00BF     		.align	2
 550              	.L33:
 551 001c 08000000 		.word	_ZTV32OffboardThermistorCurrentLimiter+8
 552 0020 08000000 		.word	.LANCHOR0+8
 553 0024 08000000 		.word	_ZTV14CurrentLimiter+8
 554              		.cfi_endproc
 555              	.LFE6186:
 556              		.cantunwind
 557              		.fnend
 559              		.section	.text._ZN24ThermistorCurrentLimiterC2EtPKfjRS0_S2_RKb,"ax",%progbits
 560              		.align	1
 561              		.global	_ZN24ThermistorCurrentLimiterC2EtPKfjRS0_S2_RKb
 562              		.syntax unified
 563              		.thumb
 564              		.thumb_func
 566              	_ZN24ThermistorCurrentLimiterC2EtPKfjRS0_S2_RKb:
 567              		.fnstart
 568              	.LVL49:
 569              	.LFB5166:
   5:MotorControl/thermistor.cpp ****                                                    const float* const coefficients,
 570              		.loc 2 5 1 is_stmt 1 view -0
 571              		.cfi_startproc
 572              		@ args = 12, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              		@ link register save eliminated.
   5:MotorControl/thermistor.cpp ****                                                    const float* const coefficients,
 575              		.loc 2 5 1 is_stmt 0 view .LVU88
 576 0000 10B4     		push	{r4}
 577              	.LCFI6:
 578              		.cfi_def_cfa_offset 4
 579              		.cfi_offset 4, -4
 580              	.LVL50:
 581              	.LBB140:
 582              	.LBB141:
 583              	.LBI141:
   4:./MotorControl/current_limiter.hpp **** public:
 584              		.loc 6 4 7 is_stmt 1 view .LVU89
 585              	.LBB142:
 586 0002 0B4C     		ldr	r4, .L37
 587 0004 0460     		str	r4, [r0]
 588              	.LVL51:
   4:./MotorControl/current_limiter.hpp **** public:
 589              		.loc 6 4 7 is_stmt 0 view .LVU90
 590              	.LBE142:
 591              	.LBE141:
  17:MotorControl/thermistor.cpp **** {
 592              		.loc 2 17 21 view .LVU91
 593 0006 0B4C     		ldr	r4, .L37+4
 594 0008 0460     		str	r4, [r0]
 595 000a 8180     		strh	r1, [r0, #4]	@ movhi
 596 000c 8260     		str	r2, [r0, #8]
 597 000e C360     		str	r3, [r0, #12]
 598 0010 094B     		ldr	r3, .L37+8
 599              	.LVL52:
ARM GAS  /tmp/ccPK5rSs.s 			page 23


  17:MotorControl/thermistor.cpp **** {
 600              		.loc 2 17 21 view .LVU92
 601 0012 0361     		str	r3, [r0, #16]	@ float
 602 0014 019B     		ldr	r3, [sp, #4]
 603 0016 4361     		str	r3, [r0, #20]
 604 0018 029B     		ldr	r3, [sp, #8]
 605 001a 8361     		str	r3, [r0, #24]
 606 001c 039B     		ldr	r3, [sp, #12]
 607 001e C361     		str	r3, [r0, #28]
 608 0020 0023     		movs	r3, #0
 609 0022 0362     		str	r3, [r0, #32]
 610 0024 4362     		str	r3, [r0, #36]
 611 0026 8362     		str	r3, [r0, #40]
 612              	.LBE140:
  19:MotorControl/thermistor.cpp **** 
 613              		.loc 2 19 1 view .LVU93
 614 0028 5DF8044B 		ldr	r4, [sp], #4
 615              	.LCFI7:
 616              		.cfi_restore 4
 617              		.cfi_def_cfa_offset 0
 618              	.LVL53:
  19:MotorControl/thermistor.cpp **** 
 619              		.loc 2 19 1 view .LVU94
 620 002c 7047     		bx	lr
 621              	.L38:
 622 002e 00BF     		.align	2
 623              	.L37:
 624 0030 08000000 		.word	_ZTV14CurrentLimiter+8
 625 0034 08000000 		.word	.LANCHOR0+8
 626 0038 0000C07F 		.word	2143289344
 627              		.cfi_endproc
 628              	.LFE5166:
 629              		.cantunwind
 630              		.fnend
 632              		.global	_ZN24ThermistorCurrentLimiterC1EtPKfjRS0_S2_RKb
 633              		.thumb_set _ZN24ThermistorCurrentLimiterC1EtPKfjRS0_S2_RKb,_ZN24ThermistorCurrentLimiterC2EtPKfjRS
 634              		.section	.text._ZN24ThermistorCurrentLimiter6updateEv,"ax",%progbits
 635              		.align	1
 636              		.global	_ZN24ThermistorCurrentLimiter6updateEv
 637              		.syntax unified
 638              		.thumb
 639              		.thumb_func
 641              	_ZN24ThermistorCurrentLimiter6updateEv:
 642              		.fnstart
 643              	.LVL54:
 644              	.LFB5168:
  21:MotorControl/thermistor.cpp ****     const float normalized_voltage = get_adc_relative_voltage_ch(adc_channel_);
 645              		.loc 2 21 41 is_stmt 1 view -0
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 0
 648              		@ frame_needed = 0, uses_anonymous_args = 0
  21:MotorControl/thermistor.cpp ****     const float normalized_voltage = get_adc_relative_voltage_ch(adc_channel_);
 649              		.loc 2 21 41 is_stmt 0 view .LVU96
 650 0000 10B5     		push	{r4, lr}
 651              		.save {r4, lr}
 652              	.LCFI8:
 653              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccPK5rSs.s 			page 24


 654              		.cfi_offset 4, -8
 655              		.cfi_offset 14, -4
 656 0002 0446     		mov	r4, r0
  22:MotorControl/thermistor.cpp ****     float raw_temperature_ = horner_poly_eval(normalized_voltage, coefficients_, num_coeffs_);
 657              		.loc 2 22 5 is_stmt 1 view .LVU97
  22:MotorControl/thermistor.cpp ****     float raw_temperature_ = horner_poly_eval(normalized_voltage, coefficients_, num_coeffs_);
 658              		.loc 2 22 65 is_stmt 0 view .LVU98
 659 0004 8088     		ldrh	r0, [r0, #4]
 660              	.LVL55:
  22:MotorControl/thermistor.cpp ****     float raw_temperature_ = horner_poly_eval(normalized_voltage, coefficients_, num_coeffs_);
 661              		.loc 2 22 65 view .LVU99
 662 0006 FFF7FEFF 		bl	get_adc_relative_voltage_ch
 663              	.LVL56:
  23:MotorControl/thermistor.cpp **** 
 664              		.loc 2 23 5 is_stmt 1 view .LVU100
  23:MotorControl/thermistor.cpp **** 
 665              		.loc 2 23 67 is_stmt 0 view .LVU101
 666 000a A068     		ldr	r0, [r4, #8]
  23:MotorControl/thermistor.cpp **** 
 667              		.loc 2 23 82 view .LVU102
 668 000c E168     		ldr	r1, [r4, #12]
 669              	.LVL57:
 670              	.LBB161:
 671              	.LBI161:
 104:./MotorControl/utils.hpp **** }
 105:./MotorControl/utils.hpp **** 
 106:./MotorControl/utils.hpp **** // Round to integer
 107:./MotorControl/utils.hpp **** // Default rounding mode: round to nearest
 108:./MotorControl/utils.hpp **** inline int round_int(float x) {
 109:./MotorControl/utils.hpp **** #ifdef __arm__
 110:./MotorControl/utils.hpp ****     int res;
 111:./MotorControl/utils.hpp ****     asm("vcvtr.s32.f32   %[res], %[x]"
 112:./MotorControl/utils.hpp ****         : [res] "=X" (res)
 113:./MotorControl/utils.hpp ****         : [x] "w" (x) );
 114:./MotorControl/utils.hpp ****     return res;
 115:./MotorControl/utils.hpp **** #else
 116:./MotorControl/utils.hpp ****     return (int)nearbyint(x);
 117:./MotorControl/utils.hpp **** #endif
 118:./MotorControl/utils.hpp **** }
 119:./MotorControl/utils.hpp **** 
 120:./MotorControl/utils.hpp **** // Wrap value to range.
 121:./MotorControl/utils.hpp **** // With default rounding mode (round to nearest),
 122:./MotorControl/utils.hpp **** // the result will be in range -y/2 to y/2
 123:./MotorControl/utils.hpp **** inline float wrap_pm(float x, float y) {
 124:./MotorControl/utils.hpp **** #ifdef FPU_FPV4
 125:./MotorControl/utils.hpp ****     float intval = (float)round_int(x / y);
 126:./MotorControl/utils.hpp **** #else
 127:./MotorControl/utils.hpp ****     float intval = nearbyintf(x / y);
 128:./MotorControl/utils.hpp **** #endif
 129:./MotorControl/utils.hpp ****     return x - intval * y;
 130:./MotorControl/utils.hpp **** }
 131:./MotorControl/utils.hpp **** 
 132:./MotorControl/utils.hpp **** // Same as fmodf but result is positive and y must be positive
 133:./MotorControl/utils.hpp **** inline float fmodf_pos(float x, float y) {
 134:./MotorControl/utils.hpp ****     float res = wrap_pm(x, y);
 135:./MotorControl/utils.hpp ****     if (res < 0) res += y;
 136:./MotorControl/utils.hpp ****     return res;
ARM GAS  /tmp/ccPK5rSs.s 			page 25


 137:./MotorControl/utils.hpp **** }
 138:./MotorControl/utils.hpp **** 
 139:./MotorControl/utils.hpp **** inline float wrap_pm_pi(float x) {
 140:./MotorControl/utils.hpp ****     return wrap_pm(x, 2 * M_PI);
 141:./MotorControl/utils.hpp **** }
 142:./MotorControl/utils.hpp **** 
 143:./MotorControl/utils.hpp **** // Evaluate polynomials in an efficient way
 144:./MotorControl/utils.hpp **** // coeffs[0] is highest order, as per numpy.polyfit
 145:./MotorControl/utils.hpp **** // p(x) = coeffs[0] * x^deg + ... + coeffs[deg], for some degree "deg"
 146:./MotorControl/utils.hpp **** inline float horner_poly_eval(float x, const float *coeffs, size_t count) {
 672              		.loc 3 146 14 is_stmt 1 view .LVU103
 673              	.LBB162:
 147:./MotorControl/utils.hpp ****     float result = 0.0f;
 674              		.loc 3 147 5 view .LVU104
 148:./MotorControl/utils.hpp ****     for (size_t idx = 0; idx < count; ++idx)
 675              		.loc 3 148 5 view .LVU105
 676              	.LBB163:
 677              		.loc 3 148 17 is_stmt 0 view .LVU106
 678 000e 0023     		movs	r3, #0
 679              	.LBE163:
 147:./MotorControl/utils.hpp ****     float result = 0.0f;
 680              		.loc 3 147 11 view .LVU107
 681 0010 DFED187A 		vldr.32	s15, .L50
 682 0014 08E0     		b	.L41
 683              	.LVL58:
 684              	.L48:
 685              	.LBB164:
 149:./MotorControl/utils.hpp ****         result = (result * x) + coeffs[idx];
 686              		.loc 3 149 9 is_stmt 1 view .LVU108
 687              		.loc 3 149 26 is_stmt 0 view .LVU109
 688 0016 60EE277A 		vmul.f32	s15, s0, s15
 689              	.LVL59:
 690              		.loc 3 149 43 view .LVU110
 691 001a 00EB8302 		add	r2, r0, r3, lsl #2
 692 001e 92ED007A 		vldr.32	s14, [r2]
 693              		.loc 3 149 16 view .LVU111
 694 0022 77EE877A 		vadd.f32	s15, s15, s14
 695              	.LVL60:
 148:./MotorControl/utils.hpp ****     for (size_t idx = 0; idx < count; ++idx)
 696              		.loc 3 148 5 is_stmt 1 view .LVU112
 697 0026 0133     		adds	r3, r3, #1
 698              	.LVL61:
 699              	.L41:
 148:./MotorControl/utils.hpp ****     for (size_t idx = 0; idx < count; ++idx)
 700              		.loc 3 148 30 view .LVU113
 701 0028 9942     		cmp	r1, r3
 702 002a F4D8     		bhi	.L48
 703              	.LBE164:
 150:./MotorControl/utils.hpp ****     return result;
 704              		.loc 3 150 5 view .LVU114
 705              	.LVL62:
 706              		.loc 3 150 5 is_stmt 0 view .LVU115
 707              	.LBE162:
 708              	.LBE161:
  25:MotorControl/thermistor.cpp ****     float k = current_meas_period / tau;
 709              		.loc 2 25 5 is_stmt 1 view .LVU116
  26:MotorControl/thermistor.cpp ****     float val = raw_temperature_;
ARM GAS  /tmp/ccPK5rSs.s 			page 26


 710              		.loc 2 26 5 view .LVU117
  27:MotorControl/thermistor.cpp ****     for (float& lpf_val : lpf_vals_) {
 711              		.loc 2 27 5 view .LVU118
  28:MotorControl/thermistor.cpp ****         lpf_val += k * (val - lpf_val);
 712              		.loc 2 28 5 view .LVU119
 713              	.LBB165:
 714              	.LBB166:
 715              	.LBI166:
 716              		.file 7 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array"
   1:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // <array> -*- C++ -*-
   2:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
   3:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** //
   5:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // any later version.
  10:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  11:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  16:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  20:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  25:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** /** @file include/array
  26:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****  *  This is a Standard C++ Library header.
  27:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****  */
  28:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  29:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** #ifndef _GLIBCXX_ARRAY
  30:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** #define _GLIBCXX_ARRAY 1
  31:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  32:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  34:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** #if __cplusplus < 201103L
  35:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** # include <bits/c++0x_warning.h>
  36:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** #else
  37:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  38:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** #include <utility>
  39:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** #include <bits/functexcept.h>
  40:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** #include <bits/stl_algobase.h>
  41:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** #include <bits/range_access.h>
  42:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  43:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** namespace std _GLIBCXX_VISIBILITY(default)
  44:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** {
  45:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  46:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  47:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****   template<typename _Tp, std::size_t _Nm>
  48:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****     struct __array_traits
ARM GAS  /tmp/ccPK5rSs.s 			page 27


  49:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****     {
  50:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef _Tp _Type[_Nm];
  51:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef __is_swappable<_Tp> _Is_swappable;
  52:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;
  53:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  54:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       static constexpr _Tp&
  55:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _S_ref(const _Type& __t, std::size_t __n) noexcept
  56:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return const_cast<_Tp&>(__t[__n]); }
  57:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  58:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       static constexpr _Tp*
  59:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _S_ptr(const _Type& __t) noexcept
  60:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return const_cast<_Tp*>(__t); }
  61:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****     };
  62:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  63:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****  template<typename _Tp>
  64:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    struct __array_traits<_Tp, 0>
  65:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    {
  66:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****      struct _Type { };
  67:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****      typedef true_type _Is_swappable;
  68:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****      typedef true_type _Is_nothrow_swappable;
  69:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  70:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****      static constexpr _Tp&
  71:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****      _S_ref(const _Type&, std::size_t) noexcept
  72:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****      { return *static_cast<_Tp*>(nullptr); }
  73:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  74:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****      static constexpr _Tp*
  75:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****      _S_ptr(const _Type&) noexcept
  76:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****      { return nullptr; }
  77:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    };
  78:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
  79:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****   /**
  80:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *  @brief A standard container for storing a fixed size sequence of elements.
  81:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *
  82:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *  @ingroup sequences
  83:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *
  84:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  85:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *  <a href="tables.html#66">reversible container</a>, and a
  86:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *  <a href="tables.html#67">sequence</a>.
  87:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *
  88:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *  Sets support random access iterators.
  89:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *
  90:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *  @tparam  Tp  Type of element. Required to be a complete type.
  91:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****    *  @tparam  Nm  Number of elements.
  92:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****   */
  93:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****   template<typename _Tp, std::size_t _Nm>
  94:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****     struct array
  95:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****     {
  96:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef _Tp 	    			      value_type;
  97:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef value_type*			      pointer;
  98:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef const value_type*                       const_pointer;
  99:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef value_type&                   	      reference;
 100:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef const value_type&             	      const_reference;
 101:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef value_type*          		      iterator;
 102:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef const value_type*			      const_iterator;
 103:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef std::size_t                    	      size_type;
 104:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef std::ptrdiff_t                   	      difference_type;
 105:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef std::reverse_iterator<iterator>	      reverse_iterator;
ARM GAS  /tmp/ccPK5rSs.s 			page 28


 106:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;
 107:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 108:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       // Support for zero-sized arrays mandatory.
 109:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typedef _GLIBCXX_STD_C::__array_traits<_Tp, _Nm> _AT_Type;
 110:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       typename _AT_Type::_Type                         _M_elems;
 111:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 112:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       // No explicit construct/copy/destroy for aggregate type.
 113:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 114:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       // DR 776.
 115:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX20_CONSTEXPR void
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       fill(const value_type& __u)
 117:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { std::fill_n(begin(), size(), __u); }
 118:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 119:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX20_CONSTEXPR void
 120:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       swap(array& __other)
 121:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       noexcept(_AT_Type::_Is_nothrow_swappable::value)
 122:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { std::swap_ranges(begin(), end(), __other.begin()); }
 123:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 124:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       // Iterators.
 125:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR iterator
 126:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       begin() noexcept
 717              		.loc 7 126 7 view .LVU120
 718              	.LBB167:
 719              	.LBI167:
 127:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return iterator(data()); }
 128:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 129:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 130:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       begin() const noexcept
 131:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return const_iterator(data()); }
 132:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 133:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR iterator
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       end() noexcept
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return iterator(data() + _Nm); }
 136:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 137:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 138:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       end() const noexcept
 139:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return const_iterator(data() + _Nm); }
 140:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 141:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 142:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       rbegin() noexcept
 143:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return reverse_iterator(end()); }
 144:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 145:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 146:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       rbegin() const noexcept
 147:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return const_reverse_iterator(end()); }
 148:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 149:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 150:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       rend() noexcept
 151:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return reverse_iterator(begin()); }
 152:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 153:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 154:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       rend() const noexcept
 155:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return const_reverse_iterator(begin()); }
 156:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 157:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 158:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       cbegin() const noexcept
 159:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return const_iterator(data()); }
ARM GAS  /tmp/ccPK5rSs.s 			page 29


 160:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 161:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR const_iterator
 162:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       cend() const noexcept
 163:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return const_iterator(data() + _Nm); }
 164:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 165:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 166:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       crbegin() const noexcept
 167:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return const_reverse_iterator(end()); }
 168:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 169:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR const_reverse_iterator
 170:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       crend() const noexcept
 171:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return const_reverse_iterator(begin()); }
 172:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 173:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       // Capacity.
 174:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       constexpr size_type
 175:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       size() const noexcept { return _Nm; }
 176:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 177:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       constexpr size_type
 178:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       max_size() const noexcept { return _Nm; }
 179:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 180:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX_NODISCARD constexpr bool
 181:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       empty() const noexcept { return size() == 0; }
 182:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 183:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       // Element access.
 184:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR reference
 185:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       operator[](size_type __n) noexcept
 186:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 187:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 188:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       constexpr const_reference
 189:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       operator[](size_type __n) const noexcept
 190:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return _AT_Type::_S_ref(_M_elems, __n); }
 191:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 192:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR reference
 193:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       at(size_type __n)
 194:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       {
 195:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 	if (__n >= _Nm)
 196:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 	  std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 197:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 					    ">= _Nm (which is %zu)"),
 198:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 					__n, _Nm);
 199:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 	return _AT_Type::_S_ref(_M_elems, __n);
 200:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       }
 201:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 202:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       constexpr const_reference
 203:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       at(size_type __n) const
 204:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       {
 205:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 	// Result of conditional expression must be an lvalue so use
 206:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 	// boolean ? lvalue : (throw-expr, lvalue)
 207:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 	return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
 208:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 	  : (std::__throw_out_of_range_fmt(__N("array::at: __n (which is %zu) "
 209:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 					       ">= _Nm (which is %zu)"),
 210:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 					   __n, _Nm),
 211:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 	     _AT_Type::_S_ref(_M_elems, 0));
 212:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       }
 213:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 214:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR reference
 215:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       front() noexcept
 216:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return *begin(); }
ARM GAS  /tmp/ccPK5rSs.s 			page 30


 217:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 218:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       constexpr const_reference
 219:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       front() const noexcept
 220:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return _AT_Type::_S_ref(_M_elems, 0); }
 221:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 222:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR reference
 223:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       back() noexcept
 224:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return _Nm ? *(end() - 1) : *end(); }
 225:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 226:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       constexpr const_reference
 227:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       back() const noexcept
 228:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       {
 229:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 230:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****  	           : _AT_Type::_S_ref(_M_elems, 0);
 231:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       }
 232:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 233:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       _GLIBCXX17_CONSTEXPR pointer
 234:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       data() noexcept
 720              		.loc 7 234 7 view .LVU121
 721              	.LBB168:
 235:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return _AT_Type::_S_ptr(_M_elems); }
 722              		.loc 7 235 33 is_stmt 0 view .LVU122
 723 002c 04F12401 		add	r1, r4, #36
 724              	.LVL63:
 725              		.loc 7 235 33 view .LVU123
 726              	.LBE168:
 727              	.LBE167:
 728              	.LBE166:
 729              	.LBB169:
 730              	.LBI169:
 134:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { return iterator(data() + _Nm); }
 731              		.loc 7 134 7 is_stmt 1 view .LVU124
 732              	.LBB170:
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 733              		.loc 7 135 37 is_stmt 0 view .LVU125
 734 0030 04F12C02 		add	r2, r4, #44
 735              	.LVL64:
 135:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array **** 
 736              		.loc 7 135 37 view .LVU126
 737              	.LBE170:
 738              	.LBE169:
  28:MotorControl/thermistor.cpp ****         lpf_val += k * (val - lpf_val);
 739              		.loc 2 28 27 view .LVU127
 740 0034 0B46     		mov	r3, r1
 741              	.LVL65:
 742              	.L43:
  28:MotorControl/thermistor.cpp ****         lpf_val += k * (val - lpf_val);
 743              		.loc 2 28 27 is_stmt 1 discriminator 3 view .LVU128
 744 0036 9342     		cmp	r3, r2
 745 0038 0CD0     		beq	.L42
 746              	.LVL66:
  29:MotorControl/thermistor.cpp ****         val = lpf_val;
 747              		.loc 2 29 9 discriminator 2 view .LVU129
  29:MotorControl/thermistor.cpp ****         val = lpf_val;
 748              		.loc 2 29 17 is_stmt 0 discriminator 2 view .LVU130
 749 003a 93ED007A 		vldr.32	s14, [r3]
  29:MotorControl/thermistor.cpp ****         val = lpf_val;
ARM GAS  /tmp/ccPK5rSs.s 			page 31


 750              		.loc 2 29 29 discriminator 2 view .LVU131
 751 003e 77EEC77A 		vsub.f32	s15, s15, s14
 752              	.LVL67:
  29:MotorControl/thermistor.cpp ****         val = lpf_val;
 753              		.loc 2 29 22 discriminator 2 view .LVU132
 754 0042 DFED0D6A 		vldr.32	s13, .L50+4
 755 0046 67EEA67A 		vmul.f32	s15, s15, s13
  29:MotorControl/thermistor.cpp ****         val = lpf_val;
 756              		.loc 2 29 17 discriminator 2 view .LVU133
 757 004a 77EE277A 		vadd.f32	s15, s14, s15
 758 004e E3EC017A 		vstmia.32	r3!, {s15}
 759              	.LVL68:
  30:MotorControl/thermistor.cpp ****     }
 760              		.loc 2 30 9 is_stmt 1 discriminator 2 view .LVU134
  28:MotorControl/thermistor.cpp ****         lpf_val += k * (val - lpf_val);
 761              		.loc 2 28 5 discriminator 2 view .LVU135
  28:MotorControl/thermistor.cpp ****         lpf_val += k * (val - lpf_val);
 762              		.loc 2 28 5 is_stmt 0 discriminator 2 view .LVU136
 763 0052 F0E7     		b	.L43
 764              	.LVL69:
 765              	.L42:
  28:MotorControl/thermistor.cpp ****         lpf_val += k * (val - lpf_val);
 766              		.loc 2 28 5 discriminator 2 view .LVU137
 767              	.LBE165:
  32:MotorControl/thermistor.cpp ****         lpf_vals_.fill(0.0f);
 768              		.loc 2 32 5 is_stmt 1 view .LVU138
 103:./MotorControl/utils.hpp **** }
 769              		.loc 3 103 5 view .LVU139
  32:MotorControl/thermistor.cpp ****         lpf_vals_.fill(0.0f);
 770              		.loc 2 32 5 is_stmt 0 view .LVU140
 771 0054 F4EE677A 		vcmp.f32	s15, s15
 772 0058 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 773 005c 02D6     		bvs	.L49
 774              	.LVL70:
 775              	.L44:
  35:MotorControl/thermistor.cpp **** }
 776              		.loc 2 35 5 is_stmt 1 view .LVU141
  35:MotorControl/thermistor.cpp **** }
 777              		.loc 2 35 34 is_stmt 0 view .LVU142
 778 005e A36A     		ldr	r3, [r4, #40]	@ float
  35:MotorControl/thermistor.cpp **** }
 779              		.loc 2 35 18 view .LVU143
 780 0060 2361     		str	r3, [r4, #16]	@ float
  36:MotorControl/thermistor.cpp **** 
 781              		.loc 2 36 1 view .LVU144
 782 0062 10BD     		pop	{r4, pc}
 783              	.LVL71:
 784              	.L49:
  33:MotorControl/thermistor.cpp ****     }
 785              		.loc 2 33 9 is_stmt 1 view .LVU145
 786              	.LBB171:
 787              	.LBI171:
 116:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/array ****       { std::fill_n(begin(), size(), __u); }
 788              		.loc 7 116 7 view .LVU146
 789              	.LBB172:
 790              	.LBI172:
 238:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
ARM GAS  /tmp/ccPK5rSs.s 			page 32


 239:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 240:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 260:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 261:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 262:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 263:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 264:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 265:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 266:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 267:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 268:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 269:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 270:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 271:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 272:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 273:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 274:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 275:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 276:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 277:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 278:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 279:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 280:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 281:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__comp(__b, __a))
 282:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 283:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 284:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 285:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 286:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 287:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 288:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 289:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 290:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 291:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 292:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 293:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 294:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 295:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
ARM GAS  /tmp/ccPK5rSs.s 			page 33


 296:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 297:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 298:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 299:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 300:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 301:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 302:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 303:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__comp(__a, __b))
 304:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 305:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 306:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 307:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 308:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 309:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 310:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Iterator>
 311:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 312:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _Iterator
 313:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 314:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 315:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { return __it; }
 316:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 317:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 318:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 319:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 320:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _From, typename _To>
 321:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 322:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _From
 323:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 324:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 325:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 326:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 327:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Iterator>
 328:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 329:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _Iterator
 330:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 331:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { return __res; }
 332:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 333:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 334:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 335:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 336:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 337:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // a for loop with an explicit count.
 338:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 339:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 340:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move
 341:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 342:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 343:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 344:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 345:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 346:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 347:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 348:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *__result = *__first;
 349:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 350:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 351:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 352:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccPK5rSs.s 			page 34


 353:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 354:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Category>
 355:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 356:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 357:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 358:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 359:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 360:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 361:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 362:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 363:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 364:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 365:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 366:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 367:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 368:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 369:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 370:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 371:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 372:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 373:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 374:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 375:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 376:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 377:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 378:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 379:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    {
 380:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      *__result = *__first;
 381:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      ++__first;
 382:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      ++__result;
 383:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    }
 384:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 385:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 386:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 387:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 388:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 389:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 390:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 391:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 392:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 393:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 394:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 395:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 396:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 397:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 398:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 399:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    {
 400:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 401:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      ++__first;
 402:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      ++__result;
 403:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    }
 404:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 405:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 406:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 407:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 408:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 409:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove>
ARM GAS  /tmp/ccPK5rSs.s 			page 35


 410:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 411:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 412:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _Tp>
 413:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 414:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _Tp*
 415:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 416:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 417:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 418:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 419:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 420:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 421:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 422:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 423:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 424:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 425:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 426:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 427:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 428:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 429:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 430:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 431:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 432:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 433:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT>
 434:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct char_traits;
 435:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 436:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 437:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     class istreambuf_iterator;
 438:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 439:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 440:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     class ostreambuf_iterator;
 441:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 442:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 443:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 444:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 445:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 446:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 447:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 448:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 449:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 450:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 451:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 452:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 453:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 454:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 455:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 456:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				    _CharT*>::__type
 457:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 458:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 459:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 460:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 461:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 462:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 463:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 464:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 465:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 466:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
ARM GAS  /tmp/ccPK5rSs.s 			page 36


 467:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 468:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return std::__copy_move<_IsMove, false, _Category>::
 469:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  __copy_m(__first, __last, __result);
 470:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 471:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 472:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 473:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 474:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 475:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 476:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 477:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 478:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct _Deque_iterator;
 479:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 480:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
 481:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 482:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 483:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 484:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _OI
 485:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 486:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 487:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   _OI);
 488:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 489:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 490:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 491:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 492:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 493:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 494:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 495:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 496:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 497:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 498:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 499:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 500:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 501:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 502:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 503:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 504:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 505:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_II __first, _II __last, _OI __result)
 506:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 507:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 508:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 509:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 510:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 511:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 512:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 513:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 514:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
 515:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 516:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 517:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 518:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 519:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 520:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 521:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _OI
 522:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 523:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
ARM GAS  /tmp/ccPK5rSs.s 			page 37


 524:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  _OI);
 525:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 526:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 527:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 528:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 529:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(_II, _II,
 530:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 531:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 532:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 533:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 534:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 535:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 536:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 537:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 538:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 539:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 540:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 541:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 542:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 543:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 544:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 545:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 546:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 547:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 548:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 549:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 550:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 551:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 552:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 553:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 554:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 555:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  within [first,last).
 556:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 557:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 558:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 559:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 560:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 561:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 562:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 563:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 564:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 565:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 566:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 567:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 568:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_a<__is_move_iterator<_II>::__value>
 569:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 570:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 571:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 572:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 573:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 574:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 575:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 576:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 577:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 578:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 579:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 580:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
ARM GAS  /tmp/ccPK5rSs.s 			page 38


 581:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 582:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 583:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 584:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 585:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 586:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 587:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 588:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  within [first,last).
 589:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 590:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 591:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 592:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 593:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 594:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 595:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 596:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 597:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 598:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 599:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 600:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 601:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_a<true>(std::__miter_base(__first),
 602:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				      std::__miter_base(__last), __result);
 603:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 604:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 605:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 606:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 607:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 608:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 609:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 610:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 611:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward
 612:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 613:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 614:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 615:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 616:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 617:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 618:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  while (__first != __last)
 619:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 620:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 621:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 622:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 623:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 624:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 625:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Category>
 626:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 627:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 628:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 629:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 630:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 631:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 632:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 633:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  while (__first != __last)
 634:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 635:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 636:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 637:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
ARM GAS  /tmp/ccPK5rSs.s 			page 39


 638:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 639:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 640:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 641:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 642:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 643:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 644:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 645:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 646:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 647:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 648:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 649:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 650:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 651:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 652:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 653:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 654:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 655:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 656:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 657:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<>
 658:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 659:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 660:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 661:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 662:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 663:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 664:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 665:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 666:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 667:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 668:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 669:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 670:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 671:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
 672:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 673:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 674:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove>
 675:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 676:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 677:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       template<typename _Tp>
 678:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 679:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	static _Tp*
 680:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 681:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 682:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 683:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 684:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 685:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 686:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 687:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 688:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 689:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 690:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 691:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 692:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return __result - _Num;
 693:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 694:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     };
ARM GAS  /tmp/ccPK5rSs.s 			page 40


 695:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 696:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 697:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 698:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 699:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 700:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 701:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 702:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 703:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 704:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return std::__copy_move_backward<_IsMove, false, _Category>::
 705:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  __copy_move_b(__first, __last, __result);
 706:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 707:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove,
 708:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				       __memcpyable<_BI2, _BI1>::__value,
 709:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				       _Category>::__copy_move_b(__first,
 710:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 								 __last,
 711:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 								 __result);
 712:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 713:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 714:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 715:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 716:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 717:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 718:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 719:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 720:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 721:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 722:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _OI
 723:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 724:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 725:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			    _OI);
 726:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 727:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 728:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 729:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 730:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(
 731:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 732:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 733:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 734:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 735:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 736:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 737:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 738:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 739:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_II, _II,
 740:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 741:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 742:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 743:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 744:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 745:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II __first, _II __last, _OI __result)
 746:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 747:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 748:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		std::__copy_move_backward_a1<_IsMove>
 749:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 750:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 751:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
ARM GAS  /tmp/ccPK5rSs.s 			page 41


 752:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 753:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 754:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 755:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _OI
 756:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 757:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 758:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 759:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		_OI);
 760:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 761:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 762:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 763:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 764:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II, _II,
 765:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 766:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 767:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 768:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 769:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 770:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 771:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 772:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 773:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 774:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 775:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 776:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 777:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 778:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 779:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 780:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 781:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 782:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
 783:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 784:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 785:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 786:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 787:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 788:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 789:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 790:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 791:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 792:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 793:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 794:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 795:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 796:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 797:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 798:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 799:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 800:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 801:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 802:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 803:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 804:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 805:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 806:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 807:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
 808:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
ARM GAS  /tmp/ccPK5rSs.s 			page 42


 809:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 810:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 811:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 812:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
 813:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 814:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 815:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 816:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 817:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 818:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
 819:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 820:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 821:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 822:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 823:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 824:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 825:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 826:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 827:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 828:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 829:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 830:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 831:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 832:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 833:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 834:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 835:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 836:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 837:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 838:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 839:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 840:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 841:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 842:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 843:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 844:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					       std::__miter_base(__last),
 845:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 					       __result);
 846:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 847:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 848:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 849:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #else
 850:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 851:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 852:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 853:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 854:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 855:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 856:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 857:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 858:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 859:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 860:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 861:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __value;
 862:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 863:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 864:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 865:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  /tmp/ccPK5rSs.s 			page 43


 866:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 867:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 868:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 869:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 870:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 871:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __value;
 872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 873:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
 874:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 875:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 876:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // Specialization: for char types we can use memset.
 877:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 878:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 879:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 880:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 881:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 882:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 883:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __c;
 884:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cpp_lib_is_constant_evaluated
 885:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 886:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	{
 887:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__first)
 888:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	    *__first = __tmp;
 889:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	  return;
 890:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	}
 891:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 892:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (const size_t __len = __last - __first)
 893:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 894:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 895:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 896:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Cont, typename _Tp>
 897:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 898:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 899:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 900:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
 901:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 902:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first.base(), __last.base(), __value); }
 903:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 904:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _VTp>
 905:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     void
 906:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 907:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 908:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _VTp&);
 909:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 910:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _FIte, typename _Tp>
 911:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 912:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 913:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 914:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 915:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 916:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
 917:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     void
 918:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 919:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 920:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	     const _Tp&);
 921:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 922:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
ARM GAS  /tmp/ccPK5rSs.s 			page 44


 923:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 924:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 925:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A forward iterator.
 926:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A forward iterator.
 927:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 928:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 929:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
 930:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 931:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 932:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
 933:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
 934:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 935:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 936:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline void
 937:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 938:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
 939:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 940:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 941:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator>)
 942:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 943:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 944:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__fill_a(__first, __last, __value);
 945:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 946:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 947:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
 948:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR int
 949:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(int __n) { return __n; }
 950:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned
 951:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __n) { return __n; }
 952:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 953:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long __n) { return __n; }
 954:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long
 955:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned long __n) { return __n; }
 956:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 957:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long long __n) { return __n; }
 958:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long long
 959:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned long long __n) { return __n; }
 960:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 961:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_0)
 962:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
 963:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 964:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0
 965:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 966:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 967:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_1)
 968:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1
 969:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 970:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1
 971:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 972:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 973:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_2)
 974:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2
 975:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 976:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2
 977:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 978:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 979:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_3)
ARM GAS  /tmp/ccPK5rSs.s 			page 45


 980:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3
 981:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 982:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3
 983:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 984:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 985:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 986:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 987:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(float __n) { return (long long)__n; }
 988:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 989:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(double __n) { return (long long)__n; }
 990:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 991:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long double __n) { return (long long)__n; }
 992:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)
 993:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 994:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__float128 __n) { return (long long)__n; }
 995:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
 996:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
 997:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
 998:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 999:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline typename
1000:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
1001:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1002:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
1003:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1004:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __value;
1005:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first;
1006:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
1007:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
1008:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1009:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1010:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline typename
1011:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
1012:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1013:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
1014:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __value;
1015:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1016:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
1017:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first;
1018:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
1019:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
1020:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
1021:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp>
1022:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
1023:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
1024:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	       _Size __n, const _Tp& __value,
1025:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	       std::input_iterator_tag);
1026:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
1027:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1028:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1029:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1030:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1031:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	       std::output_iterator_tag)
1032:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
1033:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1034:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1035:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
1036:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
ARM GAS  /tmp/ccPK5rSs.s 			page 46


1037:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
1038:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
1039:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1040:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1041:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1042:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1043:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	       std::input_iterator_tag)
1044:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
1045:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1046:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1047:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
1048:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1049:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
1050:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
1051:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1052:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1053:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1054:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1055:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
1056:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     {
1057:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1058:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1059:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** #endif
1060:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       if (__n <= 0)
1061:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
1062:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
1063:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment(__first, __n);
1064:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
1065:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       std::__fill_a(__first, __first + __n, __value);
1066:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first + __n;
1067:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
1068:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 
1069:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   /**
1070:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Fills the range [first,first+n) with copies of value.
1071:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
1072:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An output iterator.
1073:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __n      The count of copies to perform.
1074:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
1075:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The iterator at first+n.
1076:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
1077:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
1078:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
1079:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
1080:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *
1081:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****    *  If @p __n is negative, the function does nothing.
1082:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   */
1083:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1084:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // DR 865. More algorithms that throw away information
1085:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   // DR 426. search_n(), fill_n(), and generate_n() with negative n
1086:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OI, typename _Size, typename _Tp>
1087:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1088:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
1089:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     fill_n(_OI __first, _Size __n, const _Tp& __value)
 791              		.loc 4 1089 5 view .LVU147
 792              		.loc 4 1089 5 is_stmt 0 view .LVU148
 793              	.LBE172:
 794              	.LBE171:
ARM GAS  /tmp/ccPK5rSs.s 			page 47


 951:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 795              		.loc 4 951 37 is_stmt 1 view .LVU149
 796              	.LBB180:
 797              	.LBB179:
 798              	.LBB173:
 799              	.LBB174:
 800              	.LBI174:
1054:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
 801              		.loc 4 1054 5 view .LVU150
 802              	.LBB175:
1065:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****       return __first + __n;
 803              		.loc 4 1065 20 is_stmt 0 view .LVU151
 804 0064 01F10802 		add	r2, r1, #8
 805              	.LVL72:
 806              	.LBB176:
 807              	.LBI176:
 913:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 808              		.loc 4 913 5 is_stmt 1 view .LVU152
 809              	.LBB177:
 810              	.LBI177:
 868:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 811              		.loc 4 868 5 view .LVU153
 812              	.L46:
 813              	.LBB178:
 872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
 814              		.loc 4 872 22 view .LVU154
 815 0068 8A42     		cmp	r2, r1
 816 006a F8D0     		beq	.L44
 873:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h ****     }
 817              		.loc 4 873 11 is_stmt 0 view .LVU155
 818 006c 0023     		movs	r3, #0
 819 006e 41F8043B 		str	r3, [r1], #4	@ float
 820              	.LVL73:
 872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
 821              		.loc 4 872 7 is_stmt 1 view .LVU156
 872:/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
 822              		.loc 4 872 7 is_stmt 0 view .LVU157
 823 0072 F9E7     		b	.L46
 824              	.L51:
 825              		.align	2
 826              	.L50:
 827 0074 00000000 		.word	0
 828 0078 0BD7A33A 		.word	983815947
 829              	.LBE178:
 830              	.LBE177:
 831              	.LBE176:
 832              	.LBE175:
 833              	.LBE174:
 834              	.LBE173:
 835              	.LBE179:
 836              	.LBE180:
 837              		.cfi_endproc
 838              	.LFE5168:
 839              		.fnend
 841              		.section	.text._ZN24ThermistorCurrentLimiter9do_checksEv,"ax",%progbits
 842              		.align	1
 843              		.global	_ZN24ThermistorCurrentLimiter9do_checksEv
ARM GAS  /tmp/ccPK5rSs.s 			page 48


 844              		.syntax unified
 845              		.thumb
 846              		.thumb_func
 848              	_ZN24ThermistorCurrentLimiter9do_checksEv:
 849              		.fnstart
 850              	.LVL74:
 851              	.LFB5169:
  38:MotorControl/thermistor.cpp ****     if (enabled_ && temperature_ >= temp_limit_upper_ + 5) {
 852              		.loc 2 38 44 is_stmt 1 view -0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856              		@ link register save eliminated.
  38:MotorControl/thermistor.cpp ****     if (enabled_ && temperature_ >= temp_limit_upper_ + 5) {
 857              		.loc 2 38 44 is_stmt 0 view .LVU159
 858 0000 0346     		mov	r3, r0
  39:MotorControl/thermistor.cpp ****         return false;
 859              		.loc 2 39 5 is_stmt 1 view .LVU160
  39:MotorControl/thermistor.cpp ****         return false;
 860              		.loc 2 39 9 is_stmt 0 view .LVU161
 861 0002 C269     		ldr	r2, [r0, #28]
 862 0004 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 863              	.LVL75:
  39:MotorControl/thermistor.cpp ****         return false;
 864              		.loc 2 39 5 view .LVU162
 865 0006 70B1     		cbz	r0, .L54
  39:MotorControl/thermistor.cpp ****         return false;
 866              		.loc 2 39 21 discriminator 1 view .LVU163
 867 0008 93ED047A 		vldr.32	s14, [r3, #16]
  39:MotorControl/thermistor.cpp ****         return false;
 868              		.loc 2 39 37 discriminator 1 view .LVU164
 869 000c 9B69     		ldr	r3, [r3, #24]
 870              	.LVL76:
  39:MotorControl/thermistor.cpp ****         return false;
 871              		.loc 2 39 37 discriminator 1 view .LVU165
 872 000e D3ED007A 		vldr.32	s15, [r3]
  39:MotorControl/thermistor.cpp ****         return false;
 873              		.loc 2 39 55 discriminator 1 view .LVU166
 874 0012 F1EE046A 		vmov.f32	s13, #5.0e+0
 875 0016 77EEA67A 		vadd.f32	s15, s15, s13
  39:MotorControl/thermistor.cpp ****         return false;
 876              		.loc 2 39 18 discriminator 1 view .LVU167
 877 001a B4EEE77A 		vcmpe.f32	s14, s15
 878 001e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 879 0022 02DA     		bge	.L56
 880              	.L53:
  43:MotorControl/thermistor.cpp **** 
 881              		.loc 2 43 1 view .LVU168
 882 0024 7047     		bx	lr
 883              	.LVL77:
 884              	.L54:
  42:MotorControl/thermistor.cpp **** }
 885              		.loc 2 42 12 view .LVU169
 886 0026 0120     		movs	r0, #1
 887 0028 7047     		bx	lr
 888              	.LVL78:
 889              	.L56:
ARM GAS  /tmp/ccPK5rSs.s 			page 49


  40:MotorControl/thermistor.cpp ****     }
 890              		.loc 2 40 16 view .LVU170
 891 002a 0020     		movs	r0, #0
 892 002c FAE7     		b	.L53
 893              		.cfi_endproc
 894              	.LFE5169:
 895              		.cantunwind
 896              		.fnend
 898              		.section	.text._ZN31OnboardThermistorCurrentLimiterC2EtPKfj,"ax",%progbits
 899              		.align	1
 900              		.global	_ZN31OnboardThermistorCurrentLimiterC2EtPKfj
 901              		.syntax unified
 902              		.thumb
 903              		.thumb_func
 905              	_ZN31OnboardThermistorCurrentLimiterC2EtPKfj:
 906              		.fnstart
 907              	.LVL79:
 908              	.LFB5180:
  59:MotorControl/thermistor.cpp **** 
  60:MotorControl/thermistor.cpp **** OnboardThermistorCurrentLimiter::OnboardThermistorCurrentLimiter(uint16_t adc_channel, const float*
 909              		.loc 2 60 1 is_stmt 1 view -0
 910              		.cfi_startproc
 911              		@ args = 0, pretend = 0, frame = 0
 912              		@ frame_needed = 0, uses_anonymous_args = 0
 913              		.loc 2 60 1 is_stmt 0 view .LVU172
 914 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 915              	.LCFI9:
 916              		.cfi_def_cfa_offset 20
 917              		.cfi_offset 4, -20
 918              		.cfi_offset 5, -16
 919              		.cfi_offset 6, -12
 920              		.cfi_offset 7, -8
 921              		.cfi_offset 14, -4
 922 0002 85B0     		sub	sp, sp, #20
 923              	.LCFI10:
 924              		.cfi_def_cfa_offset 40
 925 0004 0446     		mov	r4, r0
 926              	.LBB181:
  61:MotorControl/thermistor.cpp ****     ThermistorCurrentLimiter(adc_channel,
  62:MotorControl/thermistor.cpp ****                              coefficients,
  63:MotorControl/thermistor.cpp ****                              num_coeffs,
  64:MotorControl/thermistor.cpp ****                              config_.temp_limit_lower,
 927              		.loc 2 64 38 view .LVU173
 928 0006 00F12C05 		add	r5, r0, #44
  65:MotorControl/thermistor.cpp ****                              config_.temp_limit_upper,
 929              		.loc 2 65 38 view .LVU174
 930 000a 00F13006 		add	r6, r0, #48
  66:MotorControl/thermistor.cpp ****                              config_.enabled)
 931              		.loc 2 66 38 view .LVU175
 932 000e 00F13407 		add	r7, r0, #52
 933              		.loc 2 66 45 view .LVU176
 934 0012 0297     		str	r7, [sp, #8]
 935 0014 0196     		str	r6, [sp, #4]
 936 0016 0095     		str	r5, [sp]
 937 0018 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiterC2EtPKfjRS0_S2_RKb
 938              	.LVL80:
 939              		.loc 2 66 45 view .LVU177
ARM GAS  /tmp/ccPK5rSs.s 			page 50


 940 001c 054B     		ldr	r3, .L59
 941 001e 2360     		str	r3, [r4]
 942              	.LVL81:
 943              	.LBB182:
 944              	.LBI182:
  37:./MotorControl/thermistor.hpp ****         float temp_limit_lower = 100;
 945              		.loc 5 37 12 is_stmt 1 view .LVU178
 946              	.LBB183:
 947 0020 054B     		ldr	r3, .L59+4
 948 0022 E362     		str	r3, [r4, #44]	@ float
 949 0024 054B     		ldr	r3, .L59+8
 950 0026 2363     		str	r3, [r4, #48]	@ float
 951 0028 0123     		movs	r3, #1
 952 002a 84F83430 		strb	r3, [r4, #52]
 953              	.LVL82:
  37:./MotorControl/thermistor.hpp ****         float temp_limit_lower = 100;
 954              		.loc 5 37 12 is_stmt 0 view .LVU179
 955              	.LBE183:
 956              	.LBE182:
 957              	.LBE181:
  67:MotorControl/thermistor.cpp **** {
  68:MotorControl/thermistor.cpp **** }
 958              		.loc 2 68 1 view .LVU180
 959 002e 2046     		mov	r0, r4
 960 0030 05B0     		add	sp, sp, #20
 961              	.LCFI11:
 962              		.cfi_def_cfa_offset 20
 963              		@ sp needed
 964 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
 965              	.LVL83:
 966              	.L60:
 967              		.loc 2 68 1 view .LVU181
 968              		.align	2
 969              	.L59:
 970 0034 08000000 		.word	_ZTV31OnboardThermistorCurrentLimiter+8
 971 0038 0000C842 		.word	1120403456
 972 003c 0000F042 		.word	1123024896
 973              		.cfi_endproc
 974              	.LFE5180:
 975              		.cantunwind
 976              		.fnend
 978              		.global	_ZN31OnboardThermistorCurrentLimiterC1EtPKfj
 979              		.thumb_set _ZN31OnboardThermistorCurrentLimiterC1EtPKfj,_ZN31OnboardThermistorCurrentLimiterC2EtPK
 980              		.section	.text._ZN32OffboardThermistorCurrentLimiter10decode_pinEv,"ax",%progbits
 981              		.align	1
 982              		.global	_ZN32OffboardThermistorCurrentLimiter10decode_pinEv
 983              		.syntax unified
 984              		.thumb
 985              		.thumb_func
 987              	_ZN32OffboardThermistorCurrentLimiter10decode_pinEv:
 988              		.fnstart
 989              	.LVL84:
 990              	.LFB5189:
  69:MotorControl/thermistor.cpp **** 
  70:MotorControl/thermistor.cpp **** OffboardThermistorCurrentLimiter::OffboardThermistorCurrentLimiter() :
  71:MotorControl/thermistor.cpp ****     ThermistorCurrentLimiter(UINT16_MAX,
  72:MotorControl/thermistor.cpp ****                              &config_.thermistor_poly_coeffs[0],
ARM GAS  /tmp/ccPK5rSs.s 			page 51


  73:MotorControl/thermistor.cpp ****                              num_coeffs_,
  74:MotorControl/thermistor.cpp ****                              config_.temp_limit_lower,
  75:MotorControl/thermistor.cpp ****                              config_.temp_limit_upper,
  76:MotorControl/thermistor.cpp ****                              config_.enabled)
  77:MotorControl/thermistor.cpp **** {
  78:MotorControl/thermistor.cpp ****     decode_pin();
  79:MotorControl/thermistor.cpp **** }
  80:MotorControl/thermistor.cpp **** 
  81:MotorControl/thermistor.cpp **** bool OffboardThermistorCurrentLimiter::apply_config() {
  82:MotorControl/thermistor.cpp ****     config_.parent = this;
  83:MotorControl/thermistor.cpp ****     decode_pin();
  84:MotorControl/thermistor.cpp ****     return true;
  85:MotorControl/thermistor.cpp **** }
  86:MotorControl/thermistor.cpp **** 
  87:MotorControl/thermistor.cpp **** void OffboardThermistorCurrentLimiter::decode_pin() {
 991              		.loc 2 87 53 is_stmt 1 view -0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 8
 994              		@ frame_needed = 0, uses_anonymous_args = 0
 995              		.loc 2 87 53 is_stmt 0 view .LVU183
 996 0000 30B5     		push	{r4, r5, lr}
 997              		.save {r4, r5, lr}
 998              	.LCFI12:
 999              		.cfi_def_cfa_offset 12
 1000              		.cfi_offset 4, -12
 1001              		.cfi_offset 5, -8
 1002              		.cfi_offset 14, -4
 1003              		.pad #12
 1004 0002 83B0     		sub	sp, sp, #12
 1005              	.LCFI13:
 1006              		.cfi_def_cfa_offset 24
 1007 0004 0446     		mov	r4, r0
  88:MotorControl/thermistor.cpp ****     adc_channel_ = channel_from_gpio(get_gpio(config_.gpio_pin));
 1008              		.loc 2 88 5 is_stmt 1 view .LVU184
 1009              		.loc 2 88 37 is_stmt 0 view .LVU185
 1010 0006 6D46     		mov	r5, sp
 1011 0008 818F     		ldrh	r1, [r0, #60]
 1012 000a 2846     		mov	r0, r5
 1013              	.LVL85:
 1014              		.loc 2 88 37 view .LVU186
 1015 000c FFF7FEFF 		bl	_ZL8get_gpioj
 1016              	.LVL86:
 1017 0010 95E80300 		ldm	r5, {r0, r1}
 1018 0014 FFF7FEFF 		bl	channel_from_gpio
 1019              	.LVL87:
 1020              		.loc 2 88 18 view .LVU187
 1021 0018 A080     		strh	r0, [r4, #4]	@ movhi
  89:MotorControl/thermistor.cpp **** }
 1022              		.loc 2 89 1 view .LVU188
 1023 001a 03B0     		add	sp, sp, #12
 1024              	.LCFI14:
 1025              		.cfi_def_cfa_offset 12
 1026              		@ sp needed
 1027 001c 30BD     		pop	{r4, r5, pc}
 1028              		.loc 2 89 1 view .LVU189
 1029              		.cfi_endproc
 1030              	.LFE5189:
ARM GAS  /tmp/ccPK5rSs.s 			page 52


 1031              		.fnend
 1033              		.section	.text._ZN32OffboardThermistorCurrentLimiterC2Ev,"ax",%progbits
 1034              		.align	1
 1035              		.global	_ZN32OffboardThermistorCurrentLimiterC2Ev
 1036              		.syntax unified
 1037              		.thumb
 1038              		.thumb_func
 1040              	_ZN32OffboardThermistorCurrentLimiterC2Ev:
 1041              		.fnstart
 1042              	.LVL88:
 1043              	.LFB5186:
  70:MotorControl/thermistor.cpp ****     ThermistorCurrentLimiter(UINT16_MAX,
 1044              		.loc 2 70 1 is_stmt 1 view -0
 1045              		.cfi_startproc
 1046              		@ args = 0, pretend = 0, frame = 0
 1047              		@ frame_needed = 0, uses_anonymous_args = 0
  70:MotorControl/thermistor.cpp ****     ThermistorCurrentLimiter(UINT16_MAX,
 1048              		.loc 2 70 1 is_stmt 0 view .LVU191
 1049 0000 10B5     		push	{r4, lr}
 1050              		.save {r4, lr}
 1051              	.LCFI15:
 1052              		.cfi_def_cfa_offset 8
 1053              		.cfi_offset 4, -8
 1054              		.cfi_offset 14, -4
 1055              		.pad #16
 1056 0002 84B0     		sub	sp, sp, #16
 1057              	.LCFI16:
 1058              		.cfi_def_cfa_offset 24
 1059 0004 0446     		mov	r4, r0
 1060              	.LBB184:
  74:MotorControl/thermistor.cpp ****                              config_.temp_limit_upper,
 1061              		.loc 2 74 38 view .LVU192
 1062 0006 00F14003 		add	r3, r0, #64
  75:MotorControl/thermistor.cpp ****                              config_.enabled)
 1063              		.loc 2 75 38 view .LVU193
 1064 000a 00F14402 		add	r2, r0, #68
  76:MotorControl/thermistor.cpp **** {
 1065              		.loc 2 76 38 view .LVU194
 1066 000e 00F14801 		add	r1, r0, #72
  76:MotorControl/thermistor.cpp **** {
 1067              		.loc 2 76 45 view .LVU195
 1068 0012 0291     		str	r1, [sp, #8]
 1069 0014 0192     		str	r2, [sp, #4]
 1070 0016 0093     		str	r3, [sp]
 1071 0018 0423     		movs	r3, #4
 1072 001a 00F12C02 		add	r2, r0, #44
 1073 001e 4FF6FF71 		movw	r1, #65535
 1074 0022 FFF7FEFF 		bl	_ZN24ThermistorCurrentLimiterC2EtPKfjRS0_S2_RKb
 1075              	.LVL89:
  76:MotorControl/thermistor.cpp **** {
 1076              		.loc 2 76 45 view .LVU196
 1077 0026 0C4B     		ldr	r3, .L69
 1078 0028 2360     		str	r3, [r4]
 1079              	.LVL90:
 1080              	.LBB185:
 1081              	.LBI185:
  53:./MotorControl/thermistor.hpp ****         float thermistor_poly_coeffs[num_coeffs_];
ARM GAS  /tmp/ccPK5rSs.s 			page 53


 1082              		.loc 5 53 12 is_stmt 1 view .LVU197
 1083              	.LBB186:
 1084 002a 0423     		movs	r3, #4
 1085 002c A387     		strh	r3, [r4, #60]	@ movhi
 1086 002e 0B4B     		ldr	r3, .L69+4
 1087 0030 2364     		str	r3, [r4, #64]	@ float
 1088 0032 0B4B     		ldr	r3, .L69+8
 1089 0034 6364     		str	r3, [r4, #68]	@ float
 1090 0036 0023     		movs	r3, #0
 1091 0038 84F84830 		strb	r3, [r4, #72]
 1092              	.LVL91:
  53:./MotorControl/thermistor.hpp ****         float thermistor_poly_coeffs[num_coeffs_];
 1093              		.loc 5 53 12 is_stmt 0 view .LVU198
 1094              	.LBE186:
 1095              	.LBE185:
  78:MotorControl/thermistor.cpp **** }
 1096              		.loc 2 78 5 is_stmt 1 view .LVU199
  78:MotorControl/thermistor.cpp **** }
 1097              		.loc 2 78 15 is_stmt 0 view .LVU200
 1098 003c 2046     		mov	r0, r4
 1099              	.LEHB0:
 1100 003e FFF7FEFF 		bl	_ZN32OffboardThermistorCurrentLimiter10decode_pinEv
 1101              	.LVL92:
 1102              	.LEHE0:
 1103 0042 05E0     		b	.L68
 1104              	.L65:
 1105              	.LVL93:
 1106              	.LBB187:
 1107              	.LBI187:
  11:./MotorControl/thermistor.hpp **** 
 1108              		.loc 5 11 13 is_stmt 1 view .LVU201
 1109              	.LBB188:
 1110 0044 074B     		ldr	r3, .L69+12
 1111 0046 2360     		str	r3, [r4]
 1112              	.LVL94:
 1113              	.LBB189:
 1114              	.LBI189:
 1115              		.loc 6 6 13 view .LVU202
 1116              	.LBB190:
 1117 0048 074B     		ldr	r3, .L69+16
 1118 004a 2360     		str	r3, [r4]
 1119              	.LVL95:
 1120              	.LEHB1:
 1121              		.loc 6 6 13 is_stmt 0 view .LVU203
 1122 004c FFF7FEFF 		bl	__cxa_end_cleanup
 1123              	.LVL96:
 1124              	.LEHE1:
 1125              	.L68:
 1126              		.loc 6 6 13 view .LVU204
 1127              	.LBE190:
 1128              	.LBE189:
 1129              	.LBE188:
 1130              	.LBE187:
 1131              	.LBE184:
  79:MotorControl/thermistor.cpp **** 
 1132              		.loc 2 79 1 view .LVU205
 1133 0050 2046     		mov	r0, r4
ARM GAS  /tmp/ccPK5rSs.s 			page 54


 1134 0052 04B0     		add	sp, sp, #16
 1135              	.LCFI17:
 1136              		.cfi_def_cfa_offset 8
 1137              		@ sp needed
 1138 0054 10BD     		pop	{r4, pc}
 1139              	.LVL97:
 1140              	.L70:
  79:MotorControl/thermistor.cpp **** 
 1141              		.loc 2 79 1 view .LVU206
 1142 0056 00BF     		.align	2
 1143              	.L69:
 1144 0058 08000000 		.word	_ZTV32OffboardThermistorCurrentLimiter+8
 1145 005c 0000C842 		.word	1120403456
 1146 0060 0000F042 		.word	1123024896
 1147 0064 08000000 		.word	.LANCHOR0+8
 1148 0068 08000000 		.word	_ZTV14CurrentLimiter+8
 1149              		.cfi_endproc
 1150              	.LFE5186:
 1151              		.global	__gxx_personality_v0
 1152              		.personality	__gxx_personality_v0
 1153              		.handlerdata
 1154              	.LLSDA5186:
 1155 0008 FF       		.byte	0xff
 1156 0009 FF       		.byte	0xff
 1157 000a 01       		.byte	0x1
 1158 000b 08       		.uleb128 .LLSDACSE5186-.LLSDACSB5186
 1159              	.LLSDACSB5186:
 1160 000c 3E       		.uleb128 .LEHB0-.LFB5186
 1161 000d 04       		.uleb128 .LEHE0-.LEHB0
 1162 000e 44       		.uleb128 .L65-.LFB5186
 1163 000f 00       		.uleb128 0
 1164 0010 4C       		.uleb128 .LEHB1-.LFB5186
 1165 0011 04       		.uleb128 .LEHE1-.LEHB1
 1166 0012 00       		.uleb128 0
 1167 0013 00       		.uleb128 0
 1168              	.LLSDACSE5186:
 1169              		.section	.text._ZN32OffboardThermistorCurrentLimiterC2Ev
 1170              		.fnend
 1172              		.global	_ZN32OffboardThermistorCurrentLimiterC1Ev
 1173              		.thumb_set _ZN32OffboardThermistorCurrentLimiterC1Ev,_ZN32OffboardThermistorCurrentLimiterC2Ev
 1174              		.section	.text._ZN32OffboardThermistorCurrentLimiter12apply_configEv,"ax",%progbits
 1175              		.align	1
 1176              		.global	_ZN32OffboardThermistorCurrentLimiter12apply_configEv
 1177              		.syntax unified
 1178              		.thumb
 1179              		.thumb_func
 1181              	_ZN32OffboardThermistorCurrentLimiter12apply_configEv:
 1182              		.fnstart
 1183              	.LVL98:
 1184              	.LFB5188:
  81:MotorControl/thermistor.cpp ****     config_.parent = this;
 1185              		.loc 2 81 55 is_stmt 1 view -0
 1186              		.cfi_startproc
 1187              		@ args = 0, pretend = 0, frame = 0
 1188              		@ frame_needed = 0, uses_anonymous_args = 0
  81:MotorControl/thermistor.cpp ****     config_.parent = this;
 1189              		.loc 2 81 55 is_stmt 0 view .LVU208
ARM GAS  /tmp/ccPK5rSs.s 			page 55


 1190 0000 08B5     		push	{r3, lr}
 1191              		.save {r3, lr}
 1192              	.LCFI18:
 1193              		.cfi_def_cfa_offset 8
 1194              		.cfi_offset 3, -8
 1195              		.cfi_offset 14, -4
  82:MotorControl/thermistor.cpp ****     decode_pin();
 1196              		.loc 2 82 5 is_stmt 1 view .LVU209
  82:MotorControl/thermistor.cpp ****     decode_pin();
 1197              		.loc 2 82 20 is_stmt 0 view .LVU210
 1198 0002 C064     		str	r0, [r0, #76]
  83:MotorControl/thermistor.cpp ****     return true;
 1199              		.loc 2 83 5 is_stmt 1 view .LVU211
  83:MotorControl/thermistor.cpp ****     return true;
 1200              		.loc 2 83 15 is_stmt 0 view .LVU212
 1201 0004 FFF7FEFF 		bl	_ZN32OffboardThermistorCurrentLimiter10decode_pinEv
 1202              	.LVL99:
  84:MotorControl/thermistor.cpp **** }
 1203              		.loc 2 84 5 is_stmt 1 view .LVU213
  85:MotorControl/thermistor.cpp **** 
 1204              		.loc 2 85 1 is_stmt 0 view .LVU214
 1205 0008 0120     		movs	r0, #1
 1206 000a 08BD     		pop	{r3, pc}
 1207              		.cfi_endproc
 1208              	.LFE5188:
 1209              		.fnend
 1211              		.weak	_ZTSN10ODriveIntf28ThermistorCurrentLimiterIntfE
 1212              		.section	.rodata._ZTSN10ODriveIntf28ThermistorCurrentLimiterIntfE,"aG",%progbits,_ZTSN10ODriveIntf
 1213              		.align	2
 1216              	_ZTSN10ODriveIntf28ThermistorCurrentLimiterIntfE:
 1217 0000 4E31304F 		.ascii	"N10ODriveIntf28ThermistorCurrentLimiterIntfE\000"
 1217      44726976 
 1217      65496E74 
 1217      66323854 
 1217      6865726D 
 1218              		.weak	_ZTIN10ODriveIntf28ThermistorCurrentLimiterIntfE
 1219              		.section	.rodata._ZTIN10ODriveIntf28ThermistorCurrentLimiterIntfE,"aG",%progbits,_ZTIN10ODriveIntf
 1220              		.align	2
 1223              	_ZTIN10ODriveIntf28ThermistorCurrentLimiterIntfE:
 1224 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 1225 0004 00000000 		.word	_ZTSN10ODriveIntf28ThermistorCurrentLimiterIntfE
 1226              		.weak	_ZTSN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE
 1227              		.section	.rodata._ZTSN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE,"aG",%progbits,_ZTSN10ODr
 1228              		.align	2
 1231              	_ZTSN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE:
 1232 0000 4E31304F 		.ascii	"N10ODriveIntf35OnboardThermistorCurrentLimiterIntfE"
 1232      44726976 
 1232      65496E74 
 1232      6633354F 
 1232      6E626F61 
 1233 0033 00       		.ascii	"\000"
 1234              		.weak	_ZTIN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE
 1235              		.section	.rodata._ZTIN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE,"aG",%progbits,_ZTIN10ODr
 1236              		.align	2
 1239              	_ZTIN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE:
 1240 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 1241 0004 00000000 		.word	_ZTSN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE
ARM GAS  /tmp/ccPK5rSs.s 			page 56


 1242              		.weak	_ZTSN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE
 1243              		.section	.rodata._ZTSN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE,"aG",%progbits,_ZTSN10OD
 1244              		.align	2
 1247              	_ZTSN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE:
 1248 0000 4E31304F 		.ascii	"N10ODriveIntf36OffboardThermistorCurrentLimiterIntf"
 1248      44726976 
 1248      65496E74 
 1248      6633364F 
 1248      6666626F 
 1249 0033 4500     		.ascii	"E\000"
 1250              		.weak	_ZTIN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE
 1251              		.section	.rodata._ZTIN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE,"aG",%progbits,_ZTIN10OD
 1252              		.align	2
 1255              	_ZTIN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE:
 1256 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 1257 0004 00000000 		.word	_ZTSN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE
 1258              		.weak	_ZTS14CurrentLimiter
 1259              		.section	.rodata._ZTS14CurrentLimiter,"aG",%progbits,_ZTS14CurrentLimiter,comdat
 1260              		.align	2
 1263              	_ZTS14CurrentLimiter:
 1264 0000 31344375 		.ascii	"14CurrentLimiter\000"
 1264      7272656E 
 1264      744C696D 
 1264      69746572 
 1264      00
 1265              		.weak	_ZTI14CurrentLimiter
 1266              		.section	.rodata._ZTI14CurrentLimiter,"aG",%progbits,_ZTI14CurrentLimiter,comdat
 1267              		.align	2
 1270              	_ZTI14CurrentLimiter:
 1271 0000 08000000 		.word	_ZTVN10__cxxabiv117__class_type_infoE+8
 1272 0004 00000000 		.word	_ZTS14CurrentLimiter
 1273              		.global	_ZTS24ThermistorCurrentLimiter
 1274              		.global	_ZTI24ThermistorCurrentLimiter
 1275              		.weak	_ZTS31OnboardThermistorCurrentLimiter
 1276              		.section	.rodata._ZTS31OnboardThermistorCurrentLimiter,"aG",%progbits,_ZTS31OnboardThermistorCurre
 1277              		.align	2
 1280              	_ZTS31OnboardThermistorCurrentLimiter:
 1281 0000 33314F6E 		.ascii	"31OnboardThermistorCurrentLimiter\000"
 1281      626F6172 
 1281      64546865 
 1281      726D6973 
 1281      746F7243 
 1282              		.weak	_ZTI31OnboardThermistorCurrentLimiter
 1283              		.section	.rodata._ZTI31OnboardThermistorCurrentLimiter,"aG",%progbits,_ZTI31OnboardThermistorCurre
 1284              		.align	2
 1287              	_ZTI31OnboardThermistorCurrentLimiter:
 1288 0000 08000000 		.word	_ZTVN10__cxxabiv121__vmi_class_type_infoE+8
 1289 0004 00000000 		.word	_ZTS31OnboardThermistorCurrentLimiter
 1290 0008 00000000 		.word	0
 1291 000c 02000000 		.word	2
 1292 0010 00000000 		.word	_ZTI24ThermistorCurrentLimiter
 1293 0014 02000000 		.word	2
 1294 0018 00000000 		.word	_ZTIN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE
 1295 001c 02000000 		.word	2
 1296              		.weak	_ZTS32OffboardThermistorCurrentLimiter
 1297              		.section	.rodata._ZTS32OffboardThermistorCurrentLimiter,"aG",%progbits,_ZTS32OffboardThermistorCur
 1298              		.align	2
ARM GAS  /tmp/ccPK5rSs.s 			page 57


 1301              	_ZTS32OffboardThermistorCurrentLimiter:
 1302 0000 33324F66 		.ascii	"32OffboardThermistorCurrentLimiter\000"
 1302      66626F61 
 1302      72645468 
 1302      65726D69 
 1302      73746F72 
 1303              		.weak	_ZTI32OffboardThermistorCurrentLimiter
 1304              		.section	.rodata._ZTI32OffboardThermistorCurrentLimiter,"aG",%progbits,_ZTI32OffboardThermistorCur
 1305              		.align	2
 1308              	_ZTI32OffboardThermistorCurrentLimiter:
 1309 0000 08000000 		.word	_ZTVN10__cxxabiv121__vmi_class_type_infoE+8
 1310 0004 00000000 		.word	_ZTS32OffboardThermistorCurrentLimiter
 1311 0008 00000000 		.word	0
 1312 000c 02000000 		.word	2
 1313 0010 00000000 		.word	_ZTI24ThermistorCurrentLimiter
 1314 0014 02000000 		.word	2
 1315 0018 00000000 		.word	_ZTIN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE
 1316 001c 02000000 		.word	2
 1317              		.weak	_ZTV14CurrentLimiter
 1318              		.section	.rodata._ZTV14CurrentLimiter,"aG",%progbits,_ZTV14CurrentLimiter,comdat
 1319              		.align	2
 1322              	_ZTV14CurrentLimiter:
 1323 0000 00000000 		.word	0
 1324 0004 00000000 		.word	_ZTI14CurrentLimiter
 1325 0008 00000000 		.word	0
 1326 000c 00000000 		.word	0
 1327 0010 00000000 		.word	__cxa_pure_virtual
 1328              		.global	_ZTV24ThermistorCurrentLimiter
 1329              		.weak	_ZTV31OnboardThermistorCurrentLimiter
 1330              		.section	.rodata._ZTV31OnboardThermistorCurrentLimiter,"aG",%progbits,_ZTV31OnboardThermistorCurre
 1331              		.align	2
 1334              	_ZTV31OnboardThermistorCurrentLimiter:
 1335 0000 00000000 		.word	0
 1336 0004 00000000 		.word	_ZTI31OnboardThermistorCurrentLimiter
 1337 0008 00000000 		.word	_ZN31OnboardThermistorCurrentLimiterD1Ev
 1338 000c 00000000 		.word	_ZN31OnboardThermistorCurrentLimiterD0Ev
 1339 0010 00000000 		.word	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
 1340              		.weak	_ZTV32OffboardThermistorCurrentLimiter
 1341              		.section	.rodata._ZTV32OffboardThermistorCurrentLimiter,"aG",%progbits,_ZTV32OffboardThermistorCur
 1342              		.align	2
 1345              	_ZTV32OffboardThermistorCurrentLimiter:
 1346 0000 00000000 		.word	0
 1347 0004 00000000 		.word	_ZTI32OffboardThermistorCurrentLimiter
 1348 0008 00000000 		.word	_ZN32OffboardThermistorCurrentLimiterD1Ev
 1349 000c 00000000 		.word	_ZN32OffboardThermistorCurrentLimiterD0Ev
 1350 0010 00000000 		.word	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
 1351              		.section	.rodata._ZTI24ThermistorCurrentLimiter,"a"
 1352              		.align	2
 1355              	_ZTI24ThermistorCurrentLimiter:
 1356 0000 08000000 		.word	_ZTVN10__cxxabiv121__vmi_class_type_infoE+8
 1357 0004 00000000 		.word	_ZTS24ThermistorCurrentLimiter
 1358 0008 00000000 		.word	0
 1359 000c 02000000 		.word	2
 1360 0010 00000000 		.word	_ZTI14CurrentLimiter
 1361 0014 02000000 		.word	2
 1362 0018 00000000 		.word	_ZTIN10ODriveIntf28ThermistorCurrentLimiterIntfE
 1363 001c 02000000 		.word	2
ARM GAS  /tmp/ccPK5rSs.s 			page 58


 1364              		.section	.rodata._ZTS24ThermistorCurrentLimiter,"a"
 1365              		.align	2
 1368              	_ZTS24ThermistorCurrentLimiter:
 1369 0000 32345468 		.ascii	"24ThermistorCurrentLimiter\000"
 1369      65726D69 
 1369      73746F72 
 1369      43757272 
 1369      656E744C 
 1370              		.section	.rodata._ZTV24ThermistorCurrentLimiter,"a"
 1371              		.align	2
 1372              		.set	.LANCHOR0,. + 0
 1375              	_ZTV24ThermistorCurrentLimiter:
 1376 0000 00000000 		.word	0
 1377 0004 00000000 		.word	_ZTI24ThermistorCurrentLimiter
 1378 0008 00000000 		.word	_ZN24ThermistorCurrentLimiterD1Ev
 1379 000c 00000000 		.word	_ZN24ThermistorCurrentLimiterD0Ev
 1380 0010 00000000 		.word	_ZNK24ThermistorCurrentLimiter17get_current_limitEf
 1381              		.text
 1382              	.Letext0:
 1383              		.file 8 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 1384              		.file 9 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 1385              		.file 10 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdint.h"
 1386              		.file 11 "ThirdParty/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 1387              		.file 12 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1388              		.file 13 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 1389              		.file 14 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_types.h"
 1390              		.file 15 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/reent.h"
 1391              		.file 16 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/lock.h"
 1392              		.file 17 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdio.h"
 1393              		.file 18 "ThirdParty/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1394              		.file 19 "ThirdParty/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1395              		.file 20 "ThirdParty/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1396              		.file 21 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdlib"
 1397              		.file 22 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_abs.h"
 1398              		.file 23 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cmath"
 1399              		.file 24 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/type_traits"
 1400              		.file 25 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/arm-none-eabi/thumb/v7e-m+fp/har
 1401              		.file 26 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator_base_types.h"
 1402              		.file 27 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/debug/debug.h"
 1403              		.file 28 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_pair.h"
 1404              		.file 29 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/exception_ptr.h"
 1405              		.file 30 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/stl_iterator.h"
 1406              		.file 31 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/variant"
 1407              		.file 32 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/enable_special_members.h"
 1408              		.file 33 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/optional"
 1409              		.file 34 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/algorithmfwd.h"
 1410              		.file 35 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/functional"
 1411              		.file 36 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstring"
 1412              		.file 37 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/parse_numbers.h"
 1413              		.file 38 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cwchar"
 1414              		.file 39 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/clocale"
 1415              		.file 40 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdint"
 1416              		.file 41 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/string_view"
 1417              		.file 42 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/basic_string.h"
 1418              		.file 43 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/cstdio"
 1419              		.file 44 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/predefined_ops.h"
 1420              		.file 45 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/stdlib.h"
ARM GAS  /tmp/ccPK5rSs.s 			page 59


 1421              		.file 46 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/stdlib.h"
 1422              		.file 47 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/math.h"
 1423              		.file 48 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/math.h"
 1424              		.file 49 "./Drivers/STM32/stm32_gpio.hpp"
 1425              		.file 50 "./autogen/interfaces.hpp"
 1426              		.file 51 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/string.h"
 1427              		.file 52 "fibre-cpp/include/fibre/cpp_utils.hpp"
 1428              		.file 53 "fibre-cpp/include/fibre/callback.hpp"
 1429              		.file 54 "Board/v3/Inc/board.h"
 1430              		.file 55 "./MotorControl/component.hpp"
 1431              		.file 56 "./MotorControl/motor.hpp"
 1432              		.file 57 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/pstl/execution_defs.h"
 1433              		.file 58 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/bits/std_function.h"
 1434              		.file 59 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/wchar.h"
 1435              		.file 60 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/locale.h"
 1436              		.file 61 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/c++/10.3.1/new"
 1437              		.file 62 "MotorControl/low_level.h"
 1438              		.file 63 "<built-in>"
ARM GAS  /tmp/ccPK5rSs.s 			page 60


DEFINED SYMBOLS
                            *ABS*:0000000000000000 thermistor.cpp
     /tmp/ccPK5rSs.s:20     .text._ZL8get_gpioj:0000000000000000 $t
     /tmp/ccPK5rSs.s:25     .text._ZL8get_gpioj:0000000000000000 _ZL8get_gpioj
     /tmp/ccPK5rSs.s:64     .text._ZL8get_gpioj:000000000000001c $d
    .ARM.exidx.text._ZL8get_gpioj:0000000000000000 $d
     /tmp/ccPK5rSs.s:71     .text._ZNK24ThermistorCurrentLimiter17get_current_limitEf:0000000000000000 $t
     /tmp/ccPK5rSs.s:77     .text._ZNK24ThermistorCurrentLimiter17get_current_limitEf:0000000000000000 _ZNK24ThermistorCurrentLimiter17get_current_limitEf
.ARM.exidx.text._ZNK24ThermistorCurrentLimiter17get_current_limitEf:0000000000000000 $d
     /tmp/ccPK5rSs.s:197    .text._ZN24ThermistorCurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccPK5rSs.s:203    .text._ZN24ThermistorCurrentLimiterD2Ev:0000000000000000 _ZN24ThermistorCurrentLimiterD2Ev
     /tmp/ccPK5rSs.s:235    .text._ZN24ThermistorCurrentLimiterD2Ev:000000000000000c $d
     /tmp/ccPK5rSs.s:1322   .rodata._ZTV14CurrentLimiter:0000000000000000 _ZTV14CurrentLimiter
.ARM.exidx.text._ZN24ThermistorCurrentLimiterD2Ev:0000000000000000 $d
     /tmp/ccPK5rSs.s:203    .text._ZN24ThermistorCurrentLimiterD2Ev:0000000000000000 _ZN24ThermistorCurrentLimiterD1Ev
     /tmp/ccPK5rSs.s:245    .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccPK5rSs.s:251    .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD2Ev
     /tmp/ccPK5rSs.s:290    .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000010 $d
     /tmp/ccPK5rSs.s:1345   .rodata._ZTV32OffboardThermistorCurrentLimiter:0000000000000000 _ZTV32OffboardThermistorCurrentLimiter
.ARM.exidx.text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 $d
     /tmp/ccPK5rSs.s:251    .text._ZN32OffboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD1Ev
     /tmp/ccPK5rSs.s:301    .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 $t
     /tmp/ccPK5rSs.s:307    .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD2Ev
     /tmp/ccPK5rSs.s:346    .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000010 $d
     /tmp/ccPK5rSs.s:1334   .rodata._ZTV31OnboardThermistorCurrentLimiter:0000000000000000 _ZTV31OnboardThermistorCurrentLimiter
.ARM.exidx.text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 $d
     /tmp/ccPK5rSs.s:307    .text._ZN31OnboardThermistorCurrentLimiterD2Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD1Ev
     /tmp/ccPK5rSs.s:357    .text._ZN24ThermistorCurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccPK5rSs.s:363    .text._ZN24ThermistorCurrentLimiterD0Ev:0000000000000000 _ZN24ThermistorCurrentLimiterD0Ev
     /tmp/ccPK5rSs.s:410    .text._ZN24ThermistorCurrentLimiterD0Ev:0000000000000018 $d
.ARM.exidx.text._ZN24ThermistorCurrentLimiterD0Ev:0000000000000000 $d
     /tmp/ccPK5rSs.s:418    .text._ZN31OnboardThermistorCurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccPK5rSs.s:424    .text._ZN31OnboardThermistorCurrentLimiterD0Ev:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD0Ev
     /tmp/ccPK5rSs.s:480    .text._ZN31OnboardThermistorCurrentLimiterD0Ev:000000000000001c $d
.ARM.exidx.text._ZN31OnboardThermistorCurrentLimiterD0Ev:0000000000000000 $d
     /tmp/ccPK5rSs.s:489    .text._ZN32OffboardThermistorCurrentLimiterD0Ev:0000000000000000 $t
     /tmp/ccPK5rSs.s:495    .text._ZN32OffboardThermistorCurrentLimiterD0Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD0Ev
     /tmp/ccPK5rSs.s:551    .text._ZN32OffboardThermistorCurrentLimiterD0Ev:000000000000001c $d
.ARM.exidx.text._ZN32OffboardThermistorCurrentLimiterD0Ev:0000000000000000 $d
     /tmp/ccPK5rSs.s:560    .text._ZN24ThermistorCurrentLimiterC2EtPKfjRS0_S2_RKb:0000000000000000 $t
     /tmp/ccPK5rSs.s:566    .text._ZN24ThermistorCurrentLimiterC2EtPKfjRS0_S2_RKb:0000000000000000 _ZN24ThermistorCurrentLimiterC2EtPKfjRS0_S2_RKb
     /tmp/ccPK5rSs.s:624    .text._ZN24ThermistorCurrentLimiterC2EtPKfjRS0_S2_RKb:0000000000000030 $d
.ARM.exidx.text._ZN24ThermistorCurrentLimiterC2EtPKfjRS0_S2_RKb:0000000000000000 $d
     /tmp/ccPK5rSs.s:566    .text._ZN24ThermistorCurrentLimiterC2EtPKfjRS0_S2_RKb:0000000000000000 _ZN24ThermistorCurrentLimiterC1EtPKfjRS0_S2_RKb
     /tmp/ccPK5rSs.s:635    .text._ZN24ThermistorCurrentLimiter6updateEv:0000000000000000 $t
     /tmp/ccPK5rSs.s:641    .text._ZN24ThermistorCurrentLimiter6updateEv:0000000000000000 _ZN24ThermistorCurrentLimiter6updateEv
     /tmp/ccPK5rSs.s:827    .text._ZN24ThermistorCurrentLimiter6updateEv:0000000000000074 $d
.ARM.exidx.text._ZN24ThermistorCurrentLimiter6updateEv:0000000000000000 $d
     /tmp/ccPK5rSs.s:842    .text._ZN24ThermistorCurrentLimiter9do_checksEv:0000000000000000 $t
     /tmp/ccPK5rSs.s:848    .text._ZN24ThermistorCurrentLimiter9do_checksEv:0000000000000000 _ZN24ThermistorCurrentLimiter9do_checksEv
.ARM.exidx.text._ZN24ThermistorCurrentLimiter9do_checksEv:0000000000000000 $d
     /tmp/ccPK5rSs.s:899    .text._ZN31OnboardThermistorCurrentLimiterC2EtPKfj:0000000000000000 $t
     /tmp/ccPK5rSs.s:905    .text._ZN31OnboardThermistorCurrentLimiterC2EtPKfj:0000000000000000 _ZN31OnboardThermistorCurrentLimiterC2EtPKfj
     /tmp/ccPK5rSs.s:970    .text._ZN31OnboardThermistorCurrentLimiterC2EtPKfj:0000000000000034 $d
.ARM.exidx.text._ZN31OnboardThermistorCurrentLimiterC2EtPKfj:0000000000000000 $d
     /tmp/ccPK5rSs.s:905    .text._ZN31OnboardThermistorCurrentLimiterC2EtPKfj:0000000000000000 _ZN31OnboardThermistorCurrentLimiterC1EtPKfj
     /tmp/ccPK5rSs.s:981    .text._ZN32OffboardThermistorCurrentLimiter10decode_pinEv:0000000000000000 $t
ARM GAS  /tmp/ccPK5rSs.s 			page 61


     /tmp/ccPK5rSs.s:987    .text._ZN32OffboardThermistorCurrentLimiter10decode_pinEv:0000000000000000 _ZN32OffboardThermistorCurrentLimiter10decode_pinEv
.ARM.exidx.text._ZN32OffboardThermistorCurrentLimiter10decode_pinEv:0000000000000000 $d
     /tmp/ccPK5rSs.s:1034   .text._ZN32OffboardThermistorCurrentLimiterC2Ev:0000000000000000 $t
     /tmp/ccPK5rSs.s:1040   .text._ZN32OffboardThermistorCurrentLimiterC2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterC2Ev
     /tmp/ccPK5rSs.s:1144   .text._ZN32OffboardThermistorCurrentLimiterC2Ev:0000000000000058 $d
.ARM.extab.text._ZN32OffboardThermistorCurrentLimiterC2Ev:0000000000000000 $d
.ARM.exidx.text._ZN32OffboardThermistorCurrentLimiterC2Ev:0000000000000000 $d
     /tmp/ccPK5rSs.s:1040   .text._ZN32OffboardThermistorCurrentLimiterC2Ev:0000000000000000 _ZN32OffboardThermistorCurrentLimiterC1Ev
     /tmp/ccPK5rSs.s:1175   .text._ZN32OffboardThermistorCurrentLimiter12apply_configEv:0000000000000000 $t
     /tmp/ccPK5rSs.s:1181   .text._ZN32OffboardThermistorCurrentLimiter12apply_configEv:0000000000000000 _ZN32OffboardThermistorCurrentLimiter12apply_configEv
.ARM.extab.text._ZN32OffboardThermistorCurrentLimiter12apply_configEv:0000000000000000 $d
.ARM.exidx.text._ZN32OffboardThermistorCurrentLimiter12apply_configEv:0000000000000000 $d
     /tmp/ccPK5rSs.s:1216   .rodata._ZTSN10ODriveIntf28ThermistorCurrentLimiterIntfE:0000000000000000 _ZTSN10ODriveIntf28ThermistorCurrentLimiterIntfE
     /tmp/ccPK5rSs.s:1213   .rodata._ZTSN10ODriveIntf28ThermistorCurrentLimiterIntfE:0000000000000000 $d
     /tmp/ccPK5rSs.s:1223   .rodata._ZTIN10ODriveIntf28ThermistorCurrentLimiterIntfE:0000000000000000 _ZTIN10ODriveIntf28ThermistorCurrentLimiterIntfE
     /tmp/ccPK5rSs.s:1220   .rodata._ZTIN10ODriveIntf28ThermistorCurrentLimiterIntfE:0000000000000000 $d
     /tmp/ccPK5rSs.s:1231   .rodata._ZTSN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE:0000000000000000 _ZTSN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE
     /tmp/ccPK5rSs.s:1228   .rodata._ZTSN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE:0000000000000000 $d
     /tmp/ccPK5rSs.s:1239   .rodata._ZTIN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE:0000000000000000 _ZTIN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE
     /tmp/ccPK5rSs.s:1236   .rodata._ZTIN10ODriveIntf35OnboardThermistorCurrentLimiterIntfE:0000000000000000 $d
     /tmp/ccPK5rSs.s:1247   .rodata._ZTSN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE:0000000000000000 _ZTSN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE
     /tmp/ccPK5rSs.s:1244   .rodata._ZTSN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE:0000000000000000 $d
     /tmp/ccPK5rSs.s:1255   .rodata._ZTIN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE:0000000000000000 _ZTIN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE
     /tmp/ccPK5rSs.s:1252   .rodata._ZTIN10ODriveIntf36OffboardThermistorCurrentLimiterIntfE:0000000000000000 $d
     /tmp/ccPK5rSs.s:1263   .rodata._ZTS14CurrentLimiter:0000000000000000 _ZTS14CurrentLimiter
     /tmp/ccPK5rSs.s:1260   .rodata._ZTS14CurrentLimiter:0000000000000000 $d
     /tmp/ccPK5rSs.s:1270   .rodata._ZTI14CurrentLimiter:0000000000000000 _ZTI14CurrentLimiter
     /tmp/ccPK5rSs.s:1267   .rodata._ZTI14CurrentLimiter:0000000000000000 $d
     /tmp/ccPK5rSs.s:1368   .rodata._ZTS24ThermistorCurrentLimiter:0000000000000000 _ZTS24ThermistorCurrentLimiter
     /tmp/ccPK5rSs.s:1355   .rodata._ZTI24ThermistorCurrentLimiter:0000000000000000 _ZTI24ThermistorCurrentLimiter
     /tmp/ccPK5rSs.s:1280   .rodata._ZTS31OnboardThermistorCurrentLimiter:0000000000000000 _ZTS31OnboardThermistorCurrentLimiter
     /tmp/ccPK5rSs.s:1277   .rodata._ZTS31OnboardThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccPK5rSs.s:1287   .rodata._ZTI31OnboardThermistorCurrentLimiter:0000000000000000 _ZTI31OnboardThermistorCurrentLimiter
     /tmp/ccPK5rSs.s:1284   .rodata._ZTI31OnboardThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccPK5rSs.s:1301   .rodata._ZTS32OffboardThermistorCurrentLimiter:0000000000000000 _ZTS32OffboardThermistorCurrentLimiter
     /tmp/ccPK5rSs.s:1298   .rodata._ZTS32OffboardThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccPK5rSs.s:1308   .rodata._ZTI32OffboardThermistorCurrentLimiter:0000000000000000 _ZTI32OffboardThermistorCurrentLimiter
     /tmp/ccPK5rSs.s:1305   .rodata._ZTI32OffboardThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccPK5rSs.s:1319   .rodata._ZTV14CurrentLimiter:0000000000000000 $d
     /tmp/ccPK5rSs.s:1375   .rodata._ZTV24ThermistorCurrentLimiter:0000000000000000 _ZTV24ThermistorCurrentLimiter
     /tmp/ccPK5rSs.s:1331   .rodata._ZTV31OnboardThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccPK5rSs.s:1342   .rodata._ZTV32OffboardThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccPK5rSs.s:1352   .rodata._ZTI24ThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccPK5rSs.s:1365   .rodata._ZTS24ThermistorCurrentLimiter:0000000000000000 $d
     /tmp/ccPK5rSs.s:1371   .rodata._ZTV24ThermistorCurrentLimiter:0000000000000000 $d
                           .group:0000000000000000 _ZN24ThermistorCurrentLimiterD5Ev
                           .group:0000000000000000 _ZN32OffboardThermistorCurrentLimiterD5Ev
                           .group:0000000000000000 _ZN31OnboardThermistorCurrentLimiterD5Ev

UNDEFINED SYMBOLS
gpios
_ZdlPvj
get_adc_relative_voltage_ch
__aeabi_unwind_cpp_pr0
channel_from_gpio
__cxa_end_cleanup
__gxx_personality_v0
ARM GAS  /tmp/ccPK5rSs.s 			page 62


__aeabi_unwind_cpp_pr1
_ZTVN10__cxxabiv117__class_type_infoE
_ZTVN10__cxxabiv121__vmi_class_type_infoE
__cxa_pure_virtual
